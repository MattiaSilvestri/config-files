;; Object semanticdb-project-database-file-157fb332b3c4
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-157fb332b3c4"
  :tables
  (list
    (semanticdb-table "semanticdb-table-157fb318facc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
`matplotlib.pyplot` is a state-based interface to matplotlib. It provides
an implicit,  MATLAB-like, way of plotting.  It also opens figures on your
screen, and acts as the figure GUI manager.

pyplot is mainly intended for interactive plots and simple cases of
programmatic plot generation::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1)
    y = np.sin(x)
    plt.plot(x, y)

The explicit (object-oriented) API is recommended for complex plots, though
pyplot is still usually used to create the figure and often the axes in the
figure. See `.pyplot.figure`, `.pyplot.subplots`, and
`.pyplot.subplot_mosaic` to create figures, and
:doc:`Axes API <../axes_api>` for the plotting methods on an axes::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1)
    y = np.sin(x)
    fig, ax = plt.subplots()
    ax.plot(x, y)
\"\"\"" code nil nil [133 1038])
            ("functools" include nil nil [1040 1056])
            ("importlib" include nil nil [1057 1073])
            ("inspect" include nil nil [1074 1088])
            ("logging" include nil nil [1089 1103])
            ("numbers" include nil nil [1104 1130])
            ("re" include nil nil [1131 1140])
            ("sys" include nil nil [1141 1151])
            ("time" include nil nil [1152 1163])
            ("try" code nil nil [1164 1250])
            ("cycler" include nil nil [1251 1276])
            ("matplotlib" include nil nil [1277 1294])
            ("matplotlib.colorbar" include nil nil [1295 1321])
            ("matplotlib.image" include nil nil [1322 1345])
            ("matplotlib" include nil nil [1346 1373])
            ("matplotlib" include nil nil [1374 1411])
            ("matplotlib" include nil nil [1412 1462])
            ("matplotlib" include nil nil [1463 1491])
            ("matplotlib" include nil nil [1492 1524])
            ("matplotlib.backend_bases" include nil nil [1525 1591])
            ("matplotlib.figure" include nil nil [1592 1639])
            ("matplotlib.gridspec" include nil nil [1640 1693])
            ("matplotlib" include nil nil [1694 1769])
            ("matplotlib.rcsetup" include nil nil [1770 1834])
            ("matplotlib.artist" include nil nil [1835 1871])
            ("matplotlib.axes" include nil nil [1872 1913])
            ("matplotlib.projections" include nil nil [1914 1958])
            ("matplotlib" include nil nil [1959 1986])
            ("matplotlib.scale" include nil nil [2023 2067])
            ("matplotlib" include nil nil [2069 2094])
            ("matplotlib.cm" include nil nil [2095 2169])
            ("numpy" include nil nil [2171 2189])
            ("matplotlib.colors" include nil nil [2237 2276])
            ("matplotlib.lines" include nil nil [2277 2312])
            ("matplotlib.text" include nil nil [2313 2357])
            ("matplotlib.patches" include nil nil [2358 2422])
            ("matplotlib.widgets" include nil nil [2423 2476])
            ("" code nil nil [2498 2799])
            ("_log" variable nil nil [2801 2835])
            ("_copy_docstring_and_deprecators" function (:arguments 
              ( ("method" variable nil (reparse-symbol function_parameters) [2874 2880])
                ("func" variable nil (reparse-symbol function_parameters) [2882 2886]))              ) nil [2838 3519])
            ("_IP_REGISTERED" variable nil nil [3535 3556])
            ("_INSTALL_FIG_OBSERVER" variable nil nil [3557 3586])
            ("install_repl_displayhook" function (:documentation "
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works both with IPython and with vanilla python shells.
    ") nil [3589 4900])
            ("uninstall_repl_displayhook" function (:documentation "
    Uninstall the Matplotlib display hook.

    .. warning::

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning::

       If you are using vanilla python and have installed another
       display hook, this will reset ``sys.displayhook`` to what ever
       function was there when Matplotlib installed its displayhook,
       possibly discarding your changes.
    ") nil [4902 5881])
            ("draw_all" variable nil nil [5883 5921])
            ("" code nil nil [5956 5981])
            ("set_loglevel" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [5999 6004])
                ("kwargs" variable nil (reparse-symbol function_parameters) [6006 6014]))              ) nil [5982 6112])
            ("" code nil nil [6146 6162])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [6175 6176])
                ("match" variable nil (reparse-symbol function_parameters) [6183 6188])
                ("include_self" variable nil (reparse-symbol function_parameters) [6195 6207]))              ) nil [6163 6306])
            ("_get_required_interactive_framework" function (:arguments 
              ( ("backend_mod" variable nil (reparse-symbol function_parameters) [6348 6359]))              ) nil [6308 6456])
            ("_backend_mod" variable nil nil [6457 6476])
            ("_get_backend_mod" function (:documentation "
    Ensure that a backend is selected and return it.

    This is currently private, but may be made public in the future.
    ") nil [6479 7322])
            ("switch_backend" function
               (:documentation "
    Close all open figures and set the Matplotlib backend.

    The argument is case-insensitive.  Switching to an interactive backend is
    possible only if no event loop for another interactive backend has started.
    Switching to and from non-interactive backends is always possible.

    Parameters
    ----------
    newbackend : str
        The name of the backend to use.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [7343 7353]))                  )
                nil [7324 10785])
            ("_warn_if_gui_out_of_main_thread" function nil nil [10787 11095])
            ("new_figure_manager" function
               (:documentation "Create a new figure manager instance."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [11198 11203])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11205 11213]))                  )
                nil [11175 11368])
            ("draw_if_interactive" function
               (:documentation "
    Redraw the current figure if in interactive mode.

    .. warning::

        End users will typically not have to call this function because the
        the interactive mode takes care of this.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [11472 11477])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11479 11487]))                  )
                nil [11448 11771])
            ("show" function
               (:documentation "
    Display all open figures.

    Parameters
    ----------
    block : bool, optional
        Whether to wait for all figures to be closed before returning.

        If `True` block and run the GUI main loop until all figure windows
        are closed.

        If `False` ensure that all figure windows are displayed and return
        immediately.  In this case, you are responsible for ensuring
        that the event loop is running to have responsive figures.

        Defaults to True in non-interactive mode and to False in interactive
        mode (see `.pyplot.isinteractive`).

    See Also
    --------
    ion : Enable interactive mode, which shows / updates the figure after
          every plotting command, so that calling ``show()`` is not necessary.
    ioff : Disable interactive mode.
    savefig : Save the figure to an image file instead of showing it on screen.

    Notes
    -----
    **Saving figures to file and showing a window at the same time**

    If you want an image file as well as a user interface window, use
    `.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)
    ``show()`` the figure is closed and thus unregistered from pyplot. Calling
    `.pyplot.savefig` afterwards would save a new and thus empty figure. This
    limitation of command order does not apply if the show is non-blocking or
    if you keep a reference to the figure and use `.Figure.savefig`.

    **Auto-show in jupyter notebooks**

    The jupyter backends (activated via ``%matplotlib inline``,
    ``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at
    the end of every cell by default. Thus, you usually don't have to call it
    explicitly there.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [11860 11865])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11867 11875]))                  )
                nil [11851 13689])
            ("isinteractive" function (:documentation "
    Return whether plots are updated after every plotting command.

    The interactive mode is mainly useful if you build plots from the command
    line and want to see the effect of each command while you are building the
    figure.

    In interactive mode:

    - newly created figures will be shown immediately;
    - figures will automatically redraw on change;
    - `.pyplot.show` will not block by default.

    In non-interactive mode:

    - newly created figures and changes to figures will not be reflected until
      explicitly asked to be;
    - `.pyplot.show` will block by default.

    See Also
    --------
    ion : Enable interactive mode.
    ioff : Disable interactive mode.
    show : Show all figures (and maybe block).
    pause : Show all figures, and block for a time.
    ") nil [13691 14567])
            ("_IoffContext" type
               (:documentation "
    Context manager for `.ioff`.

    The state is changed in ``__init__()`` instead of ``__enter__()``. The
    latter is a no-op. This allows using `.ioff` both as a function and
    as a context.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14837 14874])
                            ("matplotlib" code nil (reparse-symbol indented_block_body) [14883 14912])
                            ("uninstall_repl_displayhook" code nil (reparse-symbol indented_block_body) [14921 14949]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14822 14826]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14809 14950])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14969 14973]))                          )
                        (reparse-symbol indented_block_body) [14955 14989])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15007 15011])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [15013 15021])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [15023 15032])
                            ("traceback" variable nil (reparse-symbol function_parameters) [15034 15043]))                          )
                        (reparse-symbol indented_block_body) [14994 15255]))                  
                :type "class")
                nil [14569 15255])
            ("_IonContext" type
               (:documentation "
    Context manager for `.ion`.

    The state is changed in ``__init__()`` instead of ``__enter__()``. The
    latter is a no-op. This allows using `.ion` both as a function and
    as a context.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15522 15559])
                            ("matplotlib" code nil (reparse-symbol indented_block_body) [15568 15596])
                            ("install_repl_displayhook" code nil (reparse-symbol indented_block_body) [15605 15631]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15507 15511]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15494 15632])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15651 15655]))                          )
                        (reparse-symbol indented_block_body) [15637 15671])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15689 15693])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [15695 15703])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [15705 15714])
                            ("traceback" variable nil (reparse-symbol function_parameters) [15716 15725]))                          )
                        (reparse-symbol indented_block_body) [15676 15941]))                  
                :type "class")
                nil [15257 15941])
            ("ioff" function (:documentation "
    Disable interactive mode.

    See `.pyplot.isinteractive` for more details.

    See Also
    --------
    ion : Enable interactive mode.
    isinteractive : Whether interactive mode is enabled.
    show : Show all figures (and maybe block).
    pause : Show all figures, and block for a time.

    Notes
    -----
    For a temporary change, this can be used as a context manager::

        # if interactive mode is on
        # then figures will be shown on creation
        plt.ion()
        # This figure will be shown immediately
        fig = plt.figure()

        with plt.ioff():
            # interactive mode will be off
            # figures will not automatically be shown
            fig2 = plt.figure()
            # ...

    To enable usage as a context manager, this function returns an
    ``_IoffContext`` object. The return value is not intended to be stored
    or accessed by the user.
    ") nil [15943 16909])
            ("ion" function (:documentation "
    Enable interactive mode.

    See `.pyplot.isinteractive` for more details.

    See Also
    --------
    ioff : Disable interactive mode.
    isinteractive : Whether interactive mode is enabled.
    show : Show all figures (and maybe block).
    pause : Show all figures, and block for a time.

    Notes
    -----
    For a temporary change, this can be used as a context manager::

        # if interactive mode is off
        # then figures will not be shown on creation
        plt.ioff()
        # This figure will not be shown immediately
        fig = plt.figure()

        with plt.ion():
            # interactive mode will be on
            # figures will automatically be shown
            fig2 = plt.figure()
            # ...

    To enable usage as a context manager, this function returns an
    ``_IonContext`` object. The return value is not intended to be stored
    or accessed by the user.
    ") nil [16911 17879])
            ("pause" function
               (:documentation "
    Run the GUI event loop for *interval* seconds.

    If there is an active figure, it will be updated and displayed before the
    pause, and the GUI event loop (if any) will run during the pause.

    This can be used for crude animation.  For more complex animation use
    :mod:`matplotlib.animation`.

    If there is no active figure, sleep for *interval* seconds instead.

    See Also
    --------
    matplotlib.animation : Proper animations
    show : Show all figures and optional block until all figures are closed.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [17891 17899]))                  )
                nil [17881 18724])
            ("" code nil nil [18758 18773])
            ("rc" function (:arguments 
              ( ("group" variable nil (reparse-symbol function_parameters) [18781 18786])
                ("kwargs" variable nil (reparse-symbol function_parameters) [18788 18796]))              ) nil [18774 18834])
            ("" code nil nil [18868 18891])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [18907 18909])
                ("fname" variable nil (reparse-symbol function_parameters) [18916 18921]))              ) nil [18892 18973])
            ("" code nil nil [19007 19030])
            ("rcdefaults" function nil nil [19031 19132])
            ("" code nil nil [19247 19271])
            ("getp" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [19281 19284])
                ("args" variable nil (reparse-symbol function_parameters) [19286 19291])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19293 19301]))              ) nil [19272 19360])
            ("" code nil nil [19394 19417])
            ("get" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [19426 19429])
                ("args" variable nil (reparse-symbol function_parameters) [19431 19436])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19438 19446]))              ) nil [19418 19504])
            ("" code nil nil [19538 19562])
            ("setp" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [19572 19575])
                ("args" variable nil (reparse-symbol function_parameters) [19577 19582])
                ("kwargs" variable nil (reparse-symbol function_parameters) [19584 19592]))              ) nil [19563 19651])
            ("xkcd" function
               (:documentation "
    Turn on `xkcd <https://xkcd.com/>`_ sketch-style drawing mode.  This will
    only have effect on things drawn after this function is called.

    For best results, the \"Humor Sans\" font should be installed: it is
    not included with Matplotlib.

    Parameters
    ----------
    scale : float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length : float, optional
        The length of the wiggle along the line.
    randomness : float, optional
        The scale factor by which the length is shrunken or expanded.

    Notes
    -----
    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd():
            # This figure will be in XKCD-style
            fig1 = plt.figure()
            # ...

        # This figure will be in regular style
        fig2 = plt.figure()
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [19662 19667])
                    ("length" variable nil (reparse-symbol function_parameters) [19671 19677])
                    ("randomness" variable nil (reparse-symbol function_parameters) [19683 19693]))                  )
                nil [19653 20769])
            ("_xkcd" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20964 20992])
                            ("if" code nil (reparse-symbol indented_block_body) [21002 21133])
                            ("matplotlib" include nil (reparse-symbol indented_block_body) [21142 21176])
                            ("rcParams" code nil (reparse-symbol indented_block_body) [21185 21926]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20922 20926])
                            ("scale" variable nil (reparse-symbol function_parameters) [20928 20933])
                            ("length" variable nil (reparse-symbol function_parameters) [20935 20941])
                            ("randomness" variable nil (reparse-symbol function_parameters) [20943 20953]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20909 21927])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21946 21950]))                          )
                        (reparse-symbol indented_block_body) [21932 21973])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21991 21995])
                            ("args" variable nil (reparse-symbol function_parameters) [21997 22002]))                          )
                        (reparse-symbol indented_block_body) [21978 22047]))                  
                :type "class")
                nil [20771 22047])
            ("figure" function
               (:documentation "
    Create a new figure, or activate an existing figure.

    Parameters
    ----------
    num : int or str or `.Figure`, optional
        A unique identifier for the figure.

        If a figure with that identifier already exists, this figure is made
        active and returned. An integer refers to the ``Figure.number``
        attribute, a string refers to the figure label.

        If there is no figure with the identifier or *num* is not given, a new
        figure is created, made active and returned.  If *num* is an int, it
        will be used for the ``Figure.number`` attribute, otherwise, an
        auto-generated integer value is used (starting at 1 and incremented
        for each new figure). If *num* is a string, the figure label and the
        window title is set to this value.

    figsize : (float, float), default: :rc:`figure.figsize`
        Width, height in inches.

    dpi : float, default: :rc:`figure.dpi`
        The resolution of the figure in dots-per-inch.

    facecolor : color, default: :rc:`figure.facecolor`
        The background color.

    edgecolor : color, default: :rc:`figure.edgecolor`
        The border color.

    frameon : bool, default: True
        If False, suppress drawing the figure frame.

    FigureClass : subclass of `~matplotlib.figure.Figure`
        Optionally use a custom `.Figure` instance.

    clear : bool, default: False
        If True and the figure already exists, then it is cleared.

    tight_layout : bool or dict, default: :rc:`figure.autolayout`
        If ``False`` use *subplotpars*. If ``True`` adjust subplot
        parameters using `.tight_layout` with default padding.
        When providing a dict containing the keys ``pad``, ``w_pad``,
        ``h_pad``, and ``rect``, the default `.tight_layout` paddings
        will be overridden.

    constrained_layout : bool, default: :rc:`figure.constrained_layout.use`
        If ``True`` use constrained layout to adjust positioning of plot
        elements.  Like ``tight_layout``, but designed to be more
        flexible.  See
        :doc:`/tutorials/intermediate/constrainedlayout_guide`
        for examples.  (Note: does not work with `add_subplot` or
        `~.pyplot.subplot2grid`.)


    **kwargs : optional
        See `~.matplotlib.figure.Figure` for other possible arguments.

    Returns
    -------
    `~matplotlib.figure.Figure`
        The `.Figure` instance returned will also be passed to
        new_figure_manager in the backends, which allows to hook custom
        `.Figure` classes into the pyplot interface. Additional kwargs will be
        passed to the `.Figure` init function.

    Notes
    -----
    If you are creating many figures, make sure you explicitly call
    `.pyplot.close` on the figures you are not using, because this will
    enable pyplot to properly clean up the memory.

    `~matplotlib.rcParams` defines the default values, which can be modified
    in the matplotlibrc file.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [22075 22078])
                    ("figsize" variable nil (reparse-symbol function_parameters) [22144 22151])
                    ("dpi" variable nil (reparse-symbol function_parameters) [22202 22205])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [22252 22261])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [22314 22323])
                    ("frameon" variable nil (reparse-symbol function_parameters) [22376 22383])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [22401 22412])
                    ("clear" variable nil (reparse-symbol function_parameters) [22432 22437])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [22456 22464]))                  )
                nil [22064 27713])
            ("_auto_draw_if_interactive" function
               (:documentation "
    An internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [27745 27748])
                    ("val" variable nil (reparse-symbol function_parameters) [27750 27753]))                  )
                nil [27715 28494])
            ("gcf" function (:documentation "
    Get the current figure.

    If there is currently no figure on the pyplot figure stack, a new one is
    created using `~.pyplot.figure()`.  (To test whether there is currently a
    figure on the pyplot figure stack, check whether `~.pyplot.get_fignums()`
    is empty.)
    ") nil [28496 28945])
            ("fignum_exists" function
               (:documentation "Return whether the figure with the given id exists."
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [28965 28968]))                  )
                nil [28947 29105])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [29107 29221])
            ("get_figlabels" function (:documentation "Return a list of existing figure labels.") nil [29223 29450])
            ("get_current_fig_manager" function (:documentation "
    Return the figure manager of the current figure.

    The figure manager is a container for the actual backend-depended window
    that displays the figure on screen.

    If no current figure exists, a new one is created, and its figure
    manager is returned.

    Returns
    -------
    `.FigureManagerBase` or backend-dependent subclass thereof
    ") nil [29452 29886])
            ("" code nil nil [29920 29950])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [29963 29964])
                ("func" variable nil (reparse-symbol function_parameters) [29966 29970]))              ) nil [29951 30018])
            ("" code nil nil [30052 30085])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [30101 30104]))              ) nil [30086 30151])
            ("close" function
               (:documentation "
    Close a figure window.

    Parameters
    ----------
    fig : None or int or str or `.Figure`
        The figure to close. There are a number of ways to specify this:

        - *None*: the current figure
        - `.Figure`: the given `.Figure` instance
        - ``int``: a figure number
        - ``str``: a figure name
        - 'all': all figures

    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [30163 30166]))                  )
                nil [30153 31451])
            ("clf" function (:documentation "Clear the current figure.") nil [31453 31518])
            ("draw" function (:documentation "
    Redraw the current figure.

    This is used to update a figure that has been altered, but not
    automatically re-drawn.  If interactive mode is on (via `.ion()`), this
    should be only rarely needed, but there may be ways to modify the state of
    a figure without marking it as \"stale\".  Please report these cases as bugs.

    This is equivalent to calling ``fig.canvas.draw_idle()``, where ``fig`` is
    the current figure.
    ") nil [31520 32015])
            ("" code nil nil [32049 32065])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [32078 32083])
                ("kwargs" variable nil (reparse-symbol function_parameters) [32085 32093]))              ) nil [32066 32245])
            ("figlegend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [32295 32300])
                ("kwargs" variable nil (reparse-symbol function_parameters) [32302 32310]))              ) nil [32281 32354])
            ("if" code nil nil [32354 32459])
            ("axes" function
               (:documentation "
    Add an axes to the current figure and make it the current axes.

    Call signatures::

        plt.axes()
        plt.axes(rect, projection=None, polar=False, **kwargs)
        plt.axes(ax)

    Parameters
    ----------
    arg : None or 4-tuple
        The exact behavior of this function depends on the type:

        - *None*: A new full window axes is added using
          ``subplot(**kwargs)``.
        - 4-tuple of floats *rect* = ``[left, bottom, width, height]``.
          A new axes is added with dimensions *rect* in normalized
          (0, 1) units using `~.Figure.add_axes` on the current figure.

    projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\
'polar', 'rectilinear', str}, optional
        The projection type of the `~.axes.Axes`. *str* is the name of
        a custom projection, see `~matplotlib.projections`. The default
        None results in a 'rectilinear' projection.

    polar : bool, default: False
        If True, equivalent to projection='polar'.

    sharex, sharey : `~.axes.Axes`, optional
        Share the x or y `~matplotlib.axis` with sharex and/or sharey.
        The axis will have the same limits, ticks, and scale as the axis
        of the shared axes.

    label : str
        A label for the returned axes.

    Returns
    -------
    `~.axes.Axes`, or a subclass of `~.axes.Axes`
        The returned axes class depends on the projection used. It is
        `~.axes.Axes` if rectilinear projection is used and
        `.projections.polar.PolarAxes` if polar projection is used.

    Other Parameters
    ----------------
    **kwargs
        This method also takes the keyword arguments for
        the returned axes class. The keyword arguments for the
        rectilinear axes class `~.axes.Axes` can be found in
        the following table but there might also be other keyword
        arguments if another projection is used, see the actual axes
        class.

        %(Axes:kwdoc)s

    Notes
    -----
    If the figure already has a axes with key (*args*,
    *kwargs*) then it will simply make that axes current and
    return it.  This behavior is deprecated. Meanwhile, if you do
    not want this behavior (i.e., you want to force the creation of a
    new axes), you must use a unique set of args and kwargs.  The axes
    *label* attribute has been exposed for this purpose: if you want
    two axes that are otherwise identical to be added to the figure,
    make sure you give them unique labels.

    See Also
    --------
    .Figure.add_axes
    .pyplot.subplot
    .Figure.add_subplot
    .Figure.subplots
    .pyplot.subplots

    Examples
    --------
    ::

        # Creating a new full window axes
        plt.axes()

        # Creating a new axes with specified dimensions and some kwargs
        plt.axes((left, bottom, width, height), facecolor='w')
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [32508 32511])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [32518 32526]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [32473 35660])
            ("delaxes" function
               (:documentation "
    Remove an `~.axes.Axes` (defaulting to the current axes) from its figure.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [35674 35676]))                  )
                nil [35662 35832])
            ("sca" function
               (:documentation "
    Set the current Axes to *ax* and the current Figure to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [35842 35844]))                  )
                nil [35834 35986])
            ("cla" function (:documentation "Clear the current axes.") nil [35988 36127])
            ("subplot" function
               (:documentation "
    Add an Axes to the current figure or retrieve an existing Axes.

    This is a wrapper of `.Figure.add_subplot` which provides additional
    behavior when working with the implicit API (see the notes section).

    Call signatures::

       subplot(nrows, ncols, index, **kwargs)
       subplot(pos, **kwargs)
       subplot(**kwargs)
       subplot(ax)

    Parameters
    ----------
    *args : int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)
        The position of the subplot described by one of

        - Three integers (*nrows*, *ncols*, *index*). The subplot will take the
          *index* position on a grid with *nrows* rows and *ncols* columns.
          *index* starts at 1 in the upper left corner and increases to the
          right. *index* can also be a two-tuple specifying the (*first*,
          *last*) indices (1-based, and including *last*) of the subplot, e.g.,
          ``fig.add_subplot(3, 1, (1, 2))`` makes a subplot that spans the
          upper 2/3 of the figure.
        - A 3-digit integer. The digits are interpreted as if given separately
          as three single-digit integers, i.e. ``fig.add_subplot(235)`` is the
          same as ``fig.add_subplot(2, 3, 5)``. Note that this can only be used
          if there are no more than 9 subplots.
        - A `.SubplotSpec`.

    projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\
'polar', 'rectilinear', str}, optional
        The projection type of the subplot (`~.axes.Axes`). *str* is the name
        of a custom projection, see `~matplotlib.projections`. The default
        None results in a 'rectilinear' projection.

    polar : bool, default: False
        If True, equivalent to projection='polar'.

    sharex, sharey : `~.axes.Axes`, optional
        Share the x or y `~matplotlib.axis` with sharex and/or sharey. The
        axis will have the same limits, ticks, and scale as the axis of the
        shared axes.

    label : str
        A label for the returned axes.

    Returns
    -------
    `.axes.SubplotBase`, or another subclass of `~.axes.Axes`

        The axes of the subplot. The returned axes base class depends on
        the projection used. It is `~.axes.Axes` if rectilinear projection
        is used and `.projections.polar.PolarAxes` if polar projection
        is used. The returned axes is then a subplot subclass of the
        base class.

    Other Parameters
    ----------------
    **kwargs
        This method also takes the keyword arguments for the returned axes
        base class; except for the *figure* argument. The keyword arguments
        for the rectilinear base class `~.axes.Axes` can be found in
        the following table but there might also be other keyword
        arguments if another projection is used.

        %(Axes:kwdoc)s

    Notes
    -----
    Creating a new Axes will delete any pre-existing Axes that
    overlaps with it beyond sharing a boundary::

        import matplotlib.pyplot as plt
        # plot a line, implicitly creating a subplot(111)
        plt.plot([1, 2, 3])
        # now create a subplot which represents the top plot of a grid
        # with 2 rows and 1 column. Since this subplot will overlap the
        # first, the plot (and its axes) previously created, will be removed
        plt.subplot(211)

    If you do not want this behavior, use the `.Figure.add_subplot` method
    or the `.pyplot.axes` function instead.

    If no *kwargs* are passed and there exists an Axes in the location
    specified by *args* then that Axes will be returned rather than a new
    Axes being created.

    If *kwargs* are passed and there exists an Axes in the location
    specified by *args*, the projection type is the same, and the
    *kwargs* match with the existing Axes, then the existing Axes is
    returned.  Otherwise a new Axes is created with the specified
    parameters.  We save a reference to the *kwargs* which we use
    for this comparison.  If any of the values in *kwargs* are
    mutable we will not detect the case where they are mutated.
    In these cases we suggest using `.Figure.add_subplot` and the
    explicit Axes API rather than the implicit pyplot API.

    See Also
    --------
    .Figure.add_subplot
    .pyplot.subplots
    .pyplot.axes
    .Figure.subplots

    Examples
    --------
    ::

        plt.subplot(221)

        # equivalent but more general
        ax1 = plt.subplot(2, 2, 1)

        # add a subplot with no frame
        ax2 = plt.subplot(222, frameon=False)

        # add a polar subplot
        plt.subplot(223, projection='polar')

        # add a red subplot that shares the x-axis with ax1
        plt.subplot(224, sharex=ax1, facecolor='red')

        # delete ax2 from the figure
        plt.delaxes(ax2)

        # add ax2 to the figure again
        plt.subplot(ax2)

        # make the first axes \"current\" again
        plt.subplot(221)

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [36201 36206])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [36208 36216]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [36163 43814])
            ("subplots" function
               (:documentation "
    Create a figure and a set of subplots.

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Parameters
    ----------
    nrows, ncols : int, default: 1
        Number of rows/columns of the subplot grid.

    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
        Controls sharing of properties among x (*sharex*) or y (*sharey*)
        axes:

        - True or 'all': x- or y-axis will be shared among all subplots.
        - False or 'none': each subplot x- or y-axis will be independent.
        - 'row': each subplot row will share an x- or y-axis.
        - 'col': each subplot column will share an x- or y-axis.

        When subplots have a shared x-axis along a column, only the x tick
        labels of the bottom subplot are created. Similarly, when subplots
        have a shared y-axis along a row, only the y tick labels of the first
        column subplot are created. To later turn other subplots' ticklabels
        on, use `~matplotlib.axes.Axes.tick_params`.

        When subplots have a shared axis that has units, calling
        `~matplotlib.axis.Axis.set_units` will update each axis with the
        new units.

    squeeze : bool, default: True
        - If True, extra dimensions are squeezed out from the returned
          array of `~matplotlib.axes.Axes`:

          - if only one subplot is constructed (nrows=ncols=1), the
            resulting single Axes object is returned as a scalar.
          - for Nx1 or 1xM subplots, the returned object is a 1D numpy
            object array of Axes objects.
          - for NxM, subplots with N>1 and M>1 are returned as a 2D array.

        - If False, no squeezing at all is done: the returned Axes object is
          always a 2D array containing Axes instances, even if it ends up
          being 1x1.

    subplot_kw : dict, optional
        Dict with keywords passed to the
        `~matplotlib.figure.Figure.add_subplot` call used to create each
        subplot.

    gridspec_kw : dict, optional
        Dict with keywords passed to the `~matplotlib.gridspec.GridSpec`
        constructor used to create the grid the subplots are placed on.

    **fig_kw
        All additional keyword arguments are passed to the
        `.pyplot.figure` call.

    Returns
    -------
    fig : `~.figure.Figure`

    ax : `.axes.Axes` or array of Axes
        *ax* can be either a single `~matplotlib.axes.Axes` object or an
        array of Axes objects if more than one subplot was created.  The
        dimensions of the resulting array can be controlled with the squeeze
        keyword, see above.

        Typical idioms for handling the return value are::

            # using the variable ax for single a Axes
            fig, ax = plt.subplots()

            # using the variable axs for multiple Axes
            fig, axs = plt.subplots(2, 2)

            # using tuple unpacking for multiple Axes
            fig, (ax1, ax2) = plt.subplots(1, 2)
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)

        The names ``ax`` and pluralized ``axs`` are preferred over ``axes``
        because for the latter it's not clear if it refers to a single
        `~.axes.Axes` instance or a collection of these.

    See Also
    --------
    .pyplot.figure
    .pyplot.subplot
    .pyplot.axes
    .Figure.subplots
    .Figure.add_subplot

    Examples
    --------
    ::

        # First create some toy data:
        x = np.linspace(0, 2*np.pi, 400)
        y = np.sin(x**2)

        # Create just a figure and only one subplot
        fig, ax = plt.subplots()
        ax.plot(x, y)
        ax.set_title('Simple plot')

        # Create two subplots and unpack the output array immediately
        f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
        ax1.plot(x, y)
        ax1.set_title('Sharing Y axis')
        ax2.scatter(x, y)

        # Create four polar axes and access them through the returned array
        fig, axs = plt.subplots(2, 2, subplot_kw=dict(projection=\"polar\"))
        axs[0, 0].plot(x, y)
        axs[1, 1].scatter(x, y)

        # Share a X axis with each column of subplots
        plt.subplots(2, 2, sharex='col')

        # Share a Y axis with each row of subplots
        plt.subplots(2, 2, sharey='row')

        # Share both X and Y axes with all subplots
        plt.subplots(2, 2, sharex='all', sharey='all')

        # Note that this is the same as
        plt.subplots(2, 2, sharex=True, sharey=True)

        # Create figure number 10 with a single subplot
        # and clears it if it already exists.
        fig, ax = plt.subplots(num=10, clear=True)

    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [43829 43834])
                    ("ncols" variable nil (reparse-symbol function_parameters) [43838 43843])
                    ("sharex" variable nil (reparse-symbol function_parameters) [43850 43856])
                    ("sharey" variable nil (reparse-symbol function_parameters) [43864 43870])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [43878 43885])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [43905 43915])
                    ("gridspec_kw" variable nil (reparse-symbol function_parameters) [43922 43933])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [43940 43948]))                  )
                nil [43816 48911])
            ("subplot_mosaic" function
               (:documentation "
    Build a layout of Axes based on ASCII art or nested lists.

    This is a helper function to build complex GridSpec layouts visually.

    .. note ::

       This API is provisional and may be revised in the future based on
       early user feedback.

    Parameters
    ----------
    mosaic : list of list of {hashable or nested} or str

        A visual layout of how you want your Axes to be arranged
        labeled as strings.  For example ::

           x = [['A panel', 'A panel', 'edge'],
                ['C panel', '.',       'edge']]

        produces 4 axes:

        - 'A panel' which is 1 row high and spans the first two columns
        - 'edge' which is 2 rows high and is on the right edge
        - 'C panel' which in 1 row and 1 column wide in the bottom left
        - a blank space 1 row and 1 column wide in the bottom center

        Any of the entries in the layout can be a list of lists
        of the same form to create nested layouts.

        If input is a str, then it must be of the form ::

          '''
          AAE
          C.E
          '''

        where each character is a column and each line is a row.
        This only allows only single character Axes labels and does
        not allow nesting but is very terse.

    sharex, sharey : bool, default: False
        If True, the x-axis (*sharex*) or y-axis (*sharey*) will be shared
        among all subplots.  In that case, tick label visibility and axis units
        behave as for `subplots`.  If False, each subplot's x- or y-axis will
        be independent.

    subplot_kw : dict, optional
        Dictionary with keywords passed to the `.Figure.add_subplot` call
        used to create each subplot.

    gridspec_kw : dict, optional
        Dictionary with keywords passed to the `.GridSpec` constructor used
        to create the grid the subplots are placed on.

    empty_sentinel : object, optional
        Entry in the layout to mean \"leave this space empty\".  Defaults
        to ``'.'``. Note, if *layout* is a string, it is processed via
        `inspect.cleandoc` to remove leading white space, which may
        interfere with using white-space as the empty sentinel.

    **fig_kw
        All additional keyword arguments are passed to the
        `.pyplot.figure` call.

    Returns
    -------
    fig : `~.figure.Figure`
       The new figure

    dict[label, Axes]
       A dictionary mapping the labels to the Axes objects.  The order of
       the axes is left-to-right and top-to-bottom of their position in the
       total layout.

    "
                :arguments 
                  ( ("mosaic" variable nil (reparse-symbol function_parameters) [48932 48938])
                    ("sharex" variable nil (reparse-symbol function_parameters) [48943 48949])
                    ("sharey" variable nil (reparse-symbol function_parameters) [48957 48963])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [48990 49000])
                    ("gridspec_kw" variable nil (reparse-symbol function_parameters) [49007 49018])
                    ("empty_sentinel" variable nil (reparse-symbol function_parameters) [49025 49039])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [49064 49072]))                  )
                nil [48913 51884])
            ("subplot2grid" function
               (:documentation "
    Create a subplot at a specific location inside a regular grid.

    Parameters
    ----------
    shape : (int, int)
        Number of rows and of columns of the grid in which to place axis.
    loc : (int, int)
        Row number and column number of the axis location within the grid.
    rowspan : int, default: 1
        Number of rows for the axis to span downwards.
    colspan : int, default: 1
        Number of columns for the axis to span to the right.
    fig : `.Figure`, optional
        Figure to place the subplot in. Defaults to the current figure.
    **kwargs
        Additional keyword arguments are handed to `~.Figure.add_subplot`.

    Returns
    -------
    `.axes.SubplotBase`, or another subclass of `~.axes.Axes`

        The axes of the subplot.  The returned axes base class depends on the
        projection used.  It is `~.axes.Axes` if rectilinear projection is used
        and `.projections.polar.PolarAxes` if polar projection is used.  The
        returned axes is then a subplot subclass of the base class.

    Notes
    -----
    The following call ::

        ax = subplot2grid((nrows, ncols), (row, col), rowspan, colspan)

    is identical to ::

        fig = gcf()
        gs = fig.add_gridspec(nrows, ncols)
        ax = fig.add_subplot(gs[row:row+rowspan, col:col+colspan])
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [51903 51908])
                    ("loc" variable nil (reparse-symbol function_parameters) [51910 51913])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [51915 51922])
                    ("colspan" variable nil (reparse-symbol function_parameters) [51926 51933])
                    ("fig" variable nil (reparse-symbol function_parameters) [51937 51940])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [51947 51955]))                  )
                nil [51886 53837])
            ("twinx" function
               (:documentation "
    Make and return a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*), and its ticks will be
    on the right.

    Examples
    --------
    :doc:`/gallery/subplots_axes_and_figures/two_scales`
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [53849 53851]))                  )
                nil [53839 54210])
            ("twiny" function
               (:documentation "
    Make and return a second axes that shares the *y*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*), and its ticks will be
    on the top.

    Examples
    --------
    :doc:`/gallery/subplots_axes_and_figures/two_scales`
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [54222 54224]))                  )
                nil [54212 54581])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for a figure.

    Returns
    -------
    `matplotlib.widgets.SubplotTool`
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [54600 54609]))                  )
                nil [54583 55164])
            ("box" function
               (:documentation "
    Turn the axes box on or off on the current axes.

    Parameters
    ----------
    on : bool or None
        The new `~matplotlib.axes.Axes` box state. If ``None``, toggle
        the state.

    See Also
    --------
    :meth:`matplotlib.axes.Axes.set_frame_on`
    :meth:`matplotlib.axes.Axes.get_frame_on`
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [55174 55176]))                  )
                nil [55166 55608])
            ("xlim" function
               (:documentation "
    Get or set the x limits of the current axes.

    Call signatures::

        left, right = xlim()  # return the current xlim
        xlim((left, right))   # set the xlim to left, right
        xlim(left, right)     # set the xlim to left, right

    If you do not specify args, you can pass *left* or *right* as kwargs,
    i.e.::

        xlim(right=3)  # adjust the right leaving left unchanged
        xlim(left=1)  # adjust the left leaving right unchanged

    Setting limits turns autoscaling off for the x-axis.

    Returns
    -------
    left, right
        A tuple of the new x-axis limits.

    Notes
    -----
    Calling this function with no arguments (e.g. ``xlim()``) is the pyplot
    equivalent of calling `~.Axes.get_xlim` on the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_xlim` on the current axes. All arguments are passed though.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [55631 55636])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55638 55646]))                  )
                nil [55622 56716])
            ("ylim" function
               (:documentation "
    Get or set the y-limits of the current axes.

    Call signatures::

        bottom, top = ylim()  # return the current ylim
        ylim((bottom, top))   # set the ylim to bottom, top
        ylim(bottom, top)     # set the ylim to bottom, top

    If you do not specify args, you can alternatively pass *bottom* or
    *top* as kwargs, i.e.::

        ylim(top=3)  # adjust the top leaving bottom unchanged
        ylim(bottom=1)  # adjust the bottom leaving top unchanged

    Setting limits turns autoscaling off for the y-axis.

    Returns
    -------
    bottom, top
        A tuple of the new y-axis limits.

    Notes
    -----
    Calling this function with no arguments (e.g. ``ylim()``) is the pyplot
    equivalent of calling `~.Axes.get_ylim` on the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_ylim` on the current axes. All arguments are passed though.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [56727 56732])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56734 56742]))                  )
                nil [56718 57826])
            ("xticks" function
               (:documentation "
    Get or set the current tick locations and labels of the x-axis.

    Pass no arguments to return the current values without modifying them.

    Parameters
    ----------
    ticks : array-like, optional
        The list of xtick locations.  Passing an empty list removes all xticks.
    labels : array-like, optional
        The labels to place at the given *ticks* locations.  This argument can
        only be passed if *ticks* is passed as well.
    **kwargs
        `.Text` properties can be used to control the appearance of the labels.

    Returns
    -------
    locs
        The list of xtick locations.
    labels
        The list of xlabel `.Text` objects.

    Notes
    -----
    Calling this function with no arguments (e.g. ``xticks()``) is the pyplot
    equivalent of calling `~.Axes.get_xticks` and `~.Axes.get_xticklabels` on
    the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_xticks` and `~.Axes.set_xticklabels` on the current axes.

    Examples
    --------
    >>> locs, labels = xticks()  # Get the current locations and labels.
    >>> xticks(np.arange(0, 1, step=0.2))  # Set label locations.
    >>> xticks(np.arange(3), ['Tom', 'Dick', 'Sue'])  # Set text labels.
    >>> xticks([0, 1, 2], ['January', 'February', 'March'],
    ...        rotation=20)  # Set text labels and properties.
    >>> xticks([])  # Disable xticks.
    "
                :arguments 
                  ( ("ticks" variable nil (reparse-symbol function_parameters) [57839 57844])
                    ("labels" variable nil (reparse-symbol function_parameters) [57851 57857])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [57864 57872]))                  )
                nil [57828 59793])
            ("yticks" function
               (:documentation "
    Get or set the current tick locations and labels of the y-axis.

    Pass no arguments to return the current values without modifying them.

    Parameters
    ----------
    ticks : array-like, optional
        The list of ytick locations.  Passing an empty list removes all yticks.
    labels : array-like, optional
        The labels to place at the given *ticks* locations.  This argument can
        only be passed if *ticks* is passed as well.
    **kwargs
        `.Text` properties can be used to control the appearance of the labels.

    Returns
    -------
    locs
        The list of ytick locations.
    labels
        The list of ylabel `.Text` objects.

    Notes
    -----
    Calling this function with no arguments (e.g. ``yticks()``) is the pyplot
    equivalent of calling `~.Axes.get_yticks` and `~.Axes.get_yticklabels` on
    the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_yticks` and `~.Axes.set_yticklabels` on the current axes.

    Examples
    --------
    >>> locs, labels = yticks()  # Get the current locations and labels.
    >>> yticks(np.arange(0, 1, step=0.2))  # Set label locations.
    >>> yticks(np.arange(3), ['Tom', 'Dick', 'Sue'])  # Set text labels.
    >>> yticks([0, 1, 2], ['January', 'February', 'March'],
    ...        rotation=45)  # Set text labels and properties.
    >>> yticks([])  # Disable yticks.
    "
                :arguments 
                  ( ("ticks" variable nil (reparse-symbol function_parameters) [59806 59811])
                    ("labels" variable nil (reparse-symbol function_parameters) [59818 59824])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [59831 59839]))                  )
                nil [59795 61760])
            ("rgrids" function
               (:documentation "
    Get or set the radial gridlines on the current polar plot.

    Call signatures::

     lines, labels = rgrids()
     lines, labels = rgrids(radii, labels=None, angle=22.5, fmt=None, **kwargs)

    When called with no arguments, `.rgrids` simply returns the tuple
    (*lines*, *labels*). When called with arguments, the labels will
    appear at the specified radial distances and angle.

    Parameters
    ----------
    radii : tuple with floats
        The radii for the radial gridlines

    labels : tuple with strings or None
        The labels to use at each radial gridline. The
        `matplotlib.ticker.ScalarFormatter` will be used if None.

    angle : float
        The angular position of the radius labels in degrees.

    fmt : str or None
        Format string used in `matplotlib.ticker.FormatStrFormatter`.
        For example '%f'.

    Returns
    -------
    lines : list of `.lines.Line2D`
        The radial gridlines.

    labels : list of `.text.Text`
        The tick labels.

    Other Parameters
    ----------------
    **kwargs
        *kwargs* are optional `.Text` properties for the labels.

    See Also
    --------
    .pyplot.thetagrids
    .projections.polar.PolarAxes.set_rgrids
    .Axis.get_gridlines
    .Axis.get_ticklabels

    Examples
    --------
    ::

      # set the locations of the radial gridlines
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' ))
    "
                :arguments 
                  ( ("radii" variable nil (reparse-symbol function_parameters) [61773 61778])
                    ("labels" variable nil (reparse-symbol function_parameters) [61785 61791])
                    ("angle" variable nil (reparse-symbol function_parameters) [61798 61803])
                    ("fmt" variable nil (reparse-symbol function_parameters) [61810 61813])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [61820 61828]))                  )
                nil [61762 63809])
            ("thetagrids" function
               (:documentation "
    Get or set the theta gridlines on the current polar plot.

    Call signatures::

     lines, labels = thetagrids()
     lines, labels = thetagrids(angles, labels=None, fmt=None, **kwargs)

    When called with no arguments, `.thetagrids` simply returns the tuple
    (*lines*, *labels*). When called with arguments, the labels will
    appear at the specified angles.

    Parameters
    ----------
    angles : tuple with floats, degrees
        The angles of the theta gridlines.

    labels : tuple with strings or None
        The labels to use at each radial gridline. The
        `.projections.polar.ThetaFormatter` will be used if None.

    fmt : str or None
        Format string used in `matplotlib.ticker.FormatStrFormatter`.
        For example '%f'. Note that the angle in radians will be used.

    Returns
    -------
    lines : list of `.lines.Line2D`
        The theta gridlines.

    labels : list of `.text.Text`
        The tick labels.

    Other Parameters
    ----------------
    **kwargs
        *kwargs* are optional `.Text` properties for the labels.

    See Also
    --------
    .pyplot.rgrids
    .projections.polar.PolarAxes.set_thetagrids
    .Axis.get_gridlines
    .Axis.get_ticklabels

    Examples
    --------
    ::

      # set the locations of the angular gridlines
      lines, labels = thetagrids(range(45, 360, 90))

      # set the locations and labels of the angular gridlines
      lines, labels = thetagrids(range(45, 360, 90), ('NE', 'NW', 'SW', 'SE'))
    "
                :arguments 
                  ( ("angles" variable nil (reparse-symbol function_parameters) [63826 63832])
                    ("labels" variable nil (reparse-symbol function_parameters) [63839 63845])
                    ("fmt" variable nil (reparse-symbol function_parameters) [63852 63855])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [63862 63870]))                  )
                nil [63811 65841])
            ("plotting" function nil nil [65865 65890])
            ("get_plot_commands" function (:documentation "
    Get a sorted list of all of the plotting commands.
    ") nil [65892 66705])
            ("_setup_pyplot_info_docstrings" function (:documentation "
    Setup the docstring of `plotting` and of the colormap-setting functions.

    These must be done after the entire module is imported, so it is called
    from the end of this module, which is generated by boilerplate.py.
    ") nil [66707 68385])
            ("" code nil nil [68486 68503])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [68517 68525])
                ("cax" variable nil (reparse-symbol function_parameters) [68532 68535])
                ("ax" variable nil (reparse-symbol function_parameters) [68542 68544])
                ("kw" variable nil (reparse-symbol function_parameters) [68551 68555]))              ) nil [68504 68986])
            ("clim" function
               (:documentation "
    Set the color limits of the current image.

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images, use
    `~.ScalarMappable.set_clim` on every image, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.5)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [68997 69001])
                    ("vmax" variable nil (reparse-symbol function_parameters) [69008 69012]))                  )
                nil [68988 69521])
            ("set_cmap" function
               (:documentation "
    Set the default colormap, and applies it to the current image if any.

    Parameters
    ----------
    cmap : `~matplotlib.colors.Colormap` or str
        A colormap instance or the name of a registered colormap.

    See Also
    --------
    colormaps
    matplotlib.cm.register_cmap
    matplotlib.cm.get_cmap
    "
                :arguments 
                  ( ("cmap" variable nil (reparse-symbol function_parameters) [69536 69540]))                  )
                nil [69523 70005])
            ("" code nil nil [70039 70064])
            ("imread" function (:arguments 
              ( ("fname" variable nil (reparse-symbol function_parameters) [70076 70081])
                ("format" variable nil (reparse-symbol function_parameters) [70083 70089]))              ) nil [70065 70147])
            ("" code nil nil [70181 70206])
            ("imsave" function (:arguments 
              ( ("fname" variable nil (reparse-symbol function_parameters) [70218 70223])
                ("arr" variable nil (reparse-symbol function_parameters) [70225 70228])
                ("kwargs" variable nil (reparse-symbol function_parameters) [70230 70238]))              ) nil [70207 70298])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    Parameters
    ----------
    A : 2D array-like
        The matrix to be displayed.

    fignum : None or int or False
        If *None*, create a new figure window with automatic numbering.

        If a nonzero integer, draw into the figure with the given number
        (create it if it does not exist).

        If 0, use the current axes (or create one if it does not exist).

        .. note::

           Because of how `.Axes.matshow` tries to set the figure aspect
           ratio to be the one of the array, strange things may happen if you
           reuse an existing figure.

    Returns
    -------
    `~matplotlib.image.AxesImage`

    Other Parameters
    ----------------
    **kwargs : `~matplotlib.axes.Axes.imshow` arguments

    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [70312 70313])
                    ("fignum" variable nil (reparse-symbol function_parameters) [70315 70321])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [70328 70336]))                  )
                nil [70300 71803])
            ("polar" function
               (:documentation "
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs)

    Multiple *theta*, *r* arguments are supported, with format strings, as in
    `plot`.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [71815 71820])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [71822 71830]))                  )
                nil [71805 72402])
            ("if" code nil nil [72619 72894])
            ("" code nil nil [73082 73099])
            ("figimage" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [73122 73123])
                ("xo" variable nil (reparse-symbol function_parameters) [73125 73127])
                ("yo" variable nil (reparse-symbol function_parameters) [73131 73133])
                ("alpha" variable nil (reparse-symbol function_parameters) [73137 73142])
                ("norm" variable nil (reparse-symbol function_parameters) [73149 73153])
                ("cmap" variable nil (reparse-symbol function_parameters) [73160 73164])
                ("vmin" variable nil (reparse-symbol function_parameters) [73171 73175])
                ("vmax" variable nil (reparse-symbol function_parameters) [73190 73194])
                ("origin" variable nil (reparse-symbol function_parameters) [73201 73207])
                ("resize" variable nil (reparse-symbol function_parameters) [73214 73220])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73228 73236]))              ) nil [73100 73396])
            ("" code nil nil [73503 73516])
            ("figtext" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [73529 73530])
                ("y" variable nil (reparse-symbol function_parameters) [73532 73533])
                ("s" variable nil (reparse-symbol function_parameters) [73535 73536])
                ("fontdict" variable nil (reparse-symbol function_parameters) [73538 73546])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73553 73561]))              ) nil [73517 73624])
            ("" code nil nil [73731 73743])
            ("gca" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [73752 73760]))              ) nil [73744 73794])
            ("" code nil nil [73901 73914])
            ("gci" function nil nil [73915 73950])
            ("" code nil nil [74057 74072])
            ("ginput" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [74093 74094])
                ("timeout" variable nil (reparse-symbol function_parameters) [74098 74105])
                ("show_clicks" variable nil (reparse-symbol function_parameters) [74110 74121])
                ("mouse_add" variable nil (reparse-symbol function_parameters) [74136 74145])
                ("mouse_pop" variable nil (reparse-symbol function_parameters) [74164 74173])
                ("mouse_stop" variable nil (reparse-symbol function_parameters) [74201 74211]))              ) nil [74073 74394])
            ("" code nil nil [74501 74525])
            ("subplots_adjust" function (:arguments 
              ( ("left" variable nil (reparse-symbol function_parameters) [74555 74559])
                ("bottom" variable nil (reparse-symbol function_parameters) [74566 74572])
                ("right" variable nil (reparse-symbol function_parameters) [74579 74584])
                ("top" variable nil (reparse-symbol function_parameters) [74591 74594])
                ("wspace" variable nil (reparse-symbol function_parameters) [74601 74607])
                ("hspace" variable nil (reparse-symbol function_parameters) [74622 74628]))              ) nil [74526 74764])
            ("" code nil nil [74871 74888])
            ("suptitle" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [74902 74903])
                ("kwargs" variable nil (reparse-symbol function_parameters) [74905 74913]))              ) nil [74889 74955])
            ("" code nil nil [75062 75083])
            ("tight_layout" function (:arguments 
              ( ("pad" variable nil (reparse-symbol function_parameters) [75104 75107])
                ("h_pad" variable nil (reparse-symbol function_parameters) [75114 75119])
                ("w_pad" variable nil (reparse-symbol function_parameters) [75126 75131])
                ("rect" variable nil (reparse-symbol function_parameters) [75138 75142]))              ) nil [75084 75226])
            ("" code nil nil [75333 75360])
            ("waitforbuttonpress" function (:arguments 
              ( ("timeout" variable nil (reparse-symbol function_parameters) [75384 75391]))              ) nil [75361 75450])
            ("" code nil nil [75557 75569])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [75580 75581])
                ("data" variable nil (reparse-symbol function_parameters) [75586 75590])
                ("kwargs" variable nil (reparse-symbol function_parameters) [75597 75605]))              ) nil [75570 75701])
            ("" code nil nil [75808 75829])
            ("angle_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [75858 75859])
                ("Fs" variable nil (reparse-symbol function_parameters) [75861 75863])
                ("Fc" variable nil (reparse-symbol function_parameters) [75870 75872])
                ("window" variable nil (reparse-symbol function_parameters) [75879 75885])
                ("pad_to" variable nil (reparse-symbol function_parameters) [75892 75898])
                ("sides" variable nil (reparse-symbol function_parameters) [75905 75910])
                ("data" variable nil (reparse-symbol function_parameters) [75928 75932])
                ("kwargs" variable nil (reparse-symbol function_parameters) [75939 75947]))              ) nil [75830 76117])
            ("" code nil nil [76224 76239])
            ("annotate" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [76253 76257])
                ("xy" variable nil (reparse-symbol function_parameters) [76259 76261])
                ("args" variable nil (reparse-symbol function_parameters) [76263 76268])
                ("kwargs" variable nil (reparse-symbol function_parameters) [76270 76278]))              ) nil [76240 76334])
            ("" code nil nil [76441 76453])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [76464 76465])
                ("y" variable nil (reparse-symbol function_parameters) [76467 76468])
                ("dx" variable nil (reparse-symbol function_parameters) [76470 76472])
                ("dy" variable nil (reparse-symbol function_parameters) [76474 76476])
                ("kwargs" variable nil (reparse-symbol function_parameters) [76478 76486]))              ) nil [76454 76536])
            ("" code nil nil [76643 76659])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [76674 76680])
                ("axis" variable nil (reparse-symbol function_parameters) [76687 76691])
                ("tight" variable nil (reparse-symbol function_parameters) [76700 76705]))              ) nil [76660 76779])
            ("" code nil nil [76886 76900])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [76913 76914])
                ("xmin" variable nil (reparse-symbol function_parameters) [76918 76922])
                ("xmax" variable nil (reparse-symbol function_parameters) [76926 76930])
                ("kwargs" variable nil (reparse-symbol function_parameters) [76934 76942]))              ) nil [76901 77007])
            ("" code nil nil [77114 77128])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [77141 77145])
                ("ymax" variable nil (reparse-symbol function_parameters) [77147 77151])
                ("xmin" variable nil (reparse-symbol function_parameters) [77153 77157])
                ("xmax" variable nil (reparse-symbol function_parameters) [77161 77165])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77169 77177]))              ) nil [77129 77249])
            ("" code nil nil [77356 77367])
            ("axis" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [77377 77382])
                ("emit" variable nil (reparse-symbol function_parameters) [77384 77388])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77395 77403]))              ) nil [77368 77456])
            ("" code nil nil [77563 77576])
            ("axline" function (:arguments 
              ( ("xy1" variable nil (reparse-symbol function_parameters) [77588 77591])
                ("xy2" variable nil (reparse-symbol function_parameters) [77593 77596])
                ("slope" variable nil (reparse-symbol function_parameters) [77606 77611])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77618 77626]))              ) nil [77577 77690])
            ("" code nil nil [77797 77811])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [77824 77825])
                ("ymin" variable nil (reparse-symbol function_parameters) [77829 77833])
                ("ymax" variable nil (reparse-symbol function_parameters) [77837 77841])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77845 77853]))              ) nil [77812 77918])
            ("" code nil nil [78025 78039])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [78052 78056])
                ("xmax" variable nil (reparse-symbol function_parameters) [78058 78062])
                ("ymin" variable nil (reparse-symbol function_parameters) [78064 78068])
                ("ymax" variable nil (reparse-symbol function_parameters) [78072 78076])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78080 78088]))              ) nil [78040 78160])
            ("" code nil nil [78267 78277])
            ("bar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [78295 78296])
                ("height" variable nil (reparse-symbol function_parameters) [78298 78304])
                ("width" variable nil (reparse-symbol function_parameters) [78306 78311])
                ("bottom" variable nil (reparse-symbol function_parameters) [78317 78323])
                ("align" variable nil (reparse-symbol function_parameters) [78333 78338])
                ("data" variable nil (reparse-symbol function_parameters) [78357 78361])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78368 78376]))              ) nil [78278 78527])
            ("" code nil nil [78634 78646])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [78657 78662])
                ("data" variable nil (reparse-symbol function_parameters) [78664 78668])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78675 78683]))              ) nil [78647 78791])
            ("" code nil nil [78898 78909])
            ("barh" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [78919 78920])
                ("width" variable nil (reparse-symbol function_parameters) [78922 78927])
                ("height" variable nil (reparse-symbol function_parameters) [78929 78935])
                ("left" variable nil (reparse-symbol function_parameters) [78941 78945])
                ("align" variable nil (reparse-symbol function_parameters) [78955 78960])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78971 78979]))              ) nil [78910 79072])
            ("" code nil nil [79179 79195])
            ("bar_label" function (:arguments 
              ( ("container" variable nil (reparse-symbol function_parameters) [79219 79228])
                ("labels" variable nil (reparse-symbol function_parameters) [79230 79236])
                ("fmt" variable nil (reparse-symbol function_parameters) [79246 79249])
                ("label_type" variable nil (reparse-symbol function_parameters) [79256 79266])
                ("padding" variable nil (reparse-symbol function_parameters) [79283 79290])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79294 79302]))              ) nil [79196 79434])
            ("" code nil nil [79541 79555])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [79577 79578])
                ("notch" variable nil (reparse-symbol function_parameters) [79580 79585])
                ("sym" variable nil (reparse-symbol function_parameters) [79592 79595])
                ("vert" variable nil (reparse-symbol function_parameters) [79602 79606])
                ("whis" variable nil (reparse-symbol function_parameters) [79613 79617])
                ("positions" variable nil (reparse-symbol function_parameters) [79632 79641])
                ("widths" variable nil (reparse-symbol function_parameters) [79648 79654])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [79661 79673])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [79688 79697])
                ("usermedians" variable nil (reparse-symbol function_parameters) [79704 79715])
                ("conf_intervals" variable nil (reparse-symbol function_parameters) [79722 79736])
                ("meanline" variable nil (reparse-symbol function_parameters) [79751 79759])
                ("showmeans" variable nil (reparse-symbol function_parameters) [79766 79775])
                ("showcaps" variable nil (reparse-symbol function_parameters) [79782 79790])
                ("showbox" variable nil (reparse-symbol function_parameters) [79797 79804])
                ("showfliers" variable nil (reparse-symbol function_parameters) [79819 79829])
                ("boxprops" variable nil (reparse-symbol function_parameters) [79836 79844])
                ("labels" variable nil (reparse-symbol function_parameters) [79851 79857])
                ("flierprops" variable nil (reparse-symbol function_parameters) [79864 79874])
                ("medianprops" variable nil (reparse-symbol function_parameters) [79889 79900])
                ("meanprops" variable nil (reparse-symbol function_parameters) [79907 79916])
                ("capprops" variable nil (reparse-symbol function_parameters) [79923 79931])
                ("whiskerprops" variable nil (reparse-symbol function_parameters) [79946 79958])
                ("manage_ticks" variable nil (reparse-symbol function_parameters) [79965 79977])
                ("autorange" variable nil (reparse-symbol function_parameters) [79984 79993])
                ("zorder" variable nil (reparse-symbol function_parameters) [80009 80015])
                ("data" variable nil (reparse-symbol function_parameters) [80025 80029]))              ) nil [79556 80697])
            ("" code nil nil [80804 80822])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [80839 80846])
                ("yrange" variable nil (reparse-symbol function_parameters) [80848 80854])
                ("data" variable nil (reparse-symbol function_parameters) [80859 80863])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80870 80878]))              ) nil [80823 81002])
            ("" code nil nil [81109 81122])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [81134 81136])
                ("levels" variable nil (reparse-symbol function_parameters) [81138 81144])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81151 81159]))              ) nil [81123 81215])
            ("" code nil nil [81322 81335])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [81356 81357])
                ("y" variable nil (reparse-symbol function_parameters) [81359 81360])
                ("NFFT" variable nil (reparse-symbol function_parameters) [81362 81366])
                ("Fs" variable nil (reparse-symbol function_parameters) [81372 81374])
                ("Fc" variable nil (reparse-symbol function_parameters) [81378 81380])
                ("detrend" variable nil (reparse-symbol function_parameters) [81384 81391])
                ("window" variable nil (reparse-symbol function_parameters) [81419 81425])
                ("noverlap" variable nil (reparse-symbol function_parameters) [81447 81455])
                ("pad_to" variable nil (reparse-symbol function_parameters) [81459 81465])
                ("sides" variable nil (reparse-symbol function_parameters) [81480 81485])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [81497 81510])
                ("data" variable nil (reparse-symbol function_parameters) [81520 81524])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81531 81539]))              ) nil [81336 81796])
            ("" code nil nil [81903 81917])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [81930 81935])
                ("data" variable nil (reparse-symbol function_parameters) [81937 81941])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81948 81956]))              ) nil [81918 82132])
            ("" code nil nil [82239 82254])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [82268 82273])
                ("data" variable nil (reparse-symbol function_parameters) [82275 82279])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82286 82294]))              ) nil [82255 82471])
            ("" code nil nil [82578 82588])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [82606 82607])
                ("y" variable nil (reparse-symbol function_parameters) [82609 82610])
                ("NFFT" variable nil (reparse-symbol function_parameters) [82612 82616])
                ("Fs" variable nil (reparse-symbol function_parameters) [82623 82625])
                ("Fc" variable nil (reparse-symbol function_parameters) [82632 82634])
                ("detrend" variable nil (reparse-symbol function_parameters) [82641 82648])
                ("window" variable nil (reparse-symbol function_parameters) [82655 82661])
                ("noverlap" variable nil (reparse-symbol function_parameters) [82676 82684])
                ("pad_to" variable nil (reparse-symbol function_parameters) [82691 82697])
                ("sides" variable nil (reparse-symbol function_parameters) [82704 82709])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [82716 82729])
                ("return_line" variable nil (reparse-symbol function_parameters) [82744 82755])
                ("data" variable nil (reparse-symbol function_parameters) [82765 82769])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82776 82784]))              ) nil [82589 83063])
            ("" code nil nil [83170 83185])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [83208 83209])
                ("y" variable nil (reparse-symbol function_parameters) [83211 83212])
                ("yerr" variable nil (reparse-symbol function_parameters) [83214 83218])
                ("xerr" variable nil (reparse-symbol function_parameters) [83225 83229])
                ("fmt" variable nil (reparse-symbol function_parameters) [83236 83239])
                ("ecolor" variable nil (reparse-symbol function_parameters) [83244 83250])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [83265 83275])
                ("capsize" variable nil (reparse-symbol function_parameters) [83282 83289])
                ("barsabove" variable nil (reparse-symbol function_parameters) [83296 83305])
                ("lolims" variable nil (reparse-symbol function_parameters) [83313 83319])
                ("uplims" variable nil (reparse-symbol function_parameters) [83335 83341])
                ("xlolims" variable nil (reparse-symbol function_parameters) [83349 83356])
                ("xuplims" variable nil (reparse-symbol function_parameters) [83364 83371])
                ("errorevery" variable nil (reparse-symbol function_parameters) [83379 83389])
                ("capthick" variable nil (reparse-symbol function_parameters) [83401 83409])
                ("data" variable nil (reparse-symbol function_parameters) [83419 83423])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83430 83438]))              ) nil [83186 83785])
            ("" code nil nil [83892 83908])
            ("eventplot" function (:arguments 
              ( ("positions" variable nil (reparse-symbol function_parameters) [83932 83941])
                ("orientation" variable nil (reparse-symbol function_parameters) [83943 83954])
                ("lineoffsets" variable nil (reparse-symbol function_parameters) [83969 83980])
                ("linelengths" variable nil (reparse-symbol function_parameters) [83992 84003])
                ("linewidths" variable nil (reparse-symbol function_parameters) [84007 84017])
                ("colors" variable nil (reparse-symbol function_parameters) [84024 84030])
                ("linestyles" variable nil (reparse-symbol function_parameters) [84045 84055])
                ("data" variable nil (reparse-symbol function_parameters) [84068 84072])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84079 84087]))              ) nil [83909 84355])
            ("" code nil nil [84462 84473])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [84483 84488])
                ("data" variable nil (reparse-symbol function_parameters) [84490 84494])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84501 84509]))              ) nil [84474 84616])
            ("" code nil nil [84723 84742])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [84769 84770])
                ("y1" variable nil (reparse-symbol function_parameters) [84772 84774])
                ("y2" variable nil (reparse-symbol function_parameters) [84776 84778])
                ("where" variable nil (reparse-symbol function_parameters) [84782 84787])
                ("interpolate" variable nil (reparse-symbol function_parameters) [84794 84805])
                ("step" variable nil (reparse-symbol function_parameters) [84813 84817])
                ("data" variable nil (reparse-symbol function_parameters) [84835 84839])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84846 84854]))              ) nil [84743 85025])
            ("" code nil nil [85132 85152])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [85180 85181])
                ("x1" variable nil (reparse-symbol function_parameters) [85183 85185])
                ("x2" variable nil (reparse-symbol function_parameters) [85187 85189])
                ("where" variable nil (reparse-symbol function_parameters) [85193 85198])
                ("step" variable nil (reparse-symbol function_parameters) [85205 85209])
                ("interpolate" variable nil (reparse-symbol function_parameters) [85216 85227])
                ("data" variable nil (reparse-symbol function_parameters) [85246 85250])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85257 85265]))              ) nil [85153 85437])
            ("" code nil nil [85544 85555])
            ("grid" function (:arguments 
              ( ("visible" variable nil (reparse-symbol function_parameters) [85565 85572])
                ("which" variable nil (reparse-symbol function_parameters) [85579 85584])
                ("axis" variable nil (reparse-symbol function_parameters) [85594 85598])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85607 85615]))              ) nil [85556 85691])
            ("" code nil nil [85798 85811])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [85832 85833])
                ("y" variable nil (reparse-symbol function_parameters) [85835 85836])
                ("C" variable nil (reparse-symbol function_parameters) [85838 85839])
                ("gridsize" variable nil (reparse-symbol function_parameters) [85846 85854])
                ("bins" variable nil (reparse-symbol function_parameters) [85860 85864])
                ("xscale" variable nil (reparse-symbol function_parameters) [85871 85877])
                ("yscale" variable nil (reparse-symbol function_parameters) [85896 85902])
                ("extent" variable nil (reparse-symbol function_parameters) [85913 85919])
                ("cmap" variable nil (reparse-symbol function_parameters) [85926 85930])
                ("norm" variable nil (reparse-symbol function_parameters) [85937 85941])
                ("vmin" variable nil (reparse-symbol function_parameters) [85948 85952])
                ("vmax" variable nil (reparse-symbol function_parameters) [85967 85971])
                ("alpha" variable nil (reparse-symbol function_parameters) [85978 85983])
                ("linewidths" variable nil (reparse-symbol function_parameters) [85990 86000])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [86007 86017])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [86034 86051])
                ("mincnt" variable nil (reparse-symbol function_parameters) [86061 86067])
                ("marginals" variable nil (reparse-symbol function_parameters) [86074 86083])
                ("data" variable nil (reparse-symbol function_parameters) [86102 86106])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86113 86121]))              ) nil [85812 86550])
            ("" code nil nil [86657 86668])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [86687 86688])
                ("bins" variable nil (reparse-symbol function_parameters) [86690 86694])
                ("range" variable nil (reparse-symbol function_parameters) [86701 86706])
                ("density" variable nil (reparse-symbol function_parameters) [86713 86720])
                ("weights" variable nil (reparse-symbol function_parameters) [86728 86735])
                ("cumulative" variable nil (reparse-symbol function_parameters) [86750 86760])
                ("bottom" variable nil (reparse-symbol function_parameters) [86768 86774])
                ("histtype" variable nil (reparse-symbol function_parameters) [86781 86789])
                ("align" variable nil (reparse-symbol function_parameters) [86797 86802])
                ("orientation" variable nil (reparse-symbol function_parameters) [86818 86829])
                ("rwidth" variable nil (reparse-symbol function_parameters) [86842 86848])
                ("log" variable nil (reparse-symbol function_parameters) [86855 86858])
                ("color" variable nil (reparse-symbol function_parameters) [86866 86871])
                ("label" variable nil (reparse-symbol function_parameters) [86886 86891])
                ("stacked" variable nil (reparse-symbol function_parameters) [86898 86905])
                ("data" variable nil (reparse-symbol function_parameters) [86916 86920])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86927 86935]))              ) nil [86669 87282])
            ("" code nil nil [87389 87402])
            ("stairs" function (:arguments 
              ( ("values" variable nil (reparse-symbol function_parameters) [87423 87429])
                ("edges" variable nil (reparse-symbol function_parameters) [87431 87436])
                ("orientation" variable nil (reparse-symbol function_parameters) [87446 87457])
                ("baseline" variable nil (reparse-symbol function_parameters) [87470 87478])
                ("fill" variable nil (reparse-symbol function_parameters) [87490 87494])
                ("data" variable nil (reparse-symbol function_parameters) [87502 87506])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87513 87521]))              ) nil [87403 87707])
            ("" code nil nil [87814 87827])
            ("hist2d" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [87848 87849])
                ("y" variable nil (reparse-symbol function_parameters) [87851 87852])
                ("bins" variable nil (reparse-symbol function_parameters) [87854 87858])
                ("range" variable nil (reparse-symbol function_parameters) [87863 87868])
                ("density" variable nil (reparse-symbol function_parameters) [87875 87882])
                ("weights" variable nil (reparse-symbol function_parameters) [87890 87897])
                ("cmin" variable nil (reparse-symbol function_parameters) [87912 87916])
                ("cmax" variable nil (reparse-symbol function_parameters) [87923 87927])
                ("data" variable nil (reparse-symbol function_parameters) [87937 87941])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87948 87956]))              ) nil [87828 88189])
            ("" code nil nil [88296 88309])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [88330 88331])
                ("xmin" variable nil (reparse-symbol function_parameters) [88333 88337])
                ("xmax" variable nil (reparse-symbol function_parameters) [88339 88343])
                ("colors" variable nil (reparse-symbol function_parameters) [88345 88351])
                ("linestyles" variable nil (reparse-symbol function_parameters) [88358 88368])
                ("label" variable nil (reparse-symbol function_parameters) [88378 88383])
                ("data" variable nil (reparse-symbol function_parameters) [88399 88403])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88410 88418]))              ) nil [88310 88594])
            ("" code nil nil [88701 88714])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [88735 88736])
                ("cmap" variable nil (reparse-symbol function_parameters) [88738 88742])
                ("norm" variable nil (reparse-symbol function_parameters) [88749 88753])
                ("aspect" variable nil (reparse-symbol function_parameters) [88760 88766])
                ("interpolation" variable nil (reparse-symbol function_parameters) [88773 88786])
                ("alpha" variable nil (reparse-symbol function_parameters) [88801 88806])
                ("vmin" variable nil (reparse-symbol function_parameters) [88813 88817])
                ("vmax" variable nil (reparse-symbol function_parameters) [88824 88828])
                ("origin" variable nil (reparse-symbol function_parameters) [88835 88841])
                ("extent" variable nil (reparse-symbol function_parameters) [88848 88854])
                ("interpolation_stage" variable nil (reparse-symbol function_parameters) [88872 88891])
                ("filternorm" variable nil (reparse-symbol function_parameters) [88898 88908])
                ("filterrad" variable nil (reparse-symbol function_parameters) [88915 88924])
                ("resample" variable nil (reparse-symbol function_parameters) [88938 88946])
                ("url" variable nil (reparse-symbol function_parameters) [88953 88956])
                ("data" variable nil (reparse-symbol function_parameters) [88963 88967])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88974 88982]))              ) nil [88715 89404])
            ("" code nil nil [89511 89524])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [89536 89541])
                ("kwargs" variable nil (reparse-symbol function_parameters) [89543 89551]))              ) nil [89525 89595])
            ("" code nil nil [89702 89723])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [89743 89747])
                ("tight" variable nil (reparse-symbol function_parameters) [89756 89761])
                ("kwargs" variable nil (reparse-symbol function_parameters) [89768 89776]))              ) nil [89724 89845])
            ("" code nil nil [89952 89965])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [89977 89982])
                ("kwargs" variable nil (reparse-symbol function_parameters) [89984 89992]))              ) nil [89966 90036])
            ("" code nil nil [90143 90168])
            ("magnitude_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [90201 90202])
                ("Fs" variable nil (reparse-symbol function_parameters) [90204 90206])
                ("Fc" variable nil (reparse-symbol function_parameters) [90213 90215])
                ("window" variable nil (reparse-symbol function_parameters) [90222 90228])
                ("pad_to" variable nil (reparse-symbol function_parameters) [90235 90241])
                ("sides" variable nil (reparse-symbol function_parameters) [90248 90253])
                ("scale" variable nil (reparse-symbol function_parameters) [90268 90273])
                ("data" variable nil (reparse-symbol function_parameters) [90283 90287])
                ("kwargs" variable nil (reparse-symbol function_parameters) [90294 90302]))              ) nil [90169 90497])
            ("" code nil nil [90604 90618])
            ("margins" function (:arguments 
              ( ("margins" variable nil (reparse-symbol function_parameters) [90631 90639])
                ("x" variable nil (reparse-symbol function_parameters) [90641 90642])
                ("y" variable nil (reparse-symbol function_parameters) [90649 90650])
                ("tight" variable nil (reparse-symbol function_parameters) [90657 90662]))              ) nil [90619 90728])
            ("" code nil nil [90835 90856])
            ("minorticks_off" function nil nil [90857 90913])
            ("" code nil nil [91020 91040])
            ("minorticks_on" function nil nil [91041 91095])
            ("" code nil nil [91202 91215])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [91236 91241])
                ("shading" variable nil (reparse-symbol function_parameters) [91243 91250])
                ("alpha" variable nil (reparse-symbol function_parameters) [91257 91262])
                ("norm" variable nil (reparse-symbol function_parameters) [91269 91273])
                ("cmap" variable nil (reparse-symbol function_parameters) [91280 91284])
                ("vmin" variable nil (reparse-symbol function_parameters) [91299 91303])
                ("vmax" variable nil (reparse-symbol function_parameters) [91310 91314])
                ("data" variable nil (reparse-symbol function_parameters) [91321 91325])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91332 91340]))              ) nil [91216 91564])
            ("" code nil nil [91671 91688])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [91713 91718])
                ("alpha" variable nil (reparse-symbol function_parameters) [91720 91725])
                ("norm" variable nil (reparse-symbol function_parameters) [91732 91736])
                ("cmap" variable nil (reparse-symbol function_parameters) [91743 91747])
                ("vmin" variable nil (reparse-symbol function_parameters) [91754 91758])
                ("vmax" variable nil (reparse-symbol function_parameters) [91773 91777])
                ("shading" variable nil (reparse-symbol function_parameters) [91784 91791])
                ("antialiased" variable nil (reparse-symbol function_parameters) [91798 91809])
                ("data" variable nil (reparse-symbol function_parameters) [91817 91821])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91836 91844]))              ) nil [91689 92097])
            ("" code nil nil [92204 92225])
            ("phase_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [92254 92255])
                ("Fs" variable nil (reparse-symbol function_parameters) [92257 92259])
                ("Fc" variable nil (reparse-symbol function_parameters) [92266 92268])
                ("window" variable nil (reparse-symbol function_parameters) [92275 92281])
                ("pad_to" variable nil (reparse-symbol function_parameters) [92288 92294])
                ("sides" variable nil (reparse-symbol function_parameters) [92301 92306])
                ("data" variable nil (reparse-symbol function_parameters) [92324 92328])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92335 92343]))              ) nil [92226 92513])
            ("" code nil nil [92620 92630])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [92648 92649])
                ("explode" variable nil (reparse-symbol function_parameters) [92651 92658])
                ("labels" variable nil (reparse-symbol function_parameters) [92665 92671])
                ("colors" variable nil (reparse-symbol function_parameters) [92678 92684])
                ("autopct" variable nil (reparse-symbol function_parameters) [92691 92698])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [92713 92724])
                ("shadow" variable nil (reparse-symbol function_parameters) [92730 92736])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [92744 92757])
                ("startangle" variable nil (reparse-symbol function_parameters) [92771 92781])
                ("radius" variable nil (reparse-symbol function_parameters) [92785 92791])
                ("counterclock" variable nil (reparse-symbol function_parameters) [92795 92807])
                ("wedgeprops" variable nil (reparse-symbol function_parameters) [92814 92824])
                ("textprops" variable nil (reparse-symbol function_parameters) [92839 92848])
                ("center" variable nil (reparse-symbol function_parameters) [92855 92861])
                ("frame" variable nil (reparse-symbol function_parameters) [92870 92875])
                ("rotatelabels" variable nil (reparse-symbol function_parameters) [92891 92903])
                ("normalize" variable nil (reparse-symbol function_parameters) [92914 92923])
                ("data" variable nil (reparse-symbol function_parameters) [92930 92934]))              ) nil [92631 93389])
            ("" code nil nil [93496 93507])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [93517 93522])
                ("scalex" variable nil (reparse-symbol function_parameters) [93524 93530])
                ("scaley" variable nil (reparse-symbol function_parameters) [93537 93543])
                ("data" variable nil (reparse-symbol function_parameters) [93550 93554])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93561 93569]))              ) nil [93508 93706])
            ("" code nil nil [93813 93829])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [93853 93854])
                ("y" variable nil (reparse-symbol function_parameters) [93856 93857])
                ("fmt" variable nil (reparse-symbol function_parameters) [93859 93862])
                ("tz" variable nil (reparse-symbol function_parameters) [93868 93870])
                ("xdate" variable nil (reparse-symbol function_parameters) [93877 93882])
                ("ydate" variable nil (reparse-symbol function_parameters) [93889 93894])
                ("data" variable nil (reparse-symbol function_parameters) [93913 93917])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93924 93932]))              ) nil [93830 94085])
            ("" code nil nil [94192 94202])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [94220 94221])
                ("NFFT" variable nil (reparse-symbol function_parameters) [94223 94227])
                ("Fs" variable nil (reparse-symbol function_parameters) [94234 94236])
                ("Fc" variable nil (reparse-symbol function_parameters) [94243 94245])
                ("detrend" variable nil (reparse-symbol function_parameters) [94252 94259])
                ("window" variable nil (reparse-symbol function_parameters) [94266 94272])
                ("noverlap" variable nil (reparse-symbol function_parameters) [94287 94295])
                ("pad_to" variable nil (reparse-symbol function_parameters) [94302 94308])
                ("sides" variable nil (reparse-symbol function_parameters) [94315 94320])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [94327 94340])
                ("return_line" variable nil (reparse-symbol function_parameters) [94355 94366])
                ("data" variable nil (reparse-symbol function_parameters) [94376 94380])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94387 94395]))              ) nil [94203 94671])
            ("" code nil nil [94778 94791])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [94803 94808])
                ("data" variable nil (reparse-symbol function_parameters) [94810 94814])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94821 94829]))              ) nil [94792 94971])
            ("" code nil nil [95078 95094])
            ("quiverkey" function (:arguments 
              ( ("Q" variable nil (reparse-symbol function_parameters) [95109 95110])
                ("X" variable nil (reparse-symbol function_parameters) [95112 95113])
                ("Y" variable nil (reparse-symbol function_parameters) [95115 95116])
                ("U" variable nil (reparse-symbol function_parameters) [95118 95119])
                ("label" variable nil (reparse-symbol function_parameters) [95121 95126])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95128 95136]))              ) nil [95095 95195])
            ("" code nil nil [95302 95316])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [95338 95339])
                ("y" variable nil (reparse-symbol function_parameters) [95341 95342])
                ("s" variable nil (reparse-symbol function_parameters) [95344 95345])
                ("c" variable nil (reparse-symbol function_parameters) [95352 95353])
                ("marker" variable nil (reparse-symbol function_parameters) [95360 95366])
                ("cmap" variable nil (reparse-symbol function_parameters) [95373 95377])
                ("norm" variable nil (reparse-symbol function_parameters) [95384 95388])
                ("vmin" variable nil (reparse-symbol function_parameters) [95403 95407])
                ("vmax" variable nil (reparse-symbol function_parameters) [95414 95418])
                ("alpha" variable nil (reparse-symbol function_parameters) [95425 95430])
                ("linewidths" variable nil (reparse-symbol function_parameters) [95437 95447])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [95465 95475])
                ("plotnonfinite" variable nil (reparse-symbol function_parameters) [95482 95495])
                ("data" variable nil (reparse-symbol function_parameters) [95503 95507])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95514 95522]))              ) nil [95317 95837])
            ("" code nil nil [95944 95959])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [95973 95978])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95980 95988]))              ) nil [95960 96034])
            ("" code nil nil [96141 96156])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [96170 96175])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96177 96185]))              ) nil [96157 96231])
            ("" code nil nil [96338 96353])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [96376 96377])
                ("NFFT" variable nil (reparse-symbol function_parameters) [96379 96383])
                ("Fs" variable nil (reparse-symbol function_parameters) [96390 96392])
                ("Fc" variable nil (reparse-symbol function_parameters) [96399 96401])
                ("detrend" variable nil (reparse-symbol function_parameters) [96408 96415])
                ("window" variable nil (reparse-symbol function_parameters) [96422 96428])
                ("noverlap" variable nil (reparse-symbol function_parameters) [96443 96451])
                ("cmap" variable nil (reparse-symbol function_parameters) [96458 96462])
                ("xextent" variable nil (reparse-symbol function_parameters) [96469 96476])
                ("pad_to" variable nil (reparse-symbol function_parameters) [96483 96489])
                ("sides" variable nil (reparse-symbol function_parameters) [96504 96509])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [96516 96529])
                ("mode" variable nil (reparse-symbol function_parameters) [96536 96540])
                ("scale" variable nil (reparse-symbol function_parameters) [96547 96552])
                ("vmin" variable nil (reparse-symbol function_parameters) [96567 96571])
                ("vmax" variable nil (reparse-symbol function_parameters) [96578 96582])
                ("data" variable nil (reparse-symbol function_parameters) [96592 96596])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96603 96611]))              ) nil [96354 96986])
            ("" code nil nil [97093 97103])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [97121 97122])
                ("precision" variable nil (reparse-symbol function_parameters) [97124 97133])
                ("marker" variable nil (reparse-symbol function_parameters) [97137 97143])
                ("markersize" variable nil (reparse-symbol function_parameters) [97150 97160])
                ("aspect" variable nil (reparse-symbol function_parameters) [97167 97173])
                ("origin" variable nil (reparse-symbol function_parameters) [97191 97197])
                ("kwargs" variable nil (reparse-symbol function_parameters) [97207 97215]))              ) nil [97104 97440])
            ("" code nil nil [97547 97563])
            ("stackplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [97587 97588])
                ("args" variable nil (reparse-symbol function_parameters) [97590 97595])
                ("labels" variable nil (reparse-symbol function_parameters) [97597 97603])
                ("colors" variable nil (reparse-symbol function_parameters) [97608 97614])
                ("baseline" variable nil (reparse-symbol function_parameters) [97621 97629])
                ("data" variable nil (reparse-symbol function_parameters) [97638 97642])
                ("kwargs" variable nil (reparse-symbol function_parameters) [97657 97665]))              ) nil [97564 97829])
            ("" code nil nil [97936 97947])
            ("stem" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [97966 97971])
                ("linefmt" variable nil (reparse-symbol function_parameters) [97973 97980])
                ("markerfmt" variable nil (reparse-symbol function_parameters) [97987 97996])
                ("basefmt" variable nil (reparse-symbol function_parameters) [98003 98010])
                ("bottom" variable nil (reparse-symbol function_parameters) [98017 98023])
                ("label" variable nil (reparse-symbol function_parameters) [98035 98040])
                ("use_line_collection" variable nil (reparse-symbol function_parameters) [98047 98066])
                ("orientation" variable nil (reparse-symbol function_parameters) [98073 98084])
                ("data" variable nil (reparse-symbol function_parameters) [98105 98109]))              ) nil [97948 98384])
            ("" code nil nil [98491 98502])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [98512 98513])
                ("y" variable nil (reparse-symbol function_parameters) [98515 98516])
                ("args" variable nil (reparse-symbol function_parameters) [98518 98523])
                ("where" variable nil (reparse-symbol function_parameters) [98525 98530])
                ("data" variable nil (reparse-symbol function_parameters) [98538 98542])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98549 98557]))              ) nil [98503 98683])
            ("" code nil nil [98790 98807])
            ("streamplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [98832 98833])
                ("y" variable nil (reparse-symbol function_parameters) [98835 98836])
                ("u" variable nil (reparse-symbol function_parameters) [98838 98839])
                ("v" variable nil (reparse-symbol function_parameters) [98841 98842])
                ("density" variable nil (reparse-symbol function_parameters) [98844 98851])
                ("linewidth" variable nil (reparse-symbol function_parameters) [98855 98864])
                ("color" variable nil (reparse-symbol function_parameters) [98871 98876])
                ("cmap" variable nil (reparse-symbol function_parameters) [98883 98887])
                ("norm" variable nil (reparse-symbol function_parameters) [98902 98906])
                ("arrowsize" variable nil (reparse-symbol function_parameters) [98913 98922])
                ("arrowstyle" variable nil (reparse-symbol function_parameters) [98926 98936])
                ("minlength" variable nil (reparse-symbol function_parameters) [98944 98953])
                ("transform" variable nil (reparse-symbol function_parameters) [98967 98976])
                ("zorder" variable nil (reparse-symbol function_parameters) [98983 98989])
                ("start_points" variable nil (reparse-symbol function_parameters) [98996 99008])
                ("maxlength" variable nil (reparse-symbol function_parameters) [99015 99024])
                ("integration_direction" variable nil (reparse-symbol function_parameters) [99038 99059])
                ("data" variable nil (reparse-symbol function_parameters) [99071 99075]))              ) nil [98808 99534])
            ("" code nil nil [99641 99653])
            ("table" function (:arguments 
              ( ("cellText" variable nil (reparse-symbol function_parameters) [99673 99681])
                ("cellColours" variable nil (reparse-symbol function_parameters) [99688 99699])
                ("cellLoc" variable nil (reparse-symbol function_parameters) [99706 99713])
                ("colWidths" variable nil (reparse-symbol function_parameters) [99731 99740])
                ("rowLabels" variable nil (reparse-symbol function_parameters) [99747 99756])
                ("rowColours" variable nil (reparse-symbol function_parameters) [99763 99773])
                ("rowLoc" variable nil (reparse-symbol function_parameters) [99788 99794])
                ("colLabels" variable nil (reparse-symbol function_parameters) [99803 99812])
                ("colColours" variable nil (reparse-symbol function_parameters) [99819 99829])
                ("colLoc" variable nil (reparse-symbol function_parameters) [99844 99850])
                ("loc" variable nil (reparse-symbol function_parameters) [99861 99864])
                ("bbox" variable nil (reparse-symbol function_parameters) [99875 99879])
                ("edges" variable nil (reparse-symbol function_parameters) [99886 99891])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99910 99918]))              ) nil [99654 100228])
            ("" code nil nil [100335 100346])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [100356 100357])
                ("y" variable nil (reparse-symbol function_parameters) [100359 100360])
                ("s" variable nil (reparse-symbol function_parameters) [100362 100363])
                ("fontdict" variable nil (reparse-symbol function_parameters) [100365 100373])
                ("kwargs" variable nil (reparse-symbol function_parameters) [100380 100388]))              ) nil [100347 100451])
            ("" code nil nil [100558 100576])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [100593 100597])
                ("kwargs" variable nil (reparse-symbol function_parameters) [100606 100614]))              ) nil [100577 100667])
            ("" code nil nil [100774 100797])
            ("ticklabel_format" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [100831 100835])
                ("style" variable nil (reparse-symbol function_parameters) [100844 100849])
                ("scilimits" variable nil (reparse-symbol function_parameters) [100854 100863])
                ("useOffset" variable nil (reparse-symbol function_parameters) [100870 100879])
                ("useLocale" variable nil (reparse-symbol function_parameters) [100894 100903])
                ("useMathText" variable nil (reparse-symbol function_parameters) [100910 100921]))              ) nil [100798 101100])
            ("" code nil nil [101207 101224])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [101240 101245])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101247 101255]))              ) nil [101225 101369])
            ("" code nil nil [101476 101494])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [101511 101516])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101518 101526]))              ) nil [101495 101641])
            ("" code nil nil [101748 101764])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [101788 101793])
                ("alpha" variable nil (reparse-symbol function_parameters) [101795 101800])
                ("norm" variable nil (reparse-symbol function_parameters) [101806 101810])
                ("cmap" variable nil (reparse-symbol function_parameters) [101817 101821])
                ("vmin" variable nil (reparse-symbol function_parameters) [101828 101832])
                ("vmax" variable nil (reparse-symbol function_parameters) [101839 101843])
                ("shading" variable nil (reparse-symbol function_parameters) [101858 101865])
                ("facecolors" variable nil (reparse-symbol function_parameters) [101874 101884])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101891 101899]))              ) nil [101765 102093])
            ("" code nil nil [102200 102214])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [102227 102232])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102234 102242]))              ) nil [102215 102287])
            ("" code nil nil [102394 102411])
            ("violinplot" function (:arguments 
              ( ("dataset" variable nil (reparse-symbol function_parameters) [102436 102443])
                ("positions" variable nil (reparse-symbol function_parameters) [102445 102454])
                ("vert" variable nil (reparse-symbol function_parameters) [102461 102465])
                ("widths" variable nil (reparse-symbol function_parameters) [102472 102478])
                ("showmeans" variable nil (reparse-symbol function_parameters) [102492 102501])
                ("showextrema" variable nil (reparse-symbol function_parameters) [102509 102520])
                ("showmedians" variable nil (reparse-symbol function_parameters) [102527 102538])
                ("quantiles" variable nil (reparse-symbol function_parameters) [102554 102563])
                ("points" variable nil (reparse-symbol function_parameters) [102570 102576])
                ("bw_method" variable nil (reparse-symbol function_parameters) [102582 102591])
                ("data" variable nil (reparse-symbol function_parameters) [102601 102605]))              ) nil [102412 102914])
            ("" code nil nil [103021 103034])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [103055 103056])
                ("ymin" variable nil (reparse-symbol function_parameters) [103058 103062])
                ("ymax" variable nil (reparse-symbol function_parameters) [103064 103068])
                ("colors" variable nil (reparse-symbol function_parameters) [103070 103076])
                ("linestyles" variable nil (reparse-symbol function_parameters) [103083 103093])
                ("label" variable nil (reparse-symbol function_parameters) [103103 103108])
                ("data" variable nil (reparse-symbol function_parameters) [103124 103128])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103135 103143]))              ) nil [103035 103319])
            ("" code nil nil [103426 103438])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [103458 103459])
                ("y" variable nil (reparse-symbol function_parameters) [103461 103462])
                ("normed" variable nil (reparse-symbol function_parameters) [103464 103470])
                ("detrend" variable nil (reparse-symbol function_parameters) [103477 103484])
                ("usevlines" variable nil (reparse-symbol function_parameters) [103504 103513])
                ("maxlags" variable nil (reparse-symbol function_parameters) [103528 103535])
                ("data" variable nil (reparse-symbol function_parameters) [103543 103547])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103554 103562]))              ) nil [103439 103747])
            ("" code nil nil [103854 103865])
            ("sci" function (:arguments 
              ( ("im" variable nil (reparse-symbol function_parameters) [103874 103876]))              ) nil [103866 103905])
            ("" code nil nil [104012 104028])
            ("title" function (:arguments 
              ( ("label" variable nil (reparse-symbol function_parameters) [104039 104044])
                ("fontdict" variable nil (reparse-symbol function_parameters) [104046 104054])
                ("loc" variable nil (reparse-symbol function_parameters) [104061 104064])
                ("pad" variable nil (reparse-symbol function_parameters) [104071 104074])
                ("y" variable nil (reparse-symbol function_parameters) [104084 104085])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104092 104100]))              ) nil [104029 104198])
            ("" code nil nil [104305 104322])
            ("xlabel" function (:arguments 
              ( ("xlabel" variable nil (reparse-symbol function_parameters) [104334 104340])
                ("fontdict" variable nil (reparse-symbol function_parameters) [104342 104350])
                ("labelpad" variable nil (reparse-symbol function_parameters) [104357 104365])
                ("loc" variable nil (reparse-symbol function_parameters) [104375 104378])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104385 104393]))              ) nil [104323 104506])
            ("" code nil nil [104613 104630])
            ("ylabel" function (:arguments 
              ( ("ylabel" variable nil (reparse-symbol function_parameters) [104642 104648])
                ("fontdict" variable nil (reparse-symbol function_parameters) [104650 104658])
                ("labelpad" variable nil (reparse-symbol function_parameters) [104665 104673])
                ("loc" variable nil (reparse-symbol function_parameters) [104683 104686])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104693 104701]))              ) nil [104631 104814])
            ("" code nil nil [104921 104938])
            ("xscale" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [104950 104955])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104957 104965]))              ) nil [104939 105013])
            ("" code nil nil [105120 105137])
            ("yscale" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [105149 105154])
                ("kwargs" variable nil (reparse-symbol function_parameters) [105156 105164]))              ) nil [105138 105212])
            ("autumn" function nil nil [105287 105320])
            ("bone" function nil nil [105320 105349])
            ("cool" function nil nil [105349 105378])
            ("copper" function nil nil [105378 105411])
            ("flag" function nil nil [105411 105440])
            ("gray" function nil nil [105440 105469])
            ("hot" function nil nil [105469 105496])
            ("hsv" function nil nil [105496 105523])
            ("jet" function nil nil [105523 105550])
            ("pink" function nil nil [105550 105579])
            ("prism" function nil nil [105579 105610])
            ("spring" function nil nil [105610 105643])
            ("summer" function nil nil [105643 105676])
            ("winter" function nil nil [105676 105709])
            ("magma" function nil nil [105709 105740])
            ("inferno" function nil nil [105740 105775])
            ("plasma" function nil nil [105775 105808])
            ("viridis" function nil nil [105808 105843])
            ("nipy_spectral" function nil nil [105843 105890])
            ("_setup_pyplot_info_docstrings" code nil nil [105892 105923]))          
      :file "pyplot.py"
      :pointmax 105924
      :fsize 105924
      :lastmodtime '(25218 25732 441936 36000)
      :unmatched-syntax '((MULT 104680 . 104681) (COMMA 104681 . 104682) (MULT 104372 . 104373) (COMMA 104373 . 104374) (MULT 104081 . 104082) (COMMA 104082 . 104083) (MULT 103540 . 103541) (COMMA 103541 . 103542) (MULT 103113 . 103114) (COMMA 103114 . 103115) (MULT 102598 . 102599) (COMMA 102599 . 102600) (MULT 100828 . 100829) (COMMA 100829 . 100830) (MULT 99068 . 99069) (COMMA 99069 . 99070) (MULT 96589 . 96590) (COMMA 96590 . 96591) (MULT 95454 . 95455) (COMMA 95455 . 95456) (MULT 94373 . 94374) (COMMA 94374 . 94375) (MULT 93902 . 93903) (COMMA 93903 . 93904) (MULT 92911 . 92912) (COMMA 92912 . 92913) (MULT 92313 . 92314) (COMMA 92314 . 92315) (MULT 90280 . 90281) (COMMA 90281 . 90282) (MULT 88861 . 88862) (COMMA 88862 . 88863) (MULT 88388 . 88389) (COMMA 88389 . 88390) (MULT 87934 . 87935) (COMMA 87935 . 87936) (MULT 87443 . 87444) (COMMA 87444 . 87445) (MULT 86913 . 86914) (COMMA 86914 . 86915) (MULT 86091 . 86092) (COMMA 86092 . 86093) (MULT 85235 . 85236) (COMMA 85236 . 85237) (MULT 84824 . 84825) (COMMA 84825 . 84826) (MULT 84065 . 84066) (COMMA 84066 . 84067) (MULT 83416 . 83417) (COMMA 83417 . 83418) (MULT 82762 . 82763) (COMMA 82763 . 82764) (MULT 81517 . 81518) (COMMA 81518 . 81519) (MULT 80856 . 80857) (COMMA 80857 . 80858) (MULT 80022 . 80023) (COMMA 80023 . 80024) (MULT 79243 . 79244) (COMMA 79244 . 79245) (MULT 78952 . 78953) (COMMA 78953 . 78954) (MULT 78330 . 78331) (COMMA 78331 . 78332) (MULT 77603 . 77604) (COMMA 77604 . 77605) (MULT 75917 . 75918) (COMMA 75918 . 75919) (MULT 75583 . 75584) (COMMA 75584 . 75585) (MULT 75101 . 75102) (COMMA 75102 . 75103) (MULT 48940 . 48941) (COMMA 48941 . 48942) (MULT 43847 . 43848) (COMMA 43848 . 43849) (NAME 25721 . 25729) (IF 25749 . 25751) (ELSE 25760 . 25764) (INDENT_BLOCK 5648 . 5782) (NEWLINE 5647 . 5648) (COLON 5646 . 5647) (TRY 5540 . 5543) (AS 5640 . 5642) (FROM 2478 . 2482) (PERIOD 2483 . 2484)))
    (semanticdb-table "semanticdb-table-157fb4a84dc8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Colorbars are a visualization of the mapping from scalar values to colors.
In Matplotlib they are drawn into a dedicated `~.axes.Axes`.

.. note::
   Colorbars are typically created through `.Figure.colorbar` or its pyplot
   wrapper `.pyplot.colorbar`, which internally use `.Colorbar` together with
   `.make_axes_gridspec` (for `.GridSpec`-positioned axes) or `.make_axes` (for
   non-`.GridSpec`-positioned axes).

   End-users most likely won't need to directly use this module's API.
\"\"\"" code nil nil [1 498])
            ("copy" include nil nil [500 511])
            ("logging" include nil nil [512 526])
            ("textwrap" include nil nil [527 542])
            ("numpy" include nil nil [544 562])
            ("matplotlib" include nil nil [564 588])
            ("matplotlib" include nil nil [589 658])
            ("matplotlib.artist" include nil nil [659 694])
            ("matplotlib.patches" include nil nil [695 732])
            ("matplotlib.path" include nil nil [733 764])
            ("matplotlib.scale" include nil nil [765 798])
            ("matplotlib.spines" include nil nil [799 834])
            ("matplotlib.transforms" include nil nil [835 878])
            ("matplotlib" include nil nil [879 911])
            ("_log" variable nil nil [913 947])
            ("_make_axes_param_doc" variable nil nil [949 1985])
            ("_make_axes_other_param_doc" variable nil nil [1986 2513])
            ("_colormap_kw_doc" variable nil nil [2515 5865])
            ("docstring" code nil nil [5867 8362])
            ("__getattr__" type
               (:members 
                  ( ("colorbar_doc" variable nil (reparse-symbol indented_block_body) [8446 8570])
                    ("colorbar_kw_doc" variable nil (reparse-symbol indented_block_body) [8575 8678])
                    ("make_axes_kw_doc" variable nil (reparse-symbol indented_block_body) [8683 8820]))                  
                :type "class")
                nil [8423 8821])
            ("_set_ticks_on_axis_warn" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [8851 8856])
                ("kw" variable nil (reparse-symbol function_parameters) [8858 8862]))              ) nil [8823 9048])
            ("_ColorbarSpine" type
               (:superclasses ("mspines.Spine")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9125 9140])
                            ("super" code nil (reparse-symbol indented_block_body) [9149 9251])
                            ("mpatches" code nil (reparse-symbol indented_block_body) [9260 9310]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9104 9108])
                            ("axes" variable nil (reparse-symbol function_parameters) [9110 9114]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9091 9311])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9338 9342])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9344 9352]))                          )
                        (reparse-symbol indented_block_body) [9316 9616])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9632 9636])
                            ("xy" variable nil (reparse-symbol function_parameters) [9638 9640]))                          )
                        (reparse-symbol indented_block_body) [9621 9740])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9754 9758])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9760 9768]))                          )
                        (reparse-symbol indented_block_body) [9745 9867]))                  
                :type "class")
                nil [9050 9867])
            ("_ColorbarAxesLocator" type
               (:documentation "
    Shrink the axes if there are triangular or rectangular extends.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10019 10036])
                            ("self" variable nil (reparse-symbol indented_block_body) [10045 10087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9998 10002])
                            ("cbar" variable nil (reparse-symbol function_parameters) [10004 10008]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9985 10088])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10106 10110])
                            ("ax" variable nil (reparse-symbol function_parameters) [10112 10114])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10116 10124]))                          )
                        (reparse-symbol indented_block_body) [10093 11364])
                    ("get_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11389 11393]))                          )
                        (reparse-symbol indented_block_body) [11369 11683]))                  
                :type "class")
                nil [9869 11683])
            ("Colorbar" type
               (:members 
                  ( ("r\"\"\"
    Draw a colorbar in an existing axes.

    Typically, colorbars are created using `.Figure.colorbar` or
    `.pyplot.colorbar` and associated with `.ScalarMappable`\\s (such as an
    `.AxesImage` generated via `~.axes.Axes.imshow`).

    In order to draw a colorbar not associated with other elements in the
    figure, e.g. when showing a colormap by itself, one can create an empty
    `.ScalarMappable`, or directly pass *cmap* and *norm* instead of *mappable*
    to `Colorbar`.

    Useful public methods are :meth:`set_label` and :meth:`add_lines`.

    Attributes
    ----------
    ax : `~matplotlib.axes.Axes`
        The `~.axes.Axes` instance in which the colorbar is drawn.
    lines : list
        A list of `.LineCollection` (empty if no lines were drawn).
    dividers : `.LineCollection`
        A LineCollection (empty if *drawedges* is ``False``).

    Parameters
    ----------
    ax : `~matplotlib.axes.Axes`
        The `~.axes.Axes` instance in which the colorbar is drawn.

    mappable : `.ScalarMappable`
        The mappable whose colormap and norm will be used.

        To show the under- and over- value colors, the mappable's norm should
        be specified as ::

            norm = colors.Normalize(clip=False)

        To show the colors versus index instead of on a 0-1 scale, use::

            norm=colors.NoNorm()

    cmap : `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
        The colormap to use.  This parameter is ignored, unless *mappable* is
        None.

    norm : `~matplotlib.colors.Normalize`
        The normalization to use.  This parameter is ignored, unless *mappable*
        is None.

    alpha : float
        The colorbar transparency between 0 (transparent) and 1 (opaque).

    values, boundaries
        If unset, the colormap will be displayed on a 0-1 scale.

    orientation : {'vertical', 'horizontal'}

    ticklocation : {'auto', 'left', 'right', 'top', 'bottom'}

    extend : {'neither', 'both', 'min', 'max'}

    spacing : {'uniform', 'proportional'}

    ticks : `~matplotlib.ticker.Locator` or array-like of float

    format : str or `~matplotlib.ticker.Formatter`

    drawedges : bool

    filled : bool

    extendfrac

    extendrec

    label : str
    \"\"\"" code nil (reparse-symbol indented_block_body) [11705 13962])
                    ("n_rasterize" variable nil (reparse-symbol indented_block_body) [13968 13984])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [14638 14722])
                            ("if" code nil (reparse-symbol indented_block_body) [14865 14940])
                            ("self" variable nil (reparse-symbol indented_block_body) [14949 14973])
                            ("cmap" variable nil (reparse-symbol indented_block_body) [14982 15002])
                            ("norm" variable nil (reparse-symbol indented_block_body) [15011 15031])
                            ("if" code nil (reparse-symbol indented_block_body) [15041 15464])
                            ("mappable" variable nil (reparse-symbol indented_block_body) [15473 15497])
                            ("mappable" variable nil (reparse-symbol indented_block_body) [15506 15600])
                            ("_api" code nil (reparse-symbol indented_block_body) [15610 15694])
                            ("_api" code nil (reparse-symbol indented_block_body) [15703 15817])
                            ("_api" code nil (reparse-symbol indented_block_body) [15826 15903])
                            ("self" variable nil (reparse-symbol indented_block_body) [15913 15925])
                            ("self" variable nil (reparse-symbol indented_block_body) [15934 15984])
                            ("if" code nil (reparse-symbol indented_block_body) [15994 16331])
                            ("self" variable nil (reparse-symbol indented_block_body) [16339 16356])
                            ("self" code nil (reparse-symbol indented_block_body) [16427 16448])
                            ("self" variable nil (reparse-symbol indented_block_body) [16457 16473])
                            ("self" variable nil (reparse-symbol indented_block_body) [16482 16498])
                            ("self" variable nil (reparse-symbol indented_block_body) [16507 16527])
                            ("self" variable nil (reparse-symbol indented_block_body) [16536 16564])
                            ("self" variable nil (reparse-symbol indented_block_body) [16573 16593])
                            ("self" variable nil (reparse-symbol indented_block_body) [16602 16783])
                            ("self" variable nil (reparse-symbol indented_block_body) [16792 16814])
                            ("self" variable nil (reparse-symbol indented_block_body) [16823 16853])
                            ("self" variable nil (reparse-symbol indented_block_body) [16862 16888])
                            ("self" variable nil (reparse-symbol indented_block_body) [16897 16917])
                            ("self" variable nil (reparse-symbol indented_block_body) [16926 16954])
                            ("self" variable nil (reparse-symbol indented_block_body) [16963 16991])
                            ("self" variable nil (reparse-symbol indented_block_body) [17000 17025])
                            ("self" variable nil (reparse-symbol indented_block_body) [17034 17052])
                            ("self" variable nil (reparse-symbol indented_block_body) [17061 17085])
                            ("self" variable nil (reparse-symbol indented_block_body) [17094 17109])
                            ("for" code nil (reparse-symbol indented_block_body) [17119 17194])
                            ("self" variable nil (reparse-symbol indented_block_body) [17202 17268])
                            ("self" code nil (reparse-symbol indented_block_body) [17277 17314])
                            ("self" variable nil (reparse-symbol indented_block_body) [17403 17541])
                            ("ax" code nil (reparse-symbol indented_block_body) [17550 17576])
                            ("self" variable nil (reparse-symbol indented_block_body) [17586 17761])
                            ("self" code nil (reparse-symbol indented_block_body) [17770 17807])
                            ("self" variable nil (reparse-symbol indented_block_body) [17817 17836])
                            ("self" variable nil (reparse-symbol indented_block_body) [17845 17869])
                            ("self" variable nil (reparse-symbol indented_block_body) [17878 17899])
                            ("self" variable nil (reparse-symbol indented_block_body) [17908 17927])
                            ("if" code nil (reparse-symbol indented_block_body) [17980 18087])
                            ("self" variable nil (reparse-symbol indented_block_body) [18095 18127])
                            ("self" code nil (reparse-symbol indented_block_body) [18137 18158])
                            ("self" code nil (reparse-symbol indented_block_body) [18167 18204])
                            ("if" code nil (reparse-symbol indented_block_body) [18214 18389])
                            ("if" code nil (reparse-symbol indented_block_body) [18398 18575])
                            ("self" code nil (reparse-symbol indented_block_body) [18583 18598])
                            ("if" code nil (reparse-symbol indented_block_body) [18608 18714])
                            ("self" variable nil (reparse-symbol indented_block_body) [18780 18804])
                            ("if" code nil (reparse-symbol indented_block_body) [18873 19044])
                            ("self" variable nil (reparse-symbol indented_block_body) [19130 19252])
                            ("for" code nil (reparse-symbol indented_block_body) [19261 19345])
                            ("self" variable nil (reparse-symbol indented_block_body) [19420 19448])
                            ("self" variable nil (reparse-symbol indented_block_body) [19534 19626])
                            ("self" variable nil (reparse-symbol indented_block_body) [19635 19727]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14058 14062])
                            ("ax" variable nil (reparse-symbol function_parameters) [14064 14066])
                            ("mappable" variable nil (reparse-symbol function_parameters) [14068 14076])
                            ("cmap" variable nil (reparse-symbol function_parameters) [14086 14090])
                            ("norm" variable nil (reparse-symbol function_parameters) [14114 14118])
                            ("alpha" variable nil (reparse-symbol function_parameters) [14142 14147])
                            ("values" variable nil (reparse-symbol function_parameters) [14171 14177])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [14201 14211])
                            ("orientation" variable nil (reparse-symbol function_parameters) [14235 14246])
                            ("ticklocation" variable nil (reparse-symbol function_parameters) [14276 14288])
                            ("extend" variable nil (reparse-symbol function_parameters) [14314 14320])
                            ("spacing" variable nil (reparse-symbol function_parameters) [14344 14351])
                            ("ticks" variable nil (reparse-symbol function_parameters) [14407 14412])
                            ("format" variable nil (reparse-symbol function_parameters) [14436 14442])
                            ("drawedges" variable nil (reparse-symbol function_parameters) [14466 14475])
                            ("filled" variable nil (reparse-symbol function_parameters) [14500 14506])
                            ("extendfrac" variable nil (reparse-symbol function_parameters) [14530 14540])
                            ("extendrect" variable nil (reparse-symbol function_parameters) [14564 14574])
                            ("label" variable nil (reparse-symbol function_parameters) [14599 14604]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14045 19728])
                    ("_cbar_cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19747 19751]))                          
                        :documentation "Function to clear the interactive colorbar state.")
                        (reparse-symbol indented_block_body) [19733 20007])
                    ("patch" variable nil (reparse-symbol indented_block_body) [20065 20132])
                    ("update_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20156 20160])
                            ("mappable" variable nil (reparse-symbol function_parameters) [20162 20170]))                          
                        :documentation "
        Update solid patches, lines, etc.

        This is meant to be called when the norm of the image or contour plot
        to which this colorbar belongs changes.

        If the norm on the mappable is different than before, this resets the
        locator and formatter for the axis, so if these have been customized,
        they will need to be customized again.  However, if the norm only
        changes values of *vmin*, *vmax* or *cmap* then the old formatter
        and locator will be preserved.
        ")
                        (reparse-symbol indented_block_body) [20138 21231])
                    ("draw_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21249 21253]))                          
                        :documentation "
        Calculate any free parameters based on the current cmap and norm,
        and do all the drawing.
        ")
                        (reparse-symbol indented_block_body) [21236 23358])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23379 23383])
                            ("X" variable nil (reparse-symbol function_parameters) [23385 23386])
                            ("Y" variable nil (reparse-symbol function_parameters) [23388 23389])
                            ("C" variable nil (reparse-symbol function_parameters) [23391 23392]))                          
                        :documentation "Draw the colors; optionally add separators.")
                        (reparse-symbol indented_block_body) [23363 24426])
                    ("_add_solids_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24455 24459])
                            ("X" variable nil (reparse-symbol function_parameters) [24461 24462])
                            ("Y" variable nil (reparse-symbol function_parameters) [24464 24465])
                            ("C" variable nil (reparse-symbol function_parameters) [24467 24468])
                            ("mappable" variable nil (reparse-symbol function_parameters) [24470 24478]))                          )
                        (reparse-symbol indented_block_body) [24431 25201])
                    ("_do_extends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25222 25226])
                            ("ax" variable nil (reparse-symbol function_parameters) [25228 25230]))                          
                        :documentation "
        Add the extend tri/rectangles on the outside of the axes.

        ax is unused, but required due to the callbacks on xlim/ylim changed
        ")
                        (reparse-symbol indented_block_body) [25206 28908])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28927 28931])
                            ("args" variable nil (reparse-symbol function_parameters) [28933 28938])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28940 28948]))                          
                        :documentation "
        Draw lines on the colorbar.

        The lines are appended to the list :attr:`lines`.

        Parameters
        ----------
        levels : array-like
            The positions of the lines.
        colors : color or list of colors
            Either a single color applying to all lines or one color value for
            each line.
        linewidths : float or array-like
            Either a single linewidth applying to all lines or one linewidth
            for each line.
        erase : bool, default: True
            Whether to remove any previously added lines.

        Notes
        -----
        Alternatively, this method can also be called with the signature
        ``colorbar.add_lines(contour_set, erase=True)``, in which case
        *levels*, *colors*, and *linewidths* are taken from *contour_set*.
        ")
                        (reparse-symbol indented_block_body) [28913 32116])
                    ("update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32138 32142]))                          
                        :documentation "
        Setup the ticks and ticklabels. This should not be needed by users.
        ")
                        (reparse-symbol indented_block_body) [32121 32552])
                    ("_get_ticker_locator_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32591 32595]))                          
                        :documentation "
        Return the ``locator`` and ``formatter`` of the colorbar.

        If they have not been defined (i.e. are *None*), the formatter and
        locator are retrieved from the axis, or from the value of the
        boundaries for a boundary norm.

        Called by update_ticks...
        ")
                        (reparse-symbol indented_block_body) [32557 34350])
                    ("" code nil (reparse-symbol indented_block_body) [34377 34400])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34419 34423])
                            ("ticks" variable nil (reparse-symbol function_parameters) [34425 34430])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [34432 34444])
                            ("labels" variable nil (reparse-symbol function_parameters) [34451 34457])
                            ("minor" variable nil (reparse-symbol function_parameters) [34485 34490])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34498 34506]))                          
                        :documentation "
        Set tick locations.

        Parameters
        ----------
        ticks : list of floats
            List of tick locations.
        labels : list of str, optional
            List of tick labels. If not set, the labels show the data value.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
        ")
                        (reparse-symbol indented_block_body) [34405 35423])
                    ("get_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35442 35446])
                            ("minor" variable nil (reparse-symbol function_parameters) [35448 35453]))                          
                        :documentation "
        Return the ticks as a list of locations.

        Parameters
        ----------
        minor : boolean, default: False
            if True return the minor ticks.
        ")
                        (reparse-symbol indented_block_body) [35428 35804])
                    ("" code nil (reparse-symbol indented_block_body) [35831 35854])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35878 35882])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [35884 35894])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [35896 35908])
                            ("minor" variable nil (reparse-symbol function_parameters) [35918 35923])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35954 35962]))                          
                        :documentation "
        Set tick labels.

        .. admonition:: Discouraged

            The use of this method is discouraged, because of the dependency
            on tick positions. In most cases, you'll want to use
            ``set_ticks(positions, labels=labels)`` instead.

            If you are using this method, you should always fix the tick
            positions before, e.g. by using `.Colorbar.set_ticks` or by
            explicitly setting a `~.ticker.FixedLocator` on the long axis
            of the colorbar. Otherwise, ticks are free to move and the
            labels may end up in unexpected positions.

        Parameters
        ----------
        ticklabels : sequence of str or of `.Text`
            Texts for labeling each tick location in the sequence set by
            `.Colorbar.set_ticks`; the number of labels must match the number
            of locations.

        update_ticks : bool, default: True
            This keyword argument is ignored and will be be removed.
            Deprecated

         minor : bool
            If True, set minor ticks instead of major ticks.

        **kwargs
            `.Text` properties for the labels.
        ")
                        (reparse-symbol indented_block_body) [35859 37229])
                    ("minorticks_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37252 37256]))                          
                        :documentation "
        Turn on colorbar minor ticks.
        ")
                        (reparse-symbol indented_block_body) [37234 37486])
                    ("minorticks_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37510 37514]))                          
                        :documentation "Turn the minor ticks of the colorbar off.")
                        (reparse-symbol indented_block_body) [37491 37685])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37704 37708])
                            ("label" variable nil (reparse-symbol function_parameters) [37710 37715])
                            ("loc" variable nil (reparse-symbol function_parameters) [37720 37723])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37730 37738]))                          
                        :documentation "
        Add a label to the long axis of the colorbar.

        Parameters
        ----------
        label : str
            The label text.
        loc : str, optional
            The location of the label.

            - For horizontal orientation one of {'left', 'center', 'right'}
            - For vertical orientation one of {'bottom', 'center', 'top'}

            Defaults to :rc:`xaxis.labellocation` or :rc:`yaxis.labellocation`
            depending on the orientation.
        **kwargs
            Keyword arguments are passed to `~.Axes.set_xlabel` /
            `~.Axes.set_ylabel`.
            Supported keywords are *labelpad* and `.Text` properties.
        ")
                        (reparse-symbol indented_block_body) [37690 38629])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38648 38652])
                            ("alpha" variable nil (reparse-symbol function_parameters) [38654 38659]))                          
                        :documentation "
        Set the transparency between 0 (transparent) and 1 (opaque).

        If an array is provided, *alpha* will be set to None to use the
        transparency values associated with the colormap.
        ")
                        (reparse-symbol indented_block_body) [38634 38956])
                    ("_set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38976 38980])
                            ("scale" variable nil (reparse-symbol function_parameters) [38982 38987])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38989 38997]))                          
                        :documentation "
        Set the colorbar long axis scale.

        Parameters
        ----------
        value : {\"linear\", \"log\", \"symlog\", \"logit\", ...} or `.ScaleBase`
            The axis scale type to apply.

        **kwargs
            Different keyword arguments are accepted, depending on the scale.
            See the respective class keyword arguments:

            - `matplotlib.scale.LinearScale`
            - `matplotlib.scale.LogScale`
            - `matplotlib.scale.SymmetricalLogScale`
            - `matplotlib.scale.LogitScale`
            - `matplotlib.scale.FuncScale`

        Notes
        -----
        By default, Matplotlib supports the above mentioned scales.
        Additionally, custom scales may be registered using
        `matplotlib.scale.register_scale`. These scales can then also
        be used here.
        ")
                        (reparse-symbol indented_block_body) [38961 40136])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40152 40156]))                          
                        :documentation "
        Remove this colorbar from the figure.

        If the colorbar was created with ``use_gridspec=True`` the previous
        gridspec is restored.
        ")
                        (reparse-symbol indented_block_body) [40141 41359])
                    ("_ticker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41376 41380])
                            ("locator" variable nil (reparse-symbol function_parameters) [41382 41389])
                            ("formatter" variable nil (reparse-symbol function_parameters) [41391 41400]))                          
                        :documentation "
        Return the sequence of ticks (colorbar data locations),
        ticklabels (strings), and the corresponding offset string.
        ")
                        (reparse-symbol indented_block_body) [41364 42405])
                    ("_process_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42430 42434]))                          
                        :documentation "
        Set `_boundaries` and `_values` based on the self.boundaries and
        self.values if not None, or based on the size of the colormap and
        the vmin/vmax of the norm.
        ")
                        (reparse-symbol indented_block_body) [42410 44610])
                    ("_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44625 44629]))                          
                        :documentation "
        Return the coordinate arrays for the colorbar pcolormesh/patches.

        These are scaled between vmin and vmax, and already handle colorbar
        orientation.
        ")
                        (reparse-symbol indented_block_body) [44615 45881])
                    ("_forward_boundaries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45910 45914])
                            ("x" variable nil (reparse-symbol function_parameters) [45916 45917]))                          )
                        (reparse-symbol indented_block_body) [45886 46318])
                    ("_inverse_boundaries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46347 46351])
                            ("x" variable nil (reparse-symbol function_parameters) [46353 46354]))                          )
                        (reparse-symbol indented_block_body) [46323 46474])
                    ("_reset_locator_formatter_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46514 46518]))                          
                        :documentation "
        Reset the locator et al to defaults.  Any user-hardcoded changes
        need to be re-entered if this gets called (either at init, or when
        the mappable normal gets changed: Colorbar.update_normal)
        ")
                        (reparse-symbol indented_block_body) [46479 47755])
                    ("_locate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47772 47776])
                            ("x" variable nil (reparse-symbol function_parameters) [47778 47779]))                          
                        :documentation "
        Given a set of color data values, return their
        corresponding colorbar data coordinates.
        ")
                        (reparse-symbol indented_block_body) [47760 48407])
                    ("_uniform_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48450 48454])
                            ("N" variable nil (reparse-symbol function_parameters) [48456 48457]))                          
                        :documentation "
        Return colorbar data coordinates for *N* uniformly
        spaced boundaries, plus extension lengths if required.
        ")
                        (reparse-symbol indented_block_body) [48435 48914])
                    ("_proportional_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48939 48943]))                          
                        :documentation "
        Return colorbar data coordinates for the boundaries of
        a proportional colorbar, plus extension lengths if required:
        ")
                        (reparse-symbol indented_block_body) [48919 50608])
                    ("_get_extension_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50640 50644])
                            ("frac" variable nil (reparse-symbol function_parameters) [50646 50650])
                            ("automin" variable nil (reparse-symbol function_parameters) [50652 50659])
                            ("automax" variable nil (reparse-symbol function_parameters) [50661 50668])
                            ("default" variable nil (reparse-symbol function_parameters) [50670 50677]))                          
                        :documentation "
        Return the lengths of colorbar extensions.

        This is a helper method for _uniform_y and _proportional_y.
        ")
                        (reparse-symbol indented_block_body) [50613 51722])
                    ("_extend_lower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51745 51749]))                          
                        :documentation "Return whether the lower limit is open ended.")
                        (reparse-symbol indented_block_body) [51727 51929])
                    ("_extend_upper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51952 51956]))                          
                        :documentation "Return whether the upper limit is open ended.")
                        (reparse-symbol indented_block_body) [51934 52136])
                    ("_long_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52156 52160]))                          
                        :documentation "Return the long axis")
                        (reparse-symbol indented_block_body) [52141 52303])
                    ("_short_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52324 52328]))                          
                        :documentation "Return the short axis")
                        (reparse-symbol indented_block_body) [52308 52472])
                    ("_get_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52491 52495]))                          )
                        (reparse-symbol indented_block_body) [52477 52643])
                    ("_set_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52662 52666])
                            ("view" variable nil (reparse-symbol function_parameters) [52668 52672]))                          )
                        (reparse-symbol indented_block_body) [52648 52820])
                    ("_set_view_from_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52849 52853])
                            ("bbox" variable nil (reparse-symbol function_parameters) [52855 52859])
                            ("direction" variable nil (reparse-symbol function_parameters) [52861 52870])
                            ("mode" variable nil (reparse-symbol function_parameters) [52905 52909])
                            ("twinx" variable nil (reparse-symbol function_parameters) [52916 52921])
                            ("twiny" variable nil (reparse-symbol function_parameters) [52929 52934]))                          )
                        (reparse-symbol indented_block_body) [52825 53393])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53411 53415])
                            ("button" variable nil (reparse-symbol function_parameters) [53417 53423])
                            ("key" variable nil (reparse-symbol function_parameters) [53425 53428])
                            ("x" variable nil (reparse-symbol function_parameters) [53430 53431])
                            ("y" variable nil (reparse-symbol function_parameters) [53433 53434]))                          )
                        (reparse-symbol indented_block_body) [53398 53780]))                  
                :type "class")
                nil [11685 53780])
            ("ColorbarBase" variable nil nil [53782 53805])
            ("_normalize_location_orientation" function (:arguments 
              ( ("location" variable nil (reparse-symbol function_parameters) [53862 53870])
                ("orientation" variable nil (reparse-symbol function_parameters) [53872 53883]))              ) nil [53826 54949])
            ("" code nil nil [54974 55024])
            ("make_axes" function
               (:documentation "
    Create an `~.axes.Axes` suitable for a colorbar.

    The axes is placed in the figure of the *parents* axes, by resizing and
    repositioning *parents*.

    Parameters
    ----------
    parents : `~.axes.Axes` or list of `~.axes.Axes`
        The Axes to use as parents for placing the colorbar.
    %s

    Returns
    -------
    cax : `~.axes.Axes`
        The child axes.
    kw : dict
        The reduced keyword dictionary to be passed when creating the colorbar
        instance.

    Other Parameters
    ----------------
    %s
    "
                :arguments 
                  ( ("parents" variable nil (reparse-symbol function_parameters) [55039 55046])
                    ("location" variable nil (reparse-symbol function_parameters) [55048 55056])
                    ("orientation" variable nil (reparse-symbol function_parameters) [55063 55074])
                    ("fraction" variable nil (reparse-symbol function_parameters) [55081 55089])
                    ("shrink" variable nil (reparse-symbol function_parameters) [55110 55116])
                    ("aspect" variable nil (reparse-symbol function_parameters) [55122 55128])
                    ("kw" variable nil (reparse-symbol function_parameters) [55133 55137]))                  )
                nil [55025 58609])
            ("" code nil nil [58634 58684])
            ("make_axes_gridspec" function
               (:documentation "
    Create a `.SubplotBase` suitable for a colorbar.

    The axes is placed in the figure of the *parent* axes, by resizing and
    repositioning *parent*.

    This function is similar to `.make_axes`. Primary differences are

    - `.make_axes_gridspec` should only be used with a `.SubplotBase` parent.

    - `.make_axes` creates an `~.axes.Axes`; `.make_axes_gridspec` creates a
      `.SubplotBase`.

    - `.make_axes` updates the position of the parent.  `.make_axes_gridspec`
      replaces the ``grid_spec`` attribute of the parent with a new one.

    While this function is meant to be compatible with `.make_axes`,
    there could be some minor differences.

    Parameters
    ----------
    parent : `~.axes.Axes`
        The Axes to use as parent for placing the colorbar.
    %s

    Returns
    -------
    cax : `~.axes.SubplotBase`
        The child axes.
    kw : dict
        The reduced keyword dictionary to be passed when creating the colorbar
        instance.

    Other Parameters
    ----------------
    %s
    "
                :arguments 
                  ( ("parent" variable nil (reparse-symbol function_parameters) [58708 58714])
                    ("location" variable nil (reparse-symbol function_parameters) [58719 58727])
                    ("orientation" variable nil (reparse-symbol function_parameters) [58734 58745])
                    ("fraction" variable nil (reparse-symbol function_parameters) [58775 58783])
                    ("shrink" variable nil (reparse-symbol function_parameters) [58790 58796])
                    ("aspect" variable nil (reparse-symbol function_parameters) [58802 58808])
                    ("kw" variable nil (reparse-symbol function_parameters) [58813 58817]))                  )
                nil [58685 62394])
            ("" code nil nil [62412 62443])
            ("ColorbarPatch" type
               (:superclasses ("Colorbar")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [62479 62483]))                  
                :type "class")
                nil [62444 62484])
            ("" code nil nil [62502 62533])
            ("colorbar_factory" function
               (:documentation "
    Create a colorbar on the given axes for the given mappable.

    .. note::
        This is a low-level function to turn an existing axes into a colorbar
        axes.  Typically, you'll want to use `~.Figure.colorbar` instead, which
        automatically handles creation and placement of a suitable axes as
        well.

    Parameters
    ----------
    cax : `~matplotlib.axes.Axes`
        The `~.axes.Axes` to turn into a colorbar.
    mappable : `~matplotlib.cm.ScalarMappable`
        The mappable to be described by the colorbar.
    **kwargs
        Keyword arguments are passed to the respective colorbar class.

    Returns
    -------
    `.Colorbar`
        The created colorbar instance.
    "
                :arguments 
                  ( ("cax" variable nil (reparse-symbol function_parameters) [62555 62558])
                    ("mappable" variable nil (reparse-symbol function_parameters) [62560 62568])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [62570 62578]))                  )
                nil [62534 63349]))          
      :file "colorbar.py"
      :pointmax 63349
      :fsize 63348
      :lastmodtime '(25218 25732 428602 691000)
      :unmatched-syntax '((MULT 58716 . 58717) (COMMA 58717 . 58718) (NAME 56478 . 56482) (IF 56490 . 56492) (ELSE 56522 . 56526) (NAME 52027 . 52033) (IF 52042 . 52044) (ELSE 52078 . 52082) (NAME 51820 . 51826) (IF 51835 . 51837) (ELSE 51871 . 51875) (INDENT_BLOCK 51620 . 51694) (NEWLINE 51543 . 51544) (COLON 51542 . 51543) (TRY 51169 . 51172) (AS 51536 . 51538) (NAME 38894 . 38898) (IF 38912 . 38914) (ELSE 38945 . 38949) (MULT 37717 . 37718) (COMMA 37718 . 37719) (MULT 35915 . 35916) (COMMA 35916 . 35917) (MULT 34464 . 34465) (COMMA 34465 . 34466) (NAME 28291 . 28294) (IF 28299 . 28301) (ELSE 28335 . 28339) (NAME 27298 . 27301) (IF 27307 . 27309) (ELSE 27343 . 27347) (NAME 18019 . 18031) (IF 18043 . 18045) (ELSE 18074 . 18078) (MULT 14083 . 14084) (COMMA 14084 . 14085)))
    (semanticdb-table "semanticdb-table-157fb4f7d058"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The image module supports basic image loading, rescaling and display
operations.
\"\"\"" code nil nil [1 89])
            ("math" include nil nil [91 102])
            ("os" include nil nil [103 112])
            ("logging" include nil nil [113 127])
            ("pathlib" include nil nil [128 152])
            ("numpy" include nil nil [154 172])
            ("PIL.PngImagePlugin" include nil nil [173 198])
            ("matplotlib" include nil nil [200 224])
            ("matplotlib" include nil nil [225 252])
            ("matplotlib.artist" include nil nil [253 288])
            ("matplotlib.backend_bases" include nil nil [289 342])
            ("matplotlib.colors" include nil nil [343 378])
            ("matplotlib.cm" include nil nil [379 405])
            ("matplotlib.cbook" include nil nil [406 438])
            ("matplotlib._image" include nil nil [509 543])
            ("matplotlib._image" include nil nil [636 667])
            ("" code nil nil [702 805])
            ("_log" variable nil nil [807 841])
            ("_interpd_" variable nil nil [891 1578])
            ("interpolations_names" variable nil nil [1580 1617])
            ("composite_images" function
               (:documentation "
    Composite a number of RGBA images into one.  The images are
    composited in the order in which they appear in the *images* list.

    Parameters
    ----------
    images : list of Images
        Each must have a `make_image` method.  For each image,
        `can_composite` should return `True`, though this is not
        enforced by this function.  Each image must have a purely
        affine transformation with no shear.

    renderer : `.RendererBase`

    magnification : float, default: 1
        The additional magnification to apply for the renderer in use.

    Returns
    -------
    image : uint8 array (M, N, 4)
        The composited RGBA image.
    offset_x, offset_y : float
        The (left, bottom) offset where the composited image should be placed
        in the output figure.
    "
                :arguments 
                  ( ("images" variable nil (reparse-symbol function_parameters) [1641 1647])
                    ("renderer" variable nil (reparse-symbol function_parameters) [1649 1657])
                    ("magnification" variable nil (reparse-symbol function_parameters) [1659 1672]))                  )
                nil [1620 3452])
            ("_draw_list_compositing_images" function
               (:documentation "
    Draw a sorted list of artists, compositing images into a single
    image where possible.

    For internal Matplotlib use only: It is here to reduce duplication
    between `Figure.draw` and `Axes.draw`, but otherwise should not be
    generally useful.
    "
                :arguments 
                  ( ("renderer" variable nil (reparse-symbol function_parameters) [3497 3505])
                    ("parent" variable nil (reparse-symbol function_parameters) [3507 3513])
                    ("artists" variable nil (reparse-symbol function_parameters) [3515 3522])
                    ("suppress_composite" variable nil (reparse-symbol function_parameters) [3524 3542]))                  )
                nil [3454 5182])
            ("_resample" function
               (:documentation "
    Convenience wrapper around `._image.resample` to resample *data* to
    *out_shape* (with a third dimension if *data* is RGBA) that takes care of
    allocating the output array and fetching the relevant properties from the
    Image object *image_obj*.
    "
                :arguments 
                  ( ("image_obj" variable nil (reparse-symbol function_parameters) [5207 5216])
                    ("data" variable nil (reparse-symbol function_parameters) [5218 5222])
                    ("out_shape" variable nil (reparse-symbol function_parameters) [5224 5233])
                    ("transform" variable nil (reparse-symbol function_parameters) [5235 5244])
                    ("resample" variable nil (reparse-symbol function_parameters) [5249 5257])
                    ("alpha" variable nil (reparse-symbol function_parameters) [5264 5269]))                  )
                nil [5184 6855])
            ("_rgb_to_rgba" function
               (:documentation "
    Convert an RGB image to RGBA, as required by the image resample C++
    extension.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [6874 6875]))                  )
                nil [6857 7181])
            ("_ImageBase" type
               (:documentation "
    Base class for images.

    interpolation and cmap default to their rc settings

    cmap is a colors.Colormap instance
    norm is a colors.Normalize instance to map luminance to 0-1

    extent is data axes (left, right, bottom, top) for making image plots
    registered with data plots.  Default is to label the pixel
    centers with the zero-based row and column indices.

    Additional kwargs are matplotlib.artist properties
    "
                :superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [7694 7704])
                    ("__init__" function
                       (:suite 
                          ( ("martist" code nil (reparse-symbol indented_block_body) [8072 8101])
                            ("cm" code nil (reparse-symbol indented_block_body) [8110 8154])
                            ("if" code nil (reparse-symbol indented_block_body) [8163 8232])
                            ("_api" code nil (reparse-symbol indented_block_body) [8240 8293])
                            ("self" variable nil (reparse-symbol indented_block_body) [8302 8322])
                            ("self" code nil (reparse-symbol indented_block_body) [8331 8362])
                            ("self" code nil (reparse-symbol indented_block_body) [8371 8400])
                            ("self" code nil (reparse-symbol indented_block_body) [8409 8446])
                            ("self" code nil (reparse-symbol indented_block_body) [8455 8504])
                            ("self" code nil (reparse-symbol indented_block_body) [8513 8540])
                            ("self" variable nil (reparse-symbol indented_block_body) [8549 8563])
                            ("self" variable nil (reparse-symbol indented_block_body) [8573 8593])
                            ("self" code nil (reparse-symbol indented_block_body) [8603 8622]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7723 7727])
                            ("ax" variable nil (reparse-symbol function_parameters) [7729 7731])
                            ("cmap" variable nil (reparse-symbol function_parameters) [7750 7754])
                            ("norm" variable nil (reparse-symbol function_parameters) [7778 7782])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [7806 7819])
                            ("origin" variable nil (reparse-symbol function_parameters) [7843 7849])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [7873 7883])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [7907 7916])
                            ("resample" variable nil (reparse-symbol function_parameters) [7939 7947])
                            ("interpolation_stage" variable nil (reparse-symbol function_parameters) [7992 8011])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8035 8043]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7710 8623])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8645 8649]))                          )
                        (reparse-symbol indented_block_body) [8628 8798])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8816 8820]))                          
                        :documentation "Return the size of the image as tuple (numrows, numcols).")
                        (reparse-symbol indented_block_body) [8803 9026])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9045 9049])
                            ("alpha" variable nil (reparse-symbol function_parameters) [9051 9056]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.

        Parameters
        ----------
        alpha : float or 2D array-like or None
        ")
                        (reparse-symbol indented_block_body) [9031 9491])
                    ("_get_scalar_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9518 9522]))                          
                        :documentation "
        Get a scalar alpha value to be applied to the artist as a whole.

        If the alpha value is a matrix, the method returns 1.0 because pixels
        have individual alpha values (see `~._ImageBase._make_image` for
        details). If the alpha value is a scalar, the method returns said value
        to be applied to the artist as a whole because pixels do not have
        individual alpha values.
        ")
                        (reparse-symbol indented_block_body) [9496 10062])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10079 10083]))                          
                        :documentation "
        Call this whenever the mappable is changed so observers can update.
        ")
                        (reparse-symbol indented_block_body) [10067 10286])
                    ("_make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10307 10311])
                            ("A" variable nil (reparse-symbol function_parameters) [10313 10314])
                            ("in_bbox" variable nil (reparse-symbol function_parameters) [10316 10323])
                            ("out_bbox" variable nil (reparse-symbol function_parameters) [10325 10333])
                            ("clip_bbox" variable nil (reparse-symbol function_parameters) [10335 10344])
                            ("magnification" variable nil (reparse-symbol function_parameters) [10346 10359])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [10385 10394])
                            ("round_to_pixel_border" variable nil (reparse-symbol function_parameters) [10402 10423]))                          
                        :documentation "
        Normalize, rescale, and colormap the image *A* from the given *in_bbox*
        (in data space), to the given *out_bbox* (in pixel space) clipped to
        the given *clip_bbox* (also in pixel space), and magnified by the
        *magnification* factor.

        *A* may be a greyscale image (M, N) with a dtype of float32, float64,
        float128, uint16 or uint8, or an (M, N, 4) RGBA image with a dtype of
        float32, float64, float128, or uint8.

        If *unsampled* is True, the image will not be scaled, but an
        appropriate affine transformation will be returned instead.

        If *round_to_pixel_border* is True, the output image size will be
        rounded to the nearest pixel boundary.  This makes the images align
        correctly with the axes.  It should not be used if exact scaling is
        needed, such as for `FigureImage`.

        Returns
        -------
        image : (M, N, 4) uint8 array
            The RGBA image, resampled unless *unsampled* is True.
        x, y : float
            The upper left corner where the image should be drawn, in pixel
            space.
        trans : Affine2D
            The affine transformation from image to pixel space.
        ")
                        (reparse-symbol indented_block_body) [10291 24395])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24415 24419])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24421 24429])
                            ("magnification" variable nil (reparse-symbol function_parameters) [24431 24444])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [24450 24459]))                          
                        :documentation "
        Normalize, rescale, and colormap this image's data for rendering using
        *renderer*, with the given *magnification*.

        If *unsampled* is True, the image will not be scaled, but an
        appropriate affine transformation will be returned instead.

        Returns
        -------
        image : (M, N, 4) uint8 array
            The RGBA image, resampled unless *unsampled* is True.
        x, y : float
            The upper left corner where the image should be drawn, in pixel
            space.
        trans : Affine2D
            The affine transformation from image to pixel space.
        ")
                        (reparse-symbol indented_block_body) [24400 25182])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25214 25218]))                          
                        :documentation "
        Return whether the image is better to be drawn unsampled.

        The derived class needs to override it.
        ")
                        (reparse-symbol indented_block_body) [25187 25381])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25428 25432])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25434 25442])
                            ("args" variable nil (reparse-symbol function_parameters) [25444 25449])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25451 25459]))                          
                        :decorators 
                          ( ("martist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25386 26628])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26646 26650])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [26652 26662]))                          
                        :documentation "Test whether the mouse event occurred within the image.")
                        (reparse-symbol indented_block_body) [26633 28010])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28029 28033])
                            ("fname" variable nil (reparse-symbol function_parameters) [28035 28040]))                          
                        :documentation "Write the image to png file *fname*.")
                        (reparse-symbol indented_block_body) [28015 28281])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28299 28303])
                            ("A" variable nil (reparse-symbol function_parameters) [28305 28306]))                          
                        :documentation "
        Set the image array.

        Note that this function does *not* update the normalization used.

        Parameters
        ----------
        A : array-like or `PIL.Image.Image`
        ")
                        (reparse-symbol indented_block_body) [28286 30366])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30385 30389])
                            ("A" variable nil (reparse-symbol function_parameters) [30391 30392]))                          
                        :documentation "
        Retained for backwards compatibility - use set_data instead.

        Parameters
        ----------
        A : array-like
        ")
                        (reparse-symbol indented_block_body) [30371 30716])
                    ("get_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30743 30747]))                          
                        :documentation "
        Return the interpolation method the image uses when resizing.

        One of 'antialiased', 'nearest', 'bilinear', 'bicubic', 'spline16',
        'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric',
        'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos',
        or 'none'.
        ")
                        (reparse-symbol indented_block_body) [30721 31120])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31147 31151])
                            ("s" variable nil (reparse-symbol function_parameters) [31153 31154]))                          
                        :documentation "
        Set the interpolation method the image uses when resizing.

        If None, use :rc:`image.interpolation`. If 'none', the image is
        shown as is without interpolating. 'none' is only supported in
        agg, ps and pdf backends and will fall back to 'nearest' mode
        for other backends.

        Parameters
        ----------
        s : {'antialiased', 'nearest', 'bilinear', 'bicubic', 'spline16', \\
'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', \\
'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', 'none'} or None
        ")
                        (reparse-symbol indented_block_body) [31125 31961])
                    ("set_interpolation_stage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31994 31998])
                            ("s" variable nil (reparse-symbol function_parameters) [32000 32001]))                          
                        :documentation "
        Set when interpolation happens during the transform to RGBA.

        Parameters
        ----------
        s : {'data', 'rgba'} or None
            Whether to apply up/downsampling interpolation in data or rgba
            space.
        ")
                        (reparse-symbol indented_block_body) [31966 32461])
                    ("can_composite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32484 32488]))                          
                        :documentation "Return whether the image can be composited with its neighbors.")
                        (reparse-symbol indented_block_body) [32466 32732])
                    ("set_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32754 32758])
                            ("v" variable nil (reparse-symbol function_parameters) [32760 32761]))                          
                        :documentation "
        Set whether image resampling is used.

        Parameters
        ----------
        v : bool or None
            If None, use :rc:`image.resample`.
        ")
                        (reparse-symbol indented_block_body) [32737 33067])
                    ("get_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33089 33093]))                          
                        :documentation "Return whether image resampling is used.")
                        (reparse-symbol indented_block_body) [33072 33181])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33205 33209])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [33211 33221]))                          
                        :documentation "
        Set whether the resize filter normalizes the weights.

        See help for `~.Axes.imshow`.

        Parameters
        ----------
        filternorm : bool
        ")
                        (reparse-symbol indented_block_body) [33186 33484])
                    ("get_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33508 33512]))                          
                        :documentation "Return whether the resize filter normalizes the weights.")
                        (reparse-symbol indented_block_body) [33489 33618])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33641 33645])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [33647 33656]))                          
                        :documentation "
        Set the resize filter radius only applicable to some
        interpolation schemes -- see help for imshow

        Parameters
        ----------
        filterrad : positive float
        ")
                        (reparse-symbol indented_block_body) [33623 34049])
                    ("get_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34072 34076]))                          
                        :documentation "Return the filterrad setting.")
                        (reparse-symbol indented_block_body) [34054 34154]))                  
                :type "class")
                nil [7183 34154])
            ("AxesImage" type
               (:documentation "
    An image attached to an Axes.

    Parameters
    ----------
    ax : `~.axes.Axes`
        The axes the image will belong to.
    cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
        The Colormap instance or registered colormap name used to map scalar
        data to colors.
    norm : `~matplotlib.colors.Normalize`
        Maps luminance to 0-1.
    interpolation : str, default: :rc:`image.interpolation`
        Supported values are 'none', 'antialiased', 'nearest', 'bilinear',
        'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',
        'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',
        'sinc', 'lanczos', 'blackman'.
    interpolation_stage : {'data', 'rgba'}, default: 'data'
        If 'data', interpolation
        is carried out on the data provided by the user.  If 'rgba', the
        interpolation is carried out after the colormapping has been
        applied (visual interpolation).
    origin : {'upper', 'lower'}, default: :rc:`image.origin`
        Place the [0, 0] index of the array in the upper left or lower left
        corner of the axes. The convention 'upper' is typically used for
        matrices and images.
    extent : tuple, optional
        The data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.
    filternorm : bool, default: True
        A parameter for the antigrain image resize filter
        (see the antigrain documentation).
        If filternorm is set, the filter normalizes integer values and corrects
        the rounding errors. It doesn't do anything with the source floating
        point values, it corrects only integers according to the rule of 1.0
        which means that any sum of pixel weights must be equal to 1.0. So,
        the filter function must produce a graph of the proper shape.
    filterrad : float > 0, default: 4
        The filter radius for filters that have a radius parameter, i.e. when
        interpolation is one of: 'sinc', 'lanczos' or 'blackman'.
    resample : bool, default: False
        When True, use a full resampling method. When False, only resample when
        the output image is larger than the input image.
    **kwargs : `.Artist` properties
    "
                :superclasses ("_ImageBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36571 36575]))                          )
                        (reparse-symbol indented_block_body) [36559 36649])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [37047 37068])
                            ("super" code nil (reparse-symbol indented_block_body) [37078 37408]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36667 36671])
                            ("ax" variable nil (reparse-symbol function_parameters) [36673 36675])
                            ("cmap" variable nil (reparse-symbol function_parameters) [36694 36698])
                            ("norm" variable nil (reparse-symbol function_parameters) [36722 36726])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [36750 36763])
                            ("origin" variable nil (reparse-symbol function_parameters) [36787 36793])
                            ("extent" variable nil (reparse-symbol function_parameters) [36817 36823])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [36847 36857])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [36881 36890])
                            ("resample" variable nil (reparse-symbol function_parameters) [36913 36921])
                            ("interpolation_stage" variable nil (reparse-symbol function_parameters) [36966 36985])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37009 37017]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36654 37409])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37436 37440])
                            ("renderer" variable nil (reparse-symbol function_parameters) [37442 37450]))                          )
                        (reparse-symbol indented_block_body) [37414 37600])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37620 37624])
                            ("renderer" variable nil (reparse-symbol function_parameters) [37626 37634])
                            ("magnification" variable nil (reparse-symbol function_parameters) [37636 37649])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [37655 37664]))                          )
                        (reparse-symbol indented_block_body) [37605 38200])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38232 38236]))                          
                        :documentation "Return whether the image would be better drawn unsampled.")
                        (reparse-symbol indented_block_body) [38205 38361])
                    ("set_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38381 38385])
                            ("extent" variable nil (reparse-symbol function_parameters) [38387 38393]))                          
                        :documentation "
        Set the image extent.

        Parameters
        ----------
        extent : 4-tuple of float
            The position and size of the image as tuple
            ``(left, right, bottom, top)`` in data coordinates.

        Notes
        -----
        This updates ``ax.dataLim``, and, if autoscaling, sets ``ax.viewLim``
        to tightly fit the image, regardless of ``dataLim``.  Autoscaling
        state is not changed, so following this with ``ax.autoscale_view()``
        will redo the autoscaling in accord with ``dataLim``.
        ")
                        (reparse-symbol indented_block_body) [38366 39407])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39427 39431]))                          
                        :documentation "Return the image extent as tuple (left, right, bottom, top).")
                        (reparse-symbol indented_block_body) [39412 39840])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39865 39869])
                            ("event" variable nil (reparse-symbol function_parameters) [39871 39876]))                          
                        :documentation "
        Return the image value at the event position or *None* if the event is
        outside the image.

        See Also
        --------
        matplotlib.artist.Artist.get_cursor_data
        ")
                        (reparse-symbol indented_block_body) [39845 40817]))                  
                :type "class")
                nil [34156 40817])
            ("NonUniformImage" type
               (:superclasses ("AxesImage")
                :members 
                  ( ("mouseover" variable nil (reparse-symbol indented_block_body) [40857 40874])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        interpolation : {'nearest', 'bilinear'}, default: 'nearest'

        **kwargs
            All other keyword arguments are identical to those of `.AxesImage`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [41006 41225])
                            ("super" code nil (reparse-symbol indented_block_body) [41234 41264])
                            ("self" code nil (reparse-symbol indented_block_body) [41273 41310]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40949 40953])
                            ("ax" variable nil (reparse-symbol function_parameters) [40955 40957])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [40962 40975])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40987 40995]))                          
                        :documentation "
        Parameters
        ----------
        interpolation : {'nearest', 'bilinear'}, default: 'nearest'

        **kwargs
            All other keyword arguments are identical to those of `.AxesImage`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40936 41311])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41343 41347]))                          
                        :documentation "Return False. Do not use unsampled image.")
                        (reparse-symbol indented_block_body) [41316 41427])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41447 41451])
                            ("renderer" variable nil (reparse-symbol function_parameters) [41453 41461])
                            ("magnification" variable nil (reparse-symbol function_parameters) [41463 41476])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [41482 41491]))                          )
                        (reparse-symbol indented_block_body) [41432 44802])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44820 44824])
                            ("x" variable nil (reparse-symbol function_parameters) [44826 44827])
                            ("y" variable nil (reparse-symbol function_parameters) [44829 44830])
                            ("A" variable nil (reparse-symbol function_parameters) [44832 44833]))                          
                        :documentation "
        Set the grid for the pixel centers, and the pixel values.

        Parameters
        ----------
        x, y : 1D array-like
            Monotonic arrays of shapes (N,) and (M,), respectively, specifying
            pixel centers.
        A : array-like
            (M, N) ndarray or masked array of values to be colormapped, or
            (M, N, 3) RGB array, or (M, N, 4) RGBA array.
        ")
                        (reparse-symbol indented_block_body) [44807 45989])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46008 46012])
                            ("args" variable nil (reparse-symbol function_parameters) [46014 46019]))                          )
                        (reparse-symbol indented_block_body) [45994 46080])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46107 46111])
                            ("s" variable nil (reparse-symbol function_parameters) [46113 46114]))                          
                        :documentation "
        Parameters
        ----------
        s : {'nearest', 'bilinear'} or None
            If None, use :rc:`image.interpolation`.
        ")
                        (reparse-symbol indented_block_body) [46085 46521])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46541 46545]))                          )
                        (reparse-symbol indented_block_body) [46526 46698])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46722 46726])
                            ("s" variable nil (reparse-symbol function_parameters) [46728 46729]))                          )
                        (reparse-symbol indented_block_body) [46703 46745])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46768 46772])
                            ("s" variable nil (reparse-symbol function_parameters) [46774 46775]))                          )
                        (reparse-symbol indented_block_body) [46750 46791])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46809 46813])
                            ("norm" variable nil (reparse-symbol function_parameters) [46815 46819]))                          )
                        (reparse-symbol indented_block_body) [46796 46959])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46977 46981])
                            ("cmap" variable nil (reparse-symbol function_parameters) [46983 46987]))                          )
                        (reparse-symbol indented_block_body) [46964 47127]))                  
                :type "class")
                nil [40819 47127])
            ("PcolorImage" type
               (:documentation "
    Make a pcolor-style plot with an irregular rectangular grid.

    This uses a variation of the original irregular image code,
    and it is used by pcolorfast for the corresponding grid type.
    "
                :superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : `~.axes.Axes`
            The axes the image will belong to.
        x, y : 1D array-like, optional
            Monotonic arrays of length N+1 and M+1, respectively, specifying
            rectangle boundaries.  If not given, will default to
            ``range(N + 1)`` and ``range(M + 1)``, respectively.
        A : array-like
            The data to be color-coded. The interpretation depends on the
            shape:

            - (M, N) ndarray or masked array: values to be colormapped
            - (M, N, 3): RGB array
            - (M, N, 4): RGBA array

        cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
            The Colormap instance or registered colormap name used to map
            scalar data to colors.
        norm : `~matplotlib.colors.Normalize`
            Maps luminance to 0-1.
        **kwargs : `.Artist` properties
        \"\"\"" code nil (reparse-symbol indented_block_body) [47583 48525])
                            ("super" code nil (reparse-symbol indented_block_body) [48534 48576])
                            ("self" code nil (reparse-symbol indented_block_body) [48585 48604])
                            ("if" code nil (reparse-symbol indented_block_body) [48613 48666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47388 47392])
                            ("ax" variable nil (reparse-symbol function_parameters) [47394 47396])
                            ("x" variable nil (reparse-symbol function_parameters) [47415 47416])
                            ("y" variable nil (reparse-symbol function_parameters) [47440 47441])
                            ("A" variable nil (reparse-symbol function_parameters) [47465 47466])
                            ("cmap" variable nil (reparse-symbol function_parameters) [47490 47494])
                            ("norm" variable nil (reparse-symbol function_parameters) [47518 47522])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47546 47554]))                          
                        :documentation "
        Parameters
        ----------
        ax : `~.axes.Axes`
            The axes the image will belong to.
        x, y : 1D array-like, optional
            Monotonic arrays of length N+1 and M+1, respectively, specifying
            rectangle boundaries.  If not given, will default to
            ``range(N + 1)`` and ``range(M + 1)``, respectively.
        A : array-like
            The data to be color-coded. The interpretation depends on the
            shape:

            - (M, N) ndarray or masked array: values to be colormapped
            - (M, N, 3): RGB array
            - (M, N, 4): RGBA array

        cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
            The Colormap instance or registered colormap name used to map
            scalar data to colors.
        norm : `~matplotlib.colors.Normalize`
            Maps luminance to 0-1.
        **kwargs : `.Artist` properties
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47375 48666])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48686 48690])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48692 48700])
                            ("magnification" variable nil (reparse-symbol function_parameters) [48702 48715])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [48721 48730]))                          )
                        (reparse-symbol indented_block_body) [48671 50139])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50171 50175]))                          )
                        (reparse-symbol indented_block_body) [50144 50199])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50217 50221])
                            ("x" variable nil (reparse-symbol function_parameters) [50223 50224])
                            ("y" variable nil (reparse-symbol function_parameters) [50226 50227])
                            ("A" variable nil (reparse-symbol function_parameters) [50229 50230]))                          
                        :documentation "
        Set the grid for the rectangle boundaries, and the data values.

        Parameters
        ----------
        x, y : 1D array-like, optional
            Monotonic arrays of length N+1 and M+1, respectively, specifying
            rectangle boundaries.  If not given, will default to
            ``range(N + 1)`` and ``range(M + 1)``, respectively.
        A : array-like
            The data to be color-coded. The interpretation depends on the
            shape:

            - (M, N) ndarray or masked array: values to be colormapped
            - (M, N, 3): RGB array
            - (M, N, 4): RGBA array
        ")
                        (reparse-symbol indented_block_body) [50204 52065])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52084 52088])
                            ("args" variable nil (reparse-symbol function_parameters) [52090 52095]))                          )
                        (reparse-symbol indented_block_body) [52070 52156])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52181 52185])
                            ("event" variable nil (reparse-symbol function_parameters) [52187 52192]))                          )
                        (reparse-symbol indented_block_body) [52161 52581]))                  
                :type "class")
                nil [47129 52581])
            ("FigureImage" type
               (:documentation "An image attached to a figure."
                :superclasses ("_ImageBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [52660 52670])
                    ("_interpolation" variable nil (reparse-symbol indented_block_body) [52676 52702])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [52928 53114])
                            ("super" code nil (reparse-symbol indented_block_body) [53123 53240])
                            ("self" variable nil (reparse-symbol indented_block_body) [53249 53266])
                            ("self" variable nil (reparse-symbol indented_block_body) [53275 53292])
                            ("self" variable nil (reparse-symbol indented_block_body) [53301 53318])
                            ("self" code nil (reparse-symbol indented_block_body) [53327 53346])
                            ("self" variable nil (reparse-symbol indented_block_body) [53355 53379]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52721 52725])
                            ("fig" variable nil (reparse-symbol function_parameters) [52727 52730])
                            ("cmap" variable nil (reparse-symbol function_parameters) [52749 52753])
                            ("norm" variable nil (reparse-symbol function_parameters) [52777 52781])
                            ("offsetx" variable nil (reparse-symbol function_parameters) [52805 52812])
                            ("offsety" variable nil (reparse-symbol function_parameters) [52833 52840])
                            ("origin" variable nil (reparse-symbol function_parameters) [52861 52867])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52891 52899]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52708 53380])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53400 53404]))                          
                        :documentation "Return the image extent as tuple (left, right, bottom, top).")
                        (reparse-symbol indented_block_body) [53385 53635])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53655 53659])
                            ("renderer" variable nil (reparse-symbol function_parameters) [53661 53669])
                            ("magnification" variable nil (reparse-symbol function_parameters) [53671 53684])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [53690 53699]))                          )
                        (reparse-symbol indented_block_body) [53640 54475])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54493 54497])
                            ("A" variable nil (reparse-symbol function_parameters) [54499 54500]))                          
                        :documentation "Set the image array.")
                        (reparse-symbol indented_block_body) [54480 54609]))                  
                :type "class")
                nil [52583 54609])
            ("BboxImage" type
               (:documentation "The Image class whose size is determined by the given bbox."
                :superclasses ("_ImageBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [55016 55202])
                            ("super" code nil (reparse-symbol indented_block_body) [55211 55490])
                            ("self" variable nil (reparse-symbol indented_block_body) [55499 55515]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54728 54732])
                            ("bbox" variable nil (reparse-symbol function_parameters) [54734 54738])
                            ("cmap" variable nil (reparse-symbol function_parameters) [54757 54761])
                            ("norm" variable nil (reparse-symbol function_parameters) [54785 54789])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [54813 54826])
                            ("origin" variable nil (reparse-symbol function_parameters) [54850 54856])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [54880 54890])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [54914 54923])
                            ("resample" variable nil (reparse-symbol function_parameters) [54946 54954])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54979 54987]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54715 55516])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55543 55547])
                            ("renderer" variable nil (reparse-symbol function_parameters) [55549 55557]))                          )
                        (reparse-symbol indented_block_body) [55521 55865])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55883 55887])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [55889 55899]))                          
                        :documentation "Test whether the mouse event occurred within the image.")
                        (reparse-symbol indented_block_body) [55870 56328])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56348 56352])
                            ("renderer" variable nil (reparse-symbol function_parameters) [56354 56362])
                            ("magnification" variable nil (reparse-symbol function_parameters) [56364 56377])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [56383 56392]))                          )
                        (reparse-symbol indented_block_body) [56333 56867]))                  
                :type "class")
                nil [54611 56867])
            ("imread" function
               (:documentation "
    Read an image from a file into an array.

    .. note::

        This function exists for historical reasons.  It is recommended to
        use `PIL.Image.open` instead for loading images.

    Parameters
    ----------
    fname : str or file-like
        The image file to read: a filename, a URL or a file-like object opened
        in read-binary mode.

        Passing a URL is deprecated.  Please open the URL
        for reading and pass the result to Pillow, e.g. with
        ``np.array(PIL.Image.open(urllib.request.urlopen(url)))``.
    format : str, optional
        The image file format assumed for reading the data.  The image is
        loaded as a PNG file if *format* is set to \"png\", if *fname* is a path
        or opened file with a \".png\" extension, or if it is an URL.  In all
        other cases, *format* is ignored and the format is auto-detected by
        `PIL.Image.open`.

    Returns
    -------
    `numpy.array`
        The image data. The returned array has shape

        - (M, N) for grayscale images.
        - (M, N, 3) for RGB images.
        - (M, N, 4) for RGBA images.

        PNG images are returned as float arrays (0-1).  All other formats are
        returned as int arrays, with a bit depth determined by the file's
        contents.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [56880 56885])
                    ("format" variable nil (reparse-symbol function_parameters) [56887 56893]))                  )
                nil [56869 60731])
            ("imsave" function
               (:documentation "
    Save an array as an image file.

    Parameters
    ----------
    fname : str or path-like or file-like
        A path or a file-like object to store the image in.
        If *format* is not set, then the output format is inferred from the
        extension of *fname*, if any, and from :rc:`savefig.format` otherwise.
        If *format* is set, it determines the output format.
    arr : array-like
        The image data. The shape can be one of
        MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA).
    vmin, vmax : float, optional
        *vmin* and *vmax* set the color scaling for the image by fixing the
        values that map to the colormap color limits. If either *vmin*
        or *vmax* is None, that limit is determined from the *arr*
        min/max value.
    cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`
        A Colormap instance or registered colormap name. The colormap
        maps scalar data to colors. It is ignored for RGB(A) data.
    format : str, optional
        The file format, e.g. 'png', 'pdf', 'svg', ...  The behavior when this
        is unset is documented under *fname*.
    origin : {'upper', 'lower'}, default: :rc:`image.origin`
        Indicates whether the ``(0, 0)`` index of the array is in the upper
        left or lower left corner of the axes.
    dpi : float
        The DPI to store in the metadata of the file.  This does not affect the
        resolution of the output image.  Depending on file format, this may be
        rounded to the nearest integer.
    metadata : dict, optional
        Metadata in the image file.  The supported keys depend on the output
        format, see the documentation of the respective backends for more
        information.
    pil_kwargs : dict, optional
        Keyword arguments passed to `PIL.Image.Image.save`.  If the 'pnginfo'
        key is present, it completely overrides *metadata*, including the
        default 'Software' key.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [60744 60749])
                    ("arr" variable nil (reparse-symbol function_parameters) [60751 60754])
                    ("vmin" variable nil (reparse-symbol function_parameters) [60756 60760])
                    ("vmax" variable nil (reparse-symbol function_parameters) [60767 60771])
                    ("cmap" variable nil (reparse-symbol function_parameters) [60778 60782])
                    ("format" variable nil (reparse-symbol function_parameters) [60789 60795])
                    ("origin" variable nil (reparse-symbol function_parameters) [60813 60819])
                    ("dpi" variable nil (reparse-symbol function_parameters) [60826 60829])
                    ("metadata" variable nil (reparse-symbol function_parameters) [60838 60846])
                    ("pil_kwargs" variable nil (reparse-symbol function_parameters) [60853 60863]))                  )
                nil [60733 66133])
            ("pil_to_array" function
               (:documentation "
    Load a `PIL image`_ and return it as a numpy int array.

    .. _PIL image: https://pillow.readthedocs.io/en/latest/reference/Image.html

    Returns
    -------
    numpy.array

        The array shape depends on the image type:

        - (M, N) for grayscale images.
        - (M, N, 3) for RGB images.
        - (M, N, 4) for RGBA images.
    "
                :arguments 
                  ( ("pilImage" variable nil (reparse-symbol function_parameters) [66152 66160]))                  )
                nil [66135 67285])
            ("_pil_png_to_float_array" function
               (:documentation "Convert a PIL `PNGImageFile` to a 0-1 float array."
                :arguments 
                  ( ("pil_png" variable nil (reparse-symbol function_parameters) [67315 67322]))                  )
                nil [67287 68695])
            ("thumbnail" function
               (:documentation "
    Make a thumbnail of image in *infile* with output filename *thumbfile*.

    See :doc:`/gallery/misc/image_thumbnail_sgskip`.

    Parameters
    ----------
    infile : str or file-like
        The image file. Matplotlib relies on Pillow_ for image reading, and
        thus supports a wide range of file formats, including PNG, JPG, TIFF
        and others.

        .. _Pillow: https://python-pillow.org/

    thumbfile : str or file-like
        The thumbnail filename.

    scale : float, default: 0.1
        The scale factor for the thumbnail.

    interpolation : str, default: 'bilinear'
        The interpolation scheme used in the resampling. See the
        *interpolation* parameter of `~.Axes.imshow` for possible values.

    preview : bool, default: False
        If True, the default backend (presumably a user interface
        backend) will be used which will cause a figure to be raised if
        `~matplotlib.pyplot.show` is called.  If it is False, the figure is
        created using `.FigureCanvasBase` and the drawing backend is selected
        as `.Figure.savefig` would normally do.

    Returns
    -------
    `~.figure.Figure`
        The figure instance containing the thumbnail.
    "
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [68711 68717])
                    ("thumbfile" variable nil (reparse-symbol function_parameters) [68719 68728])
                    ("scale" variable nil (reparse-symbol function_parameters) [68730 68735])
                    ("interpolation" variable nil (reparse-symbol function_parameters) [68741 68754])
                    ("preview" variable nil (reparse-symbol function_parameters) [68781 68788]))                  )
                nil [68697 70785]))          
      :file "image.py"
      :pointmax 70785
      :fsize 70784
      :lastmodtime '(25218 25732 405269 337000)
      :unmatched-syntax '((INDENT_BLOCK 67160 . 67222) (NEWLINE 67159 . 67160) (COLON 67158 . 67159) (TRY 67073 . 67076) (AS 67152 . 67154) (MULT 60835 . 60836) (COMMA 60836 . 60837) (MULT 40959 . 40960) (COMMA 40960 . 40961) (MULT 36946 . 36947) (COMMA 36947 . 36948) (NAME 29653 . 29657) (IF 29664 . 29666) (ELSE 29708 . 29712) (NAME 16820 . 16824) (IF 16831 . 16833) (ELSE 16861 . 16865) (NAME 15746 . 15758) (IF 15772 . 15774) (ELSE 15784 . 15788) (RETURN 9969 . 9975) (IF 9980 . 9982) (ELSE 10045 . 10049) (MULT 7972 . 7973) (COMMA 7973 . 7974) (MULT 5246 . 5247) (COMMA 5247 . 5248)))
    (semanticdb-table "semanticdb-table-157fb2dadb28"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives that renderers and
graphics contexts must implement to serve as a Matplotlib backend.

`RendererBase`
    An abstract base class to handle drawing/rendering operations.

`FigureCanvasBase`
    The abstraction layer that separates the `.Figure` from the backend
    specific details like a user interface drawing area.

`GraphicsContextBase`
    An abstract base class that provides color, line styles, etc.

`Event`
    The base class for all of the Matplotlib event handling.  Derived classes
    such as `KeyEvent` and `MouseEvent` store the meta data like keys and
    buttons pressed, x and y locations in pixel and `~.axes.Axes` coordinates.

`ShowBase`
    The base class for the ``Show`` class of each interactive backend; the
    'show' callable is then set to ``Show.__call__``.

`ToolContainerBase`
    The base class for the Toolbar class of each interactive backend.
\"\"\"" code nil nil [1 931])
            ("collections" include nil nil [933 967])
            ("contextlib" include nil nil [968 1029])
            ("enum" include nil nil [1030 1060])
            ("functools" include nil nil [1061 1077])
            ("importlib" include nil nil [1078 1094])
            ("inspect" include nil nil [1095 1109])
            ("io" include nil nil [1110 1119])
            ("logging" include nil nil [1120 1134])
            ("os" include nil nil [1135 1144])
            ("re" include nil nil [1145 1154])
            ("sys" include nil nil [1155 1165])
            ("time" include nil nil [1166 1177])
            ("traceback" include nil nil [1178 1194])
            ("weakref" include nil nil [1195 1232])
            ("numpy" include nil nil [1234 1252])
            ("matplotlib" include nil nil [1254 1278])
            ("" code nil nil [1302 1449])
            ("matplotlib._pylab_helpers" include nil nil [1450 1491])
            ("matplotlib.backend_managers" include nil nil [1492 1543])
            ("matplotlib.cbook" include nil nil [1544 1584])
            ("matplotlib.path" include nil nil [1585 1617])
            ("matplotlib.transforms" include nil nil [1618 1660])
            ("matplotlib._enums" include nil nil [1661 1710])
            ("_log" variable nil nil [1713 1747])
            ("_default_filetypes" variable nil nil [1748 2260])
            ("_default_backends" variable nil nil [2261 2883])
            ("_safe_pyplot_import" function (:documentation "
    Import and return ``pyplot``, correctly setting the backend if one is
    already forced.
    ") nil [2886 3771])
            ("register_backend" function
               (:documentation "
    Register a backend for saving to a given file format.

    Parameters
    ----------
    format : str
        File extension
    backend : module string or canvas class
        Backend for handling file output
    description : str, default: \"\"
        Description of the file type.
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3794 3800])
                    ("backend" variable nil (reparse-symbol function_parameters) [3802 3809])
                    ("description" variable nil (reparse-symbol function_parameters) [3811 3822]))                  )
                nil [3773 4271])
            ("get_registered_canvas_class" function
               (:documentation "
    Return the registered default canvas for given file format.
    Handles deferred import of required backend.
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [4305 4311]))                  )
                nil [4273 4739])
            ("RendererBase" type
               (:documentation "
    An abstract base class to handle drawing/rendering operations.

    The following methods must be implemented in the backend for full
    functionality (though just implementing :meth:`draw_path` alone would
    give a highly capable backend):

    * :meth:`draw_path`
    * :meth:`draw_image`
    * :meth:`draw_gouraud_triangle`

    The following methods *should* be implemented in the backend for
    optimization reasons:

    * :meth:`draw_text`
    * :meth:`draw_markers`
    * :meth:`draw_path_collection`
    * :meth:`draw_quad_mesh`
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [5356 5374])
                            ("self" variable nil (reparse-symbol indented_block_body) [5383 5406])
                            ("self" variable nil (reparse-symbol indented_block_body) [5415 5454])
                            ("self" variable nil (reparse-symbol indented_block_body) [5463 5485])
                            ("self" variable nil (reparse-symbol indented_block_body) [5494 5519]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5341 5345]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5328 5520])
                    ("open_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5540 5544])
                            ("s" variable nil (reparse-symbol function_parameters) [5546 5547])
                            ("gid" variable nil (reparse-symbol function_parameters) [5549 5552]))                          
                        :documentation "
        Open a grouping element with label *s* and *gid* (if set) as id.

        Only used by the SVG renderer.
        ")
                        (reparse-symbol indented_block_body) [5525 5697])
                    ("close_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5718 5722])
                            ("s" variable nil (reparse-symbol function_parameters) [5724 5725]))                          
                        :documentation "
        Close a grouping element with label *s*.

        Only used by the SVG renderer.
        ")
                        (reparse-symbol indented_block_body) [5702 5841])
                    ("draw_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5860 5864])
                            ("gc" variable nil (reparse-symbol function_parameters) [5866 5868])
                            ("path" variable nil (reparse-symbol function_parameters) [5870 5874])
                            ("transform" variable nil (reparse-symbol function_parameters) [5876 5885])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [5887 5894]))                          
                        :documentation "Draw a `~.path.Path` instance using the given affine transform.")
                        (reparse-symbol indented_block_body) [5846 6014])
                    ("draw_markers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6036 6040])
                            ("gc" variable nil (reparse-symbol function_parameters) [6042 6044])
                            ("marker_path" variable nil (reparse-symbol function_parameters) [6046 6057])
                            ("marker_trans" variable nil (reparse-symbol function_parameters) [6059 6071])
                            ("path" variable nil (reparse-symbol function_parameters) [6073 6077])
                            ("trans" variable nil (reparse-symbol function_parameters) [6100 6105])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [6107 6114]))                          
                        :documentation "
        Draw a marker at each of *path*'s vertices (excluding control points).

        This provides a fallback implementation of draw_markers that
        makes multiple calls to :meth:`draw_path`.  Some backends may
        want to override this method in order to draw the marker only
        once and reuse it multiple times.

        Parameters
        ----------
        gc : `.GraphicsContextBase`
            The graphics context.
        marker_trans : `matplotlib.transforms.Transform`
            An affine transform applied to the marker.
        trans : `matplotlib.transforms.Transform`
            An affine transform applied to the path.
        ")
                        (reparse-symbol indented_block_body) [6019 7146])
                    ("draw_path_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7176 7180])
                            ("gc" variable nil (reparse-symbol function_parameters) [7182 7184])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [7186 7202])
                            ("paths" variable nil (reparse-symbol function_parameters) [7204 7209])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [7211 7225])
                            ("offsets" variable nil (reparse-symbol function_parameters) [7256 7263])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [7265 7276])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [7278 7288])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [7290 7300])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [7331 7341])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [7343 7353])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [7355 7367])
                            ("urls" variable nil (reparse-symbol function_parameters) [7369 7373])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [7404 7419]))                          
                        :documentation "
        Draw a collection of paths selecting drawing properties from
        the lists *facecolors*, *edgecolors*, *linewidths*,
        *linestyles* and *antialiaseds*. *offsets* is a list of
        offsets to apply to each of the paths.  The offsets in
        *offsets* are first transformed by *offsetTrans* before being
        applied.

        *offset_position* is unused now, but the argument is kept for
        backwards compatibility.

        This provides a fallback implementation of
        :meth:`draw_path_collection` that makes multiple calls to
        :meth:`draw_path`.  Some backends may want to override this in
        order to render each set of path data only once, and then
        reference that path multiple times with the different offsets,
        colors, styles etc.  The generator methods
        :meth:`_iter_collection_raw_paths` and
        :meth:`_iter_collection` are provided to help with (and
        standardize) the implementation across backends.  It is highly
        recommended to use those generators, so that changes to the
        behavior of :meth:`draw_path_collection` can be made globally.
        ")
                        (reparse-symbol indented_block_body) [7151 9578])
                    ("draw_quad_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9602 9606])
                            ("gc" variable nil (reparse-symbol function_parameters) [9608 9610])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [9612 9628])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [9630 9639])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [9641 9651])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [9676 9687])
                            ("offsets" variable nil (reparse-symbol function_parameters) [9689 9696])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [9698 9709])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [9711 9721])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [9746 9757])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [9759 9769]))                          
                        :documentation "
        Fallback implementation of :meth:`draw_quad_mesh` that generates paths
        and then calls :meth:`draw_path_collection`.
        ")
                        (reparse-symbol indented_block_body) [9583 10364])
                    ("draw_gouraud_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10395 10399])
                            ("gc" variable nil (reparse-symbol function_parameters) [10401 10403])
                            ("points" variable nil (reparse-symbol function_parameters) [10405 10411])
                            ("colors" variable nil (reparse-symbol function_parameters) [10413 10419])
                            ("transform" variable nil (reparse-symbol function_parameters) [10421 10430]))                          
                        :documentation "
        Draw a Gouraud-shaded triangle.

        Parameters
        ----------
        gc : `.GraphicsContextBase`
            The graphics context.
        points : (3, 2) array-like
            Array of (x, y) points for the triangle.
        colors : (3, 4) array-like
            RGBA colors for each point of the triangle.
        transform : `matplotlib.transforms.Transform`
            An affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [10369 10929])
                    ("draw_gouraud_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10961 10965])
                            ("gc" variable nil (reparse-symbol function_parameters) [10967 10969])
                            ("triangles_array" variable nil (reparse-symbol function_parameters) [10971 10986])
                            ("colors_array" variable nil (reparse-symbol function_parameters) [10988 11000])
                            ("transform" variable nil (reparse-symbol function_parameters) [11033 11042]))                          
                        :documentation "
        Draw a series of Gouraud triangles.

        Parameters
        ----------
        points : (N, 3, 2) array-like
            Array of *N* (x, y) points for the triangles.
        colors : (N, 3, 4) array-like
            Array of *N* RGBA colors for each point of the triangles.
        transform : `matplotlib.transforms.Transform`
            An affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [10934 11629])
                    ("_iter_collection_raw_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11665 11669])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [11671 11687])
                            ("paths" variable nil (reparse-symbol function_parameters) [11689 11694])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [11731 11745]))                          
                        :documentation "
        Helper method (along with :meth:`_iter_collection`) to implement
        :meth:`draw_path_collection` in a space-efficient manner.

        This method yields all of the base path/transform
        combinations, given a master transform, a list of paths and
        list of transforms.

        The arguments should be exactly what is passed in to
        :meth:`draw_path_collection`.

        The backend should take each yielded path and transform and
        create an object that can be referenced (reused) later.
        ")
                        (reparse-symbol indented_block_body) [11634 12717])
                    ("_iter_collection_uses_per_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12757 12761])
                            ("paths" variable nil (reparse-symbol function_parameters) [12763 12768])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [12770 12784])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12825 12832])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [12834 12844])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [12846 12856]))                          
                        :documentation "
        Compute how many times each raw path object returned by
        _iter_collection_raw_paths would be used when calling
        _iter_collection. This is intended for the backend to decide
        on the tradeoff between using the paths in-line and storing
        them once and reusing. Rounds up in case the number of uses
        is not the same for every path.
        ")
                        (reparse-symbol indented_block_body) [12722 13512])
                    ("_iter_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13538 13542])
                            ("gc" variable nil (reparse-symbol function_parameters) [13544 13546])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [13548 13564])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [13566 13580])
                            ("path_ids" variable nil (reparse-symbol function_parameters) [13607 13615])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13617 13624])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [13626 13637])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [13639 13649])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [13676 13686])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [13688 13698])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [13700 13710])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [13737 13749])
                            ("urls" variable nil (reparse-symbol function_parameters) [13751 13755])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [13757 13772]))                          
                        :documentation "
        Helper method (along with :meth:`_iter_collection_raw_paths`) to
        implement :meth:`draw_path_collection` in a space-efficient manner.

        This method yields all of the path, offset and graphics
        context combinations to draw the path collection.  The caller
        should already have looped over the results of
        :meth:`_iter_collection_raw_paths` to draw this collection.

        The arguments should be the same as that passed into
        :meth:`draw_path_collection`, with the exception of
        *path_ids*, which is a list of arbitrary objects that the
        backend will use to reference one of the paths created in the
        :meth:`_iter_collection_raw_paths` stage.

        Each yielded result is of the form::

           xo, yo, path_id, gc, rgbFace

        where *xo*, *yo* is an offset; *path_id* is one of the elements of
        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
        use for filling the path.
        ")
                        (reparse-symbol indented_block_body) [13517 16659])
                    ("get_image_magnification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16692 16696]))                          
                        :documentation "
        Get the factor by which to magnify images passed to :meth:`draw_image`.
        Allows a backend to have images at a different resolution to other
        artists.
        ")
                        (reparse-symbol indented_block_body) [16664 16914])
                    ("draw_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16934 16938])
                            ("gc" variable nil (reparse-symbol function_parameters) [16940 16942])
                            ("x" variable nil (reparse-symbol function_parameters) [16944 16945])
                            ("y" variable nil (reparse-symbol function_parameters) [16947 16948])
                            ("im" variable nil (reparse-symbol function_parameters) [16950 16952])
                            ("transform" variable nil (reparse-symbol function_parameters) [16954 16963]))                          
                        :documentation "
        Draw an RGBA image.

        Parameters
        ----------
        gc : `.GraphicsContextBase`
            A graphics context with clipping information.

        x : scalar
            The distance in physical units (i.e., dots or pixels) from the left
            hand side of the canvas.

        y : scalar
            The distance in physical units (i.e., dots or pixels) from the
            bottom side of the canvas.

        im : (N, M, 4) array-like of np.uint8
            An array of RGBA pixels.

        transform : `matplotlib.transforms.Affine2DBase`
            If and only if the concrete backend is written such that
            :meth:`option_scale_image` returns ``True``, an affine
            transformation (i.e., an `.Affine2DBase`) *may* be passed to
            :meth:`draw_image`.  The translation vector of the transformation
            is given in physical units (i.e., dots or pixels). Note that
            the transformation does not override *x* and *y*, and has to be
            applied *before* translating the result by *x* and *y* (this can
            be accomplished by adding *x* and *y* to the translation vector
            defined by *transform*).
        ")
                        (reparse-symbol indented_block_body) [16919 18229])
                    ("option_image_nocomposite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18263 18267]))                          
                        :documentation "
        Return whether image composition by Matplotlib should be skipped.

        Raster backends should usually return False (letting the C-level
        rasterizer take care of image composition); vector backends should
        usually return ``not rcParams[\"image.composite_image\"]``.
        ")
                        (reparse-symbol indented_block_body) [18234 18604])
                    ("option_scale_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18632 18636]))                          
                        :documentation "
        Return whether arbitrary affine transformations in :meth:`draw_image`
        are supported (True for most vector backends).
        ")
                        (reparse-symbol indented_block_body) [18609 18817])
                    ("draw_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18835 18839])
                            ("gc" variable nil (reparse-symbol function_parameters) [18841 18843])
                            ("x" variable nil (reparse-symbol function_parameters) [18845 18846])
                            ("y" variable nil (reparse-symbol function_parameters) [18848 18849])
                            ("s" variable nil (reparse-symbol function_parameters) [18851 18852])
                            ("prop" variable nil (reparse-symbol function_parameters) [18854 18858])
                            ("angle" variable nil (reparse-symbol function_parameters) [18860 18865])
                            ("mtext" variable nil (reparse-symbol function_parameters) [18870 18875]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [18822 18979])
                    ("draw_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18998 19002])
                            ("gc" variable nil (reparse-symbol function_parameters) [19004 19006])
                            ("x" variable nil (reparse-symbol function_parameters) [19008 19009])
                            ("y" variable nil (reparse-symbol function_parameters) [19011 19012])
                            ("s" variable nil (reparse-symbol function_parameters) [19014 19015])
                            ("prop" variable nil (reparse-symbol function_parameters) [19017 19021])
                            ("angle" variable nil (reparse-symbol function_parameters) [19023 19028])
                            ("ismath" variable nil (reparse-symbol function_parameters) [19030 19036])
                            ("mtext" variable nil (reparse-symbol function_parameters) [19044 19049]))                          
                        :documentation "
        Draw the text instance.

        Parameters
        ----------
        gc : `.GraphicsContextBase`
            The graphics context.
        x : float
            The x location of the text in display coords.
        y : float
            The y location of the text baseline in display coords.
        s : str
            The text string.
        prop : `matplotlib.font_manager.FontProperties`
            The font properties.
        angle : float
            The rotation angle in degrees anti-clockwise.
        mtext : `matplotlib.text.Text`
            The original text object to be rendered.

        Notes
        -----
        **Note for backend implementers:**

        When you are trying to determine if you have gotten your bounding box
        right (which is what enables the text layout/alignment to work
        properly), it helps to change the line in text.py::

            if 0: bbox_artist(self, renderer)

        to if 1, and then the actual bounding box will be plotted along with
        your text.
        ")
                        (reparse-symbol indented_block_body) [18984 20182])
                    ("_get_text_path_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20216 20220])
                            ("x" variable nil (reparse-symbol function_parameters) [20222 20223])
                            ("y" variable nil (reparse-symbol function_parameters) [20225 20226])
                            ("s" variable nil (reparse-symbol function_parameters) [20228 20229])
                            ("prop" variable nil (reparse-symbol function_parameters) [20231 20235])
                            ("angle" variable nil (reparse-symbol function_parameters) [20237 20242])
                            ("ismath" variable nil (reparse-symbol function_parameters) [20244 20250]))                          
                        :documentation "
        Return the text path and transform.

        Parameters
        ----------
        prop : `matplotlib.font_manager.FontProperties`
            The font property.
        s : str
            The text to be converted.
        ismath : bool or \"TeX\"
            If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [20187 21355])
                    ("_draw_text_as_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21383 21387])
                            ("gc" variable nil (reparse-symbol function_parameters) [21389 21391])
                            ("x" variable nil (reparse-symbol function_parameters) [21393 21394])
                            ("y" variable nil (reparse-symbol function_parameters) [21396 21397])
                            ("s" variable nil (reparse-symbol function_parameters) [21399 21400])
                            ("prop" variable nil (reparse-symbol function_parameters) [21402 21406])
                            ("angle" variable nil (reparse-symbol function_parameters) [21408 21413])
                            ("ismath" variable nil (reparse-symbol function_parameters) [21415 21421]))                          
                        :documentation "
        Draw the text by converting them to paths using textpath module.

        Parameters
        ----------
        prop : `matplotlib.font_manager.FontProperties`
            The font property.
        s : str
            The text to be converted.
        usetex : bool
            Whether to use usetex mode.
        ismath : bool or \"TeX\"
            If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [21360 22082])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22121 22125])
                            ("s" variable nil (reparse-symbol function_parameters) [22127 22128])
                            ("prop" variable nil (reparse-symbol function_parameters) [22130 22134])
                            ("ismath" variable nil (reparse-symbol function_parameters) [22136 22142]))                          
                        :documentation "
        Get the width, height, and descent (offset from the bottom
        to the baseline), in display coords, of the string *s* with
        `.FontProperties` *prop*.
        ")
                        (reparse-symbol indented_block_body) [22087 23275])
                    ("flipy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23290 23294]))                          
                        :documentation "
        Return whether y values increase from top to bottom.

        Note that this only affects drawing of texts and images.
        ")
                        (reparse-symbol indented_block_body) [23280 23468])
                    ("get_canvas_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23501 23505]))                          
                        :documentation "Return the canvas width and height in display coords.")
                        (reparse-symbol indented_block_body) [23473 23596])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23620 23624]))                          
                        :documentation "Return the `.TexManager` instance.")
                        (reparse-symbol indented_block_body) [23601 23846])
                    ("new_gc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23862 23866]))                          
                        :documentation "Return an instance of a `.GraphicsContextBase`.")
                        (reparse-symbol indented_block_body) [23851 23968])
                    ("points_to_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23994 23998])
                            ("points" variable nil (reparse-symbol function_parameters) [24000 24006]))                          
                        :documentation "
        Convert points to display units.

        You need to override this function (unless your backend
        doesn't have a dpi, e.g., postscript or svg).  Some imaging
        systems assume some value for pixels per inch::

            points to pixels = points * pixels_per_inch/72 * dpi/72

        Parameters
        ----------
        points : float or array-like
            a float or a numpy array of float

        Returns
        -------
        Points converted to pixels
        ")
                        (reparse-symbol indented_block_body) [23973 24544])
                    ("start_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24571 24575]))                          
                        :documentation "
        Switch to the raster renderer.

        Used by `.MixedModeRenderer`.
        ")
                        (reparse-symbol indented_block_body) [24549 24680])
                    ("stop_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24706 24710]))                          
                        :documentation "
        Switch back to the vector renderer and draw the contents of the raster
        renderer as an image on the vector renderer.

        Used by `.MixedModeRenderer`.
        ")
                        (reparse-symbol indented_block_body) [24685 24908])
                    ("start_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24930 24934]))                          
                        :documentation "
        Switch to a temporary renderer for image filtering effects.

        Currently only supported by the agg renderer.
        ")
                        (reparse-symbol indented_block_body) [24913 25084])
                    ("stop_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25105 25109])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [25111 25122]))                          
                        :documentation "
        Switch back to the original renderer.  The contents of the temporary
        renderer is processed with the *filter_func* and is drawn on the
        original renderer as an image.

        Currently only supported by the agg renderer.
        ")
                        (reparse-symbol indented_block_body) [25089 25393])
                    ("_draw_disabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25417 25421]))                          
                        :documentation "
        Context manager to temporary disable drawing.

        This is used for getting the drawn size of Artists.  This lets us
        run the draw process to update any Python state but does not pay the
        cost of the draw_XYZ calls on the canvas.
        ")
                        (reparse-symbol indented_block_body) [25398 25985]))                  
                :type "class")
                nil [4741 25985])
            ("GraphicsContextBase" type
               (:documentation "An abstract base class that provides color, line styles, etc."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26119 26136])
                            ("self" variable nil (reparse-symbol indented_block_body) [26145 26171])
                            ("self" variable nil (reparse-symbol indented_block_body) [26221 26242])
                            ("self" variable nil (reparse-symbol indented_block_body) [26298 26331])
                            ("self" variable nil (reparse-symbol indented_block_body) [26340 26361])
                            ("self" variable nil (reparse-symbol indented_block_body) [26370 26391])
                            ("self" variable nil (reparse-symbol indented_block_body) [26400 26422])
                            ("self" variable nil (reparse-symbol indented_block_body) [26431 26467])
                            ("self" variable nil (reparse-symbol indented_block_body) [26476 26501])
                            ("self" variable nil (reparse-symbol indented_block_body) [26510 26529])
                            ("self" variable nil (reparse-symbol indented_block_body) [26538 26570])
                            ("self" variable nil (reparse-symbol indented_block_body) [26579 26597])
                            ("self" variable nil (reparse-symbol indented_block_body) [26606 26665])
                            ("self" variable nil (reparse-symbol indented_block_body) [26674 26725])
                            ("self" variable nil (reparse-symbol indented_block_body) [26734 26750])
                            ("self" variable nil (reparse-symbol indented_block_body) [26759 26775])
                            ("self" variable nil (reparse-symbol indented_block_body) [26784 26801])
                            ("self" variable nil (reparse-symbol indented_block_body) [26810 26829]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26104 26108]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26091 26830])
                    ("copy_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26855 26859])
                            ("gc" variable nil (reparse-symbol function_parameters) [26861 26863]))                          
                        :documentation "Copy properties from *gc* to self.")
                        (reparse-symbol indented_block_body) [26835 27581])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27598 27602]))                          
                        :documentation "
        Restore the graphics context from the stack - needed only
        for backends that save graphics contexts on a stack.
        ")
                        (reparse-symbol indented_block_body) [27586 27756])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27775 27779]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends.
        ")
                        (reparse-symbol indented_block_body) [27761 27923])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27948 27952]))                          
                        :documentation "Return whether the object should try to do antialiased rendering.")
                        (reparse-symbol indented_block_body) [27928 28068])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28090 28094]))                          
                        :documentation "Return the `.CapStyle`.")
                        (reparse-symbol indented_block_body) [28073 28170])
                    ("get_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28198 28202]))                          
                        :documentation "
        Return the clip rectangle as a `~matplotlib.transforms.Bbox` instance.
        ")
                        (reparse-symbol indented_block_body) [28175 28338])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28361 28365]))                          
                        :documentation "
        Return the clip path in the form (path, transform), where path
        is a `~.path.Path` instance, and transform is
        an affine transform to apply to the path before clipping.
        ")
                        (reparse-symbol indented_block_body) [28343 28938])
                    ("get_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28958 28962]))                          
                        :documentation "
        Return the dash style as an (offset, dash-list) pair.

        The dash list is a even-length list that gives the ink on, ink off in
        points.  See p. 107 of to PostScript `blue book`_ for more info.

        Default value is (None, None).

        .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF
        ")
                        (reparse-symbol indented_block_body) [28943 29352])
                    ("get_forced_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29378 29382]))                          
                        :documentation "
        Return whether the value given by get_alpha() should be used to
        override any other alpha-channel values.
        ")
                        (reparse-symbol indented_block_body) [29357 29564])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29587 29591]))                          
                        :documentation "Return the `.JoinStyle`.")
                        (reparse-symbol indented_block_body) [29569 29669])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29692 29696]))                          
                        :documentation "Return the line width in points.")
                        (reparse-symbol indented_block_body) [29674 29777])
                    ("get_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29794 29798]))                          
                        :documentation "Return a tuple of three or four floats from 0-1.")
                        (reparse-symbol indented_block_body) [29782 29889])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29906 29910]))                          
                        :documentation "Return a url if one is set, None otherwise.")
                        (reparse-symbol indented_block_body) [29894 29996])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30013 30017]))                          
                        :documentation "Return the object identifier if one is set, None otherwise.")
                        (reparse-symbol indented_block_body) [30001 30119])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30137 30141]))                          
                        :documentation "
        Return the snap setting, which can be:

        * True: snap vertices to the nearest pixel center
        * False: leave vertices as-is
        * None: (auto) If the path contains only rectilinear line segments,
          round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [30124 30458])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30477 30481])
                            ("alpha" variable nil (reparse-symbol function_parameters) [30483 30488]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.

        If ``alpha=None`` (the default), the alpha components of the
        foreground and fill colors will be used to set their respective
        transparencies (where applicable); otherwise, ``alpha`` will override
        them.
        ")
                        (reparse-symbol indented_block_body) [30463 31063])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31088 31092])
                            ("b" variable nil (reparse-symbol function_parameters) [31094 31095]))                          
                        :documentation "Set whether object should be drawn with antialiased rendering.")
                        (reparse-symbol indented_block_body) [31068 31296])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31341 31345])
                            ("cs" variable nil (reparse-symbol function_parameters) [31347 31349]))                          
                        :documentation "
        Set how to draw endpoints of lines.

        Parameters
        ----------
        cs : `.CapStyle` or %(CapStyle)s
        ")
                        (reparse-symbol indented_block_body) [31301 31538])
                    ("set_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31566 31570])
                            ("rectangle" variable nil (reparse-symbol function_parameters) [31572 31581]))                          
                        :documentation "Set the clip rectangle to a `.Bbox` or None.")
                        (reparse-symbol indented_block_body) [31543 31678])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31701 31705])
                            ("path" variable nil (reparse-symbol function_parameters) [31707 31711]))                          
                        :documentation "Set the clip path to a `.TransformedPath` or None.")
                        (reparse-symbol indented_block_body) [31683 31886])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31906 31910])
                            ("dash_offset" variable nil (reparse-symbol function_parameters) [31912 31923])
                            ("dash_list" variable nil (reparse-symbol function_parameters) [31925 31934]))                          
                        :documentation "
        Set the dash style for the gc.

        Parameters
        ----------
        dash_offset : float
            The offset (usually 0).
        dash_list : array-like or None
            The on-off sequence as points.  None specifies a solid line.

        Notes
        -----
        See p. 107 of to PostScript `blue book`_ for more info.

        .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF
        ")
                        (reparse-symbol indented_block_body) [31891 32643])
                    ("set_foreground" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32667 32671])
                            ("fg" variable nil (reparse-symbol function_parameters) [32673 32675])
                            ("isRGBA" variable nil (reparse-symbol function_parameters) [32677 32683]))                          
                        :documentation "
        Set the foreground color.

        Parameters
        ----------
        fg : color
        isRGBA : bool
            If *fg* is known to be an ``(r, g, b, a)`` tuple, *isRGBA* can be
            set to True to improve performance.
        ")
                        (reparse-symbol indented_block_body) [32648 33240])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33286 33290])
                            ("js" variable nil (reparse-symbol function_parameters) [33292 33294]))                          
                        :documentation "
        Set how to draw connections between line segments.

        Parameters
        ----------
        js : `.JoinStyle` or %(JoinStyle)s
        ")
                        (reparse-symbol indented_block_body) [33245 33502])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33525 33529])
                            ("w" variable nil (reparse-symbol function_parameters) [33531 33532]))                          
                        :documentation "Set the linewidth in points.")
                        (reparse-symbol indented_block_body) [33507 33613])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33630 33634])
                            ("url" variable nil (reparse-symbol function_parameters) [33636 33639]))                          
                        :documentation "Set the url for links in compatible backends.")
                        (reparse-symbol indented_block_body) [33618 33726])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33743 33747])
                            ("id" variable nil (reparse-symbol function_parameters) [33749 33751]))                          
                        :documentation "Set the id.")
                        (reparse-symbol indented_block_body) [33731 33803])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33821 33825])
                            ("snap" variable nil (reparse-symbol function_parameters) [33827 33831]))                          
                        :documentation "
        Set the snap setting which may be:

        * True: snap vertices to the nearest pixel center
        * False: leave vertices as-is
        * None: (auto) If the path contains only rectilinear line segments,
          round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [33808 34144])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34163 34167])
                            ("hatch" variable nil (reparse-symbol function_parameters) [34169 34174]))                          
                        :documentation "Set the hatch style (for fills).")
                        (reparse-symbol indented_block_body) [34149 34252])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34271 34275]))                          
                        :documentation "Get the current hatch style.")
                        (reparse-symbol indented_block_body) [34257 34348])
                    ("get_hatch_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34372 34376])
                            ("density" variable nil (reparse-symbol function_parameters) [34378 34385]))                          
                        :documentation "Return a `.Path` for the current hatch.")
                        (reparse-symbol indented_block_body) [34353 34571])
                    ("get_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34596 34600]))                          
                        :documentation "Get the hatch color.")
                        (reparse-symbol indented_block_body) [34576 34671])
                    ("set_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34696 34700])
                            ("hatch_color" variable nil (reparse-symbol function_parameters) [34702 34713]))                          
                        :documentation "Set the hatch color.")
                        (reparse-symbol indented_block_body) [34676 34791])
                    ("get_hatch_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34820 34824]))                          
                        :documentation "Get the hatch linewidth.")
                        (reparse-symbol indented_block_body) [34796 34903])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34930 34934]))                          
                        :documentation "
        Return the sketch parameters for the artist.

        Returns
        -------
        tuple or `None`

            A 3-tuple with the following elements:

            * ``scale``: The amplitude of the wiggle perpendicular to the
              source line.
            * ``length``: The length of the wiggle along the line.
            * ``randomness``: The scale factor by which the length is
              shrunken or expanded.

            May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [34908 35491])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35518 35522])
                            ("scale" variable nil (reparse-symbol function_parameters) [35524 35529])
                            ("length" variable nil (reparse-symbol function_parameters) [35536 35542])
                            ("randomness" variable nil (reparse-symbol function_parameters) [35549 35559]))                          
                        :documentation "
        Set the sketch parameters.

        Parameters
        ----------
        scale : float, optional
            The amplitude of the wiggle perpendicular to the source line, in
            pixels.  If scale is `None`, or not provided, no sketch filter will
            be provided.
        length : float, default: 128
            The length of the wiggle along the line, in pixels.
        randomness : float, default: 16
            The scale factor by which the length is shrunken or expanded.
        ")
                        (reparse-symbol indented_block_body) [35496 36214]))                  
                :type "class")
                nil [25987 36214])
            ("TimerBase" type
               (:documentation "
    A base class for providing timer events, useful for things animations.
    Backends need to implement a few specific methods in order to use their
    own timing mechanisms so that the timer events are integrated into their
    event loops.

    Subclasses must override the following methods:

    - ``_timer_start``: Backend-specific code for starting the timer.
    - ``_timer_stop``: Backend-specific code for stopping the timer.

    Subclasses may additionally override the following methods:

    - ``_timer_set_single_shot``: Code for setting the timer to single shot
      operating mode, if supported by the timer object.  If not, the `Timer`
      class itself will store the flag and the ``_on_timer`` method should be
      overridden to support such behavior.

    - ``_timer_set_interval``: Code for setting the interval on the timer, if
      there is a method for doing so on the timer object.

    - ``_on_timer``: The internal function that any timer object should call,
      which will handle the task of running all callbacks that have been set.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        interval : int, default: 1000ms
            The time between timer events in milliseconds.  Will be stored as
            ``timer.interval``.
        callbacks : list[tuple[callable, tuple, dict]]
            List of (func, args, kwargs) tuples that will be called upon
            timer events.  This list is accessible as ``timer.callbacks`` and
            can be manipulated directly, or the functions `add_callback` and
            `remove_callback` can be used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [37385 37914])
                            ("callbacks" code nil (reparse-symbol indented_block_body) [37969 37985])
                            ("interval" code nil (reparse-symbol indented_block_body) [38118 38126])
                            ("self" variable nil (reparse-symbol indented_block_body) [38135 38159]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37339 37343])
                            ("interval" variable nil (reparse-symbol function_parameters) [37345 37353])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [37360 37369]))                          
                        :documentation "
        Parameters
        ----------
        interval : int, default: 1000ms
            The time between timer events in milliseconds.  Will be stored as
            ``timer.interval``.
        callbacks : list[tuple[callable, tuple, dict]]
            List of (func, args, kwargs) tuples that will be called upon
            timer events.  This list is accessible as ``timer.callbacks`` and
            can be manipulated directly, or the functions `add_callback` and
            `remove_callback` can be used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37326 38160])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38177 38181]))                          
                        :documentation "Need to stop timer and possibly disconnect timer.")
                        (reparse-symbol indented_block_body) [38165 38275])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38290 38294])
                            ("interval" variable nil (reparse-symbol function_parameters) [38296 38304]))                          
                        :documentation "
        Start the timer object.

        Parameters
        ----------
        interval : int, optional
            Timer interval in milliseconds; overrides a previously set interval
            if provided.
        ")
                        (reparse-symbol indented_block_body) [38280 38643])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38657 38661]))                          
                        :documentation "Stop the timer.")
                        (reparse-symbol indented_block_body) [38648 38721])
                    ("_timer_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38743 38747]))                          )
                        (reparse-symbol indented_block_body) [38726 38763])
                    ("_timer_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38784 38788]))                          )
                        (reparse-symbol indented_block_body) [38768 38804])
                    ("interval" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38836 38840]))                          
                        :documentation "The time between timer events, in milliseconds.")
                        (reparse-symbol indented_block_body) [38809 38935])
                    ("interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38974 38978])
                            ("interval" variable nil (reparse-symbol function_parameters) [38980 38988]))                          
                        :decorators 
                          ( ("interval.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38940 39228])
                    ("single_shot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39263 39267]))                          
                        :documentation "Whether this timer should stop after a single run.")
                        (reparse-symbol indented_block_body) [39233 39363])
                    ("single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39408 39412])
                            ("ss" variable nil (reparse-symbol function_parameters) [39414 39416]))                          
                        :decorators 
                          ( ("single_shot.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39368 39483])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39505 39509])
                            ("func" variable nil (reparse-symbol function_parameters) [39511 39515])
                            ("args" variable nil (reparse-symbol function_parameters) [39517 39522])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39524 39532]))                          
                        :documentation "
        Register *func* to be called by timer when the event fires. Any
        additional arguments provided will be passed to *func*.

        This function returns *func*, which makes it possible to use it as a
        decorator.
        ")
                        (reparse-symbol indented_block_body) [39488 39864])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39889 39893])
                            ("func" variable nil (reparse-symbol function_parameters) [39895 39899])
                            ("args" variable nil (reparse-symbol function_parameters) [39901 39906])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39908 39916]))                          
                        :documentation "
        Remove *func* from list of callbacks.

        *args* and *kwargs* are optional and used to distinguish between copies
        of the same function registered to be called with different arguments.
        This behavior is deprecated.  In the future, ``*args, **kwargs`` won't
        be considered anymore; to keep a specific callback removable by itself,
        pass it to `add_callback` as a `functools.partial` object.
        ")
                        (reparse-symbol indented_block_body) [39869 40990])
                    ("_timer_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41019 41023]))                          
                        :documentation "Used to set interval on underlying timer object.")
                        (reparse-symbol indented_block_body) [40995 41089])
                    ("_timer_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41121 41125]))                          
                        :documentation "Used to set single shot on underlying timer object.")
                        (reparse-symbol indented_block_body) [41094 41194])
                    ("_on_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41213 41217]))                          
                        :documentation "
        Runs all function that have been registered as callbacks. Functions
        can return False (or 0) if they should not be called any more. If there
        are no callbacks, the timer is automatically stopped.
        ")
                        (reparse-symbol indented_block_body) [41199 41996]))                  
                :type "class")
                nil [36216 41996])
            ("Event" type
               (:documentation "
    A Matplotlib event.

    The following attributes are defined and shown with their default values.
    Subclasses may define additional attributes.

    Attributes
    ----------
    name : str
        The event name.
    canvas : `FigureCanvasBase`
        The backend-specific canvas instance generating the event.
    guiEvent
        The GUI event that triggered the Matplotlib event.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [42481 42497])
                            ("self" variable nil (reparse-symbol indented_block_body) [42506 42526])
                            ("self" variable nil (reparse-symbol indented_block_body) [42535 42559]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42437 42441])
                            ("name" variable nil (reparse-symbol function_parameters) [42443 42447])
                            ("canvas" variable nil (reparse-symbol function_parameters) [42449 42455])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [42457 42465]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42424 42560]))                  
                :type "class")
                nil [41998 42560])
            ("DrawEvent" type
               (:documentation "
    An event triggered by a draw operation on the canvas.

    In most backends, callbacks subscribed to this event will be fired after
    the rendering is complete but before the screen is updated. Any extra
    artists drawn to the canvas's renderer will be reflected without an
    explicit call to ``blit``.

    .. warning::

       Calling ``canvas.draw`` and ``canvas.blit`` in these callbacks may
       not be safe with all backends and may cause infinite recursion.

    A DrawEvent has a number of special attributes in addition to those defined
    by the parent `Event` class.

    Attributes
    ----------
    renderer : `RendererBase`
        The renderer for the draw event.
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [43351 43381])
                            ("self" variable nil (reparse-symbol indented_block_body) [43390 43414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43312 43316])
                            ("name" variable nil (reparse-symbol function_parameters) [43318 43322])
                            ("canvas" variable nil (reparse-symbol function_parameters) [43324 43330])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43332 43340]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43299 43415]))                  
                :type "class")
                nil [42562 43415])
            ("ResizeEvent" type
               (:documentation "
    An event triggered by a canvas resize.

    A ResizeEvent has a number of special attributes in addition to those
    defined by the parent `Event` class.

    Attributes
    ----------
    width : int
        Width of the canvas in pixels.
    height : int
        Height of the canvas in pixels.
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [43807 43837])
                            ("self, self" code nil (reparse-symbol indented_block_body) [43846 43897]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43778 43782])
                            ("name" variable nil (reparse-symbol function_parameters) [43784 43788])
                            ("canvas" variable nil (reparse-symbol function_parameters) [43790 43796]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43765 43898]))                  
                :type "class")
                nil [43417 43898])
            ("CloseEvent" type
               (:documentation "An event triggered by a figure being closed."
                :superclasses ("Event")
                :type "class")
                nil [43900 43980])
            ("LocationEvent" type
               (:documentation "
    An event that has a screen location.

    A LocationEvent has a number of special attributes in addition to those
    defined by the parent `Event` class.

    Attributes
    ----------
    x, y : int or None
        Event location in pixels from bottom left of canvas.
    inaxes : `~.axes.Axes` or None
        The `~.axes.Axes` instance over which the mouse is, if any.
    xdata, ydata : float or None
        Data coordinates of the mouse within *inaxes*, or *None* if the mouse
        is not over an Axes.
    "
                :superclasses ("Event")
                :members 
                  ( ("lastevent" variable nil (reparse-symbol indented_block_body) [44548 44564])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [44686 44735])
                            ("x" code nil (reparse-symbol indented_block_body) [44832 44833])
                            ("y" code nil (reparse-symbol indented_block_body) [44931 44932])
                            ("self" variable nil (reparse-symbol indented_block_body) [44941 44959])
                            ("self" variable nil (reparse-symbol indented_block_body) [45011 45028])
                            ("self" variable nil (reparse-symbol indented_block_body) [45073 45090])
                            ("if" code nil (reparse-symbol indented_block_body) [45136 45287])
                            ("if" code nil (reparse-symbol indented_block_body) [45296 45453])
                            ("if" code nil (reparse-symbol indented_block_body) [45462 45759])
                            ("self" code nil (reparse-symbol indented_block_body) [45768 45794]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44636 44640])
                            ("name" variable nil (reparse-symbol function_parameters) [44642 44646])
                            ("canvas" variable nil (reparse-symbol function_parameters) [44648 44654])
                            ("x" variable nil (reparse-symbol function_parameters) [44656 44657])
                            ("y" variable nil (reparse-symbol function_parameters) [44659 44660])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [44662 44670]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44623 45795])
                    ("_update_enter_leave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45824 45828]))                          
                        :documentation "Process the figure/axes enter leave events.")
                        (reparse-symbol indented_block_body) [45800 46901]))                  
                :type "class")
                nil [43982 46901])
            ("MouseButton" type
               (:superclasses ("IntEnum")
                :members 
                  ( ("LEFT" variable nil (reparse-symbol indented_block_body) [46935 46943])
                    ("MIDDLE" variable nil (reparse-symbol indented_block_body) [46948 46958])
                    ("RIGHT" variable nil (reparse-symbol indented_block_body) [46963 46972])
                    ("BACK" variable nil (reparse-symbol indented_block_body) [46977 46985])
                    ("FORWARD" variable nil (reparse-symbol indented_block_body) [46990 47001]))                  
                :type "class")
                nil [46903 47002])
            ("MouseEvent" type
               (:documentation "
    A mouse event ('button_press_event', 'button_release_event', \\
'scroll_event', 'motion_notify_event').

    A MouseEvent has a number of special attributes in addition to those
    defined by the parent `Event` and `LocationEvent` classes.

    Attributes
    ----------
    button : None or `MouseButton` or {'up', 'down'}
        The button pressed. 'up' and 'down' are used for scroll events.
        Note that LEFT and RIGHT actually refer to the \"primary\" and
        \"secondary\" buttons, i.e. if the user inverts their left and right
        buttons (\"left-handed setting\") then the LEFT button will be the one
        physically on the right.

    key : None or str
        The key pressed when the mouse event triggered, e.g. 'shift'.
        See `KeyEvent`.

        .. warning::
           This key is currently obtained from the last 'key_press_event' or
           'key_release_event' that occurred within the canvas.  Thus, if the
           last change of keyboard state occurred while the canvas did not have
           focus, this attribute will be wrong.

    step : float
        The number of scroll steps (positive for 'up', negative for 'down').
        This applies only to 'scroll_event' and defaults to 0 otherwise.

    dblclick : bool
        Whether the event is a double-click. This applies only to
        'button_press_event' and is False otherwise. In particular, it's
        not used in 'button_release_event'.

    Examples
    --------
    ::

        def on_press(event):
            print('you pressed', event.button, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('button_press_event', on_press)
    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [48840 48928])
                            ("self" variable nil (reparse-symbol indented_block_body) [48936 48956])
                            ("self" variable nil (reparse-symbol indented_block_body) [48965 48979])
                            ("self" variable nil (reparse-symbol indented_block_body) [48988 49004])
                            ("self" variable nil (reparse-symbol indented_block_body) [49013 49037])
                            ("super" code nil (reparse-symbol indented_block_body) [49188 49243]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48726 48730])
                            ("name" variable nil (reparse-symbol function_parameters) [48732 48736])
                            ("canvas" variable nil (reparse-symbol function_parameters) [48738 48744])
                            ("x" variable nil (reparse-symbol function_parameters) [48746 48747])
                            ("y" variable nil (reparse-symbol function_parameters) [48749 48750])
                            ("button" variable nil (reparse-symbol function_parameters) [48752 48758])
                            ("key" variable nil (reparse-symbol function_parameters) [48765 48768])
                            ("step" variable nil (reparse-symbol function_parameters) [48792 48796])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [48800 48808])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [48816 48824]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48713 49244])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49261 49265]))                          )
                        (reparse-symbol indented_block_body) [49249 49488]))                  
                :type "class")
                nil [47004 49488])
            ("PickEvent" type
               (:documentation "
    A pick event.

    This event is fired when the user picks a location on the canvas
    sufficiently close to an artist that has been made pickable with
    `.Artist.set_picker`.

    A PickEvent has a number of special attributes in addition to those defined
    by the parent `Event` class.

    Attributes
    ----------
    mouseevent : `MouseEvent`
        The mouse event that generated the pick.
    artist : `matplotlib.artist.Artist`
        The picked artist.  Note that artists are not pickable by default
        (see `.Artist.set_picker`).
    other
        Additional attributes may be present depending on the type of the
        picked object; e.g., a `.Line2D` pick may define different extra
        attributes than a `.PatchCollection` pick.

    Examples
    --------
    Bind a function ``on_pick()`` to pick events, that prints the coordinates
    of the picked data point::

        ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance

        def on_pick(event):
            line = event.artist
            xdata, ydata = line.get_data()
            ind = event.ind
            print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)

        cid = fig.canvas.mpl_connect('pick_event', on_pick)
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [50873 50913])
                            ("self" variable nil (reparse-symbol indented_block_body) [50922 50950])
                            ("self" variable nil (reparse-symbol indented_block_body) [50959 50979])
                            ("self" code nil (reparse-symbol indented_block_body) [50988 51016]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50782 50786])
                            ("name" variable nil (reparse-symbol function_parameters) [50788 50792])
                            ("canvas" variable nil (reparse-symbol function_parameters) [50794 50800])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [50802 50812])
                            ("artist" variable nil (reparse-symbol function_parameters) [50814 50820])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [50839 50847])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50854 50862]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50769 51017]))                  
                :type "class")
                nil [49490 51017])
            ("KeyEvent" type
               (:documentation "
    A key event (key press, key release).

    A KeyEvent has a number of special attributes in addition to those defined
    by the parent `Event` and `LocationEvent` classes.

    Attributes
    ----------
    key : None or str
        The key(s) pressed. Could be *None*, a single case sensitive Unicode
        character (\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\",
        \"f1\", \"up\", etc.) or a combination of the above (e.g., \"ctrl+alt+g\",
        \"ctrl+alt+G\").

    Notes
    -----
    Modifier keys will be prefixed to the pressed key and will be in the order
    \"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key
    is itself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both
    be valid key values.

    Examples
    --------
    ::

        def on_key(event):
            print('you pressed', event.key, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('key_press_event', on_key)
    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [52104 52118])
                            ("super" code nil (reparse-symbol indented_block_body) [52202 52257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52045 52049])
                            ("name" variable nil (reparse-symbol function_parameters) [52051 52055])
                            ("canvas" variable nil (reparse-symbol function_parameters) [52057 52063])
                            ("key" variable nil (reparse-symbol function_parameters) [52065 52068])
                            ("x" variable nil (reparse-symbol function_parameters) [52070 52071])
                            ("y" variable nil (reparse-symbol function_parameters) [52075 52076])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [52080 52088]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52032 52258]))                  
                :type "class")
                nil [51019 52258])
            ("_get_renderer" function
               (:documentation "
    Get the renderer that would be used to save a `.Figure`, and cache it on
    the figure.

    If you need a renderer without any active draw methods use
    renderer._draw_disabled to temporary patch them out at your call site.
    "
                :arguments 
                  ( ("figure" variable nil (reparse-symbol function_parameters) [52278 52284])
                    ("print_method" variable nil (reparse-symbol function_parameters) [52286 52298]))                  )
                nil [52260 53556])
            ("_no_output_draw" function (:arguments 
              ( ("figure" variable nil (reparse-symbol function_parameters) [53578 53584]))              ) nil [53558 53738])
            ("_is_non_interactive_terminal_ipython" function
               (:documentation "
    Return whether we are in a terminal IPython, but non interactive.

    When in _terminal_ IPython, ip.parent will have and `interact` attribute,
    if this attribute is False we do not setup eventloop integration as the
    user will _not_ interact with IPython. In all other case (ZMQKernel, or is
    interactive), we do.
    "
                :arguments 
                  ( ("ip" variable nil (reparse-symbol function_parameters) [53781 53783]))                  )
                nil [53740 54268])
            ("_check_savefig_extra_args" function
               (:documentation "
    Decorator for the final print_* methods that accept keyword arguments.

    If any unused keyword arguments are left, this decorator will warn about
    them, and as part of the warning, will attempt to specify the function that
    the user actually called, instead of the backend-specific method. If unable
    to determine which function the user called, it will specify `.savefig`.

    For compatibility across backends, this does not warn about keyword
    arguments added by `FigureCanvasBase.print_figure` for use in a subset of
    backends, because the user would not have added them directly.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [54300 54304])
                    ("extra_kwargs" variable nil (reparse-symbol function_parameters) [54311 54323]))                  )
                nil [54270 57415])
            ("FigureCanvasBase" type
               (:documentation "
    The canvas the figure renders into.

    Attributes
    ----------
    figure : `matplotlib.figure.Figure`
        A high-level figure instance.
    "
                :members 
                  ( ("required_interactive_framework" variable nil (reparse-symbol indented_block_body) [57742 57779])
                    ("events" variable nil (reparse-symbol indented_block_body) [57785 58180])
                    ("fixed_dpi" variable nil (reparse-symbol indented_block_body) [58186 58202])
                    ("filetypes" variable nil (reparse-symbol indented_block_body) [58208 58238])
                    ("supports_blit" function
                       (:documentation "If this Canvas sub-class supports blitting."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [58286 58289]))                          
                        :decorators 
                          ( ("_api.classproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58244 58449])
                    ("__init__" function
                       (:suite 
                          ( ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [58495 58531])
                            ("self" code nil (reparse-symbol indented_block_body) [58540 58571])
                            ("self" variable nil (reparse-symbol indented_block_body) [58580 58608])
                            ("self" variable nil (reparse-symbol indented_block_body) [58617 58640])
                            ("if" code nil (reparse-symbol indented_block_body) [58649 58698])
                            ("figure" code nil (reparse-symbol indented_block_body) [58706 58729])
                            ("self" variable nil (reparse-symbol indented_block_body) [58738 58758])
                            ("self" variable nil (reparse-symbol indented_block_body) [58767 58786])
                            ("self" variable nil (reparse-symbol indented_block_body) [58795 58831])
                            ("self" variable nil (reparse-symbol indented_block_body) [58840 58859])
                            ("self" variable nil (reparse-symbol indented_block_body) [58890 58906])
                            ("self, self" code nil (reparse-symbol indented_block_body) [58934 58971])
                            ("self" variable nil (reparse-symbol indented_block_body) [58980 59005])
                            ("self" variable nil (reparse-symbol indented_block_body) [59051 59070])
                            ("self" variable nil (reparse-symbol indented_block_body) [59113 59142])
                            ("figure" variable nil (reparse-symbol indented_block_body) [59218 59251])
                            ("self" variable nil (reparse-symbol indented_block_body) [59260 59288]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58467 58471])
                            ("figure" variable nil (reparse-symbol function_parameters) [58473 58479]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58454 59289])
                    ("callbacks" variable nil (reparse-symbol indented_block_body) [59294 59358])
                    ("button_pick_id" variable nil (reparse-symbol indented_block_body) [59363 59430])
                    ("scroll_pick_id" variable nil (reparse-symbol indented_block_body) [59435 59502])
                    ("" code nil (reparse-symbol indented_block_body) [59545 59547])
                    ("_fix_ipython_backend2gui" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [59581 59584]))                      ) (reparse-symbol indented_block_body) [59552 60656])
                    ("_idle_draw_cntx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60701 60705]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60661 60835])
                    ("is_saving" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60854 60858]))                          
                        :documentation "
        Return whether the renderer is in the process of saving
        to a file, rather than rendering for an on-screen buffer.
        ")
                        (reparse-symbol indented_block_body) [60840 61046])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61060 61064])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [61066 61076]))                          )
                        (reparse-symbol indented_block_body) [61051 61161])
                    ("blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61175 61179])
                            ("bbox" variable nil (reparse-symbol function_parameters) [61181 61185]))                          
                        :documentation "Blit the canvas in bbox (default entire canvas).")
                        (reparse-symbol indented_block_body) [61166 61256])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61272 61276])
                            ("w" variable nil (reparse-symbol function_parameters) [61278 61279])
                            ("h" variable nil (reparse-symbol function_parameters) [61281 61282]))                          
                        :documentation "
        UNUSED: Set the canvas size in pixels.

        Certain backends may implement a similar method internally, but this is
        not a requirement of, nor is it used by, Matplotlib itself.
        ")
                        (reparse-symbol indented_block_body) [61261 61505])
                    ("draw_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61525 61529])
                            ("renderer" variable nil (reparse-symbol function_parameters) [61531 61539]))                          
                        :documentation "Pass a `DrawEvent` to all functions connected to ``draw_event``.")
                        (reparse-symbol indented_block_body) [61510 61732])
                    ("resize_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61754 61758]))                          
                        :documentation "
        Pass a `ResizeEvent` to all functions connected to ``resize_event``.
        ")
                        (reparse-symbol indented_block_body) [61737 61992])
                    ("close_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62013 62017])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62019 62027]))                          
                        :documentation "
        Pass a `CloseEvent` to all functions connected to ``close_event``.
        ")
                        (reparse-symbol indented_block_body) [61997 62338])
                    ("key_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62709 62713])
                            ("key" variable nil (reparse-symbol function_parameters) [62715 62718])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62720 62728]))                          
                        :documentation "
        Pass a `KeyEvent` to all functions connected to ``key_press_event``.
        ")
                        (reparse-symbol indented_block_body) [62689 63029])
                    ("key_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63056 63060])
                            ("key" variable nil (reparse-symbol function_parameters) [63062 63065])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [63067 63075]))                          
                        :documentation "
        Pass a `KeyEvent` to all functions connected to ``key_release_event``.
        ")
                        (reparse-symbol indented_block_body) [63034 63381])
                    ("pick_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63401 63405])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [63407 63417])
                            ("artist" variable nil (reparse-symbol function_parameters) [63419 63425])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [63427 63435]))                          
                        :documentation "
        Callback processing for pick events.

        This method will be called by artists who are picked and will
        fire off `PickEvent` callbacks registered listeners.

        Note that artists are not pickable by default (see
        `.Artist.set_picker`).
        ")
                        (reparse-symbol indented_block_body) [63386 63943])
                    ("scroll_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63965 63969])
                            ("x" variable nil (reparse-symbol function_parameters) [63971 63972])
                            ("y" variable nil (reparse-symbol function_parameters) [63974 63975])
                            ("step" variable nil (reparse-symbol function_parameters) [63977 63981])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [63983 63991]))                          
                        :documentation "
        Callback processing for scroll events.

        Backend derived classes should call this function on any
        scroll wheel event.  (*x*, *y*) are the canvas coords ((0, 0) is lower
        left).  button and key are as defined in `MouseEvent`.

        This method will call all functions connected to the 'scroll_event'
        with a `MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [63948 64702])
                    ("button_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64730 64734])
                            ("x" variable nil (reparse-symbol function_parameters) [64736 64737])
                            ("y" variable nil (reparse-symbol function_parameters) [64739 64740])
                            ("button" variable nil (reparse-symbol function_parameters) [64742 64748])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [64750 64758])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64766 64774]))                          
                        :documentation "
        Callback processing for mouse button press events.

        Backend derived classes should call this function on any mouse
        button press.  (*x*, *y*) are the canvas coords ((0, 0) is lower left).
        button and key are as defined in `MouseEvent`.

        This method will call all functions connected to the
        'button_press_event' with a `MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [64707 65438])
                    ("button_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65468 65472])
                            ("x" variable nil (reparse-symbol function_parameters) [65474 65475])
                            ("y" variable nil (reparse-symbol function_parameters) [65477 65478])
                            ("button" variable nil (reparse-symbol function_parameters) [65480 65486])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [65488 65496]))                          
                        :documentation "
        Callback processing for mouse button release events.

        Backend derived classes should call this function on any mouse
        button release.

        This method will call all functions connected to the
        'button_release_event' with a `MouseEvent` instance.

        Parameters
        ----------
        x : float
            The canvas coordinates where 0=left.
        y : float
            The canvas coordinates where 0=bottom.
        guiEvent
            The native UI event that generated the Matplotlib event.
        ")
                        (reparse-symbol indented_block_body) [65443 66253])
                    ("motion_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66282 66286])
                            ("x" variable nil (reparse-symbol function_parameters) [66288 66289])
                            ("y" variable nil (reparse-symbol function_parameters) [66291 66292])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [66294 66302]))                          
                        :documentation "
        Callback processing for mouse movement events.

        Backend derived classes should call this function on any
        motion-notify-event.

        This method will call all functions connected to the
        'motion_notify_event' with a `MouseEvent` instance.

        Parameters
        ----------
        x : float
            The canvas coordinates where 0=left.
        y : float
            The canvas coordinates where 0=bottom.
        guiEvent
            The native UI event that generated the Matplotlib event.
        ")
                        (reparse-symbol indented_block_body) [66258 67095])
                    ("leave_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67123 67127])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [67129 67137]))                          
                        :documentation "
        Callback processing for the mouse cursor leaving the canvas.

        Backend derived classes should call this function when leaving
        canvas.

        Parameters
        ----------
        guiEvent
            The native UI event that generated the Matplotlib event.
        ")
                        (reparse-symbol indented_block_body) [67100 67614])
                    ("enter_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67642 67646])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [67648 67656])
                            ("xy" variable nil (reparse-symbol function_parameters) [67663 67665]))                          
                        :documentation "
        Callback processing for the mouse cursor entering the canvas.

        Backend derived classes should call this function when entering
        canvas.

        Parameters
        ----------
        guiEvent
            The native UI event that generated the Matplotlib event.
        xy : (float, float)
            The coordinate location of the pointer when the canvas is entered.
        ")
                        (reparse-symbol indented_block_body) [67619 68655])
                    ("inaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68671 68675])
                            ("xy" variable nil (reparse-symbol function_parameters) [68677 68679]))                          
                        :documentation "
        Return the topmost visible `~.axes.Axes` containing the point *xy*.

        Parameters
        ----------
        xy : (float, float)
            (x, y) pixel positions from left/bottom of the canvas.

        Returns
        -------
        `~matplotlib.axes.Axes` or None
            The topmost visible axes containing the point, or None if no axes.
        ")
                        (reparse-symbol indented_block_body) [68660 69328])
                    ("grab_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69348 69352])
                            ("ax" variable nil (reparse-symbol function_parameters) [69354 69356]))                          
                        :documentation "
        Set the child `~.axes.Axes` which is grabbing the mouse events.

        Usually called by the widgets themselves. It is an error to call this
        if the mouse is already grabbed by another axes.
        ")
                        (reparse-symbol indented_block_body) [69333 69745])
                    ("release_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69768 69772])
                            ("ax" variable nil (reparse-symbol function_parameters) [69774 69776]))                          
                        :documentation "
        Release the mouse grab held by the `~.axes.Axes` *ax*.

        Usually called by the widgets. It is ok to call this even if *ax*
        doesn't have the mouse grab currently.
        ")
                        (reparse-symbol indented_block_body) [69750 70063])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70083 70087])
                            ("cursor" variable nil (reparse-symbol function_parameters) [70089 70095]))                          
                        :documentation "
        Set the current cursor.

        This may have no effect if the backend does not display anything.

        If required by the backend, this method should trigger an update in
        the backend event loop after the cursor is set, as this method may be
        called e.g. before a long-running task during which the GUI is not
        updated.

        Parameters
        ----------
        cursor : `.Cursors`
            The cursor to display over the canvas. Note: some backends may
            change the cursor for the entire window.
        ")
                        (reparse-symbol indented_block_body) [70068 70671])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70685 70689])
                            ("args" variable nil (reparse-symbol function_parameters) [70691 70696])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70698 70706]))                          
                        :documentation "
        Render the `.Figure`.

        It is important that this method actually walk the artist tree
        even if not output is produced because this will trigger
        deferred work (like computing limits auto-limits and tick
        values) that users may want access to before saving to disk.
        ")
                        (reparse-symbol indented_block_body) [70676 71035])
                    ("draw_idle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71054 71058])
                            ("args" variable nil (reparse-symbol function_parameters) [71060 71065])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [71067 71075]))                          
                        :documentation "
        Request a widget redraw once control returns to the GUI event loop.

        Even if multiple calls to `draw_idle` occur before control returns
        to the GUI event loop, the figure will only be rendered once.

        Notes
        -----
        Backends may choose to override the method and implement their own
        strategy to prevent multiple renderings.

        ")
                        (reparse-symbol indented_block_body) [71040 71600])
                    ("device_pixel_ratio" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71642 71646]))                          
                        :documentation "
        The ratio of physical to logical pixels used for the canvas on screen.

        By default, this is 1, meaning physical and logical pixels are the same
        size. Subclasses that support High DPI screens may set this property to
        indicate that said ratio is different. All Matplotlib interaction,
        unless working directly with the canvas, remains in logical pixels.

        ")
                        (reparse-symbol indented_block_body) [71605 72105])
                    ("_set_device_pixel_ratio" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72138 72142])
                            ("ratio" variable nil (reparse-symbol function_parameters) [72144 72149]))                          
                        :documentation "
        Set the ratio of physical to logical pixels used for the canvas.

        Subclasses that support High DPI screens can set this property to
        indicate that said ratio is different. The canvas itself will be
        created at the physical size, while the client side will use the
        logical size. Thus the DPI of the Figure will change to be scaled by
        this ratio. Implementations that support High DPI screens should use
        physical pixels for events so that transforms back to Axes space are
        correct.

        By default, this is 1, meaning physical and logical pixels are the same
        size.

        Parameters
        ----------
        ratio : float
            The ratio of logical to physical pixels used for the canvas.

        Returns
        -------
        bool
            Whether the ratio has changed. Backends may interpret this as a
            signal to resize the window, repaint the canvas, or change any
            other relevant properties.
        ")
                        (reparse-symbol indented_block_body) [72110 73720])
                    ("get_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73746 73750])
                            ("physical" variable nil (reparse-symbol function_parameters) [73755 73763]))                          
                        :documentation "
        Return the figure width and height in integral points or pixels.

        When the figure is used on High DPI screens (and the backend supports
        it), the truncation to integers occurs after scaling by the device
        pixel ratio.

        Parameters
        ----------
        physical : bool, default: False
            Whether to return true physical pixels or logical pixels. Physical
            pixels may be used by backends that support HiDPI, but still
            configure the canvas using its actual size.

        Returns
        -------
        width, height : int
            The size of the figure, in points or pixels, depending on the
            backend.
        ")
                        (reparse-symbol indented_block_body) [73725 74620])
                    ("get_supported_filetypes" function
                       (:documentation "Return dict of savefig file formats supported by this backend."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [74670 74673]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [74625 74782])
                    ("get_supported_filetypes_grouped" function
                       (:documentation "
        Return a dict of savefig file formats supported by this backend,
        where the keys are a file type name, such as 'Joint Photographic
        Experts Group', and the values are a list of filename extensions used
        for that filetype, such as ['jpg', 'jpeg'].
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [74840 74843]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [74787 75332])
                    ("_get_output_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75360 75364])
                            ("backend" variable nil (reparse-symbol function_parameters) [75366 75373])
                            ("fmt" variable nil (reparse-symbol function_parameters) [75375 75378]))                          
                        :documentation "
        Set the canvas in preparation for saving the figure.

        Parameters
        ----------
        backend : str or None
            If not None, switch the figure canvas to the ``FigureCanvas`` class
            of the given backend.
        fmt : str
            If *backend* is None, then determine a suitable canvas class for
            saving to format *fmt* -- either the current canvas class, if it
            supports *fmt*, or whatever `get_registered_canvas_class` returns;
            switch the figure canvas to that canvas class.
        ")
                        (reparse-symbol indented_block_body) [75337 76956])
                    ("print_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76991 76995])
                            ("filename" variable nil (reparse-symbol function_parameters) [76997 77005])
                            ("dpi" variable nil (reparse-symbol function_parameters) [77007 77010])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [77017 77026])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [77033 77042])
                            ("orientation" variable nil (reparse-symbol function_parameters) [77061 77072])
                            ("format" variable nil (reparse-symbol function_parameters) [77085 77091])
                            ("bbox_inches" variable nil (reparse-symbol function_parameters) [77113 77124])
                            ("pad_inches" variable nil (reparse-symbol function_parameters) [77131 77141])
                            ("bbox_extra_artists" variable nil (reparse-symbol function_parameters) [77148 77166])
                            ("backend" variable nil (reparse-symbol function_parameters) [77185 77192])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77199 77207]))                          
                        :documentation "
        Render the figure to hardcopy. Set the figure patch face and edge
        colors.  This is useful because some of the GUIs have a gray figure
        face color background and you'll probably want to override this on
        hardcopy.

        Parameters
        ----------
        filename : str or path-like or file-like
            The file where the figure is saved.

        dpi : float, default: :rc:`savefig.dpi`
            The dots per inch to save the figure in.

        facecolor : color or 'auto', default: :rc:`savefig.facecolor`
            The facecolor of the figure.  If 'auto', use the current figure
            facecolor.

        edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`
            The edgecolor of the figure.  If 'auto', use the current figure
            edgecolor.

        orientation : {'landscape', 'portrait'}, default: 'portrait'
            Only currently applies to PostScript printing.

        format : str, optional
            Force a specific file format. If not given, the format is inferred
            from the *filename* extension, and if that fails from
            :rc:`savefig.format`.

        bbox_inches : 'tight' or `.Bbox`, default: :rc:`savefig.bbox`
            Bounding box in inches: only the given portion of the figure is
            saved.  If 'tight', try to figure out the tight bbox of the figure.

        pad_inches : float, default: :rc:`savefig.pad_inches`
            Amount of padding around the figure when *bbox_inches* is 'tight'.

        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        backend : str, optional
            Use a non-default backend to render the file, e.g. to render a
            png file with the \"cairo\" backend rather than the default \"agg\",
            or a pdf file with the \"pgf\" backend rather than the default
            \"pdf\".  Note that the default backend is normally sufficient.  See
            :ref:`the-builtin-backends` for a list of valid backends for each
            file format.  Custom backends can be referenced as \"module://...\".
        ")
                        (reparse-symbol indented_block_body) [76961 83275])
                    ("get_default_filetype" function
                       (:documentation "
        Return the default savefig file format as specified in
        :rc:`savefig.format`.

        The returned string does not include a period. This method is
        overridden in backends that only support a single file type.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [83322 83325]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [83280 83627])
                    ("" code nil (reparse-symbol indented_block_body) [83648 83756])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83782 83786]))                          
                        :documentation "
        Return the title text of the window containing the figure, or None
        if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [83761 84028])
                    ("" code nil (reparse-symbol indented_block_body) [84049 84157])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84183 84187])
                            ("title" variable nil (reparse-symbol function_parameters) [84189 84194]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [84162 84453])
                    ("get_default_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84483 84487]))                          
                        :documentation "
        Return a string, which includes extension, suitable for use as
        a default filename.
        ")
                        (reparse-symbol indented_block_body) [84458 84897])
                    ("switch_backends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84922 84926])
                            ("FigureCanvasClass" variable nil (reparse-symbol function_parameters) [84928 84945]))                          
                        :documentation "
        Instantiate an instance of FigureCanvasClass

        This is used for backend switching, e.g., to instantiate a
        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
        not done, so any changes to one of the instances (e.g., setting
        figure size or line props), will be reflected in the other
        ")
                        (reparse-symbol indented_block_body) [84902 85425])
                    ("mpl_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85446 85450])
                            ("s" variable nil (reparse-symbol function_parameters) [85452 85453])
                            ("func" variable nil (reparse-symbol function_parameters) [85455 85459]))                          
                        :documentation "
        Bind function *func* to event *s*.

        Parameters
        ----------
        s : str
            One of the following events ids:

            - 'button_press_event'
            - 'button_release_event'
            - 'draw_event'
            - 'key_press_event'
            - 'key_release_event'
            - 'motion_notify_event'
            - 'pick_event'
            - 'resize_event'
            - 'scroll_event'
            - 'figure_enter_event',
            - 'figure_leave_event',
            - 'axes_enter_event',
            - 'axes_leave_event'
            - 'close_event'.

        func : callable
            The callback function to be executed, which must have the
            signature::

                def func(event: Event) -> Any

            For the location events (button and key press/release), if the
            mouse is over the axes, the ``inaxes`` attribute of the event will
            be set to the `~matplotlib.axes.Axes` the event occurs is over, and
            additionally, the variables ``xdata`` and ``ydata`` attributes will
            be set to the mouse location in data coordinates.  See `.KeyEvent`
            and `.MouseEvent` for more info.

        Returns
        -------
        cid
            A connection id that can be used with
            `.FigureCanvasBase.mpl_disconnect`.

        Examples
        --------
        ::

            def on_press(event):
                print('you pressed', event.button, event.xdata, event.ydata)

            cid = canvas.mpl_connect('button_press_event', on_press)
        ")
                        (reparse-symbol indented_block_body) [85430 87107])
                    ("mpl_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87131 87135])
                            ("cid" variable nil (reparse-symbol function_parameters) [87137 87140]))                          
                        :documentation "
        Disconnect the callback with id *cid*.

        Examples
        --------
        ::

            cid = canvas.mpl_connect('button_press_event', on_press)
            # ... later
            canvas.mpl_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [87112 87439])
                    ("_timer_cls" variable nil (reparse-symbol indented_block_body) [87582 87604])
                    ("new_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87624 87628])
                            ("interval" variable nil (reparse-symbol function_parameters) [87630 87638])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [87645 87654]))                          
                        :documentation "
        Create a new backend-specific subclass of `.Timer`.

        This is useful for getting periodic events through the backend's native
        event loop.  Implemented only for backends with GUIs.

        Parameters
        ----------
        interval : int
            Timer interval in milliseconds.

        callbacks : list[tuple[callable, tuple, dict]]
            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
            will be executed by the timer every *interval*.

            Callbacks which return ``False`` or ``0`` will be removed from the
            timer.

        Examples
        --------
        >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1,), {'a': 3})])
        ")
                        (reparse-symbol indented_block_body) [87610 88468])
                    ("flush_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88490 88494]))                          
                        :documentation "
        Flush the GUI events for the figure.

        Interactive backends need to reimplement this method.
        ")
                        (reparse-symbol indented_block_body) [88473 88629])
                    ("start_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88655 88659])
                            ("timeout" variable nil (reparse-symbol function_parameters) [88661 88668]))                          
                        :documentation "
        Start a blocking event loop.

        Such an event loop is used by interactive functions, such as
        `~.Figure.ginput` and `~.Figure.waitforbuttonpress`, to wait for
        events.

        The event loop blocks until a callback function triggers
        `stop_event_loop`, or *timeout* is reached.

        If *timeout* is 0 or negative, never timeout.

        Only interactive backends need to reimplement this method and it relies
        on `flush_events` being properly implemented.

        Interactive backends should implement this in a more native way.
        ")
                        (reparse-symbol indented_block_body) [88634 89554])
                    ("stop_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89579 89583]))                          
                        :documentation "
        Stop the current blocking event loop.

        Interactive backends need to reimplement this to match
        `start_event_loop`
        ")
                        (reparse-symbol indented_block_body) [89559 89777]))                  
                :type "class")
                nil [57417 89777])
            ("key_press_handler" function
               (:documentation "
    Implement the default Matplotlib key bindings for the canvas and toolbar
    described at :ref:`key-event-handling`.

    Parameters
    ----------
    event : `KeyEvent`
        A key press/release event.
    canvas : `FigureCanvasBase`, default: ``event.canvas``
        The backend-specific canvas instance.  This parameter is kept for
        back-compatibility, but, if set, should always be equal to
        ``event.canvas``.
    toolbar : `NavigationToolbar2`, default: ``event.canvas.toolbar``
        The navigation cursor toolbar.  This parameter is kept for
        back-compatibility, but, if set, should always be equal to
        ``event.canvas.toolbar``.
    "
                :arguments 
                  ( ("event" variable nil (reparse-symbol function_parameters) [89801 89806])
                    ("canvas" variable nil (reparse-symbol function_parameters) [89808 89814])
                    ("toolbar" variable nil (reparse-symbol function_parameters) [89821 89828]))                  )
                nil [89779 96186])
            ("button_press_handler" function
               (:documentation "
    The default Matplotlib button actions for extra mouse buttons.

    Parameters are as for `key_press_handler`, except that *event* is a
    `MouseEvent`.
    "
                :arguments 
                  ( ("event" variable nil (reparse-symbol function_parameters) [96213 96218])
                    ("canvas" variable nil (reparse-symbol function_parameters) [96220 96226])
                    ("toolbar" variable nil (reparse-symbol function_parameters) [96233 96240]))                  )
                nil [96188 96777])
            ("NonGuiException" type
               (:documentation "Raised when trying show a figure in a non-GUI backend."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [96882 96886]))                  
                :type "class")
                nil [96779 96887])
            ("FigureManagerBase" type
               (:documentation "
    A backend-independent abstraction of a figure container and controller.

    The figure manager is used by pyplot to interact with the window in a
    backend-independent way. It's an adapter for the real (GUI) framework that
    represents the visual figure on screen.

    GUI backends define from this class to translate common operations such
    as *show* or *resize* to the GUI-specific code. Non-GUI backends do not
    support these operations an can just use the base class.

    This following basic operations are accessible:

    **Window operations**

    - `~.FigureManagerBase.show`
    - `~.FigureManagerBase.destroy`
    - `~.FigureManagerBase.full_screen_toggle`
    - `~.FigureManagerBase.resize`
    - `~.FigureManagerBase.get_window_title`
    - `~.FigureManagerBase.set_window_title`

    **Key and mouse button press handling**

    The figure manager sets up default key and mouse button press handling by
    hooking up the `.key_press_handler` to the matplotlib event system. This
    ensures the same shortcuts and mouse actions across backends.

    **Other operations**

    Subclasses will have additional attributes and functions to access
    additional functionality. This is of course backend-specific. For example,
    most GUI backends have ``window`` and ``toolbar`` attributes that give
    access to the native GUI widgets of the respective framework.

    Attributes
    ----------
    canvas : `FigureCanvasBase`
        The backend-specific canvas instance.

    num : int or str
        The figure number.

    key_press_handler_id : int
        The default key handler cid, when using the toolmanager.
        To disable the default key press handling use::

            figure.canvas.mpl_disconnect(
                figure.canvas.manager.key_press_handler_id)

    button_press_handler_id : int
        The default mouse button handler cid, when using the toolmanager.
        To disable the default button press handling use::

            figure.canvas.mpl_disconnect(
                figure.canvas.manager.button_press_handler_id)
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [99059 99079])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [99088 99109])
                            ("self" variable nil (reparse-symbol indented_block_body) [99147 99161])
                            ("self" code nil (reparse-symbol indented_block_body) [99170 99210])
                            ("self" variable nil (reparse-symbol indented_block_body) [99220 99252])
                            ("self" variable nil (reparse-symbol indented_block_body) [99261 99296])
                            ("if" code nil (reparse-symbol indented_block_body) [99305 99593])
                            ("self" variable nil (reparse-symbol indented_block_body) [99602 99759])
                            ("self" variable nil (reparse-symbol indented_block_body) [99768 99787])
                            ("notify_axes_change" function
                               (:decorators 
                                  ( ("self.canvas.figure.add_axobserver" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("fig" variable nil (reparse-symbol function_parameters) [99863 99866]))                                  )
                                (reparse-symbol indented_block_body) [99797 100036]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99031 99035])
                            ("canvas" variable nil (reparse-symbol function_parameters) [99037 99043])
                            ("num" variable nil (reparse-symbol function_parameters) [99045 99048]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [99018 100036])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100050 100054]))                          
                        :documentation "
        For GUI backends, show the figure window and redraw.
        For non-GUI backends, raise an exception, unless running headless (i.e.
        on Linux with an unset DISPLAY); this exception is converted to a
        warning in `.Figure.show`.
        ")
                        (reparse-symbol indented_block_body) [100041 100902])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100919 100923]))                          )
                        (reparse-symbol indented_block_body) [100907 100939])
                    ("full_screen_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100967 100971]))                          )
                        (reparse-symbol indented_block_body) [100944 100987])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101003 101007])
                            ("w" variable nil (reparse-symbol function_parameters) [101009 101010])
                            ("h" variable nil (reparse-symbol function_parameters) [101012 101013]))                          
                        :documentation "For GUI backends, resize the window (in physical pixels).")
                        (reparse-symbol indented_block_body) [100992 101088])
                    ("" code nil (reparse-symbol indented_block_body) [101109 101189])
                    ("key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101208 101212])
                            ("event" variable nil (reparse-symbol function_parameters) [101214 101219]))                          
                        :documentation "
        Implement the default Matplotlib key bindings defined at
        :ref:`key-event-handling`.
        ")
                        (reparse-symbol indented_block_body) [101194 101432])
                    ("" code nil (reparse-symbol indented_block_body) [101453 101533])
                    ("button_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101555 101559])
                            ("event" variable nil (reparse-symbol function_parameters) [101561 101566]))                          
                        :documentation "The default Matplotlib button actions for extra mouse buttons.")
                        (reparse-symbol indented_block_body) [101538 101735])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101761 101765]))                          
                        :documentation "
        Return the title text of the window containing the figure, or None
        if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [101740 101942])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101968 101972])
                            ("title" variable nil (reparse-symbol function_parameters) [101974 101979]))                          
                        :documentation "
        Set the title text of the window containing the figure.

        This has no effect for non-GUI (e.g., PS) backends.
        ")
                        (reparse-symbol indented_block_body) [101947 102131]))                  
                :type "class")
                nil [96889 102131])
            ("cursors" variable nil nil [102133 102156])
            ("_Mode" type
               (:superclasses ("str" "Enum")
                :members 
                  ( ("NONE" variable nil (reparse-symbol indented_block_body) [102187 102196])
                    ("PAN" variable nil (reparse-symbol indented_block_body) [102201 102217])
                    ("ZOOM" variable nil (reparse-symbol indented_block_body) [102222 102240])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102258 102262]))                          )
                        (reparse-symbol indented_block_body) [102246 102291])
                    ("_navigate_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102329 102333]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [102296 102397]))                  
                :type "class")
                nil [102159 102397])
            ("NavigationToolbar2" type
               (:documentation "
    Base class for the navigation cursor, version 2.

    Backends must implement a canvas that handles connections for
    'button_press_event' and 'button_release_event'.  See
    :meth:`FigureCanvasBase.mpl_connect` for more information.

    They must also define

      :meth:`save_figure`
         save the current figure

      :meth:`draw_rubberband` (optional)
         draw the zoom to rect \"rubberband\" rectangle

      :meth:`set_message` (optional)
         display message

      :meth:`set_history_buttons` (optional)
         you can change the history back / forward buttons to
         indicate disabled / enabled state.

    and override ``__init__`` to set up the toolbar -- without forgetting to
    call the base-class init.  Typically, ``__init__`` needs to set up toolbar
    buttons connected to the `home`, `back`, `forward`, `pan`, `zoom`, and
    `save_figure` methods and using standard icons in the \"images\" subdirectory
    of the data path.

    That's it, we'll do the rest!
    "
                :members 
                  ( ("toolitems" variable nil (reparse-symbol indented_block_body) [103818 104448])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [104490 104510])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [104519 104540])
                            ("self" variable nil (reparse-symbol indented_block_body) [104549 104580])
                            ("self" variable nil (reparse-symbol indented_block_body) [104647 104687])
                            ("self" variable nil (reparse-symbol indented_block_body) [104697 104796])
                            ("self" variable nil (reparse-symbol indented_block_body) [104805 104908])
                            ("self" variable nil (reparse-symbol indented_block_body) [104917 105009])
                            ("self" variable nil (reparse-symbol indented_block_body) [105018 105039])
                            ("self" variable nil (reparse-symbol indented_block_body) [105048 105070])
                            ("self" variable nil (reparse-symbol indented_block_body) [105080 105102])
                            ("self" code nil (reparse-symbol indented_block_body) [105147 105173]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104467 104471])
                            ("canvas" variable nil (reparse-symbol function_parameters) [104473 104479]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [104454 105174])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105195 105199])
                            ("s" variable nil (reparse-symbol function_parameters) [105201 105202]))                          
                        :documentation "Display a message on toolbar or in status bar.")
                        (reparse-symbol indented_block_body) [105179 105266])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105291 105295])
                            ("event" variable nil (reparse-symbol function_parameters) [105297 105302])
                            ("x0" variable nil (reparse-symbol function_parameters) [105304 105306])
                            ("y0" variable nil (reparse-symbol function_parameters) [105308 105310])
                            ("x1" variable nil (reparse-symbol function_parameters) [105312 105314])
                            ("y1" variable nil (reparse-symbol function_parameters) [105316 105318]))                          
                        :documentation "
        Draw a rectangle rubberband to indicate zoom limits.

        Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.
        ")
                        (reparse-symbol indented_block_body) [105271 105482])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105509 105513]))                          
                        :documentation "Remove the rubberband.")
                        (reparse-symbol indented_block_body) [105487 105553])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105567 105571])
                            ("args" variable nil (reparse-symbol function_parameters) [105573 105578]))                          
                        :documentation "
        Restore the original view.

        For convenience of being directly connected as a GUI callback, which
        often get passed additional parameters, this method accepts arbitrary
        parameters, but does not use them.
        ")
                        (reparse-symbol indented_block_body) [105558 105933])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105947 105951])
                            ("args" variable nil (reparse-symbol function_parameters) [105953 105958]))                          
                        :documentation "
        Move back up the view lim stack.

        For convenience of being directly connected as a GUI callback, which
        often get passed additional parameters, this method accepts arbitrary
        parameters, but does not use them.
        ")
                        (reparse-symbol indented_block_body) [105938 106319])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106336 106340])
                            ("args" variable nil (reparse-symbol function_parameters) [106342 106347]))                          
                        :documentation "
        Move forward in the view lim stack.

        For convenience of being directly connected as a GUI callback, which
        often get passed additional parameters, this method accepts arbitrary
        parameters, but does not use them.
        ")
                        (reparse-symbol indented_block_body) [106324 106714])
                    ("_update_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106738 106742])
                            ("event" variable nil (reparse-symbol function_parameters) [106744 106749]))                          
                        :documentation "
        Update the cursor after a mouse move event or a tool (de)activation.
        ")
                        (reparse-symbol indented_block_body) [106719 107553])
                    ("_wait_cursor_for_draw_cm" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107607 107611]))                          
                        :documentation "
        Set the cursor to a wait cursor when drawing the canvas.

        In order to avoid constantly changing the cursor when the canvas
        changes frequently, do nothing if this context was triggered during the
        last second.  (Optimally we'd prefer only setting the wait cursor if
        the *current* draw takes too long, but the current draw blocks the GUI
        thread).
        ")
                        (reparse-symbol indented_block_body) [107558 108394])
                    ("_mouse_event_to_message" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("event" variable nil (reparse-symbol function_parameters) [108445 108450]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [108399 109288])
                    ("mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109308 109312])
                            ("event" variable nil (reparse-symbol function_parameters) [109314 109319]))                          )
                        (reparse-symbol indented_block_body) [109293 109518])
                    ("_zoom_pan_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109545 109549])
                            ("event" variable nil (reparse-symbol function_parameters) [109551 109556]))                          )
                        (reparse-symbol indented_block_body) [109523 110000])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110013 110017])
                            ("args" variable nil (reparse-symbol function_parameters) [110019 110024]))                          
                        :documentation "
        Toggle the pan/zoom tool.

        Pan with left button, zoom with right.
        ")
                        (reparse-symbol indented_block_body) [110005 110483])
                    ("_PanInfo" variable nil (reparse-symbol indented_block_body) [110488 110540])
                    ("press_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110560 110564])
                            ("event" variable nil (reparse-symbol function_parameters) [110566 110571]))                          
                        :documentation "Callback for mouse button press in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [110546 111368])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111386 111390])
                            ("event" variable nil (reparse-symbol function_parameters) [111392 111397]))                          
                        :documentation "Callback for dragging in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [111373 111753])
                    ("release_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111774 111778])
                            ("event" variable nil (reparse-symbol function_parameters) [111780 111785]))                          
                        :documentation "Callback for mouse button release in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [111758 112218])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112232 112236])
                            ("args" variable nil (reparse-symbol function_parameters) [112238 112243]))                          
                        :documentation "Toggle zoom to rect mode.")
                        (reparse-symbol indented_block_body) [112223 112638])
                    ("_ZoomInfo" variable nil (reparse-symbol indented_block_body) [112643 112714])
                    ("press_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112735 112739])
                            ("event" variable nil (reparse-symbol function_parameters) [112741 112746]))                          
                        :documentation "Callback for mouse button press in zoom to rect mode.")
                        (reparse-symbol indented_block_body) [112720 113854])
                    ("drag_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113873 113877])
                            ("event" variable nil (reparse-symbol function_parameters) [113879 113884]))                          
                        :documentation "Callback for dragging in zoom mode.")
                        (reparse-symbol indented_block_body) [113859 114538])
                    ("release_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114560 114564])
                            ("event" variable nil (reparse-symbol function_parameters) [114566 114571]))                          
                        :documentation "Callback for mouse button release in zoom to rect mode.")
                        (reparse-symbol indented_block_body) [114543 116290])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116312 116316]))                          
                        :documentation "Push the current view limits and position onto the stack.")
                        (reparse-symbol indented_block_body) [116295 116758])
                    ("_update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116780 116784]))                          
                        :documentation "
        Update the viewlim and position from the view and position stack for
        each axes.
        ")
                        (reparse-symbol indented_block_body) [116763 117443])
                    ("configure_subplots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117471 117475])
                            ("args" variable nil (reparse-symbol function_parameters) [117477 117482]))                          )
                        (reparse-symbol indented_block_body) [117448 118380])
                    ("save_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118401 118405])
                            ("args" variable nil (reparse-symbol function_parameters) [118407 118412]))                          
                        :documentation "Save the current figure.")
                        (reparse-symbol indented_block_body) [118385 118488])
                    ("" code nil (reparse-symbol indented_block_body) [118509 118562])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118582 118586])
                            ("cursor" variable nil (reparse-symbol function_parameters) [118588 118594]))                          
                        :documentation "
        Set the current cursor to one of the :class:`Cursors` enums values.

        If required by the backend, this method should trigger an update in
        the backend event loop after the cursor is set, as this method may be
        called e.g. before a long-running task during which the GUI is not
        updated.
        ")
                        (reparse-symbol indented_block_body) [118567 118983])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118999 119003]))                          
                        :documentation "Reset the axes stack.")
                        (reparse-symbol indented_block_body) [118988 119109])
                    ("set_history_buttons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119138 119142]))                          
                        :documentation "Enable or disable the back/forward button.")
                        (reparse-symbol indented_block_body) [119114 119202]))                  
                :type "class")
                nil [102399 119202])
            ("ToolContainerBase" type
               (:documentation "
    Base class for all tool containers, e.g. toolbars.

    Attributes
    ----------
    toolmanager : `.ToolManager`
        The tools with which this `ToolContainer` wants to communicate.
    "
                :members 
                  ( ("_icon_extension" variable nil (reparse-symbol indented_block_body) [119441 119465])
                    ("\"\"\"
    Toolcontainer button icon image format extension

    **String**: Image extension
    \"\"\"" code nil (reparse-symbol indented_block_body) [119470 119567])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [119614 119644])
                            ("toolmanager" code nil (reparse-symbol indented_block_body) [119653 119778])
                            ("toolmanager" code nil (reparse-symbol indented_block_body) [119787 119918]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119586 119590])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [119592 119603]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [119573 119919])
                    ("_tool_toggled_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119946 119950])
                            ("event" variable nil (reparse-symbol function_parameters) [119952 119957]))                          
                        :documentation "
        Capture the 'tool_trigger_[name]'

        This only gets used for toggled tools.
        ")
                        (reparse-symbol indented_block_body) [119924 120140])
                    ("add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120158 120162])
                            ("tool" variable nil (reparse-symbol function_parameters) [120164 120168])
                            ("group" variable nil (reparse-symbol function_parameters) [120170 120175])
                            ("position" variable nil (reparse-symbol function_parameters) [120177 120185]))                          
                        :documentation "
        Add a tool to this container.

        Parameters
        ----------
        tool : tool_like
            The tool to add, see `.ToolManager.get_tool`.
        group : str
            The name of the group to add this tool to.
        position : int, default: -1
            The position within the group to place this tool.
        ")
                        (reparse-symbol indented_block_body) [120145 121111])
                    ("_get_image_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121140 121144])
                            ("image" variable nil (reparse-symbol function_parameters) [121146 121151]))                          
                        :documentation "Find the image based on its name.")
                        (reparse-symbol indented_block_body) [121116 121553])
                    ("trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121575 121579])
                            ("name" variable nil (reparse-symbol function_parameters) [121581 121585]))                          
                        :documentation "
        Trigger the tool.

        Parameters
        ----------
        name : str
            Name (id) of the tool triggered from within the container.
        ")
                        (reparse-symbol indented_block_body) [121558 121824])
                    ("add_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121846 121850])
                            ("name" variable nil (reparse-symbol function_parameters) [121852 121856])
                            ("group" variable nil (reparse-symbol function_parameters) [121858 121863])
                            ("position" variable nil (reparse-symbol function_parameters) [121865 121873])
                            ("image" variable nil (reparse-symbol function_parameters) [121875 121880])
                            ("description" variable nil (reparse-symbol function_parameters) [121882 121893])
                            ("toggle" variable nil (reparse-symbol function_parameters) [121895 121901]))                          
                        :documentation "
        Add a toolitem to the container.

        This method must be implemented per backend.

        The callback associated with the button click event,
        must be *exactly* ``self.trigger_tool(name)``.

        Parameters
        ----------
        name : str
            Name of the tool to add, this gets used as the tool's ID and as the
            default label of the buttons.
        group : str
            Name of the group that this tool belongs to.
        position : int
            Position of the tool within its group, if -1 it goes at the end.
        image : str
            Filename of the image for the button or `None`.
        description : str
            Description of the tool, used for the tooltips.
        toggle : bool
            * `True` : The button is a toggle (change the pressed/unpressed
              state between consecutive clicks).
            * `False` : The button is a normal button (returns to unpressed
              state after release).
        ")
                        (reparse-symbol indented_block_body) [121829 122956])
                    ("toggle_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122981 122985])
                            ("name" variable nil (reparse-symbol function_parameters) [122987 122991])
                            ("toggled" variable nil (reparse-symbol function_parameters) [122993 123000]))                          
                        :documentation "
        Toggle the toolitem without firing event.

        Parameters
        ----------
        name : str
            Id of the tool to toggle.
        toggled : bool
            Whether to set this tool as toggled or not.
        ")
                        (reparse-symbol indented_block_body) [122961 123286])
                    ("remove_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123311 123315])
                            ("name" variable nil (reparse-symbol function_parameters) [123317 123321]))                          
                        :documentation "
        Remove a toolitem from the `ToolContainer`.

        This method must get implemented per backend.

        Called when `.ToolManager` emits a `tool_removed_event`.

        Parameters
        ----------
        name : str
            Name of the tool to remove.
        ")
                        (reparse-symbol indented_block_body) [123291 123653])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123674 123678])
                            ("s" variable nil (reparse-symbol function_parameters) [123680 123681]))                          
                        :documentation "
        Display a message on the toolbar.

        Parameters
        ----------
        s : str
            Message text.
        ")
                        (reparse-symbol indented_block_body) [123658 123865]))                  
                :type "class")
                nil [119204 123865])
            ("_Backend" type
               (:members 
                  ( ("backend_version" variable nil (reparse-symbol indented_block_body) [124139 124166])
                    ("FigureCanvas" variable nil (reparse-symbol indented_block_body) [124220 124239])
                    ("FigureManager" variable nil (reparse-symbol indented_block_body) [124323 124356])
                    ("mainloop" variable nil (reparse-symbol indented_block_body) [124550 124565])
                    ("new_figure_manager" function
                       (:documentation "Create a new figure manager instance."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [124713 124716])
                            ("num" variable nil (reparse-symbol function_parameters) [124718 124721])
                            ("args" variable nil (reparse-symbol function_parameters) [124723 124728])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [124730 124738]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [124673 125058])
                    ("new_figure_manager_given_figure" function
                       (:documentation "Create a new figure manager instance for the given figure."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [125116 125119])
                            ("num" variable nil (reparse-symbol function_parameters) [125121 125124])
                            ("figure" variable nil (reparse-symbol function_parameters) [125126 125132]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [125063 125322])
                    ("draw_if_interactive" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [125368 125371]))                          )
                        (reparse-symbol indented_block_body) [125327 125538])
                    ("show" function
                       (:documentation "
        Show all figures.

        `show` blocks by calling `mainloop` if *block* is ``True``, or if it
        is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in
        `interactive` mode.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [125569 125572])
                            ("block" variable nil (reparse-symbol function_parameters) [125577 125582]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [125543 126943])
                    ("export" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [127048 127051]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [127019 127659]))                  
                :type "class")
                nil [123867 127659])
            ("ShowBase" type
               (:documentation "
    Simple base class to generate a ``show()`` function in backends.

    Subclass must override ``mainloop()`` method.
    "
                :superclasses ("_Backend")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127841 127845])
                            ("block" variable nil (reparse-symbol function_parameters) [127847 127852]))                          )
                        (reparse-symbol indented_block_body) [127828 127898]))                  
                :type "class")
                nil [127661 127898]))          
      :file "backend_bases.py"
      :pointmax 127898
      :fsize 127897
      :lastmodtime '(25218 25732 341935 950000)
      :unmatched-syntax '((INDENT_BLOCK 126084 . 126129) (NEWLINE 126083 . 126084) (COLON 126082 . 126083) (TRY 125957 . 125960) (AS 126076 . 126078) (MULT 125574 . 125575) (COMMA 125575 . 125576) (RETURN 102344 . 102350) (IF 102361 . 102363) (ELSE 102387 . 102391) (INDENT_BLOCK 96066 . 96145) (NEWLINE 96065 . 96066) (COLON 96064 . 96065) (TRY 95986 . 95989) (AS 96058 . 96060) (INDENT_BLOCK 95566 . 95645) (NEWLINE 95565 . 95566) (COLON 95564 . 95565) (TRY 95486 . 95489) (AS 95558 . 95560) (INDENT_BLOCK 80679 . 83275) (NEWLINE 80677 . 80678) (COLON 80676 . 80677) (AS 80668 . 80670) (WITH 80417 . 80421) (COMMA 80459 . 80460) (MULT 77098 . 77099) (COMMA 77099 . 77100) (MULT 73752 . 73753) (COMMA 73753 . 73754) (INDENT_BLOCK 53516 . 53556) (NEWLINE 53515 . 53516) (COLON 53514 . 53515) (FINALLY 53507 . 53514) (INDENT_BLOCK 53360 . 53499) (NEWLINE 53359 . 53360) (COLON 53358 . 53359) (ELSE 53354 . 53358) (INDENT_BLOCK 53259 . 53346) (NEWLINE 53258 . 53259) (COLON 53257 . 53258) (TRY 53187 . 53190) (AS 53251 . 53253) (NAME 44893 . 44897) (IF 44909 . 44911) (ELSE 44926 . 44930) (NAME 44794 . 44798) (IF 44810 . 44812) (ELSE 44827 . 44831) (NAME 38072 . 38076) (IF 38093 . 38095) (ELSE 38113 . 38117) (NAME 37923 . 37927) (IF 37943 . 37945) (ELSE 37964 . 37968) (MULT 18867 . 18868) (COMMA 18868 . 18869)))
    (semanticdb-table "semanticdb-table-157fb345d14c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
`matplotlib.figure` implements the following classes:

`Figure`
    Top level `~matplotlib.artist.Artist`, which holds all plot elements.
    Many methods are implemented in `FigureBase`.

`SubFigure`
    A logical figure inside a figure, usually added to a figure (or parent
    `SubFigure`) with `Figure.add_subfigure` or `Figure.subfigures` methods
    (provisional API v3.4).

`SubplotParams`
    Control the default spacing between subplots.
\"\"\"" code nil nil [1 455])
            ("contextlib" include nil nil [457 489])
            ("inspect" include nil nil [490 504])
            ("logging" include nil nil [505 519])
            ("numbers" include nil nil [520 548])
            ("numpy" include nil nil [550 568])
            ("matplotlib" include nil nil [570 594])
            ("matplotlib" include nil nil [595 657])
            ("" code nil nil [688 747])
            ("" code nil nil [785 853])
            ("matplotlib._api" include nil nil [854 884])
            ("matplotlib.cbook" include nil nil [885 917])
            ("matplotlib.colorbar" include nil nil [918 952])
            ("matplotlib.image" include nil nil [953 986])
            ("matplotlib.axes" include nil nil [988 1056])
            ("matplotlib.gridspec" include nil nil [1057 1097])
            ("matplotlib.legend" include nil nil [1098 1133])
            ("matplotlib.patches" include nil nil [1134 1174])
            ("matplotlib.text" include nil nil [1175 1207])
            ("" code nil nil [1242 1327])
            ("_log" variable nil nil [1329 1363])
            ("_stale_figure_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1393 1397])
                    ("val" variable nil (reparse-symbol function_parameters) [1399 1402]))                  )
                nil [1366 1457])
            ("_AxesStack" type
               (:documentation "
    Specialization of Stack, to handle all tracking of Axes in a Figure.

    This stack stores ``ind, axes`` pairs, where ``ind`` is a serial index
    tracking the order in which axes were added.

    AxesStack is a callable; calling it returns the current axes.
    "
                :superclasses ("cbook.Stack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1804 1822])
                            ("self" variable nil (reparse-symbol indented_block_body) [1831 1844]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1789 1793]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1776 1845])
                    ("as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1862 1866]))                          
                        :documentation "
        Return a list of the Axes instances that have been added to the figure.
        ")
                        (reparse-symbol indented_block_body) [1850 2027])
                    ("_entry_from_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2053 2057])
                            ("e" variable nil (reparse-symbol function_parameters) [2059 2060]))                          )
                        (reparse-symbol indented_block_body) [2032 2140])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2156 2160])
                            ("a" variable nil (reparse-symbol function_parameters) [2162 2163]))                          
                        :documentation "Remove the axes from the stack.")
                        (reparse-symbol indented_block_body) [2145 2261])
                    ("bubble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2277 2281])
                            ("a" variable nil (reparse-symbol function_parameters) [2283 2284]))                          
                        :documentation "
        Move the given axes, which must already exist in the stack, to the top.
        ")
                        (reparse-symbol indented_block_body) [2266 2447])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2460 2464])
                            ("a" variable nil (reparse-symbol function_parameters) [2466 2467]))                          
                        :documentation "
        Add Axes *a* to the stack.

        If *a* is already on the stack, don't add it again.
        ")
                        (reparse-symbol indented_block_body) [2452 2866])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2884 2888]))                          
                        :documentation "
        Return the active axes.

        If no axes exists on the stack, then returns None.
        ")
                        (reparse-symbol indented_block_body) [2871 3157])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3179 3183])
                            ("a" variable nil (reparse-symbol function_parameters) [3185 3186]))                          )
                        (reparse-symbol indented_block_body) [3162 3224]))                  
                :type "class")
                nil [1459 3224])
            ("SubplotParams" type
               (:documentation "
    A class to hold the parameters for a subplot.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Defaults are given by :rc:`figure.subplot.[name]`.

        Parameters
        ----------
        left : float
            The position of the left edge of the subplots,
            as a fraction of the figure width.
        right : float
            The position of the right edge of the subplots,
            as a fraction of the figure width.
        bottom : float
            The position of the bottom edge of the subplots,
            as a fraction of the figure height.
        top : float
            The position of the top edge of the subplots,
            as a fraction of the figure height.
        wspace : float
            The width of the padding between subplots,
            as a fraction of the average Axes width.
        hspace : float
            The height of the padding between subplots,
            as a fraction of the average Axes height.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3435 4326])
                            ("self" variable nil (reparse-symbol indented_block_body) [4335 4356])
                            ("for" code nil (reparse-symbol indented_block_body) [4365 4502])
                            ("self" code nil (reparse-symbol indented_block_body) [4510 4563]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3331 3335])
                            ("left" variable nil (reparse-symbol function_parameters) [3337 3341])
                            ("bottom" variable nil (reparse-symbol function_parameters) [3348 3354])
                            ("right" variable nil (reparse-symbol function_parameters) [3361 3366])
                            ("top" variable nil (reparse-symbol function_parameters) [3373 3376])
                            ("wspace" variable nil (reparse-symbol function_parameters) [3400 3406])
                            ("hspace" variable nil (reparse-symbol function_parameters) [3413 3419]))                          
                        :documentation "
        Defaults are given by :rc:`figure.subplot.[name]`.

        Parameters
        ----------
        left : float
            The position of the left edge of the subplots,
            as a fraction of the figure width.
        right : float
            The position of the right edge of the subplots,
            as a fraction of the figure width.
        bottom : float
            The position of the bottom edge of the subplots,
            as a fraction of the figure height.
        top : float
            The position of the top edge of the subplots,
            as a fraction of the figure height.
        wspace : float
            The width of the padding between subplots,
            as a fraction of the average Axes width.
        hspace : float
            The height of the padding between subplots,
            as a fraction of the average Axes height.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3318 4564])
                    ("validate" variable nil (reparse-symbol indented_block_body) [4624 4676])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4693 4697])
                            ("left" variable nil (reparse-symbol function_parameters) [4699 4703])
                            ("bottom" variable nil (reparse-symbol function_parameters) [4710 4716])
                            ("right" variable nil (reparse-symbol function_parameters) [4723 4728])
                            ("top" variable nil (reparse-symbol function_parameters) [4735 4738])
                            ("wspace" variable nil (reparse-symbol function_parameters) [4760 4766])
                            ("hspace" variable nil (reparse-symbol function_parameters) [4773 4779]))                          
                        :documentation "
        Update the dimensions of the passed parameters. *None* means unchanged.
        ")
                        (reparse-symbol indented_block_body) [4682 5660]))                  
                :type "class")
                nil [3226 5660])
            ("FigureBase" type
               (:documentation "
    Base class for `.figure.Figure` and `.figure.SubFigure` containing the
    methods that add artists to the figure or subfigure, create Axes, etc.
    "
                :superclasses ("Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [5896 5914])
                            ("del" code nil (reparse-symbol indented_block_body) [6158 6172])
                            ("self" variable nil (reparse-symbol indented_block_body) [6182 6203])
                            ("self" variable nil (reparse-symbol indented_block_body) [6212 6234])
                            ("self" variable nil (reparse-symbol indented_block_body) [6243 6265])
                            ("self" variable nil (reparse-symbol indented_block_body) [6444 6515])
                            ("self" variable nil (reparse-symbol indented_block_body) [6525 6543])
                            ("self" variable nil (reparse-symbol indented_block_body) [6602 6622])
                            ("self" variable nil (reparse-symbol indented_block_body) [6631 6661])
                            ("self" variable nil (reparse-symbol indented_block_body) [6705 6722])
                            ("self" variable nil (reparse-symbol indented_block_body) [6731 6746])
                            ("self" variable nil (reparse-symbol indented_block_body) [6755 6772])
                            ("self" variable nil (reparse-symbol indented_block_body) [6781 6796])
                            ("self" variable nil (reparse-symbol indented_block_body) [6805 6821])
                            ("self" variable nil (reparse-symbol indented_block_body) [6830 6847])
                            ("self" variable nil (reparse-symbol indented_block_body) [6856 6873])
                            ("self" variable nil (reparse-symbol indented_block_body) [6882 6899])
                            ("self" variable nil (reparse-symbol indented_block_body) [6908 6937])
                            ("self" code nil (reparse-symbol indented_block_body) [6946 6964]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5871 5875])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5877 5885]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5858 6965])
                    ("_get_draw_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6992 6996])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6998 7006]))                          
                        :documentation "Also runs apply_aspect")
                        (reparse-symbol indented_block_body) [6970 8117])
                    ("autofmt_xdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8153 8157])
                            ("bottom" variable nil (reparse-symbol function_parameters) [8159 8165])
                            ("rotation" variable nil (reparse-symbol function_parameters) [8171 8179])
                            ("ha" variable nil (reparse-symbol function_parameters) [8184 8186])
                            ("which" variable nil (reparse-symbol function_parameters) [8196 8201]))                          
                        :documentation "
        Date ticklabels often overlap, so it is useful to rotate them
        and right align them.  Also, a common use case is a number of
        subplots with shared x-axis where the x-axis is date data.  The
        ticklabels are often long, and it helps to rotate them on the
        bottom subplot and turn them off on other subplots, as well as
        turn off xlabels.

        Parameters
        ----------
        bottom : float, default: 0.2
            The bottom of the subplots for `subplots_adjust`.
        rotation : float, default: 30 degrees
            The rotation angle of the xtick labels in degrees.
        ha : {'left', 'center', 'right'}, default: 'right'
            The horizontal alignment of the xticklabels.
        which : {'major', 'minor', 'both'}, default: 'major'
            Selects which ticklabels to rotate.
        ")
                        (reparse-symbol indented_block_body) [8122 10017])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10039 10043]))                          
                        :documentation "Get a list of artists contained in the figure.")
                        (reparse-symbol indented_block_body) [10022 10391])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10409 10413])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [10415 10425]))                          
                        :documentation "
        Test whether the mouse event occurred on the figure.

        Returns
        -------
            bool, {}
        ")
                        (reparse-symbol indented_block_body) [10396 10791])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10818 10822])
                            ("args" variable nil (reparse-symbol function_parameters) [10824 10829])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10831 10839]))                          )
                        (reparse-symbol indented_block_body) [10796 10897])
                    ("_suplabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10917 10921])
                            ("t" variable nil (reparse-symbol function_parameters) [10923 10924])
                            ("info" variable nil (reparse-symbol function_parameters) [10926 10930])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10932 10940]))                          
                        :documentation "
        Add a centered %(name)s to the figure.

        Parameters
        ----------
        t : str
            The %(name)s text.
        x : float, default: %(x0)s
            The x location of the text in figure coordinates.
        y : float, default: %(y0)s
            The y location of the text in figure coordinates.
        horizontalalignment, ha : {'center', 'left', 'right'}, default: %(ha)s
            The horizontal alignment of the text relative to (*x*, *y*).
        verticalalignment, va : {'top', 'center', 'bottom', 'baseline'}, \\
default: %(va)s
            The vertical alignment of the text relative to (*x*, *y*).
        fontsize, size : default: :rc:`figure.titlesize`
            The font size of the text. See `.Text.set_size` for possible
            values.
        fontweight, weight : default: :rc:`figure.titleweight`
            The font weight of the text. See `.Text.set_weight` for possible
            values.

        Returns
        -------
        text
            The `.Text` instance of the %(name)s.

        Other Parameters
        ----------------
        fontproperties : None or dict, optional
            A dict of font properties. If *fontproperties* is given the
            default values for font size and weight are taken from the
            `.FontProperties` defaults. :rc:`figure.titlesize` and
            :rc:`figure.titleweight` are ignored in this case.

        **kwargs
            Additional kwargs are `matplotlib.text.Text` properties.
        ")
                        (reparse-symbol indented_block_body) [10902 13873])
                    ("" code nil (reparse-symbol indented_block_body) [13901 13986])
                    ("" code nil (reparse-symbol indented_block_body) [14006 14018])
                    ("suptitle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14036 14040])
                            ("t" variable nil (reparse-symbol function_parameters) [14042 14043])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14045 14053]))                          )
                        (reparse-symbol indented_block_body) [14023 14265])
                    ("" code nil (reparse-symbol indented_block_body) [14293 14382])
                    ("" code nil (reparse-symbol indented_block_body) [14402 14414])
                    ("supxlabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14433 14437])
                            ("t" variable nil (reparse-symbol function_parameters) [14439 14440])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14442 14450]))                          )
                        (reparse-symbol indented_block_body) [14419 14666])
                    ("" code nil (reparse-symbol indented_block_body) [14694 14781])
                    ("" code nil (reparse-symbol indented_block_body) [14801 14813])
                    ("supylabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14832 14836])
                            ("t" variable nil (reparse-symbol function_parameters) [14838 14839])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14841 14849]))                          )
                        (reparse-symbol indented_block_body) [14818 15115])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15138 15142]))                          
                        :documentation "Get the edge color of the Figure rectangle.")
                        (reparse-symbol indented_block_body) [15120 15245])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15268 15272]))                          
                        :documentation "Get the face color of the Figure rectangle.")
                        (reparse-symbol indented_block_body) [15250 15375])
                    ("get_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15396 15400]))                          
                        :documentation "
        Return the figure's background patch visibility, i.e.
        whether the figure background will be drawn. Equivalent to
        ``Figure.patch.get_visible()``.
        ")
                        (reparse-symbol indented_block_body) [15380 15636])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15659 15663])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [15665 15674]))                          
                        :documentation "
        Set the line width of the Figure rectangle.

        Parameters
        ----------
        linewidth : number
        ")
                        (reparse-symbol indented_block_body) [15641 15863])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15886 15890]))                          
                        :documentation "
        Get the line width of the Figure rectangle.
        ")
                        (reparse-symbol indented_block_body) [15868 16011])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16034 16038])
                            ("color" variable nil (reparse-symbol function_parameters) [16040 16045]))                          
                        :documentation "
        Set the edge color of the Figure rectangle.

        Parameters
        ----------
        color : color
        ")
                        (reparse-symbol indented_block_body) [16016 16225])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16248 16252])
                            ("color" variable nil (reparse-symbol function_parameters) [16254 16259]))                          
                        :documentation "
        Set the face color of the Figure rectangle.

        Parameters
        ----------
        color : color
        ")
                        (reparse-symbol indented_block_body) [16230 16439])
                    ("set_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16460 16464])
                            ("b" variable nil (reparse-symbol function_parameters) [16466 16467]))                          
                        :documentation "
        Set the figure's background patch visibility, i.e.
        whether the figure background will be drawn. Equivalent to
        ``Figure.patch.set_visible()``.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [16444 16776])
                    ("frameon" variable nil (reparse-symbol indented_block_body) [16781 16825])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16846 16850])
                            ("artist" variable nil (reparse-symbol function_parameters) [16852 16858])
                            ("clip" variable nil (reparse-symbol function_parameters) [16860 16864]))                          
                        :documentation "
        Add an `.Artist` to the figure.

        Usually artists are added to Axes objects using `.Axes.add_artist`;
        this method can be used in the rare cases where one needs to add
        artists directly to the figure instead.

        Parameters
        ----------
        artist : `~matplotlib.artist.Artist`
            The artist to add to the figure. If the added artist has no
            transform previously set, its transform will be set to
            ``figure.transSubfigure``.
        clip : bool, default: False
            Whether the added artist should be clipped by the figure patch.

        Returns
        -------
        `~matplotlib.artist.Artist`
            The added artist.
        ")
                        (reparse-symbol indented_block_body) [16831 17937])
                    ("add_axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17985 17989])
                            ("args" variable nil (reparse-symbol function_parameters) [17991 17996])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17998 18006]))                          
                        :documentation "
        Add an Axes to the figure.

        Call signatures::

            add_axes(rect, projection=None, polar=False, **kwargs)
            add_axes(ax)

        Parameters
        ----------
        rect : sequence of float
            The dimensions [left, bottom, width, height] of the new Axes. All
            quantities are in fractions of figure width and height.

        projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\
'polar', 'rectilinear', str}, optional
            The projection type of the `~.axes.Axes`. *str* is the name of
            a custom projection, see `~matplotlib.projections`. The default
            None results in a 'rectilinear' projection.

        polar : bool, default: False
            If True, equivalent to projection='polar'.

        axes_class : subclass type of `~.axes.Axes`, optional
            The `.axes.Axes` subclass that is instantiated.  This parameter
            is incompatible with *projection* and *polar*.  See
            :ref:`axisartist_users-guide-index` for examples.

        sharex, sharey : `~.axes.Axes`, optional
            Share the x or y `~matplotlib.axis` with sharex and/or sharey.
            The axis will have the same limits, ticks, and scale as the axis
            of the shared axes.

        label : str
            A label for the returned Axes.

        Returns
        -------
        `~.axes.Axes`, or a subclass of `~.axes.Axes`
            The returned axes class depends on the projection used. It is
            `~.axes.Axes` if rectilinear projection is used and
            `.projections.polar.PolarAxes` if polar projection is used.

        Other Parameters
        ----------------
        **kwargs
            This method also takes the keyword arguments for
            the returned Axes class. The keyword arguments for the
            rectilinear Axes class `~.axes.Axes` can be found in
            the following table but there might also be other keyword
            arguments if another projection is used, see the actual Axes
            class.

            %(Axes:kwdoc)s

        Notes
        -----
        In rare circumstances, `.add_axes` may be called with a single
        argument, an Axes instance already created in the present figure but
        not in the figure's list of Axes.

        See Also
        --------
        .Figure.add_subplot
        .pyplot.subplot
        .pyplot.axes
        .Figure.subplots
        .pyplot.subplots

        Examples
        --------
        Some simple examples::

            rect = l, b, w, h
            fig = plt.figure()
            fig.add_axes(rect)
            fig.add_axes(rect, frameon=False, facecolor='g')
            fig.add_axes(rect, polar=True)
            ax = fig.add_axes(rect, projection='polar')
            fig.delaxes(ax)
            fig.add_axes(ax)
        ")
                        (reparse-symbol indented_block_body) [17942 22025])
                    ("add_subplot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22076 22080])
                            ("args" variable nil (reparse-symbol function_parameters) [22082 22087])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22089 22097]))                          
                        :documentation "
        Add an `~.axes.Axes` to the figure as part of a subplot arrangement.

        Call signatures::

           add_subplot(nrows, ncols, index, **kwargs)
           add_subplot(pos, **kwargs)
           add_subplot(ax)
           add_subplot()

        Parameters
        ----------
        *args : int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)
            The position of the subplot described by one of

            - Three integers (*nrows*, *ncols*, *index*). The subplot will
              take the *index* position on a grid with *nrows* rows and
              *ncols* columns. *index* starts at 1 in the upper left corner
              and increases to the right.  *index* can also be a two-tuple
              specifying the (*first*, *last*) indices (1-based, and including
              *last*) of the subplot, e.g., ``fig.add_subplot(3, 1, (1, 2))``
              makes a subplot that spans the upper 2/3 of the figure.
            - A 3-digit integer. The digits are interpreted as if given
              separately as three single-digit integers, i.e.
              ``fig.add_subplot(235)`` is the same as
              ``fig.add_subplot(2, 3, 5)``. Note that this can only be used
              if there are no more than 9 subplots.
            - A `.SubplotSpec`.

            In rare circumstances, `.add_subplot` may be called with a single
            argument, a subplot Axes instance already created in the
            present figure but not in the figure's list of Axes.

        projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\
'polar', 'rectilinear', str}, optional
            The projection type of the subplot (`~.axes.Axes`). *str* is the
            name of a custom projection, see `~matplotlib.projections`. The
            default None results in a 'rectilinear' projection.

        polar : bool, default: False
            If True, equivalent to projection='polar'.

        axes_class : subclass type of `~.axes.Axes`, optional
            The `.axes.Axes` subclass that is instantiated.  This parameter
            is incompatible with *projection* and *polar*.  See
            :ref:`axisartist_users-guide-index` for examples.

        sharex, sharey : `~.axes.Axes`, optional
            Share the x or y `~matplotlib.axis` with sharex and/or sharey.
            The axis will have the same limits, ticks, and scale as the axis
            of the shared axes.

        label : str
            A label for the returned Axes.

        Returns
        -------
        `.axes.SubplotBase`, or another subclass of `~.axes.Axes`

            The Axes of the subplot. The returned Axes base class depends on
            the projection used. It is `~.axes.Axes` if rectilinear projection
            is used and `.projections.polar.PolarAxes` if polar projection
            is used. The returned Axes is then a subplot subclass of the
            base class.

        Other Parameters
        ----------------
        **kwargs
            This method also takes the keyword arguments for the returned Axes
            base class; except for the *figure* argument. The keyword arguments
            for the rectilinear base class `~.axes.Axes` can be found in
            the following table but there might also be other keyword
            arguments if another projection is used.

            %(Axes:kwdoc)s

        See Also
        --------
        .Figure.add_axes
        .pyplot.subplot
        .pyplot.axes
        .Figure.subplots
        .pyplot.subplots

        Examples
        --------
        ::

            fig = plt.figure()

            fig.add_subplot(231)
            ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general

            fig.add_subplot(232, frameon=False)  # subplot with no frame
            fig.add_subplot(233, projection='polar')  # polar subplot
            fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1
            fig.add_subplot(235, facecolor=\"red\")  # red subplot

            ax1.remove()  # delete ax1 from the figure
            fig.add_subplot(ax1)  # add ax1 back to the figure
        ")
                        (reparse-symbol indented_block_body) [22030 27569])
                    ("_add_axes_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27597 27601])
                            ("ax" variable nil (reparse-symbol function_parameters) [27603 27605])
                            ("key" variable nil (reparse-symbol function_parameters) [27607 27610]))                          
                        :documentation "Private helper for `add_axes` and `add_subplot`.")
                        (reparse-symbol indented_block_body) [27574 27991])
                    ("subplots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28009 28013])
                            ("nrows" variable nil (reparse-symbol function_parameters) [28015 28020])
                            ("ncols" variable nil (reparse-symbol function_parameters) [28024 28029])
                            ("sharex" variable nil (reparse-symbol function_parameters) [28036 28042])
                            ("sharey" variable nil (reparse-symbol function_parameters) [28050 28056])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [28081 28088])
                            ("subplot_kw" variable nil (reparse-symbol function_parameters) [28095 28105])
                            ("gridspec_kw" variable nil (reparse-symbol function_parameters) [28112 28123]))                          
                        :documentation "
        Add a set of subplots to this figure.

        This utility wrapper makes it convenient to create common layouts of
        subplots in a single call.

        Parameters
        ----------
        nrows, ncols : int, default: 1
            Number of rows/columns of the subplot grid.

        sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
            Controls sharing of x-axis (*sharex*) or y-axis (*sharey*):

            - True or 'all': x- or y-axis will be shared among all subplots.
            - False or 'none': each subplot x- or y-axis will be independent.
            - 'row': each subplot row will share an x- or y-axis.
            - 'col': each subplot column will share an x- or y-axis.

            When subplots have a shared x-axis along a column, only the x tick
            labels of the bottom subplot are created. Similarly, when subplots
            have a shared y-axis along a row, only the y tick labels of the
            first column subplot are created. To later turn other subplots'
            ticklabels on, use `~matplotlib.axes.Axes.tick_params`.

            When subplots have a shared axis that has units, calling
            `.Axis.set_units` will update each axis with the new units.

        squeeze : bool, default: True
            - If True, extra dimensions are squeezed out from the returned
              array of Axes:

              - if only one subplot is constructed (nrows=ncols=1), the
                resulting single Axes object is returned as a scalar.
              - for Nx1 or 1xM subplots, the returned object is a 1D numpy
                object array of Axes objects.
              - for NxM, subplots with N>1 and M>1 are returned as a 2D array.

            - If False, no squeezing at all is done: the returned Axes object
              is always a 2D array containing Axes instances, even if it ends
              up being 1x1.

        subplot_kw : dict, optional
            Dict with keywords passed to the `.Figure.add_subplot` call used to
            create each subplot.

        gridspec_kw : dict, optional
            Dict with keywords passed to the
            `~matplotlib.gridspec.GridSpec` constructor used to create
            the grid the subplots are placed on.

        Returns
        -------
        `~.axes.Axes` or array of Axes
            Either a single `~matplotlib.axes.Axes` object or an array of Axes
            objects if more than one subplot was created. The dimensions of the
            resulting array can be controlled with the *squeeze* keyword, see
            above.

        See Also
        --------
        .pyplot.subplots
        .Figure.add_subplot
        .pyplot.subplot

        Examples
        --------
        ::

            # First create some toy data:
            x = np.linspace(0, 2*np.pi, 400)
            y = np.sin(x**2)

            # Create a figure
            plt.figure()

            # Create a subplot
            ax = fig.subplots()
            ax.plot(x, y)
            ax.set_title('Simple plot')

            # Create two subplots and unpack the output array immediately
            ax1, ax2 = fig.subplots(1, 2, sharey=True)
            ax1.plot(x, y)
            ax1.set_title('Sharing Y axis')
            ax2.scatter(x, y)

            # Create four polar Axes and access them through the returned array
            axes = fig.subplots(2, 2, subplot_kw=dict(projection='polar'))
            axes[0, 0].plot(x, y)
            axes[1, 1].scatter(x, y)

            # Share a X axis with each column of subplots
            fig.subplots(2, 2, sharex='col')

            # Share a Y axis with each row of subplots
            fig.subplots(2, 2, sharey='row')

            # Share both X and Y axes with all subplots
            fig.subplots(2, 2, sharex='all', sharey='all')

            # Note that this is the same as
            fig.subplots(2, 2, sharex=True, sharey=True)
        ")
                        (reparse-symbol indented_block_body) [27996 32381])
                    ("delaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32398 32402])
                            ("ax" variable nil (reparse-symbol function_parameters) [32404 32406]))                          
                        :documentation "
        Remove the `~.axes.Axes` *ax* from the figure; update the current Axes.
        ")
                        (reparse-symbol indented_block_body) [32386 33778])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33793 33797])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [33799 33813]))                          
                        :documentation "
        Clear the figure.

        Parameters
        ----------
        keep_observers: bool, default: False
            Set *keep_observers* to True if, for example,
            a gui widget is tracking the Axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [33783 34786])
                    ("clf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34826 34830])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [34832 34846]))                          
                        :documentation "
        Alias for the `clear()` method.

        .. admonition:: Discouraged

            The use of ``clf()`` is discouraged. Use ``clear()`` instead.

        Parameters
        ----------
        keep_observers: bool, default: False
            Set *keep_observers* to True if, for example,
            a gui widget is tracking the Axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [34818 35291])
                    ("legend" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35526 35530])
                            ("args" variable nil (reparse-symbol function_parameters) [35532 35537])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35539 35547]))                          
                        :documentation "
        Place a legend on the figure.

        Call signatures::

            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)

        The call signatures correspond to the following different ways to use
        this method:

        **1. Automatic detection of elements to be shown in the legend**

        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.

        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::

            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()

        or::

            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()

        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.


        **2. Explicitly listing the artists and labels in the legend**

        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::

            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])


        **3. Explicitly listing the artists in the legend**

        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::

            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])


        **4. Labeling existing plot elements**

        .. admonition:: Discouraged

            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.

        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::

            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])


        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.

            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.

        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.

        Returns
        -------
        `~matplotlib.legend.Legend`

        Other Parameters
        ----------------
        %(_legend_kw_doc)s

        See Also
        --------
        .Axes.legend

        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        ")
                        (reparse-symbol indented_block_body) [35485 40206])
                    ("text" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40250 40254])
                            ("x" variable nil (reparse-symbol function_parameters) [40256 40257])
                            ("y" variable nil (reparse-symbol function_parameters) [40259 40260])
                            ("s" variable nil (reparse-symbol function_parameters) [40262 40263])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [40265 40273])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40280 40288]))                          
                        :documentation "
        Add text to figure.

        Parameters
        ----------
        x, y : float
            The position to place the text. By default, this is in figure
            coordinates, floats in [0, 1]. The coordinate system can be changed
            using the *transform* keyword.

        s : str
            The text string.

        fontdict : dict, optional
            A dictionary to override the default text properties. If not given,
            the defaults are determined by :rc:`font.*`. Properties passed as
            *kwargs* override the corresponding ones given in *fontdict*.

        Returns
        -------
        `~.text.Text`

        Other Parameters
        ----------------
        **kwargs : `~matplotlib.text.Text` properties
            Other miscellaneous text parameters.

            %(Text:kwdoc)s

        See Also
        --------
        .Axes.text
        .pyplot.text
        ")
                        (reparse-symbol indented_block_body) [40211 41658])
                    ("colorbar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41706 41710])
                            ("mappable" variable nil (reparse-symbol function_parameters) [41712 41720])
                            ("cax" variable nil (reparse-symbol function_parameters) [41722 41725])
                            ("ax" variable nil (reparse-symbol function_parameters) [41732 41734])
                            ("use_gridspec" variable nil (reparse-symbol function_parameters) [41741 41753])
                            ("kw" variable nil (reparse-symbol function_parameters) [41760 41764]))                          
                        :documentation "%(colorbar_doc)s")
                        (reparse-symbol indented_block_body) [41663 43201])
                    ("subplots_adjust" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43226 43230])
                            ("left" variable nil (reparse-symbol function_parameters) [43232 43236])
                            ("bottom" variable nil (reparse-symbol function_parameters) [43243 43249])
                            ("right" variable nil (reparse-symbol function_parameters) [43256 43261])
                            ("top" variable nil (reparse-symbol function_parameters) [43268 43271])
                            ("wspace" variable nil (reparse-symbol function_parameters) [43302 43308])
                            ("hspace" variable nil (reparse-symbol function_parameters) [43315 43321]))                          
                        :documentation "
        Adjust the subplot layout parameters.

        Unset parameters are left unmodified; initial values are given by
        :rc:`figure.subplot.[name]`.

        Parameters
        ----------
        left : float, optional
            The position of the left edge of the subplots,
            as a fraction of the figure width.
        right : float, optional
            The position of the right edge of the subplots,
            as a fraction of the figure width.
        bottom : float, optional
            The position of the bottom edge of the subplots,
            as a fraction of the figure height.
        top : float, optional
            The position of the top edge of the subplots,
            as a fraction of the figure height.
        wspace : float, optional
            The width of the padding between subplots,
            as a fraction of the average Axes width.
        hspace : float, optional
            The height of the padding between subplots,
            as a fraction of the average Axes height.
        ")
                        (reparse-symbol indented_block_body) [43206 44955])
                    ("align_xlabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44978 44982])
                            ("axs" variable nil (reparse-symbol function_parameters) [44984 44987]))                          
                        :documentation "
        Align the xlabels of subplots in the same subplot column if label
        alignment is being done automatically (i.e. the label position is
        not manually set).

        Alignment persists for draw events after this is called.

        If a label is on the bottom, it is aligned with labels on Axes that
        also have their label on the bottom and that have the same
        bottom-most subplot row.  If the label is on the top,
        it is aligned with labels on Axes with the same top-most row.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes`
            Optional list of (or ndarray) `~matplotlib.axes.Axes`
            to align the xlabels.
            Default is to align all Axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_ylabels
        matplotlib.figure.Figure.align_labels

        Notes
        -----
        This assumes that ``axs`` are from the same `.GridSpec`, so that
        their `.SubplotSpec` positions correspond to figure positions.

        Examples
        --------
        Example with rotated xtick labels::

            fig, axs = plt.subplots(1, 2)
            for tick in axs[0].get_xticklabels():
                tick.set_rotation(55)
            axs[0].set_xlabel('XLabel 0')
            axs[1].set_xlabel('XLabel 1')
            fig.align_xlabels()
        ")
                        (reparse-symbol indented_block_body) [44960 47499])
                    ("align_ylabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47522 47526])
                            ("axs" variable nil (reparse-symbol function_parameters) [47528 47531]))                          
                        :documentation "
        Align the ylabels of subplots in the same subplot column if label
        alignment is being done automatically (i.e. the label position is
        not manually set).

        Alignment persists for draw events after this is called.

        If a label is on the left, it is aligned with labels on Axes that
        also have their label on the left and that have the same
        left-most subplot column.  If the label is on the right,
        it is aligned with labels on Axes with the same right-most column.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes`
            Optional list (or ndarray) of `~matplotlib.axes.Axes`
            to align the ylabels.
            Default is to align all Axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_xlabels
        matplotlib.figure.Figure.align_labels

        Notes
        -----
        This assumes that ``axs`` are from the same `.GridSpec`, so that
        their `.SubplotSpec` positions correspond to figure positions.

        Examples
        --------
        Example with large yticks labels::

            fig, axs = plt.subplots(2, 1)
            axs[0].plot(np.arange(0, 1000, 50))
            axs[0].set_ylabel('YLabel 0')
            axs[1].set_ylabel('YLabel 1')
            fig.align_ylabels()
        ")
                        (reparse-symbol indented_block_body) [47504 50006])
                    ("align_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50028 50032])
                            ("axs" variable nil (reparse-symbol function_parameters) [50034 50037]))                          
                        :documentation "
        Align the xlabels and ylabels of subplots with the same subplots
        row or column (respectively) if label alignment is being
        done automatically (i.e. the label position is not manually set).

        Alignment persists for draw events after this is called.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes`
            Optional list (or ndarray) of `~matplotlib.axes.Axes`
            to align the labels.
            Default is to align all Axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_xlabels

        matplotlib.figure.Figure.align_ylabels
        ")
                        (reparse-symbol indented_block_body) [50011 50789])
                    ("add_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50811 50815])
                            ("nrows" variable nil (reparse-symbol function_parameters) [50817 50822])
                            ("ncols" variable nil (reparse-symbol function_parameters) [50826 50831])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50835 50843]))                          
                        :documentation "
        Return a `.GridSpec` that has this figure as a parent.  This allows
        complex layout of Axes in the figure.

        Parameters
        ----------
        nrows : int, default: 1
            Number of rows in grid.

        ncols : int, default: 1
            Number or columns in grid.

        Returns
        -------
        `.GridSpec`

        Other Parameters
        ----------------
        **kwargs
            Keyword arguments are passed to `.GridSpec`.

        See Also
        --------
        matplotlib.pyplot.subplots

        Examples
        --------
        Adding a subplot that spans two rows::

            fig = plt.figure()
            gs = fig.add_gridspec(2, 2)
            ax1 = fig.add_subplot(gs[0, 0])
            ax2 = fig.add_subplot(gs[1, 0])
            # spans two rows:
            ax3 = fig.add_subplot(gs[:, 1])

        ")
                        (reparse-symbol indented_block_body) [50794 51938])
                    ("subfigures" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51958 51962])
                            ("nrows" variable nil (reparse-symbol function_parameters) [51964 51969])
                            ("ncols" variable nil (reparse-symbol function_parameters) [51973 51978])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [51982 51989])
                            ("wspace" variable nil (reparse-symbol function_parameters) [52015 52021])
                            ("hspace" variable nil (reparse-symbol function_parameters) [52028 52034])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [52060 52072])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [52079 52092])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52118 52126]))                          
                        :documentation "
        Add a subfigure to this figure or subfigure.

        A subfigure has the same artist methods as a figure, and is logically
        the same as a figure, but cannot print itself.
        See :doc:`/gallery/subplots_axes_and_figures/subfigures`.

        Parameters
        ----------
        nrows, ncols : int, default: 1
            Number of rows/columns of the subfigure grid.

        squeeze : bool, default: True
            If True, extra dimensions are squeezed out from the returned
            array of subfigures.

        wspace, hspace : float, default: None
            The amount of width/height reserved for space between subfigures,
            expressed as a fraction of the average subfigure width/height.
            If not given, the values will be inferred from a figure or
            rcParams when necessary.

        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.

        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.
        ")
                        (reparse-symbol indented_block_body) [51943 54301])
                    ("add_subfigure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54324 54328])
                            ("subplotspec" variable nil (reparse-symbol function_parameters) [54330 54341])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54343 54351]))                          
                        :documentation "
        Add a `~.figure.SubFigure` to the figure as part of a subplot
        arrangement.

        Parameters
        ----------
        subplotspec : `.gridspec.SubplotSpec`
            Defines the region in a parent gridspec where the subfigure will
            be placed.

        Returns
        -------
        `.figure.SubFigure`

        Other Parameters
        ----------------
        **kwargs
            Are passed to the `~.figure.SubFigure` object.

        See Also
        --------
        .Figure.subfigures
        ")
                        (reparse-symbol indented_block_body) [54306 55003])
                    ("sca" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55016 55020])
                            ("a" variable nil (reparse-symbol function_parameters) [55022 55023]))                          
                        :documentation "Set the current Axes to be *a* and return *a*.")
                        (reparse-symbol indented_block_body) [55008 55198])
                    ("gca" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55241 55245])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55247 55255]))                          
                        :documentation "
        Get the current Axes.

        If there is currently no Axes on this Figure, a new one is created
        using `.Figure.add_subplot`.  (To test whether there is currently an
        Axes on a Figure, check whether ``figure.axes`` is empty.  To test
        whether there is currently a Figure on the pyplot figure stack, check
        whether `.pyplot.get_fignums()` is empty.)

        The following kwargs are supported for ensuring the returned Axes
        adheres to the given projection etc., and for Axes creation if
        the active Axes does not exist:

        %(Axes:kwdoc)s
        ")
                        (reparse-symbol indented_block_body) [55203 56586])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56600 56604]))                          
                        :documentation "
        Get the current colorable artist.

        Specifically, returns the current `.ScalarMappable` instance (`.Image`
        created by `imshow` or `figimage`, `.Collection` created by `pcolor` or
        `scatter`, etc.), or *None* if no such instance has been defined.

        The current image is an attribute of the current Axes, or the nearest
        earlier Axes in the current figure that contains an image.

        Notes
        -----
        Historically, the only colorable artists were images; hence the name
        ``gci`` (get current image).
        ")
                        (reparse-symbol indented_block_body) [56591 57800])
                    ("_process_projection_requirements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57855 57859])
                            ("args" variable nil (reparse-symbol function_parameters) [57861 57866])
                            ("axes_class" variable nil (reparse-symbol function_parameters) [57868 57878])
                            ("polar" variable nil (reparse-symbol function_parameters) [57885 57890])
                            ("projection" variable nil (reparse-symbol function_parameters) [57898 57908])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57927 57935]))                          
                        :documentation "
        Handle the args/kwargs to add_axes/add_subplot/gca, returning::

            (axes_proj_class, proj_class_kwargs)

        which can be used for new Axes initialization/identification.
        ")
                        (reparse-symbol indented_block_body) [57805 59403])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59443 59447]))                          )
                        (reparse-symbol indented_block_body) [59408 59756])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59779 59783])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59785 59793])
                            ("bbox_extra_artists" variable nil (reparse-symbol function_parameters) [59795 59813]))                          
                        :documentation "
        Return a (tight) bounding box of the figure *in inches*.

        Note that `.FigureBase` differs from all other artists, which return
        their `.Bbox` in pixels.

        Artists that have ``artist.set_in_layout(False)`` are not included
        in the bbox.

        Parameters
        ----------
        renderer : `.RendererBase` subclass
            renderer that will be used to draw the figures (i.e.
            ``fig.canvas.get_renderer()``)

        bbox_extra_artists : list of `.Artist` or ``None``
            List of artists to include in the tight bounding box.  If
            ``None`` (default), then all artist children of each Axes are
            included in the tight bounding box.

        Returns
        -------
        `.BboxBase`
            containing the bounding box (in figure inches).
        ")
                        (reparse-symbol indented_block_body) [59761 62077])
                    ("_normalize_grid_string" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("layout" variable nil (reparse-symbol function_parameters) [62127 62133]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62082 62421])
                    ("subplot_mosaic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62445 62449])
                            ("mosaic" variable nil (reparse-symbol function_parameters) [62451 62457])
                            ("sharex" variable nil (reparse-symbol function_parameters) [62462 62468])
                            ("sharey" variable nil (reparse-symbol function_parameters) [62476 62482])
                            ("subplot_kw" variable nil (reparse-symbol function_parameters) [62513 62523])
                            ("gridspec_kw" variable nil (reparse-symbol function_parameters) [62530 62541])
                            ("empty_sentinel" variable nil (reparse-symbol function_parameters) [62548 62562]))                          
                        :documentation "
        Build a layout of Axes based on ASCII art or nested lists.

        This is a helper function to build complex GridSpec layouts visually.

        .. note ::

           This API is provisional and may be revised in the future based on
           early user feedback.

        Parameters
        ----------
        mosaic : list of list of {hashable or nested} or str

            A visual layout of how you want your Axes to be arranged
            labeled as strings.  For example ::

               x = [['A panel', 'A panel', 'edge'],
                    ['C panel', '.',       'edge']]

            produces 4 Axes:

            - 'A panel' which is 1 row high and spans the first two columns
            - 'edge' which is 2 rows high and is on the right edge
            - 'C panel' which in 1 row and 1 column wide in the bottom left
            - a blank space 1 row and 1 column wide in the bottom center

            Any of the entries in the layout can be a list of lists
            of the same form to create nested layouts.

            If input is a str, then it can either be a multi-line string of
            the form ::

              '''
              AAE
              C.E
              '''

            where each character is a column and each line is a row. Or it
            can be a single-line string where rows are separated by ``;``::

              'AB;CC'

            The string notation allows only single character Axes labels and
            does not support nesting but is very terse.

        sharex, sharey : bool, default: False
            If True, the x-axis (*sharex*) or y-axis (*sharey*) will be shared
            among all subplots.  In that case, tick label visibility and axis
            units behave as for `subplots`.  If False, each subplot's x- or
            y-axis will be independent.

        subplot_kw : dict, optional
            Dictionary with keywords passed to the `.Figure.add_subplot` call
            used to create each subplot.

        gridspec_kw : dict, optional
            Dictionary with keywords passed to the `.GridSpec` constructor used
            to create the grid the subplots are placed on.

        empty_sentinel : object, optional
            Entry in the layout to mean \"leave this space empty\".  Defaults
            to ``'.'``. Note, if *layout* is a string, it is processed via
            `inspect.cleandoc` to remove leading white space, which may
            interfere with using white-space as the empty sentinel.

        Returns
        -------
        dict[label, Axes]
           A dictionary mapping the labels to the Axes objects.  The order of
           the axes is left-to-right and top-to-bottom of their position in the
           total layout.

        ")
                        (reparse-symbol indented_block_body) [62426 72644])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72671 72675])
                            ("a" variable nil (reparse-symbol function_parameters) [72677 72678]))                          )
                        (reparse-symbol indented_block_body) [72649 72829]))                  
                :type "class")
                nil [5662 72829])
            ("SubFigure" type
               (:documentation "
    Logical figure that can be placed inside a figure.

    Typically instantiated using `.Figure.add_subfigure` or
    `.SubFigure.add_subfigure`, or `.SubFigure.subfigures`.  A subfigure has
    the same methods as a figure except for those particularly tied to the size
    or dpi of the figure, and is confined to a prescribed region of the figure.
    For example the following puts two subfigures side-by-side::

        fig = plt.figure()
        sfigs = fig.subfigures(1, 2)
        axsL = sfigs[0].subplots(1, 2)
        axsR = sfigs[1].subplots(2, 1)

    See :doc:`/gallery/subplots_axes_and_figures/subfigures`
    "
                :superclasses ("FigureBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        parent : `.figure.Figure` or `.figure.SubFigure`
            Figure or subfigure that contains the SubFigure.  SubFigures
            can be nested.

        subplotspec : `.gridspec.SubplotSpec`
            Defines the region in a parent gridspec where the subfigure will
            be placed.

        facecolor : default: :rc:`figure.facecolor`
            The figure patch face color.

        edgecolor : default: :rc:`figure.edgecolor`
            The figure patch edge color.

        linewidth : float
            The linewidth of the frame (i.e. the edge linewidth of the figure
            patch).

        frameon : bool, default: :rc:`figure.frameon`
            If ``False``, suppress drawing the figure background patch.

        Other Parameters
        ----------------
        **kwargs : `.SubFigure` properties, optional

            %(SubFigure:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [73731 74665])
                            ("super" code nil (reparse-symbol indented_block_body) [74674 74700])
                            ("if" code nil (reparse-symbol indented_block_body) [74709 74788])
                            ("if" code nil (reparse-symbol indented_block_body) [74796 74875])
                            ("if" code nil (reparse-symbol indented_block_body) [74883 74956])
                            ("self" variable nil (reparse-symbol indented_block_body) [74965 74996])
                            ("self" variable nil (reparse-symbol indented_block_body) [75005 75026])
                            ("self" variable nil (reparse-symbol indented_block_body) [75035 75062])
                            ("self" variable nil (reparse-symbol indented_block_body) [75071 75104])
                            ("self" variable nil (reparse-symbol indented_block_body) [75158 75189])
                            ("self" variable nil (reparse-symbol indented_block_body) [75198 75235])
                            ("self" variable nil (reparse-symbol indented_block_body) [75244 75289])
                            ("self" variable nil (reparse-symbol indented_block_body) [75298 75337])
                            ("self" variable nil (reparse-symbol indented_block_body) [75346 75373])
                            ("self" variable nil (reparse-symbol indented_block_body) [75382 75419])
                            ("self" variable nil (reparse-symbol indented_block_body) [75428 75453])
                            ("self" code nil (reparse-symbol indented_block_body) [75462 75492])
                            ("self" variable nil (reparse-symbol indented_block_body) [75501 75536])
                            ("self" variable nil (reparse-symbol indented_block_body) [75545 75657])
                            ("self" variable nil (reparse-symbol indented_block_body) [75666 75714])
                            ("self" variable nil (reparse-symbol indented_block_body) [75724 76010])
                            ("self" code nil (reparse-symbol indented_block_body) [76019 76053])
                            ("self" code nil (reparse-symbol indented_block_body) [76062 76095]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73536 73540])
                            ("parent" variable nil (reparse-symbol function_parameters) [73542 73548])
                            ("subplotspec" variable nil (reparse-symbol function_parameters) [73550 73561])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [73583 73592])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [73616 73625])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [73649 73658])
                            ("frameon" variable nil (reparse-symbol function_parameters) [73681 73688])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [73712 73720]))                          
                        :documentation "
        Parameters
        ----------
        parent : `.figure.Figure` or `.figure.SubFigure`
            Figure or subfigure that contains the SubFigure.  SubFigures
            can be nested.

        subplotspec : `.gridspec.SubplotSpec`
            Defines the region in a parent gridspec where the subfigure will
            be placed.

        facecolor : default: :rc:`figure.facecolor`
            The figure patch face color.

        edgecolor : default: :rc:`figure.edgecolor`
            The figure patch edge color.

        linewidth : float
            The linewidth of the frame (i.e. the edge linewidth of the figure
            patch).

        frameon : bool, default: :rc:`figure.frameon`
            If ``False``, suppress drawing the figure background patch.

        Other Parameters
        ----------------
        **kwargs : `.SubFigure` properties, optional

            %(SubFigure:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [73523 76096])
                    ("dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76123 76127]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76101 76162])
                    ("dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76191 76195])
                            ("value" variable nil (reparse-symbol function_parameters) [76197 76202]))                          
                        :decorators 
                          ( ("dpi.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76167 76238])
                    ("_redo_transform_rel_fig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76271 76275])
                            ("bbox" variable nil (reparse-symbol function_parameters) [76277 76281]))                          
                        :documentation "
        Make the transSubfigure bbox relative to Figure transform.

        Parameters
        ----------
        bbox : bbox or None
            If not None, then the bbox is used for relative bounding box.
            Otherwise it is calculated from the subplotspec.
        ")
                        (reparse-symbol indented_block_body) [76243 77393])
                    ("get_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77425 77429]))                          
                        :documentation "
        Return whether constrained layout is being used.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.
        ")
                        (reparse-symbol indented_block_body) [77398 77635])
                    ("get_constrained_layout_pads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77672 77676])
                            ("relative" variable nil (reparse-symbol function_parameters) [77678 77686]))                          
                        :documentation "
        Get padding for ``constrained_layout``.

        Returns a list of ``w_pad, h_pad`` in inches and
        ``wspace`` and ``hspace`` as fractions of the subplot.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.

        Parameters
        ----------
        relative : bool
            If `True`, then convert from inches to figure relative.
        ")
                        (reparse-symbol indented_block_body) [77640 78163])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78191 78195]))                          
                        :documentation "
        List of Axes in the SubFigure.  You can access and modify the Axes
        in the SubFigure through this list.

        Do not modify the list itself. Instead, use `~.SubFigure.add_axes`,
        `~.SubFigure.add_subplot` or `~.SubFigure.delaxes` to add or remove an
        Axes.

        Note: The `.SubFigure.axes` property and `~.SubFigure.get_axes` method
        are equivalent.
        ")
                        (reparse-symbol indented_block_body) [78168 78656])
                    ("get_axes" variable nil (reparse-symbol indented_block_body) [78661 78681])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78696 78700])
                            ("renderer" variable nil (reparse-symbol function_parameters) [78702 78710]))                          )
                        (reparse-symbol indented_block_body) [78687 79368]))                  
                :type "class")
                nil [72850 79368])
            ("Figure" type
               (:documentation "
    The top level container for all the plot elements.

    The Figure instance supports callbacks through a *callbacks* attribute
    which is a `.CallbackRegistry` instance.  The events you can connect to
    are 'dpi_changed', and the callback will be called with ``func(fig)`` where
    fig is the `Figure` instance.

    Attributes
    ----------
    patch
        The `.Rectangle` instance representing the figure background patch.

    suppressComposite
        For multiple images, the figure will make composite images
        depending on the renderer option_image_nocomposite function.  If
        *suppressComposite* is a boolean, this will override the renderer.
    "
                :superclasses ("FigureBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80124 80128]))                          )
                        (reparse-symbol indented_block_body) [80112 80186])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80204 80208]))                          )
                        (reparse-symbol indented_block_body) [80191 80426])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        figsize : 2-tuple of floats, default: :rc:`figure.figsize`
            Figure dimension ``(width, height)`` in inches.

        dpi : float, default: :rc:`figure.dpi`
            Dots per inch.

        facecolor : default: :rc:`figure.facecolor`
            The figure patch facecolor.

        edgecolor : default: :rc:`figure.edgecolor`
            The figure patch edge color.

        linewidth : float
            The linewidth of the frame (i.e. the edge linewidth of the figure
            patch).

        frameon : bool, default: :rc:`figure.frameon`
            If ``False``, suppress drawing the figure background patch.

        subplotpars : `SubplotParams`
            Subplot parameters. If not given, the default subplot
            parameters :rc:`figure.subplot.*` are used.

        tight_layout : bool or dict, default: :rc:`figure.autolayout`
            Whether to use the tight layout mechanism. See `.set_tight_layout`.

            .. admonition:: Discouraged

                The use of this parameter is discouraged. Please use
                ``layout='tight'`` instead for the common case of
                ``tight_layout=True`` and use `.set_tight_layout` otherwise.

        constrained_layout : bool, default: :rc:`figure.constrained_layout.use`
            This is equal to ``layout='constrained'``.

            .. admonition:: Discouraged

                The use of this parameter is discouraged. Please use
                ``layout='constrained'`` instead.

        layout : {'constrained', 'tight'}, optional
            The layout mechanism for positioning of plot elements.
            Supported values:

            - 'constrained': The constrained layout solver usually gives the
              best layout results and is thus recommended. However, it is
              computationally expensive and can be slow for complex figures
              with many elements.

              See :doc:`/tutorials/intermediate/constrainedlayout_guide`
              for examples.

            - 'tight': Use the tight layout mechanism. This is a relatively
              simple algorithm, that adjusts the subplot parameters so that
              decorations like tick labels, axis labels and titles have enough
              space. See `.Figure.set_tight_layout` for further details.

            If not given, fall back to using the parameters *tight_layout* and
            *constrained_layout*, including their config defaults
            :rc:`figure.autolayout` and :rc:`figure.constrained_layout.use`.

        Other Parameters
        ----------------
        **kwargs : `.Figure` properties, optional

            %(Figure:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [80937 83667])
                            ("super" code nil (reparse-symbol indented_block_body) [83676 83702])
                            ("if" code nil (reparse-symbol indented_block_body) [83712 84523])
                            ("self" variable nil (reparse-symbol indented_block_body) [84532 84573])
                            ("self" variable nil (reparse-symbol indented_block_body) [84757 84806])
                            ("self" variable nil (reparse-symbol indented_block_body) [84815 84942])
                            ("self" variable nil (reparse-symbol indented_block_body) [84951 85072])
                            ("if" code nil (reparse-symbol indented_block_body) [85082 85155])
                            ("if" code nil (reparse-symbol indented_block_body) [85163 85224])
                            ("if" code nil (reparse-symbol indented_block_body) [85232 85311])
                            ("if" code nil (reparse-symbol indented_block_body) [85319 85398])
                            ("if" code nil (reparse-symbol indented_block_body) [85406 85479])
                            ("if" code nil (reparse-symbol indented_block_body) [85488 85671])
                            ("self" variable nil (reparse-symbol indented_block_body) [85679 85730])
                            ("self" variable nil (reparse-symbol indented_block_body) [85740 85784])
                            ("self" variable nil (reparse-symbol indented_block_body) [85842 85857])
                            ("self" variable nil (reparse-symbol indented_block_body) [85866 85933])
                            ("self" variable nil (reparse-symbol indented_block_body) [85942 85966])
                            ("self" variable nil (reparse-symbol indented_block_body) [85975 86020])
                            ("self" variable nil (reparse-symbol indented_block_body) [86029 86067])
                            ("self" variable nil (reparse-symbol indented_block_body) [86077 86332])
                            ("self" code nil (reparse-symbol indented_block_body) [86341 86375])
                            ("self" code nil (reparse-symbol indented_block_body) [86384 86417])
                            ("FigureCanvasBase" code nil (reparse-symbol indented_block_body) [86427 86449])
                            ("if" code nil (reparse-symbol indented_block_body) [86479 86545])
                            ("self" variable nil (reparse-symbol indented_block_body) [86554 86584])
                            ("self" variable nil (reparse-symbol indented_block_body) [86624 86649])
                            ("self" code nil (reparse-symbol indented_block_body) [86659 86694])
                            ("self" variable nil (reparse-symbol indented_block_body) [86704 86732])
                            ("self" code nil (reparse-symbol indented_block_body) [86783 86795])
                            ("self" variable nil (reparse-symbol indented_block_body) [86804 86831])
                            ("self" code nil (reparse-symbol indented_block_body) [86841 86888])
                            ("self" variable nil (reparse-symbol indented_block_body) [86948 86968]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80444 80448])
                            ("figsize" variable nil (reparse-symbol function_parameters) [80467 80474])
                            ("dpi" variable nil (reparse-symbol function_parameters) [80498 80501])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [80525 80534])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [80558 80567])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [80591 80600])
                            ("frameon" variable nil (reparse-symbol function_parameters) [80623 80630])
                            ("subplotpars" variable nil (reparse-symbol function_parameters) [80654 80665])
                            ("tight_layout" variable nil (reparse-symbol function_parameters) [80712 80724])
                            ("constrained_layout" variable nil (reparse-symbol function_parameters) [80772 80790])
                            ("layout" variable nil (reparse-symbol function_parameters) [80870 80876])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [80900 80908]))                          
                        :documentation "
        Parameters
        ----------
        figsize : 2-tuple of floats, default: :rc:`figure.figsize`
            Figure dimension ``(width, height)`` in inches.

        dpi : float, default: :rc:`figure.dpi`
            Dots per inch.

        facecolor : default: :rc:`figure.facecolor`
            The figure patch facecolor.

        edgecolor : default: :rc:`figure.edgecolor`
            The figure patch edge color.

        linewidth : float
            The linewidth of the frame (i.e. the edge linewidth of the figure
            patch).

        frameon : bool, default: :rc:`figure.frameon`
            If ``False``, suppress drawing the figure background patch.

        subplotpars : `SubplotParams`
            Subplot parameters. If not given, the default subplot
            parameters :rc:`figure.subplot.*` are used.

        tight_layout : bool or dict, default: :rc:`figure.autolayout`
            Whether to use the tight layout mechanism. See `.set_tight_layout`.

            .. admonition:: Discouraged

                The use of this parameter is discouraged. Please use
                ``layout='tight'`` instead for the common case of
                ``tight_layout=True`` and use `.set_tight_layout` otherwise.

        constrained_layout : bool, default: :rc:`figure.constrained_layout.use`
            This is equal to ``layout='constrained'``.

            .. admonition:: Discouraged

                The use of this parameter is discouraged. Please use
                ``layout='constrained'`` instead.

        layout : {'constrained', 'tight'}, optional
            The layout mechanism for positioning of plot elements.
            Supported values:

            - 'constrained': The constrained layout solver usually gives the
              best layout results and is thus recommended. However, it is
              computationally expensive and can be slow for complex figures
              with many elements.

              See :doc:`/tutorials/intermediate/constrainedlayout_guide`
              for examples.

            - 'tight': Use the tight layout mechanism. This is a relatively
              simple algorithm, that adjusts the subplot parameters so that
              decorations like tick labels, axis labels and titles have enough
              space. See `.Figure.set_tight_layout` for further details.

            If not given, fall back to using the parameters *tight_layout* and
            *constrained_layout*, including their config defaults
            :rc:`figure.autolayout` and :rc:`figure.constrained_layout.use`.

        Other Parameters
        ----------------
        **kwargs : `.Figure` properties, optional

            %(Figure:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [80431 86969])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87152 87156]))                          )
                        (reparse-symbol indented_block_body) [87136 87443])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87457 87461])
                            ("warn" variable nil (reparse-symbol function_parameters) [87463 87467]))                          
                        :documentation "
        If using a GUI backend with pyplot, display the figure window.

        If the figure was not created using `~.pyplot.figure`, it will lack
        a `~.backend_bases.FigureManagerBase`, and this method will raise an
        AttributeError.

        .. warning::

            This does not manage an GUI event loop. Consequently, the figure
            may only be shown briefly or not shown at all if you or your
            environment are not managing an event loop.

            Proper use cases for `.Figure.show` include running this from a
            GUI application or an IPython shell.

            If you're running a pure python shell or executing a non-GUI
            python script, you should use `matplotlib.pyplot.show` instead,
            which takes care of managing the event loop for you.

        Parameters
        ----------
        warn : bool, default: True
            If ``True`` and we are not running headless (i.e. on Linux with an
            unset DISPLAY), issue warning when called on a non-GUI backend.
        ")
                        (reparse-symbol indented_block_body) [87448 88906])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88934 88938]))                          
                        :documentation "
        List of Axes in the Figure. You can access and modify the Axes in the
        Figure through this list.

        Do not modify the list itself. Instead, use `~Figure.add_axes`,
        `~.Figure.add_subplot` or `~.Figure.delaxes` to add or remove an Axes.

        Note: The `.Figure.axes` property and `~.Figure.get_axes` method are
        equivalent.
        ")
                        (reparse-symbol indented_block_body) [88911 89366])
                    ("get_axes" variable nil (reparse-symbol indented_block_body) [89371 89391])
                    ("_get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89410 89414]))                          )
                        (reparse-symbol indented_block_body) [89397 89442])
                    ("_set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89460 89464])
                            ("dpi" variable nil (reparse-symbol function_parameters) [89466 89469])
                            ("forward" variable nil (reparse-symbol function_parameters) [89471 89478]))                          
                        :documentation "
        Parameters
        ----------
        dpi : float

        forward : bool
            Passed on to `~.Figure.set_size_inches`
        ")
                        (reparse-symbol indented_block_body) [89447 89969])
                    ("dpi" variable nil (reparse-symbol indented_block_body) [89974 90048])
                    ("get_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90075 90079]))                          
                        :documentation "Return whether `.tight_layout` is called when drawing.")
                        (reparse-symbol indented_block_body) [90054 90178])
                    ("set_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90204 90208])
                            ("tight" variable nil (reparse-symbol function_parameters) [90210 90215]))                          
                        :documentation "
        Set whether and how `.tight_layout` is called when drawing.

        Parameters
        ----------
        tight : bool or dict with keys \"pad\", \"w_pad\", \"h_pad\", \"rect\" or None
            If a bool, sets whether to call `.tight_layout` upon drawing.
            If ``None``, use :rc:`figure.autolayout` instead.
            If a dict, pass it as kwargs to `.tight_layout`, overriding the
            default paddings.
        ")
                        (reparse-symbol indented_block_body) [90183 90884])
                    ("get_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90916 90920]))                          
                        :documentation "
        Return whether constrained layout is being used.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.
        ")
                        (reparse-symbol indented_block_body) [90889 91106])
                    ("set_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91138 91142])
                            ("constrained" variable nil (reparse-symbol function_parameters) [91144 91155]))                          
                        :documentation "
        Set whether ``constrained_layout`` is used upon drawing. If None,
        :rc:`figure.constrained_layout.use` value will be used.

        When providing a dict containing the keys `w_pad`, `h_pad`
        the default ``constrained_layout`` paddings will be
        overridden.  These pads are in inches and default to 3.0/72.0.
        ``w_pad`` is the width padding and ``h_pad`` is the height padding.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.

        Parameters
        ----------
        constrained : bool or dict or None
        ")
                        (reparse-symbol indented_block_body) [91111 92350])
                    ("set_constrained_layout_pads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92387 92391])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [92396 92401])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [92408 92413])
                            ("wspace" variable nil (reparse-symbol function_parameters) [92456 92462])
                            ("hspace" variable nil (reparse-symbol function_parameters) [92469 92475]))                          
                        :documentation "
        Set padding for ``constrained_layout``.

        Tip: The parameters can be passed from a dictionary by using
        ``fig.set_constrained_layout(**pad_dict)``.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.

        Parameters
        ----------
        w_pad : float, default: :rc:`figure.constrained_layout.w_pad`
            Width padding in inches.  This is the pad around Axes
            and is meant to make sure there is enough room for fonts to
            look good.  Defaults to 3 pts = 0.04167 inches

        h_pad : float, default: :rc:`figure.constrained_layout.h_pad`
            Height padding in inches. Defaults to 3 pts.

        wspace : float, default: :rc:`figure.constrained_layout.wspace`
            Width padding between subplots, expressed as a fraction of the
            subplot width.  The total padding ends up being w_pad + wspace.

        hspace : float, default: :rc:`figure.constrained_layout.hspace`
            Height padding between subplots, expressed as a fraction of the
            subplot width. The total padding ends up being h_pad + hspace.

        ")
                        (reparse-symbol indented_block_body) [92355 94000])
                    ("get_constrained_layout_pads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94037 94041])
                            ("relative" variable nil (reparse-symbol function_parameters) [94043 94051]))                          
                        :documentation "
        Get padding for ``constrained_layout``.

        Returns a list of ``w_pad, h_pad`` in inches and
        ``wspace`` and ``hspace`` as fractions of the subplot.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`.

        Parameters
        ----------
        relative : bool
            If `True`, then convert from inches to figure relative.
        ")
                        (reparse-symbol indented_block_body) [94005 94962])
                    ("set_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94982 94986])
                            ("canvas" variable nil (reparse-symbol function_parameters) [94988 94994]))                          
                        :documentation "
        Set the canvas that contains the figure

        Parameters
        ----------
        canvas : FigureCanvas
        ")
                        (reparse-symbol indented_block_body) [94967 95167])
                    ("figimage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95185 95189])
                            ("X" variable nil (reparse-symbol function_parameters) [95191 95192])
                            ("xo" variable nil (reparse-symbol function_parameters) [95194 95196])
                            ("yo" variable nil (reparse-symbol function_parameters) [95200 95202])
                            ("alpha" variable nil (reparse-symbol function_parameters) [95206 95211])
                            ("norm" variable nil (reparse-symbol function_parameters) [95218 95222])
                            ("cmap" variable nil (reparse-symbol function_parameters) [95229 95233])
                            ("vmin" variable nil (reparse-symbol function_parameters) [95257 95261])
                            ("vmax" variable nil (reparse-symbol function_parameters) [95268 95272])
                            ("origin" variable nil (reparse-symbol function_parameters) [95279 95285])
                            ("resize" variable nil (reparse-symbol function_parameters) [95292 95298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [95306 95314]))                          
                        :documentation "
        Add a non-resampled image to the figure.

        The image is attached to the lower or upper left corner depending on
        *origin*.

        Parameters
        ----------
        X
            The image data. This is an array of one of the following shapes:

            - MxN: luminance (grayscale) values
            - MxNx3: RGB values
            - MxNx4: RGBA values

        xo, yo : int
            The *x*/*y* image offset in pixels.

        alpha : None or float
            The alpha blending value.

        norm : `matplotlib.colors.Normalize`
            A `.Normalize` instance to map the luminance to the
            interval [0, 1].

        cmap : str or `matplotlib.colors.Colormap`, default: :rc:`image.cmap`
            The colormap to use.

        vmin, vmax : float
            If *norm* is not given, these values set the data limits for the
            colormap.

        origin : {'upper', 'lower'}, default: :rc:`image.origin`
            Indicates where the [0, 0] index of the array is in the upper left
            or lower left corner of the axes.

        resize : bool
            If *True*, resize the figure to match the given image size.

        Returns
        -------
        `matplotlib.image.FigureImage`

        Other Parameters
        ----------------
        **kwargs
            Additional kwargs are `.Artist` kwargs passed on to `.FigureImage`.

        Notes
        -----
        figimage complements the Axes image (`~matplotlib.axes.Axes.imshow`)
        which will be resampled to fit the current Axes.  If you want
        a resampled image to fill the entire figure, you can define an
        `~matplotlib.axes.Axes` with extent [0, 0, 1, 1].

        Examples
        --------
        ::

            f = plt.figure()
            nx = int(f.get_figwidth() * f.dpi)
            ny = int(f.get_figheight() * f.dpi)
            data = np.random.random((ny, nx))
            f.figimage(data)
            plt.show()
        ")
                        (reparse-symbol indented_block_body) [95172 97861])
                    ("set_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97886 97890])
                            ("w" variable nil (reparse-symbol function_parameters) [97892 97893])
                            ("h" variable nil (reparse-symbol function_parameters) [97895 97896])
                            ("forward" variable nil (reparse-symbol function_parameters) [97903 97910]))                          
                        :documentation "
        Set the figure size in inches.

        Call signatures::

             fig.set_size_inches(w, h)  # OR
             fig.set_size_inches((w, h))

        Parameters
        ----------
        w : (float, float) or float
            Width and height in inches (if height not specified as a separate
            argument) or width.
        h : float
            Height in inches.
        forward : bool, default: True
            If ``True``, the canvas size is automatically updated, e.g.,
            you can resize the figure window from the shell.

        See Also
        --------
        matplotlib.figure.Figure.get_size_inches
        matplotlib.figure.Figure.set_figwidth
        matplotlib.figure.Figure.set_figheight

        Notes
        -----
        To transform from pixels to inches divide by `Figure.dpi`.
        ")
                        (reparse-symbol indented_block_body) [97866 99361])
                    ("get_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99386 99390]))                          
                        :documentation "
        Return the current size of the figure in inches.

        Returns
        -------
        ndarray
           The size (width, height) of the figure in inches.

        See Also
        --------
        matplotlib.figure.Figure.set_size_inches
        matplotlib.figure.Figure.get_figwidth
        matplotlib.figure.Figure.get_figheight

        Notes
        -----
        The size in pixels can be obtained by multiplying with `Figure.dpi`.
        ")
                        (reparse-symbol indented_block_body) [99366 99912])
                    ("get_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99934 99938]))                          
                        :documentation "Return the figure width in inches.")
                        (reparse-symbol indented_block_body) [99917 100028])
                    ("get_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100051 100055]))                          
                        :documentation "Return the figure height in inches.")
                        (reparse-symbol indented_block_body) [100033 100147])
                    ("get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100164 100168]))                          
                        :documentation "Return the resolution in dots per inch as a float.")
                        (reparse-symbol indented_block_body) [100152 100260])
                    ("set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100277 100281])
                            ("val" variable nil (reparse-symbol function_parameters) [100283 100286]))                          
                        :documentation "
        Set the resolution of the figure in dots-per-inch.

        Parameters
        ----------
        val : float
        ")
                        (reparse-symbol indented_block_body) [100265 100480])
                    ("set_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100502 100506])
                            ("val" variable nil (reparse-symbol function_parameters) [100508 100511])
                            ("forward" variable nil (reparse-symbol function_parameters) [100513 100520]))                          
                        :documentation "
        Set the width of the figure in inches.

        Parameters
        ----------
        val : float
        forward : bool
            See `set_size_inches`.

        See Also
        --------
        matplotlib.figure.Figure.set_figheight
        matplotlib.figure.Figure.set_size_inches
        ")
                        (reparse-symbol indented_block_body) [100485 100920])
                    ("set_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100943 100947])
                            ("val" variable nil (reparse-symbol function_parameters) [100949 100952])
                            ("forward" variable nil (reparse-symbol function_parameters) [100954 100961]))                          
                        :documentation "
        Set the height of the figure in inches.

        Parameters
        ----------
        val : float
        forward : bool
            See `set_size_inches`.

        See Also
        --------
        matplotlib.figure.Figure.set_figwidth
        matplotlib.figure.Figure.set_size_inches
        ")
                        (reparse-symbol indented_block_body) [100925 101360])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101375 101379])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [101381 101395]))                          )
                        (reparse-symbol indented_block_body) [101365 101699])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101767 101771])
                            ("renderer" variable nil (reparse-symbol function_parameters) [101773 101781]))                          
                        :decorators 
                          ( ("_finalize_rasterization" function (:type "decorator") nil nil)
                            ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [101704 102854])
                    ("draw_without_rendering" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102886 102890]))                          
                        :documentation "
        Draw the figure with no output.  Useful to get the final size of
        artists that require a draw before their size is known (e.g. text).
        ")
                        (reparse-symbol indented_block_body) [102859 103177])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103198 103202])
                            ("a" variable nil (reparse-symbol function_parameters) [103204 103205]))                          
                        :documentation "
        Draw `.Artist` *a* only.

        This method can only be used after an initial draw of the figure,
        because that creates and caches the renderer needed here.
        ")
                        (reparse-symbol indented_block_body) [103182 103633])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103655 103659]))                          )
                        (reparse-symbol indented_block_body) [103638 104409])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104431 104435])
                            ("state" variable nil (reparse-symbol function_parameters) [104437 104442]))                          )
                        (reparse-symbol indented_block_body) [104414 105388])
                    ("add_axobserver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105412 105416])
                            ("func" variable nil (reparse-symbol function_parameters) [105418 105422]))                          
                        :documentation "Whenever the Axes state change, ``func(self)`` will be called.")
                        (reparse-symbol indented_block_body) [105393 105684])
                    ("savefig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105701 105705])
                            ("fname" variable nil (reparse-symbol function_parameters) [105707 105712])
                            ("transparent" variable nil (reparse-symbol function_parameters) [105717 105728])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [105735 105743]))                          
                        :documentation "
        Save the current figure.

        Call signature::

          savefig(fname, *, dpi='figure', format=None, metadata=None,
                  bbox_inches=None, pad_inches=0.1,
                  facecolor='auto', edgecolor='auto',
                  backend=None, **kwargs
                 )

        The available output formats depend on the backend being used.

        Parameters
        ----------
        fname : str or path-like or binary file-like
            A path, or a Python file-like object, or
            possibly some backend-dependent object such as
            `matplotlib.backends.backend_pdf.PdfPages`.

            If *format* is set, it determines the output format, and the file
            is saved as *fname*.  Note that *fname* is used verbatim, and there
            is no attempt to make the extension, if any, of *fname* match
            *format*, and no extension is appended.

            If *format* is not set, then the format is inferred from the
            extension of *fname*, if there is one.  If *format* is not
            set and *fname* has no extension, then the file is saved with
            :rc:`savefig.format` and the appropriate extension is appended to
            *fname*.

        Other Parameters
        ----------------
        dpi : float or 'figure', default: :rc:`savefig.dpi`
            The resolution in dots per inch.  If 'figure', use the figure's
            dpi value.

        format : str
            The file format, e.g. 'png', 'pdf', 'svg', ... The behavior when
            this is unset is documented under *fname*.

        metadata : dict, optional
            Key/value pairs to store in the image metadata. The supported keys
            and defaults depend on the image format and backend:

            - 'png' with Agg backend: See the parameter ``metadata`` of
              `~.FigureCanvasAgg.print_png`.
            - 'pdf' with pdf backend: See the parameter ``metadata`` of
              `~.backend_pdf.PdfPages`.
            - 'svg' with svg backend: See the parameter ``metadata`` of
              `~.FigureCanvasSVG.print_svg`.
            - 'eps' and 'ps' with PS backend: Only 'Creator' is supported.

        bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`
            Bounding box in inches: only the given portion of the figure is
            saved.  If 'tight', try to figure out the tight bbox of the figure.

        pad_inches : float, default: :rc:`savefig.pad_inches`
            Amount of padding around the figure when bbox_inches is 'tight'.

        facecolor : color or 'auto', default: :rc:`savefig.facecolor`
            The facecolor of the figure.  If 'auto', use the current figure
            facecolor.

        edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`
            The edgecolor of the figure.  If 'auto', use the current figure
            edgecolor.

        backend : str, optional
            Use a non-default backend to render the file, e.g. to render a
            png file with the \"cairo\" backend rather than the default \"agg\",
            or a pdf file with the \"pgf\" backend rather than the default
            \"pdf\".  Note that the default backend is normally sufficient.  See
            :ref:`the-builtin-backends` for a list of valid backends for each
            file format.  Custom backends can be referenced as \"module://...\".

        orientation : {'landscape', 'portrait'}
            Currently only supported by the postscript backend.

        papertype : str
            One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
            'a10', 'b0' through 'b10'. Only supported for postscript
            output.

        transparent : bool
            If *True*, the Axes patches will all be transparent; the
            Figure patch will also be transparent unless *facecolor*
            and/or *edgecolor* are specified via kwargs.

            If *False* has no effect and the color of the Axes and
            Figure patches are unchanged (unless the Figure patch
            is specified via the *facecolor* and/or *edgecolor* keyword
            arguments in which case those colors are used).

            The transparency of these patches will be restored to their
            original values upon exit of this function.

            This is useful, for example, for displaying
            a plot on top of a colored background on a web page.

        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        pil_kwargs : dict, optional
            Additional keyword arguments that are passed to
            `PIL.Image.Image.save` when saving the figure.

        ")
                        (reparse-symbol indented_block_body) [105689 111086])
                    ("ginput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111102 111106])
                            ("n" variable nil (reparse-symbol function_parameters) [111108 111109])
                            ("timeout" variable nil (reparse-symbol function_parameters) [111113 111120])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [111125 111136])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [111158 111167])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [111201 111210])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [111245 111255]))                          
                        :documentation "
        Blocking call to interact with a figure.

        Wait until the user clicks *n* times on the figure, and return the
        coordinates of each click in a list.

        There are three possible interactions:

        - Add a point.
        - Remove the most recently added point.
        - Stop the interaction and return the points added so far.

        The actions are assigned to mouse buttons via the arguments
        *mouse_add*, *mouse_pop* and *mouse_stop*.

        Parameters
        ----------
        n : int, default: 1
            Number of mouse clicks to accumulate. If negative, accumulate
            clicks until the input is terminated manually.
        timeout : float, default: 30 seconds
            Number of seconds to wait before timing out. If zero or negative
            will never timeout.
        show_clicks : bool, default: True
            If True, show a red cross at the location of each click.
        mouse_add : `.MouseButton` or None, default: `.MouseButton.LEFT`
            Mouse button used to add points.
        mouse_pop : `.MouseButton` or None, default: `.MouseButton.RIGHT`
            Mouse button used to remove the most recently added point.
        mouse_stop : `.MouseButton` or None, default: `.MouseButton.MIDDLE`
            Mouse button used to stop input.

        Returns
        -------
        list of tuples
            A list of the clicked (x, y) coordinates.

        Notes
        -----
        The keyboard can also be used to select points in case your mouse
        does not have one or more of the buttons.  The delete and backspace
        keys act like right clicking (i.e., remove last point), the enter key
        terminates input and any other key (not already used by the window
        manager) selects a point.
        ")
                        (reparse-symbol indented_block_body) [111091 115102])
                    ("waitforbuttonpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115130 115134])
                            ("timeout" variable nil (reparse-symbol function_parameters) [115136 115143]))                          
                        :documentation "
        Blocking call to interact with the figure.

        Wait for user input and return True if a key was pressed, False if a
        mouse button was pressed and None if no input was given within
        *timeout* seconds.  Negative values deactivate *timeout*.
        ")
                        (reparse-symbol indented_block_body) [115107 115778])
                    ("execute_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115814 115818])
                            ("renderer" variable nil (reparse-symbol function_parameters) [115820 115828]))                          
                        :documentation "
        Use ``layoutgrid`` to determine pos positions within Axes.

        See also `.set_constrained_layout_pads`.

        Returns
        -------
        layoutgrid : private debugging object
        ")
                        (reparse-symbol indented_block_body) [115783 116669])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116691 116695])
                            ("pad" variable nil (reparse-symbol function_parameters) [116700 116703])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [116710 116715])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [116722 116727])
                            ("rect" variable nil (reparse-symbol function_parameters) [116734 116738]))                          
                        :documentation "
        Adjust the padding between and around subplots.

        To exclude an artist on the Axes from the bounding box calculation
        that determines the subplot parameters (i.e. legend, or annotation),
        set ``a.set_in_layout(False)`` for that artist.

        Parameters
        ----------
        pad : float, default: 1.08
            Padding between the figure edge and the edges of subplots,
            as a fraction of the font size.
        h_pad, w_pad : float, default: *pad*
            Padding (height/width) between edges of adjacent subplots,
            as a fraction of the font size.
        rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)
            A rectangle in normalized figure coordinates into which the whole
            subplots area (including labels) will fit.

        See Also
        --------
        .Figure.set_tight_layout
        .pyplot.tight_layout
        ")
                        (reparse-symbol indented_block_body) [116674 118469]))                  
                :type "class")
                nil [79389 118469])
            ("figaspect" function
               (:documentation "
    Calculate the width and height for a figure with a specified aspect ratio.

    While the height is taken from :rc:`figure.figsize`, the width is
    adjusted to match the desired aspect ratio. Additionally, it is ensured
    that the width is in the range [4., 16.] and the height is in the range
    [2., 16.]. If necessary, the default height is adjusted to ensure this.

    Parameters
    ----------
    arg : float or 2D array
        If a float, this defines the aspect ratio (i.e. the ratio height /
        width).
        In case of an array the aspect ratio is number of rows / number of
        columns, so that the array could be fitted in the figure undistorted.

    Returns
    -------
    width, height : float
        The figure size in inches.

    Notes
    -----
    If you want to create an Axes within the figure, that still preserves the
    aspect ratio, be sure to create it with equal width and height. See
    examples below.

    Thanks to Fernando Perez for this function.

    Examples
    --------
    Make a figure twice as tall as it is wide::

        w, h = figaspect(2.)
        fig = Figure(figsize=(w, h))
        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
        ax.imshow(A, **kwargs)

    Make a figure with the proper aspect for an array::

        A = rand(5, 3)
        w, h = figaspect(A)
        fig = Figure(figsize=(w, h))
        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
        ax.imshow(A, **kwargs)
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [118485 118488]))                  )
                nil [118471 121107]))          
      :file "figure.py"
      :pointmax 121107
      :fsize 121106
      :lastmodtime '(25218 25732 441936 36000)
      :unmatched-syntax '((FROM 117736 . 117740) (PERIOD 117741 . 117742) (MULT 116697 . 116698) (COMMA 116698 . 116699) (RETURN 115712 . 115718) (IF 115724 . 115726) (ELSE 115741 . 115745) (MULT 105714 . 105715) (COMMA 105715 . 105716) (NAME 105145 . 105148) (IF 105168 . 105170) (ELSE 105179 . 105183) (MULT 92393 . 92394) (COMMA 92394 . 92395) (NAME 90792 . 90796) (IF 90823 . 90825) (ELSE 90850 . 90854) (INDENT_BLOCK 88840 . 88906) (NEWLINE 88839 . 88840) (COLON 88838 . 88839) (TRY 88757 . 88760) (AS 88832 . 88834) (MULT 80850 . 80851) (COMMA 80851 . 80852) (MULT 73563 . 73564) (COMMA 73564 . 73565) (NAME 66106 . 66108) (MULT 66110 . 66111) (MULT 62459 . 62460) (COMMA 62460 . 62461) (RETURN 54125 . 54131) (IF 54145 . 54147) (ELSE 54164 . 54168) (MULT 28033 . 28034) (COMMA 28034 . 28035)))
    (semanticdb-table "semanticdb-table-157fb3465268"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
:mod:`~matplotlib.gridspec` contains classes that help to layout multiple
`~.axes.Axes` in a grid-like pattern within a figure.

The `GridSpec` specifies the overall grid structure. Individual cells within
the grid are referenced by `SubplotSpec`\\s.

Often, users need not access this module directly, and can use higher-level
methods like `~.pyplot.subplots`, `~.pyplot.subplot_mosaic` and
`~.Figure.subfigures`. See the tutorial
:doc:`/tutorials/intermediate/arranging_axes` for a guide.
\"\"\"" code nil nil [1 499])
            ("copy" include nil nil [501 512])
            ("logging" include nil nil [513 527])
            ("numbers" include nil nil [528 556])
            ("numpy" include nil nil [558 576])
            ("matplotlib" include nil nil [578 602])
            ("matplotlib" include nil nil [603 670])
            ("matplotlib.transforms" include nil nil [671 709])
            ("_log" variable nil nil [711 745])
            ("GridSpecBase" type
               (:documentation "
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        nrows, ncols : int
            The number of rows and columns of the grid.
        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.
        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.
        \"\"\"" code nil (reparse-symbol indented_block_body) [974 1651])
                            ("if" code nil (reparse-symbol indented_block_body) [1660 1817])
                            ("if" code nil (reparse-symbol indented_block_body) [1825 1985])
                            ("self, self" code nil (reparse-symbol indented_block_body) [1993 2032])
                            ("self" code nil (reparse-symbol indented_block_body) [2041 2078])
                            ("self" code nil (reparse-symbol indented_block_body) [2087 2122]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [906 910])
                            ("nrows" variable nil (reparse-symbol function_parameters) [912 917])
                            ("ncols" variable nil (reparse-symbol function_parameters) [919 924])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [926 939])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [946 958]))                          
                        :documentation "
        Parameters
        ----------
        nrows, ncols : int
            The number of rows and columns of the grid.
        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.
        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [893 2123])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2141 2145]))                          )
                        (reparse-symbol indented_block_body) [2128 2664])
                    ("nrows" variable nil (reparse-symbol indented_block_body) [2669 2771])
                    ("ncols" variable nil (reparse-symbol indented_block_body) [2776 2881])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2904 2908]))                          
                        :documentation "
        Return a tuple containing the number of rows and columns in the grid.
        ")
                        (reparse-symbol indented_block_body) [2887 3053])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3081 3085])
                            ("figure" variable nil (reparse-symbol function_parameters) [3087 3093]))                          )
                        (reparse-symbol indented_block_body) [3058 3158])
                    ("new_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3183 3187])
                            ("loc" variable nil (reparse-symbol function_parameters) [3189 3192])
                            ("rowspan" variable nil (reparse-symbol function_parameters) [3194 3201])
                            ("colspan" variable nil (reparse-symbol function_parameters) [3205 3212]))                          
                        :documentation "
        Create and return a `.SubplotSpec` instance.

        Parameters
        ----------
        loc : (int, int)
            The position of the subplot in the grid as
            ``(row_index, column_index)``.
        rowspan, colspan : int, default: 1
            The number of rows and columns the subplot should span in the grid.
        ")
                        (reparse-symbol indented_block_body) [3163 3696])
                    ("set_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3722 3726])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [3728 3740]))                          
                        :documentation "
        Set the relative widths of the columns.

        *width_ratios* must be of length *ncols*. Each column gets a relative
        width of ``width_ratios[i] / sum(width_ratios)``.
        ")
                        (reparse-symbol indented_block_body) [3701 4272])
                    ("get_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4298 4302]))                          
                        :documentation "
        Return the width ratios.

        This is *None* if no width ratios have been set explicitly.
        ")
                        (reparse-symbol indented_block_body) [4277 4469])
                    ("set_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4496 4500])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [4502 4515]))                          
                        :documentation "
        Set the relative heights of the rows.

        *height_ratios* must be of length *nrows*. Each row gets a relative
        height of ``height_ratios[i] / sum(height_ratios)``.
        ")
                        (reparse-symbol indented_block_body) [4474 5049])
                    ("get_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5076 5080]))                          
                        :documentation "
        Return the height ratios.

        This is *None* if no height ratios have been set explicitly.
        ")
                        (reparse-symbol indented_block_body) [5054 5250])
                    ("get_grid_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5278 5282])
                            ("fig" variable nil (reparse-symbol function_parameters) [5284 5287])
                            ("raw" variable nil (reparse-symbol function_parameters) [5289 5292]))                          
                        :documentation "
        Return the positions of the grid cells in figure coordinates.

        Parameters
        ----------
        fig : `~matplotlib.figure.Figure`
            The figure the grid should be applied to. The subplot parameters
            (margins and spacing between subplots) are taken from *fig*.
        raw : bool, default: False
            If *True*, the subplot parameters of the figure are not taken
            into account. The grid spans the range [0, 1] in both directions
            without margins and there is no space between grid cells. This is
            used for constrained_layout.

        Returns
        -------
        bottoms, tops, lefts, rights : array
            The bottom, top, left, right positions of the grid cells in
            figure coordinates.
        ")
                        (reparse-symbol indented_block_body) [5255 7677])
                    ("_check_gridspec_exists" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("figure" variable nil (reparse-symbol function_parameters) [7727 7733])
                            ("nrows" variable nil (reparse-symbol function_parameters) [7735 7740])
                            ("ncols" variable nil (reparse-symbol function_parameters) [7742 7747]))                          
                        :documentation "
        Check if the figure already has a gridspec with these dimensions,
        or create a new one
        ")
                        (reparse-symbol indented_block_body) [7682 8678])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8699 8703])
                            ("key" variable nil (reparse-symbol function_parameters) [8705 8708]))                          
                        :documentation "Create and return a `.SubplotSpec` instance.")
                        (reparse-symbol indented_block_body) [8683 10207])
                    ("subplots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10225 10229])
                            ("sharex" variable nil (reparse-symbol function_parameters) [10234 10240])
                            ("sharey" variable nil (reparse-symbol function_parameters) [10248 10254])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [10262 10269])
                            ("subplot_kw" variable nil (reparse-symbol function_parameters) [10293 10303]))                          
                        :documentation "
        Add all subplots specified by this `GridSpec` to its parent figure.

        See `.Figure.subplots` for detailed documentation.
        ")
                        (reparse-symbol indented_block_body) [10212 12908]))                  
                :type "class")
                nil [748 12908])
            ("GridSpec" type
               (:documentation "
    A grid layout to place subplots within a figure.

    The location of the grid cells is determined in a similar way to
    `~.figure.SubplotParams` using *left*, *right*, *top*, *bottom*, *wspace*
    and *hspace*.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        nrows, ncols : int
            The number of rows and columns of the grid.

        figure : `~.figure.Figure`, optional
            Only used for constrained layout to create a proper layoutgrid.

        left, right, top, bottom : float, optional
            Extent of the subplots as a fraction of figure width or height.
            Left cannot be larger than right, and bottom cannot be larger than
            top. If not given, the values will be inferred from a figure or
            rcParams at draw time. See also `GridSpec.get_subplot_params`.

        wspace : float, optional
            The amount of width reserved for space between subplots,
            expressed as a fraction of the average axis width.
            If not given, the values will be inferred from a figure or
            rcParams when necessary. See also `GridSpec.get_subplot_params`.

        hspace : float, optional
            The amount of height reserved for space between subplots,
            expressed as a fraction of the average axis height.
            If not given, the values will be inferred from a figure or
            rcParams when necessary. See also `GridSpec.get_subplot_params`.

        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.

        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.

        \"\"\"" code nil (reparse-symbol indented_block_body) [13396 15186])
                            ("self" variable nil (reparse-symbol indented_block_body) [15195 15211])
                            ("self" variable nil (reparse-symbol indented_block_body) [15220 15240])
                            ("self" variable nil (reparse-symbol indented_block_body) [15249 15267])
                            ("self" variable nil (reparse-symbol indented_block_body) [15276 15290])
                            ("self" variable nil (reparse-symbol indented_block_body) [15299 15319])
                            ("self" variable nil (reparse-symbol indented_block_body) [15328 15348])
                            ("self" variable nil (reparse-symbol indented_block_body) [15357 15377])
                            ("super" code nil (reparse-symbol indented_block_body) [15387 15523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13192 13196])
                            ("nrows" variable nil (reparse-symbol function_parameters) [13198 13203])
                            ("ncols" variable nil (reparse-symbol function_parameters) [13205 13210])
                            ("figure" variable nil (reparse-symbol function_parameters) [13212 13218])
                            ("left" variable nil (reparse-symbol function_parameters) [13242 13246])
                            ("bottom" variable nil (reparse-symbol function_parameters) [13253 13259])
                            ("right" variable nil (reparse-symbol function_parameters) [13266 13271])
                            ("top" variable nil (reparse-symbol function_parameters) [13278 13281])
                            ("wspace" variable nil (reparse-symbol function_parameters) [13305 13311])
                            ("hspace" variable nil (reparse-symbol function_parameters) [13318 13324])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [13348 13360])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [13367 13380]))                          
                        :documentation "
        Parameters
        ----------
        nrows, ncols : int
            The number of rows and columns of the grid.

        figure : `~.figure.Figure`, optional
            Only used for constrained layout to create a proper layoutgrid.

        left, right, top, bottom : float, optional
            Extent of the subplots as a fraction of figure width or height.
            Left cannot be larger than right, and bottom cannot be larger than
            top. If not given, the values will be inferred from a figure or
            rcParams at draw time. See also `GridSpec.get_subplot_params`.

        wspace : float, optional
            The amount of width reserved for space between subplots,
            expressed as a fraction of the average axis width.
            If not given, the values will be inferred from a figure or
            rcParams when necessary. See also `GridSpec.get_subplot_params`.

        hspace : float, optional
            The amount of height reserved for space between subplots,
            expressed as a fraction of the average axis height.
            If not given, the values will be inferred from a figure or
            rcParams when necessary. See also `GridSpec.get_subplot_params`.

        width_ratios : array-like of length *ncols*, optional
            Defines the relative widths of the columns. Each column gets a
            relative width of ``width_ratios[i] / sum(width_ratios)``.
            If not given, all columns will have the same width.

        height_ratios : array-like of length *nrows*, optional
            Defines the relative heights of the rows. Each row gets a
            relative height of ``height_ratios[i] / sum(height_ratios)``.
            If not given, all rows will have the same height.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13179 15524])
                    ("_AllowedKeys" variable nil (reparse-symbol indented_block_body) [15529 15598])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15615 15619])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15621 15629]))                          
                        :documentation "
        Update the subplot parameters of the grid.

        Parameters that are not explicitly given are not changed. Setting a
        parameter to *None* resets it to :rc:`figure.subplot.*`.

        Parameters
        ----------
        left, right, top, bottom : float or None, optional
            Extent of the subplots as a fraction of figure width or height.
        wspace, hspace : float, optional
            Spacing between the subplots as a fraction of the average subplot
            width / height.
        ")
                        (reparse-symbol indented_block_body) [15604 16774])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16802 16806])
                            ("figure" variable nil (reparse-symbol function_parameters) [16808 16814]))                          
                        :documentation "
        Return the `.SubplotParams` for the GridSpec.

        In order of precedence the values are taken from

        - non-*None* attributes of the GridSpec
        - the provided *figure*
        - :rc:`figure.subplot.*`
        ")
                        (reparse-symbol indented_block_body) [16779 17413])
                    ("locally_modified_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17454 17458]))                          
                        :documentation "
        Return a list of the names of the subplot parameters explicitly set
        in the GridSpec.

        This is a subset of the attributes of `.SubplotParams`.
        ")
                        (reparse-symbol indented_block_body) [17418 17717])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17739 17743])
                            ("figure" variable nil (reparse-symbol function_parameters) [17745 17751])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17753 17761])
                            ("pad" variable nil (reparse-symbol function_parameters) [17789 17792])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [17799 17804])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [17811 17816])
                            ("rect" variable nil (reparse-symbol function_parameters) [17823 17827]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters
        ----------
        pad : float
            Padding between the figure edge and the edges of subplots, as a
            fraction of the font-size.
        h_pad, w_pad : float, optional
            Padding (height/width) between edges of adjacent subplots.
            Defaults to *pad*.
        rect : tuple of 4 floats, default: (0, 0, 1, 1), i.e. the whole figure
            (left, bottom, right, top) rectangle in normalized figure
            coordinates that the whole subplots area (including labels) will
            fit into.
        ")
                        (reparse-symbol indented_block_body) [17722 19141]))                  
                :type "class")
                nil [12910 19141])
            ("GridSpecFromSubplotSpec" type
               (:documentation "
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        nrows, ncols : int
            Number of rows and number of columns of the grid.
        subplot_spec : SubplotSpec
            Spec from which the layout parameters are inherited.
        wspace, hspace : float, optional
            See `GridSpec` for more details. If not specified default values
            (from the figure or rcParams) are used.
        height_ratios : array-like of length *nrows*, optional
            See `GridSpecBase` for details.
        width_ratios : array-like of length *ncols*, optional
            See `GridSpecBase` for details.
        \"\"\"" code nil (reparse-symbol indented_block_body) [19495 20120])
                            ("self" variable nil (reparse-symbol indented_block_body) [20129 20150])
                            ("self" variable nil (reparse-symbol indented_block_body) [20159 20180])
                            ("self" variable nil (reparse-symbol indented_block_body) [20189 20222])
                            ("self" variable nil (reparse-symbol indented_block_body) [20231 20285])
                            ("super" code nil (reparse-symbol indented_block_body) [20294 20430]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19336 19340])
                            ("nrows" variable nil (reparse-symbol function_parameters) [19342 19347])
                            ("ncols" variable nil (reparse-symbol function_parameters) [19349 19354])
                            ("subplot_spec" variable nil (reparse-symbol function_parameters) [19373 19385])
                            ("wspace" variable nil (reparse-symbol function_parameters) [19404 19410])
                            ("hspace" variable nil (reparse-symbol function_parameters) [19417 19423])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [19447 19460])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [19467 19479]))                          
                        :documentation "
        Parameters
        ----------
        nrows, ncols : int
            Number of rows and number of columns of the grid.
        subplot_spec : SubplotSpec
            Spec from which the layout parameters are inherited.
        wspace, hspace : float, optional
            See `GridSpec` for more details. If not specified default values
            (from the figure or rcParams) are used.
        height_ratios : array-like of length *nrows*, optional
            See `GridSpecBase` for details.
        width_ratios : array-like of length *ncols*, optional
            See `GridSpecBase` for details.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19323 20431])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20459 20463])
                            ("figure" variable nil (reparse-symbol function_parameters) [20465 20471]))                          
                        :documentation "Return a dictionary of subplot layout parameters.")
                        (reparse-symbol indented_block_body) [20436 21226])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21259 21263]))                          
                        :documentation "
        Return the topmost `.SubplotSpec` instance associated with the subplot.
        ")
                        (reparse-symbol indented_block_body) [21231 21430]))                  
                :type "class")
                nil [19143 21430])
            ("SubplotSpec" type
               (:documentation "
    The location of a subplot in a `GridSpec`.

    .. note::

        Likely, you'll never instantiate a `SubplotSpec` yourself. Instead you
        will typically obtain one from a `GridSpec` using item-access.

    Parameters
    ----------
    gridspec : `~matplotlib.gridspec.GridSpec`
        The GridSpec, which the subplot is referencing.
    num1, num2 : int
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell *inclusive*.

        The index starts from 0.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [22111 22136])
                            ("self" variable nil (reparse-symbol indented_block_body) [22145 22161])
                            ("self" variable nil (reparse-symbol indented_block_body) [22170 22186]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22069 22073])
                            ("gridspec" variable nil (reparse-symbol function_parameters) [22075 22083])
                            ("num1" variable nil (reparse-symbol function_parameters) [22085 22089])
                            ("num2" variable nil (reparse-symbol function_parameters) [22091 22095]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22056 22187])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22205 22209]))                          )
                        (reparse-symbol indented_block_body) [22192 22378])
                    ("_from_subplot_args" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("figure" variable nil (reparse-symbol function_parameters) [22424 22430])
                            ("args" variable nil (reparse-symbol function_parameters) [22432 22436]))                          
                        :documentation "
        Construct a `.SubplotSpec` from a parent `.Figure` and either

        - a `.SubplotSpec` -- returned as is;
        - one or three numbers -- a MATLAB-style subplot specifier.
        ")
                        (reparse-symbol indented_block_body) [22383 24105])
                    ("num2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24232 24236]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24209 24302])
                    ("num2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24333 24337])
                            ("value" variable nil (reparse-symbol function_parameters) [24339 24344]))                          
                        :decorators 
                          ( ("num2.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24307 24374])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24396 24400]))                          )
                        (reparse-symbol indented_block_body) [24379 24436])
                    ("get_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24458 24462]))                          )
                        (reparse-symbol indented_block_body) [24441 24495])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24517 24521]))                          
                        :documentation "
        Return the subplot geometry as tuple ``(n_rows, n_cols, start, stop)``.

        The indices *start* and *stop* define the range of the subplot within
        the `GridSpec`. *stop* is inclusive (i.e. for a single cell
        ``start == stop``).
        ")
                        (reparse-symbol indented_block_body) [24500 24907])
                    ("rowspan" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24938 24942]))                          
                        :documentation "The rows spanned by this subplot, as a `range` object.")
                        (reparse-symbol indented_block_body) [24912 25121])
                    ("colspan" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25152 25156]))                          
                        :documentation "The columns spanned by this subplot, as a `range` object.")
                        (reparse-symbol indented_block_body) [25126 25528])
                    ("is_first_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25550 25554]))                          )
                        (reparse-symbol indented_block_body) [25533 25596])
                    ("is_last_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25617 25621]))                          )
                        (reparse-symbol indented_block_body) [25601 25686])
                    ("is_first_col" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25708 25712]))                          )
                        (reparse-symbol indented_block_body) [25691 25754])
                    ("is_last_col" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25775 25779]))                          )
                        (reparse-symbol indented_block_body) [25759 25844])
                    ("" code nil (reparse-symbol indented_block_body) [25871 25892])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25914 25918])
                            ("figure" variable nil (reparse-symbol function_parameters) [25920 25926])
                            ("return_all" variable nil (reparse-symbol function_parameters) [25928 25938]))                          
                        :documentation "
        Update the subplot position from ``figure.subplotpars``.
        ")
                        (reparse-symbol indented_block_body) [25897 26673])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26706 26710]))                          
                        :documentation "
        Return the topmost `SubplotSpec` instance associated with the subplot.
        ")
                        (reparse-symbol indented_block_body) [26678 27004])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27020 27024])
                            ("other" variable nil (reparse-symbol function_parameters) [27026 27031]))                          
                        :documentation "
        Two SubplotSpecs are considered equal if they refer to the same
        position(s) in the same `GridSpec`.
        ")
                        (reparse-symbol indented_block_body) [27009 27463])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27481 27485]))                          )
                        (reparse-symbol indented_block_body) [27468 27548])
                    ("subgridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27569 27573])
                            ("nrows" variable nil (reparse-symbol function_parameters) [27575 27580])
                            ("ncols" variable nil (reparse-symbol function_parameters) [27582 27587])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27589 27597]))                          
                        :documentation "
        Create a GridSpec within this subplot.

        The created `.GridSpecFromSubplotSpec` will have this `SubplotSpec` as
        a parent.

        Parameters
        ----------
        nrows : int
            Number of rows in grid.

        ncols : int
            Number or columns in grid.

        Returns
        -------
        `.GridSpecFromSubplotSpec`

        Other Parameters
        ----------------
        **kwargs
            All other parameters are passed to `.GridSpecFromSubplotSpec`.

        See Also
        --------
        matplotlib.pyplot.subplots

        Examples
        --------
        Adding three subplots in the space occupied by a single subplot::

            fig = plt.figure()
            gs0 = fig.add_gridspec(3, 1)
            ax1 = fig.add_subplot(gs0[0])
            ax2 = fig.add_subplot(gs0[1])
            gssub = gs0[2].subgridspec(1, 3)
            for i in range(3):
                fig.add_subplot(gssub[0, i])
        ")
                        (reparse-symbol indented_block_body) [27553 28661]))                  
                :type "class")
                nil [21432 28661]))          
      :file "gridspec.py"
      :pointmax 28661
      :fsize 28660
      :lastmodtime '(25218 25732 345269 286000)
      :unmatched-syntax '((RETURN 24247 . 24253) (IF 24264 . 24266) (ELSE 24286 . 24290) (RAISE 23088 . 23093) (FROM 23224 . 23228) (NEWLINE 23233 . 23234) (RETURN 12732 . 12738) (IF 12752 . 12754) (ELSE 12771 . 12775) (NAME 10803 . 10809) (IF 10818 . 10820) (ELSE 10828 . 10832) (NAME 10717 . 10723) (IF 10732 . 10734) (ELSE 10742 . 10746) (MULT 10231 . 10232) (COMMA 10232 . 10233) (INDENT_BLOCK 9851 . 9922) (NEWLINE 9850 . 9851) (COLON 9849 . 9850) (TRY 9779 . 9782) (AS 9843 . 9845)))
    (semanticdb-table "semanticdb-table-157fb34650f8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The rcsetup module contains the validation code for customization using
Matplotlib's rc settings.

Each rc setting is assigned a function used to validate any attempted changes
to that setting.  The validation functions are defined in the rcsetup module,
and are used to construct the rcParams global object which stores the settings
and is referenced throughout Matplotlib.

The default values of the rc settings are set in the default matplotlibrc file.
Any additions or deletions to the parameter set listed here should also be
propagated to the :file:`matplotlibrc.template` in Matplotlib's root source
directory.
\"\"\"" code nil nil [1 626])
            ("ast" include nil nil [628 638])
            ("functools" include nil nil [639 678])
            ("numbers" include nil nil [679 705])
            ("operator" include nil nil [706 721])
            ("os" include nil nil [722 731])
            ("re" include nil nil [732 741])
            ("numpy" include nil nil [743 761])
            ("matplotlib" include nil nil [763 797])
            ("matplotlib.cbook" include nil nil [798 836])
            ("matplotlib.colors" include nil nil [837 890])
            ("matplotlib.fontconfig_pattern" include nil nil [891 957])
            ("matplotlib._enums" include nil nil [958 1007])
            ("cycler" include nil nil [1076 1120])
            ("interactive_bk" variable nil nil [1220 1433])
            ("non_interactive_bk" variable nil nil [1434 1532])
            ("all_backends" code nil nil [1533 1583])
            ("ValidateInStrings" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"*valid* is a list of legal strings.\"\"\"" code nil (reparse-symbol indented_block_body) [1717 1758])
                            ("self" variable nil (reparse-symbol indented_block_body) [1767 1781])
                            ("self" variable nil (reparse-symbol indented_block_body) [1790 1818])
                            ("self" variable nil (reparse-symbol indented_block_body) [1827 1869])
                            ("func" function (:arguments 
                              ( ("s" variable nil (reparse-symbol function_parameters) [1888 1889]))                              ) (reparse-symbol indented_block_body) [1879 1995])
                            ("self" variable nil (reparse-symbol indented_block_body) [2003 2043]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1628 1632])
                            ("key" variable nil (reparse-symbol function_parameters) [1634 1637])
                            ("valid" variable nil (reparse-symbol function_parameters) [1639 1644])
                            ("ignorecase" variable nil (reparse-symbol function_parameters) [1646 1656])
                            ("_deprecated_since" variable nil (reparse-symbol function_parameters) [1684 1701]))                          
                        :documentation "*valid* is a list of legal strings."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1615 2044])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2062 2066])
                            ("s" variable nil (reparse-symbol function_parameters) [2068 2069]))                          )
                        (reparse-symbol indented_block_body) [2049 2810]))                  
                :type "class")
                nil [1586 2810])
            ("" code nil nil [2822 2824])
            ("_listify_validator" function (:arguments 
              ( ("scalar_validator" variable nil (reparse-symbol function_parameters) [2848 2864])
                ("allow_stringlist" variable nil (reparse-symbol function_parameters) [2866 2882])
                ("n" variable nil (reparse-symbol function_parameters) [2916 2917])
                ("doc" variable nil (reparse-symbol function_parameters) [2924 2927]))              ) nil [2825 4695])
            ("validate_any" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4714 4715]))              ) nil [4697 4731])
            ("validate_anylist" variable nil nil [4731 4782])
            ("_validate_date" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4804 4805]))              ) nil [4785 4988])
            ("validate_bool" function
               (:documentation "Convert b to ``bool`` or raise."
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [5008 5009]))                  )
                nil [4990 5339])
            ("validate_axisbelow" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5364 5365]))              ) nil [5341 5624])
            ("validate_dpi" function
               (:documentation "Confirm s is string 'figure' or convert s to float or raise."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5643 5644]))                  )
                nil [5626 5949])
            ("_make_type_validator" function
               (:documentation "
    Return a validator that converts inputs to *cls* or raises (and possibly
    allows ``None`` as well).
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [5976 5979])
                    ("allow_none" variable nil (reparse-symbol function_parameters) [5984 5994]))                  )
                nil [5951 7003])
            ("validate_string" variable nil nil [7005 7048])
            ("validate_string_or_None" variable nil nil [7049 7117])
            ("validate_stringlist" variable nil nil [7118 7212])
            ("validate_int" variable nil nil [7213 7253])
            ("validate_int_or_None" variable nil nil [7254 7319])
            ("validate_float" variable nil nil [7320 7364])
            ("validate_float_or_None" variable nil nil [7365 7434])
            ("validate_floatlist" variable nil nil [7435 7526])
            ("_validate_pathlike" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7552 7553]))              ) nil [7529 7856])
            ("validate_fonttype" function
               (:documentation "
    Confirm that this is a Postscript or PDF font type that we know how to
    convert to.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7880 7881]))                  )
                nil [7858 8551])
            ("_validate_standard_backends" variable nil nil [8553 8647])
            ("_auto_backend_sentinel" variable nil nil [8648 8681])
            ("validate_backend" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8705 8706]))              ) nil [8684 8859])
            ("_validate_toolbar" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8883 8884]))              ) nil [8861 9210])
            ("validate_color_or_inherit" function
               (:documentation "Return a valid color arg."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9242 9243]))                  )
                nil [9212 9367])
            ("validate_color_or_auto" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9396 9397]))              ) nil [9369 9482])
            ("validate_color_for_prop_cycle" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9518 9519]))              ) nil [9484 9746])
            ("_validate_color_or_linecolor" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9781 9782]))              ) nil [9748 10409])
            ("validate_color" function
               (:documentation "Return a valid color arg."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10430 10431]))                  )
                nil [10411 11036])
            ("validate_colorlist" variable nil nil [11038 11156])
            ("_validate_cmap" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11178 11179]))              ) nil [11159 11246])
            ("validate_aspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11268 11269]))              ) nil [11248 11449])
            ("validate_fontsize_None" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11478 11479]))              ) nil [11451 11581])
            ("validate_fontsize" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11605 11606]))              ) nil [11583 12033])
            ("validate_fontsizelist" variable nil nil [12035 12096])
            ("validate_fontweight" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [12123 12124]))              ) nil [12099 12553])
            ("validate_font_properties" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [12584 12585]))              ) nil [12555 12633])
            ("_validate_mathtext_fallback" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [12667 12668]))              ) nil [12635 13098])
            ("validate_whiskers" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13122 13123]))              ) nil [13100 13432])
            ("validate_ps_distiller" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13460 13461]))              ) nil [13434 13667])
            ("_validate_named_linestyle" variable nil nil [13816 13971])
            ("_validate_linestyle" function
               (:documentation "
    A validator for all possible line styles, the named ones *and*
    the on-off ink sequences.
    "
                :arguments 
                  ( ("ls" variable nil (reparse-symbol function_parameters) [13998 14000]))                  )
                nil [13974 15346])
            ("validate_fillstyle" variable nil nil [15348 15464])
            ("validate_fillstylelist" variable nil nil [15467 15530])
            ("validate_markevery" function
               (:documentation "
    Validate the markevery property of a Line2D object.

    Parameters
    ----------
    s : None, int, (int, int), slice, float, (float, float), or list[int]

    Returns
    -------
    None, int, (int, int), slice, float, (float, float), or list[int]
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15556 15557]))                  )
                nil [15533 16605])
            ("validate_markeverylist" variable nil nil [16607 16670])
            ("validate_bbox" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [16691 16692]))              ) nil [16673 17078])
            ("validate_sketch" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17100 17101]))              ) nil [17080 17378])
            ("_validate_greaterequal0_lessthan1" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17418 17419]))              ) nil [17380 17559])
            ("_validate_greaterequal0_lessequal1" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17600 17601]))              ) nil [17561 17743])
            ("_range_validators" variable nil nil [17745 17910])
            ("validate_hatch" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17932 17933]))              ) nil [17913 47846]))          
      :file "rcsetup.py"
      :pointmax 47846
      :fsize 47845
      :lastmodtime '(25218 25732 331935 941000)
      :unmatched-syntax '((INDENT_BLOCK 23699 . 23820) (NEWLINE 23698 . 23699) (COLON 23697 . 23698) (TRY 23546 . 23549) (AS 23693 . 23695) (INDENT_BLOCK 19381 . 19387) (INDENT_BLOCK 18544 . 19381) (NEWLINE 18543 . 18544) (LBRACE 18542 . 18543) (NEWLINE 18520 . 18521) (RPAREN 18519 . 18520) (LPAREN 18500 . 18501) (NEWLINE 18461 . 18462) (RPAREN 18460 . 18461) (DEDENT 18406 . 18406) (NAME 18406 . 18424) (LPAREN 18445 . 18446) (INDENT_BLOCK 13302 . 13432) (NEWLINE 13301 . 13302) (COLON 13300 . 13301) (TRY 13237 . 13240) (AS 13296 . 13298) (INDENT_BLOCK 12485 . 12553) (NEWLINE 12484 . 12485) (COLON 12483 . 12484) (TRY 12417 . 12420) (AS 12479 . 12481) (INDENT_BLOCK 11888 . 12033) (NEWLINE 11887 . 11888) (COLON 11886 . 11887) (TRY 11831 . 11834) (AS 11882 . 11884) (INDENT_BLOCK 11381 . 11449) (NEWLINE 11380 . 11381) (COLON 11379 . 11380) (TRY 11324 . 11327) (AS 11375 . 11377) (INDENT_BLOCK 8206 . 8335) (NEWLINE 8205 . 8206) (COLON 8204 . 8205) (TRY 8131 . 8134) (AS 8200 . 8202) (INDENT_BLOCK 6662 . 6761) (NEWLINE 6661 . 6662) (COLON 6660 . 6661) (TRY 6586 . 6589) (AS 6656 . 6658) (MULT 5981 . 5982) (COMMA 5982 . 5983) (INDENT_BLOCK 5818 . 5949) (NEWLINE 5817 . 5818) (COLON 5816 . 5817) (TRY 5761 . 5764) (AS 5812 . 5814) (NAME 4617 . 4618) (IF 4633 . 4635) (ELSE 4652 . 4656) (MULT 2890 . 2891) (COMMA 2891 . 2892) (MULT 1664 . 1665) (COMMA 1665 . 1666)))
    (semanticdb-table "semanticdb-table-157fb346512c"
      :major-mode python-mode
      :tags 
        '( ("collections" include nil nil [1 35])
            ("contextlib" include nil nil [36 53])
            ("functools" include nil nil [54 81])
            ("inspect" include nil nil [82 96])
            ("inspect" include nil nil [97 137])
            ("logging" include nil nil [138 152])
            ("numbers" include nil nil [153 179])
            ("re" include nil nil [180 189])
            ("warnings" include nil nil [190 205])
            ("numpy" include nil nil [207 225])
            ("matplotlib" include nil nil [227 251])
            ("cbook" include nil nil [259 277])
            ("_api" include nil nil [259 277])
            ("ScalarMappable" include nil nil [287 308])
            ("Path" include nil nil [320 331])
            ("" code nil nil [356 473])
            ("_log" variable nil nil [475 509])
            ("allow_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependent renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [536 540]))                  )
                nil [512 2201])
            ("_finalize_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Needed on the outermost artist, i.e.
    Figure, to finish up if the render is still in rasterized mode.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [2231 2235]))                  )
                nil [2203 2690])
            ("_stale_axes_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2717 2721])
                    ("val" variable nil (reparse-symbol function_parameters) [2723 2726]))                  )
                nil [2692 2777])
            ("_XYPair" variable nil nil [2779 2817])
            ("_Unset" type
               (:members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2851 2855]))                          )
                        (reparse-symbol indented_block_body) [2838 2883]))                  
                :type "class")
                nil [2820 2883])
            ("_UNSET" variable nil nil [2883 2900])
            ("Artist" type
               (:documentation "
    Abstract base class for objects that render into a FigureCanvas.

    Typically, all visible elements in a figure are subclasses of Artist.
    "
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [3082 3092])
                    ("__init_subclass__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [3120 3123]))                      ) (reparse-symbol indented_block_body) [3098 3871])
                    ("_PROPERTIES_EXCLUDED_FROM_SET" variable nil (reparse-symbol indented_block_body) [3876 4185])
                    ("_update_set_signature_and_docstring" function
                       (:documentation "
        Update the signature of the set function to list all properties
        as keyword arguments.

        Property aliases are not listed in the signature for brevity, but
        are still accepted as keyword arguments.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4248 4251]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4191 5012])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5045 5063])
                            ("self" variable nil (reparse-symbol indented_block_body) [5072 5098])
                            ("self" variable nil (reparse-symbol indented_block_body) [5107 5124])
                            ("self" variable nil (reparse-symbol indented_block_body) [5133 5151])
                            ("self" variable nil (reparse-symbol indented_block_body) [5161 5183])
                            ("self" variable nil (reparse-symbol indented_block_body) [5192 5218])
                            ("self" variable nil (reparse-symbol indented_block_body) [5227 5247])
                            ("self" variable nil (reparse-symbol indented_block_body) [5256 5278])
                            ("self" variable nil (reparse-symbol indented_block_body) [5287 5305])
                            ("self" variable nil (reparse-symbol indented_block_body) [5314 5333])
                            ("self" variable nil (reparse-symbol indented_block_body) [5342 5363])
                            ("self" variable nil (reparse-symbol indented_block_body) [5372 5391])
                            ("self" variable nil (reparse-symbol indented_block_body) [5400 5416])
                            ("self" variable nil (reparse-symbol indented_block_body) [5425 5444])
                            ("self" variable nil (reparse-symbol indented_block_body) [5453 5477])
                            ("self" variable nil (reparse-symbol indented_block_body) [5486 5509])
                            ("self" code nil (reparse-symbol indented_block_body) [5647 5717])
                            ("self" variable nil (reparse-symbol indented_block_body) [5726 5768])
                            ("try" code nil (reparse-symbol indented_block_body) [5777 5929])
                            ("self" variable nil (reparse-symbol indented_block_body) [5937 5963])
                            ("self" variable nil (reparse-symbol indented_block_body) [5972 5988])
                            ("self" variable nil (reparse-symbol indented_block_body) [5997 6013])
                            ("self" variable nil (reparse-symbol indented_block_body) [6022 6039])
                            ("self" variable nil (reparse-symbol indented_block_body) [6048 6090])
                            ("self" variable nil (reparse-symbol indented_block_body) [6099 6148])
                            ("self" variable nil (reparse-symbol indented_block_body) [6157 6193])
                            ("self" variable nil (reparse-symbol indented_block_body) [6202 6224]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5030 5034]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5017 6225])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6247 6251]))                          )
                        (reparse-symbol indented_block_body) [6230 6474])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6490 6494]))                          
                        :documentation "
        Remove the artist from the figure if possible.

        The effect will not be visible until the figure is redrawn, e.g.,
        with `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to
        update the axes limits if desired.

        Note: `~.axes.Axes.relim` will not see collections even if the
        collection was added to the axes with *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        ")
                        (reparse-symbol indented_block_body) [6479 8024])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8382 8386]))                          
                        :documentation "Return whether units are set on any axis.")
                        (reparse-symbol indented_block_body) [8367 8545])
                    ("convert_xunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8569 8573])
                            ("x" variable nil (reparse-symbol function_parameters) [8575 8576]))                          
                        :documentation "
        Convert *x* using the unit type of the xaxis.

        If the artist is not in contained in an Axes or if the xaxis does not
        have units, *x* itself is returned.
        ")
                        (reparse-symbol indented_block_body) [8550 8926])
                    ("convert_yunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8950 8954])
                            ("y" variable nil (reparse-symbol function_parameters) [8956 8957]))                          
                        :documentation "
        Convert *y* using the unit type of the yaxis.

        If the artist is not in contained in an Axes or if the yaxis does not
        have units, *y* itself is returned.
        ")
                        (reparse-symbol indented_block_body) [8931 9307])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9335 9339]))                          
                        :documentation "The `~.axes.Axes` instance the artist resides in, or *None*.")
                        (reparse-symbol indented_block_body) [9312 9443])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9474 9478])
                            ("new_axes" variable nil (reparse-symbol function_parameters) [9480 9488]))                          
                        :decorators 
                          ( ("axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9448 9949])
                    ("stale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9978 9982]))                          
                        :documentation "
        Whether the artist is 'stale' and needs to be re-drawn for the output
        to match the internal state of the artist.
        ")
                        (reparse-symbol indented_block_body) [9954 10165])
                    ("stale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10198 10202])
                            ("val" variable nil (reparse-symbol function_parameters) [10204 10207]))                          
                        :decorators 
                          ( ("stale.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10170 10601])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10628 10632])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10634 10642]))                          
                        :documentation "
        Get the artist's bounding box in display space.

        The bounding box' width and height are nonnegative.

        Subclasses should override for inclusion in the bounding box
        \"tight\" calculation. Default is to return an empty bounding
        box at 0, 0.

        Be careful when using this function, the results will not update
        if the artist window extent of the artist changes.  The extent
        can change due to any changes in the transform stack, such as
        changing the axes limits, the figure size, or the canvas used
        (as is done when saving a figure).  This can lead to unexpected
        behavior where interactive figures will look fine on the screen,
        but will save incorrectly.
        ")
                        (reparse-symbol indented_block_body) [10606 11448])
                    ("_get_clipping_extent_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11483 11487]))                          
                        :documentation "
        Return a bbox with the extents of the intersection of the clip_path
        and clip_box for this artist, or None if both of these are
        None, or ``get_clip_on`` is False.
        ")
                        (reparse-symbol indented_block_body) [11453 12126])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12149 12153])
                            ("renderer" variable nil (reparse-symbol function_parameters) [12155 12163]))                          
                        :documentation "
        Like `.Artist.get_window_extent`, but includes any clipping.

        Parameters
        ----------
        renderer : `.RendererBase` subclass
            renderer that will be used to draw the figures (i.e.
            ``fig.canvas.get_renderer()``)

        Returns
        -------
        `.Bbox`
            The enclosing bounding box (in figure pixel coordinates).
        ")
                        (reparse-symbol indented_block_body) [12131 13048])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13070 13074])
                            ("func" variable nil (reparse-symbol function_parameters) [13076 13080]))                          
                        :documentation "
        Add a callback function that will be called whenever one of the
        `.Artist`'s properties changes.

        Parameters
        ----------
        func : callable
            The callback function. It must have the signature::

                def func(artist: Artist) -> Any

            where *artist* is the calling `.Artist`. Return values may exist
            but are ignored.

        Returns
        -------
        int
            The observer id associated with the callback. This id can be
            used for removing the callback with `.remove_callback` later.

        See Also
        --------
        remove_callback
        ")
                        (reparse-symbol indented_block_body) [13053 13943])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13968 13972])
                            ("oid" variable nil (reparse-symbol function_parameters) [13974 13977]))                          
                        :documentation "
        Remove a callback based on its observer id.

        See Also
        --------
        add_callback
        ")
                        (reparse-symbol indented_block_body) [13948 14152])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14170 14174]))                          
                        :documentation "
        Call all of the registered callbacks.

        This function is triggered internally when a property is changed.

        See Also
        --------
        add_callback
        remove_callback
        ")
                        (reparse-symbol indented_block_body) [14157 14446])
                    ("is_transform_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14472 14476]))                          
                        :documentation "
        Return whether the Artist has an explicitly set transform.

        This is *True* after `.set_transform` has been called.
        ")
                        (reparse-symbol indented_block_body) [14451 14668])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14691 14695])
                            ("t" variable nil (reparse-symbol function_parameters) [14697 14698]))                          
                        :documentation "
        Set the artist transform.

        Parameters
        ----------
        t : `.Transform`
        ")
                        (reparse-symbol indented_block_body) [14673 14935])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14958 14962]))                          
                        :documentation "Return the `.Transform` instance used by this artist.")
                        (reparse-symbol indented_block_body) [14940 15348])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15370 15374]))                          )
                        (reparse-symbol indented_block_body) [15353 15468])
                    ("_default_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15495 15499])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [15501 15511])
                            ("figure" variable nil (reparse-symbol function_parameters) [15513 15519]))                          
                        :documentation "
        Base impl. for checking whether a mouseevent happened in an artist.

        1. If the artist figure is known and the event did not occur in that
           figure (by checking its ``canvas`` attribute), reject it.
        2. Otherwise, return `None, {}`, indicating that the subclass'
           implementation should be used.

        Subclasses should start their definition of `contains` as follows:

            inside, info = self._default_contains(mouseevent)
            if inside is not None:
                return inside, info
            # subclass-specific implementation follows

        The *figure* kwarg is provided for the implementation of
        `.Figure.contains`.
        ")
                        (reparse-symbol indented_block_body) [15473 16373])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16391 16395])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [16397 16407]))                          
                        :documentation "
        Test whether the artist contains the mouse event.

        Parameters
        ----------
        mouseevent : `matplotlib.backend_bases.MouseEvent`

        Returns
        -------
        contains : bool
            Whether any values are within the radius.
        details : dict
            An artist-specific dictionary of details of the event context,
            such as which points are contained in the pick radius. See the
            individual Artist subclasses for details.
        ")
                        (reparse-symbol indented_block_body) [16378 17150])
                    ("pickable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17168 17172]))                          
                        :documentation "
        Return whether the artist is pickable.

        See Also
        --------
        set_picker, get_picker, pick
        ")
                        (reparse-symbol indented_block_body) [17155 17386])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17400 17404])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [17406 17416]))                          
                        :documentation "
        Process a pick event.

        Each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set.

        See Also
        --------
        set_picker, get_picker, pickable
        ")
                        (reparse-symbol indented_block_body) [17391 18720])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18740 18744])
                            ("picker" variable nil (reparse-symbol function_parameters) [18746 18752]))                          
                        :documentation "
        Define the picking behavior of the artist.

        Parameters
        ----------
        picker : None or bool or float or callable
            This can be one of the following:

            - *None*: Picking is disabled for this artist (default).

            - A boolean: If *True* then picking will be enabled and the
              artist will fire a pick event if the mouse event is over
              the artist.

            - A float: If picker is a number it is interpreted as an
              epsilon tolerance in points and the artist will fire
              off an event if its data is within epsilon of the mouse
              event.  For some artists like lines and patch collections,
              the artist may provide additional data to the pick event
              that is generated, e.g., the indices of the data within
              epsilon of the pick event

            - A function: If picker is callable, it is a user supplied
              function which determines whether the artist is hit by the
              mouse event::

                hit, props = picker(artist, mouseevent)

              to determine the hit test.  if the mouse event is over the
              artist, return *hit=True* and props is a dictionary of
              properties you want added to the PickEvent attributes.
        ")
                        (reparse-symbol indented_block_body) [18725 20139])
                    ("get_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20159 20163]))                          
                        :documentation "
        Return the picking behavior of the artist.

        The possible values are described in `.set_picker`.

        See Also
        --------
        set_picker, pickable, pick
        ")
                        (reparse-symbol indented_block_body) [20144 20400])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20417 20421]))                          
                        :documentation "Return the url.")
                        (reparse-symbol indented_block_body) [20405 20479])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20496 20500])
                            ("url" variable nil (reparse-symbol function_parameters) [20502 20505]))                          
                        :documentation "
        Set the url for the artist.

        Parameters
        ----------
        url : str
        ")
                        (reparse-symbol indented_block_body) [20484 20649])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20666 20670]))                          
                        :documentation "Return the group id.")
                        (reparse-symbol indented_block_body) [20654 20733])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20750 20754])
                            ("gid" variable nil (reparse-symbol function_parameters) [20756 20759]))                          
                        :documentation "
        Set the (group) id for the artist.

        Parameters
        ----------
        gid : str
        ")
                        (reparse-symbol indented_block_body) [20738 20910])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20928 20932]))                          
                        :documentation "
        Return the snap setting.

        See `.set_snap` for details.
        ")
                        (reparse-symbol indented_block_body) [20915 21137])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21155 21159])
                            ("snap" variable nil (reparse-symbol function_parameters) [21161 21165]))                          
                        :documentation "
        Set the snapping behavior.

        Snapping aligns positions with the pixel grid, which results in
        clearer images. For example, if a black line of 1px width was
        defined at a position in between two pixels, the resulting image
        would contain the interpolated value of that line in the pixel grid,
        which would be a grey value on both adjacent pixel positions. In
        contrast, snapping will move the line to the nearest integer pixel
        value, so that the resulting image will really contain a 1px wide
        black line.

        Snapping is currently only supported by the Agg and MacOSX backends.

        Parameters
        ----------
        snap : bool or None
            Possible values:

            - *True*: Snap vertices to the nearest pixel center.
            - *False*: Do not modify vertex positions.
            - *None*: (auto) If the path contains only rectilinear line
              segments, round to the nearest pixel center.
        ")
                        (reparse-symbol indented_block_body) [21142 22240])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22267 22271]))                          
                        :documentation "
        Return the sketch parameters for the artist.

        Returns
        -------
        tuple or None

            A 3-tuple with the following elements:

            - *scale*: The amplitude of the wiggle perpendicular to the
              source line.
            - *length*: The length of the wiggle along the line.
            - *randomness*: The scale factor by which the length is
              shrunken or expanded.

            Returns *None* if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [22245 22817])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22844 22848])
                            ("scale" variable nil (reparse-symbol function_parameters) [22850 22855])
                            ("length" variable nil (reparse-symbol function_parameters) [22862 22868])
                            ("randomness" variable nil (reparse-symbol function_parameters) [22875 22885]))                          
                        :documentation "
        Set the sketch parameters.

        Parameters
        ----------
        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.
        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)
        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)

            The PGF backend uses this argument as an RNG seed and not as
            described above. Using the same seed yields the same random shape.

            .. ACCEPTS: (scale: float, length: float, randomness: float)
        ")
                        (reparse-symbol indented_block_body) [22822 23865])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23891 23895])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [23897 23909]))                          
                        :documentation "
        Set the path effects.

        Parameters
        ----------
        path_effects : `.AbstractPathEffect`
        ")
                        (reparse-symbol indented_block_body) [23870 24118])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24144 24148]))                          )
                        (reparse-symbol indented_block_body) [24123 24185])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24205 24209]))                          
                        :documentation "Return the `.Figure` instance the artist belongs to.")
                        (reparse-symbol indented_block_body) [24190 24306])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24326 24330])
                            ("fig" variable nil (reparse-symbol function_parameters) [24332 24335]))                          
                        :documentation "
        Set the `.Figure` instance the artist belongs to.

        Parameters
        ----------
        fig : `.Figure`
        ")
                        (reparse-symbol indented_block_body) [24311 25181])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25203 25207])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [25209 25216]))                          
                        :documentation "
        Set the artist's clip `.Bbox`.

        Parameters
        ----------
        clipbox : `.Bbox`
        ")
                        (reparse-symbol indented_block_body) [25186 25428])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25451 25455])
                            ("path" variable nil (reparse-symbol function_parameters) [25457 25461])
                            ("transform" variable nil (reparse-symbol function_parameters) [25463 25472]))                          
                        :documentation "
        Set the artist's clip path.

        Parameters
        ----------
        path : `.Patch` or `.Path` or `.TransformedPath` or None
            The clip path. If given a `.Path`, *transform* must be provided as
            well. If *None*, a previously set clip path is removed.
        transform : `~matplotlib.transforms.Transform`, optional
            Only used if *path* is a `.Path`, in which case the given `.Path`
            is converted to a `.TransformedPath` using *transform*.

        Notes
        -----
        For efficiency, if *path* is a `.Rectangle` this method will set the
        clipping box to the corresponding rectangle and set the clipping path
        to ``None``.

        For technical reasons (support of `~.Artist.set`), a tuple
        (*path*, *transform*) is also accepted as a single positional
        parameter.

        .. ACCEPTS: Patch or (Path, Transform) or None
        ")
                        (reparse-symbol indented_block_body) [25433 27788])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27807 27811]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends.
        ")
                        (reparse-symbol indented_block_body) [27793 27955])
                    ("get_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27976 27980]))                          
                        :documentation "Return the visibility.")
                        (reparse-symbol indented_block_body) [27960 28049])
                    ("get_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28071 28075]))                          
                        :documentation "Return whether the artist is animated.")
                        (reparse-symbol indented_block_body) [28054 28161])
                    ("get_in_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28184 28188]))                          
                        :documentation "
        Return boolean flag, ``True`` if artist is included in layout
        calculations.

        E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,
        `.Figure.tight_layout()`, and
        ``fig.savefig(fname, bbox_inches='tight')``.
        ")
                        (reparse-symbol indented_block_body) [28166 28499])
                    ("get_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28520 28524]))                          
                        :documentation "Return whether the artist uses clipping.")
                        (reparse-symbol indented_block_body) [28504 28610])
                    ("get_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28632 28636]))                          
                        :documentation "Return the clipbox.")
                        (reparse-symbol indented_block_body) [28615 28701])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28724 28728]))                          
                        :documentation "Return the clip path.")
                        (reparse-symbol indented_block_body) [28706 28797])
                    ("get_transformed_clip_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28843 28847]))                          
                        :documentation "
        Return the clip path with the non-affine part of its
        transformation applied, and the remaining affine part of its
        transformation.
        ")
                        (reparse-symbol indented_block_body) [28802 29161])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29182 29186])
                            ("b" variable nil (reparse-symbol function_parameters) [29188 29189]))                          
                        :documentation "
        Set whether the artist uses clipping.

        When False artists will be visible outside of the axes which
        can lead to unexpected results.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [29166 29612])
                    ("_set_gc_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29634 29638])
                            ("gc" variable nil (reparse-symbol function_parameters) [29640 29642]))                          
                        :documentation "Set the clip properly for the gc.")
                        (reparse-symbol indented_block_body) [29617 29945])
                    ("get_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29969 29973]))                          
                        :documentation "Return whether the artist is to be rasterized.")
                        (reparse-symbol indented_block_body) [29950 30069])
                    ("set_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30093 30097])
                            ("rasterized" variable nil (reparse-symbol function_parameters) [30099 30109]))                          
                        :documentation "
        Force rasterized (bitmap) drawing for vector graphics output.

        Rasterized drawing is not supported by all artists. If you try to
        enable this on an artist that does not support it, the command has no
        effect and a warning will be issued.

        This setting is ignored for pixel-based output.

        See also :doc:`/gallery/misc/rasterization_demo`.

        Parameters
        ----------
        rasterized : bool
        ")
                        (reparse-symbol indented_block_body) [30074 30778])
                    ("get_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30802 30806]))                          
                        :documentation "Return filter function to be used for agg filter.")
                        (reparse-symbol indented_block_body) [30783 30905])
                    ("set_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30929 30933])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [30935 30946]))                          
                        :documentation "
        Set the agg filter.

        Parameters
        ----------
        filter_func : callable
            A filter function, which takes a (m, n, 3) float array and a dpi
            value, and returns a (m, n, 3) array.

            .. ACCEPTS: a filter function, which takes a (m, n, 3) float array
                and a dpi value, and returns a (m, n, 3) array
        ")
                        (reparse-symbol indented_block_body) [30910 31406])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31420 31424])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31426 31434]))                          
                        :documentation "
        Draw the Artist (and its children) using the given renderer.

        This has no effect if the artist is not visible (`.Artist.get_visible`
        returns False).

        Parameters
        ----------
        renderer : `.RendererBase` subclass.

        Notes
        -----
        This method is overridden in the Artist subclasses.
        ")
                        (reparse-symbol indented_block_body) [31411 31888])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31907 31911])
                            ("alpha" variable nil (reparse-symbol function_parameters) [31913 31918]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.

        Parameters
        ----------
        alpha : scalar or None
            *alpha* must be within the 0-1 range, inclusive.
        ")
                        (reparse-symbol indented_block_body) [31893 32521])
                    ("_set_alpha_for_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32551 32555])
                            ("alpha" variable nil (reparse-symbol function_parameters) [32557 32562]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.

        Parameters
        ----------
        alpha : array-like or scalar or None
            All values must be within the 0-1 range, inclusive.
            Masked values and nans are not supported.
        ")
                        (reparse-symbol indented_block_body) [32526 33398])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33419 33423])
                            ("b" variable nil (reparse-symbol function_parameters) [33425 33426]))                          
                        :documentation "
        Set the artist's visibility.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [33403 33622])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33644 33648])
                            ("b" variable nil (reparse-symbol function_parameters) [33650 33651]))                          
                        :documentation "
        Set whether the artist is intended to be used in an animation.

        If True, the artist is excluded from regular drawing of the figure.
        You have to call `.Figure.draw_artist` / `.Axes.draw_artist`
        explicitly on the artist. This appoach is used to speed up animations
        using blitting.

        See also `matplotlib.animation` and
        :doc:`/tutorials/advanced/blitting`.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [33627 34234])
                    ("set_in_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34257 34261])
                            ("in_layout" variable nil (reparse-symbol function_parameters) [34263 34272]))                          
                        :documentation "
        Set if artist is to be included in layout calculations,
        E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,
        `.Figure.tight_layout()`, and
        ``fig.savefig(fname, bbox_inches='tight')``.

        Parameters
        ----------
        in_layout : bool
        ")
                        (reparse-symbol indented_block_body) [34239 34623])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34639 34643])
                            ("props" variable nil (reparse-symbol function_parameters) [34645 34650]))                          
                        :documentation "
        Update this artist's properties from the dict *props*.

        Parameters
        ----------
        props : dict
        ")
                        (reparse-symbol indented_block_body) [34628 35519])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35538 35542]))                          
                        :documentation "Return the label used for this artist in the legend.")
                        (reparse-symbol indented_block_body) [35524 35639])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35658 35662])
                            ("s" variable nil (reparse-symbol function_parameters) [35664 35665]))                          
                        :documentation "
        Set a label that will be displayed in the legend.

        Parameters
        ----------
        s : object
            *s* will be converted to a string by calling `str`.
        ")
                        (reparse-symbol indented_block_body) [35644 36026])
                    ("get_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36046 36050]))                          
                        :documentation "Return the artist's zorder.")
                        (reparse-symbol indented_block_body) [36031 36122])
                    ("set_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36142 36146])
                            ("level" variable nil (reparse-symbol function_parameters) [36148 36153]))                          
                        :documentation "
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        Parameters
        ----------
        level : float
        ")
                        (reparse-symbol indented_block_body) [36127 36485])
                    ("sticky_edges" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36521 36525]))                          
                        :documentation "
        ``x`` and ``y`` sticky edge lists for autoscaling.

        When performing autoscaling, if a data limit coincides with a value in
        the corresponding sticky_edges list, then no margin will be added--the
        view limit \"sticks\" to the edge. A typical use case is histograms,
        where one usually expects no margin on the bottom edge (0) of the
        histogram.

        Moreover, margin expansion \"bumps\" against sticky edges and cannot
        cross them.  For example, if the upper data limit is 1.0, the upper
        view limit computed by simple margin application is 1.2, but there is a
        sticky edge at 1.1, then the actual upper view limit will be 1.1.

        This attribute cannot be assigned to; however, the ``x`` and ``y``
        lists can be modified in place as needed.

        Examples
        --------
        >>> artist.sticky_edges.x[:] = (xmin, xmax)
        >>> artist.sticky_edges.y[:] = (ymin, ymax)

        ")
                        (reparse-symbol indented_block_body) [36490 37544])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37565 37569])
                            ("other" variable nil (reparse-symbol function_parameters) [37571 37576]))                          
                        :documentation "Copy properties from *other* to *self*.")
                        (reparse-symbol indented_block_body) [37549 38207])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38227 38231]))                          
                        :documentation "Return a dictionary of all the properties of the artist.")
                        (reparse-symbol indented_block_body) [38212 38355])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38368 38372])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38374 38382]))                          )
                        (reparse-symbol indented_block_body) [38360 38622])
                    ("_cm_set" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38670 38674])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38676 38684]))                          
                        :documentation "
        `.Artist.set` context-manager that restores original values at exit.
        ")
                        (reparse-symbol indented_block_body) [38627 38970])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38987 38991])
                            ("match" variable nil (reparse-symbol function_parameters) [38993 38998])
                            ("include_self" variable nil (reparse-symbol function_parameters) [39005 39017]))                          
                        :documentation "
        Find artist objects.

        Recursively find all `.Artist` instances contained in the artist.

        Parameters
        ----------
        match
            A filter criterion for the matches. This can be

            - *None*: Return all objects contained in artist.
            - A function with signature ``def match(artist: Artist) -> bool``.
              The result will only contain artists for which the function
              returns *True*.
            - A class instance: e.g., `.Line2D`. The result will only contain
              artists of this class or its subclasses (``isinstance`` check).

        include_self : bool
            Include *self* in the list to be checked for a match.

        Returns
        -------
        list of `.Artist`

        ")
                        (reparse-symbol indented_block_body) [38975 40461])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40486 40490])
                            ("event" variable nil (reparse-symbol function_parameters) [40492 40497]))                          
                        :documentation "
        Return the cursor data for a given event.

        .. note::
            This method is intended to be overridden by artist subclasses.
            As an end-user of Matplotlib you will most likely not call this
            method yourself.

        Cursor data can be used by Artists to provide additional context
        information for a given event. The default implementation just returns
        *None*.

        Subclasses can override the method and return arbitrary data. However,
        when doing so, they must ensure that `.format_cursor_data` can convert
        the data to a string representation.

        The only current use case is displaying the z-value of an `.AxesImage`
        in the status bar of a plot window, while moving the mouse.

        Parameters
        ----------
        event : `matplotlib.backend_bases.MouseEvent`

        See Also
        --------
        format_cursor_data

        ")
                        (reparse-symbol indented_block_body) [40466 41470])
                    ("format_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41498 41502])
                            ("data" variable nil (reparse-symbol function_parameters) [41504 41508]))                          
                        :documentation "
        Return a string representation of *data*.

        .. note::
            This method is intended to be overridden by artist subclasses.
            As an end-user of Matplotlib you will most likely not call this
            method yourself.

        The default implementation converts ints and floats and arrays of ints
        and floats into a comma-separated string enclosed in square brackets,
        unless the artist has an associated colorbar, in which case scalar
        values are formatted using the colorbar's formatter.

        See Also
        --------
        get_cursor_data
        ")
                        (reparse-symbol indented_block_body) [41475 43457])
                    ("mouseover" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43490 43494]))                          
                        :documentation "
        If this property is set to *True*, the artist will be queried for
        custom context information when the mouse cursor moves over it.

        See also :meth:`get_cursor_data`, :class:`.ToolCursorPosition` and
        :class:`.NavigationToolbar2`.
        ")
                        (reparse-symbol indented_block_body) [43462 43812])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43853 43857])
                            ("val" variable nil (reparse-symbol function_parameters) [43859 43862]))                          
                        :decorators 
                          ( ("mouseover.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43817 44087]))                  
                :type "class")
                nil [2903 44087])
            ("ArtistInspector" type
               (:documentation "
    A helper class to inspect an `~matplotlib.artist.Artist` and return
    information about its settable properties and their current values.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"
        Initialize the artist inspector with an `Artist` or an iterable of
        `Artist`\\s.  If an iterable is used, we assume it is a homogeneous
        sequence (all `Artist`\\s are of the same type) and it is your
        responsibility to make sure this is so.
        \"\"\"" code nil (reparse-symbol indented_block_body) [44308 44592])
                            ("if" code nil (reparse-symbol indented_block_body) [44601 44746])
                            ("self" variable nil (reparse-symbol indented_block_body) [44755 44769])
                            ("if" code nil (reparse-symbol indented_block_body) [44778 44830])
                            ("self" variable nil (reparse-symbol indented_block_body) [44838 44848])
                            ("self" variable nil (reparse-symbol indented_block_body) [44858 44890]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44290 44294])
                            ("o" variable nil (reparse-symbol function_parameters) [44296 44297]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44277 44891])
                    ("get_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44912 44916]))                          
                        :documentation "
        Get a dict mapping property fullnames to sets of aliases for each alias
        in the :class:`~matplotlib.artist.ArtistInspector`.

        e.g., for lines::

          {'markerfacecolor': {'mfc'},
           'linewidth'      : {'lw'},
          }
        ")
                        (reparse-symbol indented_block_body) [44896 45743])
                    ("_get_valid_values_regex" variable nil (reparse-symbol indented_block_body) [45748 45857])
                    ("get_valid_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45884 45888])
                            ("attr" variable nil (reparse-symbol function_parameters) [45890 45894]))                          
                        :documentation "
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the setter for a line that
        begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a
        numpydoc-style documentation for the setter's first argument.
        ")
                        (reparse-symbol indented_block_body) [45863 47224])
                    ("_replace_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47247 47251])
                            ("source_class" variable nil (reparse-symbol function_parameters) [47253 47265]))                          
                        :documentation "
        Changes the full path to the public API path that is used
        in sphinx. This is needed for links to work.
        ")
                        (reparse-symbol indented_block_body) [47229 47644])
                    ("get_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47665 47669]))                          
                        :documentation "
        Get the attribute strings with setters for object.

        For example, for a line, return ``['markerfacecolor', 'linewidth',
        ....]``.
        ")
                        (reparse-symbol indented_block_body) [47649 48244])
                    ("is_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48262 48266])
                            ("o" variable nil (reparse-symbol function_parameters) [48268 48269]))                          
                        :documentation "Return whether method object *o* is an alias for another method.")
                        (reparse-symbol indented_block_body) [48249 48473])
                    ("aliased_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48495 48499])
                            ("s" variable nil (reparse-symbol function_parameters) [48501 48502]))                          
                        :documentation "
        Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'.
        ")
                        (reparse-symbol indented_block_body) [48478 48906])
                    ("_NOT_LINKABLE" variable nil (reparse-symbol indented_block_body) [48911 49681])
                    ("aliased_name_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49709 49713])
                            ("s" variable nil (reparse-symbol function_parameters) [49715 49716])
                            ("target" variable nil (reparse-symbol function_parameters) [49718 49724]))                          
                        :documentation "
        Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME',
        formatted for reST.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'.
        ")
                        (reparse-symbol indented_block_body) [49687 50320])
                    ("pprint_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50344 50348])
                            ("prop" variable nil (reparse-symbol function_parameters) [50350 50354])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [50361 50373]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable
        properties and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [50325 51139])
                    ("pprint_setters_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51168 51172])
                            ("prop" variable nil (reparse-symbol function_parameters) [51174 51178])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [51185 51197]))                          
                        :documentation "
        If *prop* is *None*, return a list of reST-formatted strings of all
        settable properties and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of \"property : valid\"
        values.
        ")
                        (reparse-symbol indented_block_body) [51144 53246])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53266 53270]))                          
                        :documentation "Return a dictionary mapping property name -> value.")
                        (reparse-symbol indented_block_body) [53251 53921])
                    ("pprint_getters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53945 53949]))                          
                        :documentation "Return the getters and actual values as list of strings.")
                        (reparse-symbol indented_block_body) [53926 54471]))                  
                :type "class")
                nil [44089 54471])
            ("getp" function
               (:documentation "
    Return the value of an `.Artist`'s *property*, or print all of them.

    Parameters
    ----------
    obj : `.Artist`
        The queried artist; e.g., a `.Line2D`, a `.Text`, or an `~.axes.Axes`.

    property : str or None, default: None
        If *property* is 'somename', this function returns
        ``obj.get_somename()``.

        If it's None (or unset), it *prints* all gettable properties from
        *obj*.  Many properties have aliases for shorter typing, e.g. 'lw' is
        an alias for 'linewidth'.  In the output, aliases and full property
        names will be listed as:

          property or alias = value

        e.g.:

          linewidth or lw = 2

    See Also
    --------
    setp
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [54482 54485])
                    ("property" variable nil (reparse-symbol function_parameters) [54487 54495]))                  )
                nil [54473 55424])
            ("get" variable nil nil [55433 55443])
            ("setp" function
               (:documentation "
    Set one or more properties on an `.Artist`, or list allowed values.

    Parameters
    ----------
    obj : `.Artist` or list of `.Artist`
        The artist(s) whose properties are being set or queried.  When setting
        properties, all artists are affected; when querying the allowed values,
        only the first instance in the sequence is queried.

        For example, two lines can be made thicker and red with a single call:

        >>> x = arange(0, 1, 0.01)
        >>> lines = plot(x, sin(2*pi*x), x, sin(4*pi*x))
        >>> setp(lines, linewidth=2, color='r')

    file : file-like, default: `sys.stdout`
        Where `setp` writes its output when asked to list allowed values.

        >>> with open('output.log') as file:
        ...     setp(line, file=file)

        The default, ``None``, means `sys.stdout`.

    *args, **kwargs
        The properties to set.  The following combinations are supported:

        - Set the linestyle of a line to be dashed:

          >>> line, = plot([1, 2, 3])
          >>> setp(line, linestyle='--')

        - Set multiple properties at once:

          >>> setp(line, linewidth=2, color='r')

        - List allowed values for a line's linestyle:

          >>> setp(line, 'linestyle')
          linestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}

        - List all properties that can be set, and their allowed values:

          >>> setp(line)
          agg_filter: a filter function, ...
          [long output listing omitted]

        `setp` also supports MATLAB style string/value pairs.  For example, the
        following are equivalent:

        >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
        >>> setp(lines, linewidth=2, color='r')        # Python style

    See Also
    --------
    getp
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [55455 55458])
                    ("args" variable nil (reparse-symbol function_parameters) [55460 55465])
                    ("file" variable nil (reparse-symbol function_parameters) [55467 55471])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55478 55486]))                  )
                nil [55446 57953])
            ("kwdoc" function (:arguments 
              ( ("artist" variable nil (reparse-symbol function_parameters) [57965 57971]))              ) nil [57955 58685])
            ("Artist" code nil nil [58779 58823]))          
      :file "artist.py"
      :pointmax 58824
      :fsize 58823
      :lastmodtime '(25218 25732 428602 691000)
      :unmatched-syntax '((COLON 3702 . 3703) (NAME 3671 . 3674) (EXPONENT 3694 . 3696) (FROM 332 . 336) (PERIOD 337 . 338) (FROM 309 . 313) (PERIOD 314 . 315) (FROM 278 . 282) (PERIOD 283 . 284) (FROM 252 . 256) (PERIOD 257 . 258)))
    (semanticdb-table "semanticdb-table-157fb346cb44"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Scales define the distribution of data values on an axis, e.g. a log scaling.
They are defined as subclasses of `ScaleBase`.

See also `.axes.Axes.set_xscale` and the scales examples in the documentation.

See :doc:`/gallery/scales/custom_scale` for a full example of defining a custom
scale.

Matplotlib also supports non-separable transformations that operate on both
`~.axis.Axis` at the same time.  They are known as projections, and defined in
`matplotlib.projections`.
\"\"\"" code nil nil [1 483])
            ("inspect" include nil nil [485 499])
            ("textwrap" include nil nil [500 515])
            ("numpy" include nil nil [517 535])
            ("numpy" include nil nil [536 556])
            ("matplotlib" include nil nil [558 582])
            ("matplotlib" include nil nil [583 621])
            ("" code nil nil [652 831])
            ("matplotlib.transforms" include nil nil [832 894])
            ("ScaleBase" type
               (:documentation "
    The base class for all scales.

    Scales are separable transformations, working on a single dimension.

    Subclasses should override

    :attr:`name`
        The scale's name.
    :meth:`get_transform`
        A method returning a `.Transform`, which converts data coordinates to
        scaled coordinates.  This transform should be invertible, so that e.g.
        mouse positions can be converted back to data coordinates.
    :meth:`set_default_locators_and_formatters`
        A method that sets default locators and formatters for an `~.axis.Axis`
        that uses this scale.
    :meth:`limit_range_for_scale`
        An optional method that \"fixes\" the axis range to acceptable values,
        e.g. restricting log-scaled axes to positive values.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"
        Construct a new scale.

        Notes
        -----
        The following note is for scale implementors.

        For back-compatibility reasons, scales take an `~matplotlib.axis.Axis`
        object as first argument.  However, this argument should not
        be used: a single scale object should be usable by multiple
        `~matplotlib.axis.Axis`\\es at the same time.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1734 2134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1713 1717])
                            ("axis" variable nil (reparse-symbol function_parameters) [1719 1723]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1700 2135])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2158 2162]))                          
                        :documentation "
        Return the `.Transform` object associated with this scale.
        ")
                        (reparse-symbol indented_block_body) [2140 2292])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2337 2341])
                            ("axis" variable nil (reparse-symbol function_parameters) [2343 2347]))                          
                        :documentation "
        Set the locators and formatters of *axis* to instances suitable for
        this scale.
        ")
                        (reparse-symbol indented_block_body) [2297 2506])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2537 2541])
                            ("vmin" variable nil (reparse-symbol function_parameters) [2543 2547])
                            ("vmax" variable nil (reparse-symbol function_parameters) [2549 2553])
                            ("minpos" variable nil (reparse-symbol function_parameters) [2555 2561]))                          
                        :documentation "
        Return the range *vmin*, *vmax*, restricted to the
        domain supported by this scale (if any).

        *minpos* should be the minimum positive value in the data.
        This is used by log scales to determine a minimum value.
        ")
                        (reparse-symbol indented_block_body) [2511 2855]))                  
                :type "class")
                nil [897 2855])
            ("LinearScale" type
               (:documentation "
    The default linear scale.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [2938 2953])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        \"\"\"" code nil (reparse-symbol indented_block_body) [3196 3211]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2972 2976])
                            ("axis" variable nil (reparse-symbol function_parameters) [2978 2982]))                          
                        :documentation "
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2959 3212])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3257 3261])
                            ("axis" variable nil (reparse-symbol function_parameters) [3263 3267]))                          )
                        (reparse-symbol indented_block_body) [3217 3794])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3817 3821]))                          
                        :documentation "
        Return the transform for linear scaling, which is just the
        `~matplotlib.transforms.IdentityTransform`.
        ")
                        (reparse-symbol indented_block_body) [3799 4002]))                  
                :type "class")
                nil [2857 4002])
            ("FuncTransform" type
               (:documentation "
    A simple transform that takes and arbitrary function for the
    forward and inverse transform.
    "
                :superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [4157 4185])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        forward : callable
            The forward function for the transform.  This function must have
            an inverse and, for best behavior, be monotonic.
            It must have the signature::

               def forward(values: array-like) -> array-like

        inverse : callable
            The inverse of the forward function.  Signature as ``forward``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4237 4662])
                            ("super" code nil (reparse-symbol indented_block_body) [4671 4689])
                            ("if" code nil (reparse-symbol indented_block_body) [4698 4905]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4204 4208])
                            ("forward" variable nil (reparse-symbol function_parameters) [4210 4217])
                            ("inverse" variable nil (reparse-symbol function_parameters) [4219 4226]))                          
                        :documentation "
        Parameters
        ----------
        forward : callable
            The forward function for the transform.  This function must have
            an inverse and, for best behavior, be monotonic.
            It must have the signature::

               def forward(values: array-like) -> array-like

        inverse : callable
            The inverse of the forward function.  Signature as ``forward``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4191 4905])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4935 4939])
                            ("values" variable nil (reparse-symbol function_parameters) [4941 4947]))                          )
                        (reparse-symbol indented_block_body) [4910 4987])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5005 5009]))                          )
                        (reparse-symbol indented_block_body) [4992 5071]))                  
                :type "class")
                nil [4004 5071])
            ("FuncScale" type
               (:documentation "
    Provide an arbitrary scale with user-supplied function for the axis.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [5195 5212])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        axis : `~matplotlib.axis.Axis`
            The axis for the scale.
        functions : (callable, callable)
            two-tuple of the forward and inverse functions for the scale.
            The forward function must be monotonic.

            Both functions must have the signature::

               def forward(values: array-like) -> array-like
        \"\"\"" code nil (reparse-symbol indented_block_body) [5263 5674])
                            ("forward, inverse" code nil (reparse-symbol indented_block_body) [5683 5711])
                            ("transform" variable nil (reparse-symbol indented_block_body) [5720 5763])
                            ("self" variable nil (reparse-symbol indented_block_body) [5772 5799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5231 5235])
                            ("axis" variable nil (reparse-symbol function_parameters) [5237 5241])
                            ("functions" variable nil (reparse-symbol function_parameters) [5243 5252]))                          
                        :documentation "
        Parameters
        ----------
        axis : `~matplotlib.axis.Axis`
            The axis for the scale.
        functions : (callable, callable)
            two-tuple of the forward and inverse functions for the scale.
            The forward function must be monotonic.

            Both functions must have the signature::

               def forward(values: array-like) -> array-like
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5218 5800])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5823 5827]))                          
                        :documentation "Return the `.FuncTransform` associated with this scale.")
                        (reparse-symbol indented_block_body) [5805 5931])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5976 5980])
                            ("axis" variable nil (reparse-symbol function_parameters) [5982 5986]))                          )
                        (reparse-symbol indented_block_body) [5936 6513]))                  
                :type "class")
                nil [5073 6513])
            ("LogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [6550 6578])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6638 6656])
                            ("if" code nil (reparse-symbol indented_block_body) [6665 6760])
                            ("self" variable nil (reparse-symbol indented_block_body) [6768 6784])
                            ("self" variable nil (reparse-symbol indented_block_body) [6793 6893]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6597 6601])
                            ("base" variable nil (reparse-symbol function_parameters) [6603 6607])
                            ("nonpositive" variable nil (reparse-symbol function_parameters) [6609 6620]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6584 6894])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6911 6915]))                          )
                        (reparse-symbol indented_block_body) [6899 7051])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7081 7085])
                            ("a" variable nil (reparse-symbol function_parameters) [7087 7088]))                          )
                        (reparse-symbol indented_block_body) [7056 8209])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8227 8231]))                          )
                        (reparse-symbol indented_block_body) [8214 8281]))                  
                :type "class")
                nil [6515 8281])
            ("InvertedLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [8326 8354])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [8394 8412])
                            ("self" variable nil (reparse-symbol indented_block_body) [8421 8437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8373 8377])
                            ("base" variable nil (reparse-symbol function_parameters) [8379 8383]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8360 8438])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8455 8459]))                          )
                        (reparse-symbol indented_block_body) [8443 8530])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8560 8564])
                            ("a" variable nil (reparse-symbol function_parameters) [8566 8567]))                          )
                        (reparse-symbol indented_block_body) [8535 8608])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8626 8630]))                          )
                        (reparse-symbol indented_block_body) [8613 8672]))                  
                :type "class")
                nil [8283 8672])
            ("LogScale" type
               (:documentation "
    A standard logarithmic scale.  Care is taken to only plot positive values.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [8800 8812])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        axis : `~matplotlib.axis.Axis`
            The axis for the scale.
        base : float, default: 10
            The base of the logarithm.
        nonpositive : {'clip', 'mask'}, default: 'clip'
            Determines the behavior for non-positive values. They can either
            be masked as invalid, or clipped to a very small positive number.
        subs : sequence of int, default: None
            Where to place the subticks between each major tick.  For example,
            in a log10 scale, ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place 8
            logarithmically spaced minor ticks between each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8895 9576])
                            ("self" variable nil (reparse-symbol indented_block_body) [9585 9634])
                            ("self" variable nil (reparse-symbol indented_block_body) [9643 9659]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8831 8835])
                            ("axis" variable nil (reparse-symbol function_parameters) [8837 8841])
                            ("base" variable nil (reparse-symbol function_parameters) [8846 8850])
                            ("subs" variable nil (reparse-symbol function_parameters) [8855 8859])
                            ("nonpositive" variable nil (reparse-symbol function_parameters) [8866 8877]))                          
                        :documentation "
        Parameters
        ----------
        axis : `~matplotlib.axis.Axis`
            The axis for the scale.
        base : float, default: 10
            The base of the logarithm.
        nonpositive : {'clip', 'mask'}, default: 'clip'
            Determines the behavior for non-positive values. They can either
            be masked as invalid, or clipped to a very small positive number.
        subs : sequence of int, default: None
            Where to place the subticks between each major tick.  For example,
            in a log10 scale, ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place 8
            logarithmically spaced minor ticks between each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8818 9660])
                    ("base" variable nil (reparse-symbol indented_block_body) [9665 9715])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9761 9765])
                            ("axis" variable nil (reparse-symbol function_parameters) [9767 9771]))                          )
                        (reparse-symbol indented_block_body) [9721 10149])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10172 10176]))                          
                        :documentation "Return the `.LogTransform` associated with this scale.")
                        (reparse-symbol indented_block_body) [10154 10279])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10310 10314])
                            ("vmin" variable nil (reparse-symbol function_parameters) [10316 10320])
                            ("vmax" variable nil (reparse-symbol function_parameters) [10322 10326])
                            ("minpos" variable nil (reparse-symbol function_parameters) [10328 10334]))                          
                        :documentation "Limit the domain to positive values.")
                        (reparse-symbol indented_block_body) [10284 10597]))                  
                :type "class")
                nil [8674 10597])
            ("FuncScaleLog" type
               (:documentation "
    Provide an arbitrary scale with user-supplied function for the axis and
    then put on a logarithmic axes.
    "
                :superclasses ("LogScale")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [10762 10782])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        axis : `matplotlib.axis.Axis`
            The axis for the scale.
        functions : (callable, callable)
            two-tuple of the forward and inverse functions for the scale.
            The forward function must be monotonic.

            Both functions must have the signature::

                def forward(values: array-like) -> array-like

        base : float, default: 10
            Logarithmic base of the scale.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10842 11331])
                            ("forward, inverse" code nil (reparse-symbol indented_block_body) [11340 11368])
                            ("self" variable nil (reparse-symbol indented_block_body) [11377 11393])
                            ("self" code nil (reparse-symbol indented_block_body) [11402 11472]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10801 10805])
                            ("axis" variable nil (reparse-symbol function_parameters) [10807 10811])
                            ("functions" variable nil (reparse-symbol function_parameters) [10813 10822])
                            ("base" variable nil (reparse-symbol function_parameters) [10824 10828]))                          
                        :documentation "
        Parameters
        ----------
        axis : `matplotlib.axis.Axis`
            The axis for the scale.
        functions : (callable, callable)
            two-tuple of the forward and inverse functions for the scale.
            The forward function must be monotonic.

            Both functions must have the signature::

                def forward(values: array-like) -> array-like

        base : float, default: 10
            Logarithmic base of the scale.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10788 11473])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11501 11505]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11478 11576])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11599 11603]))                          
                        :documentation "Return the `.Transform` associated with this scale.")
                        (reparse-symbol indented_block_body) [11581 11703]))                  
                :type "class")
                nil [10599 11703])
            ("SymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [11751 11779])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [11840 11858])
                            ("if" code nil (reparse-symbol indented_block_body) [11867 11944])
                            ("if" code nil (reparse-symbol indented_block_body) [11952 12034])
                            ("if" code nil (reparse-symbol indented_block_body) [12042 12122])
                            ("self" variable nil (reparse-symbol indented_block_body) [12130 12146])
                            ("self" variable nil (reparse-symbol indented_block_body) [12155 12181])
                            ("self" variable nil (reparse-symbol indented_block_body) [12190 12214])
                            ("self" variable nil (reparse-symbol indented_block_body) [12223 12280])
                            ("self" variable nil (reparse-symbol indented_block_body) [12289 12318]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11798 11802])
                            ("base" variable nil (reparse-symbol function_parameters) [11804 11808])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [11810 11819])
                            ("linscale" variable nil (reparse-symbol function_parameters) [11821 11829]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11785 12319])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12349 12353])
                            ("a" variable nil (reparse-symbol function_parameters) [12355 12356]))                          )
                        (reparse-symbol indented_block_body) [12324 12715])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12733 12737]))                          )
                        (reparse-symbol indented_block_body) [12720 12876]))                  
                :type "class")
                nil [11705 12876])
            ("InvertedSymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [12932 12960])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [13021 13039])
                            ("symlog" variable nil (reparse-symbol indented_block_body) [13048 13107])
                            ("self" variable nil (reparse-symbol indented_block_body) [13116 13132])
                            ("self" variable nil (reparse-symbol indented_block_body) [13141 13167])
                            ("self" variable nil (reparse-symbol indented_block_body) [13176 13223])
                            ("self" variable nil (reparse-symbol indented_block_body) [13232 13256])
                            ("self" variable nil (reparse-symbol indented_block_body) [13265 13322]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12979 12983])
                            ("base" variable nil (reparse-symbol function_parameters) [12985 12989])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [12991 13000])
                            ("linscale" variable nil (reparse-symbol function_parameters) [13002 13010]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12966 13323])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13353 13357])
                            ("a" variable nil (reparse-symbol function_parameters) [13359 13360]))                          )
                        (reparse-symbol indented_block_body) [13328 13727])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13745 13749]))                          )
                        (reparse-symbol indented_block_body) [13732 13872]))                  
                :type "class")
                nil [12878 13872])
            ("SymmetricalLogScale" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).

    Parameters
    ----------
    base : float, default: 10
        The base of the logarithm.

    linthresh : float, default: 2
        Defines the range ``(-x, x)``, within which the plot is linear.
        This avoids having the plot go to infinity around zero.

    subs : sequence of int
        Where to place the subticks between each major tick.
        For example, in a log10 scale: ``[2, 3, 4, 5, 6, 7, 8, 9]`` will place
        8 logarithmically spaced minor ticks between each major tick.

    linscale : float, optional
        This allows the linear range ``(-linthresh, linthresh)`` to be
        stretched relative to the logarithmic range. Its value is the number of
        decades to use for each half of the linear range. For example, when
        *linscale* == 1.0 (the default), the space used for the positive and
        negative halves of the linear range will be equal to one decade in
        the logarithmic range.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [15234 15249])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15337 15405])
                            ("self" variable nil (reparse-symbol indented_block_body) [15414 15430]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15268 15272])
                            ("axis" variable nil (reparse-symbol function_parameters) [15274 15278])
                            ("base" variable nil (reparse-symbol function_parameters) [15283 15287])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [15292 15301])
                            ("subs" variable nil (reparse-symbol function_parameters) [15305 15309])
                            ("linscale" variable nil (reparse-symbol function_parameters) [15316 15324]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15255 15431])
                    ("base" variable nil (reparse-symbol indented_block_body) [15436 15486])
                    ("linthresh" variable nil (reparse-symbol indented_block_body) [15491 15551])
                    ("linscale" variable nil (reparse-symbol indented_block_body) [15556 15614])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15660 15664])
                            ("axis" variable nil (reparse-symbol function_parameters) [15666 15670]))                          )
                        (reparse-symbol indented_block_body) [15620 16038])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16061 16065]))                          
                        :documentation "Return the `.SymmetricalLogTransform` associated with this scale.")
                        (reparse-symbol indented_block_body) [16043 16179]))                  
                :type "class")
                nil [13874 16179])
            ("LogitTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [16218 16246])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [16300 16318])
                            ("_api" code nil (reparse-symbol indented_block_body) [16327 16388])
                            ("self" variable nil (reparse-symbol indented_block_body) [16397 16428])
                            ("self" variable nil (reparse-symbol indented_block_body) [16437 16492]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16265 16269])
                            ("nonpositive" variable nil (reparse-symbol function_parameters) [16271 16282]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16252 16493])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16523 16527])
                            ("a" variable nil (reparse-symbol function_parameters) [16529 16530]))                          
                        :documentation "logit transform (base 10), masked or clipped")
                        (reparse-symbol indented_block_body) [16498 16844])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16862 16866]))                          )
                        (reparse-symbol indented_block_body) [16849 16921])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16938 16942]))                          )
                        (reparse-symbol indented_block_body) [16926 17018]))                  
                :type "class")
                nil [16181 17018])
            ("LogisticTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [17060 17088])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [17142 17160])
                            ("self" variable nil (reparse-symbol indented_block_body) [17169 17200]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17107 17111])
                            ("nonpositive" variable nil (reparse-symbol function_parameters) [17113 17124]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17094 17201])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17231 17235])
                            ("a" variable nil (reparse-symbol function_parameters) [17237 17238]))                          
                        :documentation "logistic transform (base 10)")
                        (reparse-symbol indented_block_body) [17206 17320])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17338 17342]))                          )
                        (reparse-symbol indented_block_body) [17325 17394])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17411 17415]))                          )
                        (reparse-symbol indented_block_body) [17399 17491]))                  
                :type "class")
                nil [17020 17491])
            ("LogitScale" type
               (:documentation "
    Logit scale for data between zero and one, both excluded.

    This scale is similar to a log scale close to zero and to one, and almost
    linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [17757 17771])
                    ("__init__" function
                       (:suite 
                          ( ("r\"\"\"
        Parameters
        ----------
        axis : `matplotlib.axis.Axis`
            Currently unused.
        nonpositive : {'mask', 'clip'}
            Determines the behavior for values beyond the open interval ]0, 1[.
            They can either be masked as invalid, or clipped to a number very
            close to 0 or 1.
        use_overline : bool, default: False
            Indicate the usage of survival notation (\\overline{x}) in place of
            standard notation (1-x) for probability close to one.
        one_half : str, default: r\"\\frac{1}{2}\"
            The string used for ticks formatter to represent 1/2.
        \"\"\"" code nil (reparse-symbol indented_block_body) [17896 18547])
                            ("self" variable nil (reparse-symbol indented_block_body) [18556 18601])
                            ("self" variable nil (reparse-symbol indented_block_body) [18610 18643])
                            ("self" variable nil (reparse-symbol indented_block_body) [18652 18677]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17790 17794])
                            ("axis" variable nil (reparse-symbol function_parameters) [17796 17800])
                            ("nonpositive" variable nil (reparse-symbol function_parameters) [17802 17813])
                            ("one_half" variable nil (reparse-symbol function_parameters) [17842 17850])
                            ("use_overline" variable nil (reparse-symbol function_parameters) [17867 17879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17777 18678])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18701 18705]))                          
                        :documentation "Return the `.LogitTransform` associated with this scale.")
                        (reparse-symbol indented_block_body) [18683 18810])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18855 18859])
                            ("axis" variable nil (reparse-symbol function_parameters) [18861 18865]))                          )
                        (reparse-symbol indented_block_body) [18815 19426])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19457 19461])
                            ("vmin" variable nil (reparse-symbol function_parameters) [19463 19467])
                            ("vmax" variable nil (reparse-symbol function_parameters) [19469 19473])
                            ("minpos" variable nil (reparse-symbol function_parameters) [19475 19481]))                          
                        :documentation "
        Limit the domain to values between 0 and 1 (excluded).
        ")
                        (reparse-symbol indented_block_body) [19431 19781]))                  
                :type "class")
                nil [17493 19781])
            ("_scale_mapping" variable nil nil [19783 19979])
            ("get_scale_names" function (:documentation "Return the names of the available scales.") nil [19982 20091])
            ("scale_factory" function
               (:documentation "
    Return a scale class by name.

    Parameters
    ----------
    scale : {%(names)s}
    axis : `matplotlib.axis.Axis`
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [20111 20116])
                    ("axis" variable nil (reparse-symbol function_parameters) [20118 20122])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [20124 20132]))                  )
                nil [20093 20618])
            ("if" code nil nil [20620 20758])
            ("register_scale" function
               (:documentation "
    Register a new kind of scale.

    Parameters
    ----------
    scale_class : subclass of `ScaleBase`
        The scale to register.
    "
                :arguments 
                  ( ("scale_class" variable nil (reparse-symbol function_parameters) [20779 20790]))                  )
                nil [20760 20998])
            ("_get_scale_docs" function (:documentation "
    Helper function for generating docstrings related to scales.
    ") nil [21000 21403])
            ("docstring" code nil nil [21405 21552]))          
      :file "scale.py"
      :pointmax 21553
      :fsize 21552
      :lastmodtime '(25218 25732 408602 674000)
      :unmatched-syntax '((MULT 17822 . 17823) (COMMA 17823 . 17824) (MULT 15280 . 15281) (COMMA 15281 . 15282) (MULT 8843 . 8844) (COMMA 8844 . 8845)))
    (semanticdb-table "semanticdb-table-157fb346d094"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Builtin colormaps, colormap handling utilities, and the `ScalarMappable` mixin.

.. seealso::

  :doc:`/gallery/color/colormap_reference` for a list of builtin colormaps.

  :doc:`/tutorials/colors/colormap-manipulation` for examples of how to
  make colormaps.

  :doc:`/tutorials/colors/colormaps` an in-depth discussion of
  choosing colormaps.

  :doc:`/tutorials/colors/colormapnorms` for more details about data
  normalization.
\"\"\"" code nil nil [1 443])
            ("collections.abc" include nil nil [445 496])
            ("numpy" include nil nil [498 516])
            ("numpy" include nil nil [517 537])
            ("matplotlib" include nil nil [539 563])
            ("matplotlib" include nil nil [564 606])
            ("matplotlib._cm" include nil nil [607 639])
            ("matplotlib._cm_listed" include nil nil [640 695])
            ("__getattr__" type
               (:members 
                  ( ("LUTSIZE" variable nil (reparse-symbol indented_block_body) [779 916]))                  
                :type "class")
                nil [756 917])
            ("_LUTSIZE" variable nil nil [919 955])
            ("_gen_cmap_registry" function (:documentation "
    Generate a dict mapping standard colormap names to standard colormaps, as
    well as the reversed colormaps.
    ") nil [958 1725])
            ("_DeprecatedCmapDictWrapper" type
               (:documentation "Dictionary mapping for deprecated _cmap_d access."
                :superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1885 1920]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1855 1859])
                            ("cmap_registry" variable nil (reparse-symbol function_parameters) [1861 1874]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1842 1921])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1942 1946])
                            ("key" variable nil (reparse-symbol function_parameters) [1948 1951]))                          )
                        (reparse-symbol indented_block_body) [1926 2031])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2052 2056])
                            ("key" variable nil (reparse-symbol function_parameters) [2058 2061]))                          )
                        (reparse-symbol indented_block_body) [2036 2148])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2166 2170]))                          )
                        (reparse-symbol indented_block_body) [2153 2251])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2268 2272]))                          )
                        (reparse-symbol indented_block_body) [2256 2352])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2373 2377])
                            ("key" variable nil (reparse-symbol function_parameters) [2379 2382])
                            ("val" variable nil (reparse-symbol function_parameters) [2384 2387]))                          )
                        (reparse-symbol indented_block_body) [2357 2472])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2485 2489])
                            ("key" variable nil (reparse-symbol function_parameters) [2491 2494])
                            ("default" variable nil (reparse-symbol function_parameters) [2496 2503]))                          )
                        (reparse-symbol indented_block_body) [2477 2596])
                    ("_warn_deprecated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2622 2626]))                          )
                        (reparse-symbol indented_block_body) [2601 2939]))                  
                :type "class")
                nil [1727 2939])
            ("ColormapRegistry" type
               (:superclasses ("Mapping")
                :members 
                  ( ("r\"\"\"
    Container for colormaps that are known to Matplotlib by name.

    .. admonition:: Experimental

       While we expect the API to be final, we formally mark it as
       experimental for 3.5 because we want to keep the option to still adapt
       the API for 3.6 should the need arise.

    The universal registry instance is `matplotlib.colormaps`. There should be
    no need for users to instantiate `.ColormapRegistry` themselves.

    Read access uses a dict-like interface mapping names to `.Colormap`\\s::

        import matplotlib as mpl
        cmap = mpl.colormaps['viridis']

    Returned `.Colormap`\\s are copies, so that their modification does not
    change the global definition of the colormap.

    Additional colormaps can be added via `.ColormapRegistry.register`::

        mpl.colormaps.register(my_colormap)
    \"\"\"" code nil (reparse-symbol indented_block_body) [2978 3827])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3867 3886]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3845 3849])
                            ("cmaps" variable nil (reparse-symbol function_parameters) [3851 3856]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3832 3887])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3908 3912])
                            ("item" variable nil (reparse-symbol function_parameters) [3914 3918]))                          )
                        (reparse-symbol indented_block_body) [3892 4072])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4090 4094]))                          )
                        (reparse-symbol indented_block_body) [4077 4130])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4147 4151]))                          )
                        (reparse-symbol indented_block_body) [4135 4186])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4203 4207]))                          )
                        (reparse-symbol indented_block_body) [4191 4328])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4346 4350]))                          
                        :documentation "
        Return a list of the registered colormap names.

        This exists only for backward-compatibilty in `.pyplot` which had a
        ``plt.colormaps()`` method. The recommended way to get this list is
        now ``list(colormaps)``.
        ")
                        (reparse-symbol indented_block_body) [4333 4645])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4663 4667])
                            ("cmap" variable nil (reparse-symbol function_parameters) [4669 4673])
                            ("name" variable nil (reparse-symbol function_parameters) [4678 4682])
                            ("force" variable nil (reparse-symbol function_parameters) [4689 4694]))                          
                        :documentation "
        Register a new colormap.

        The colormap name can then be used as a string argument to any ``cmap``
        parameter in Matplotlib. It is also available in ``pyplot.get_cmap``.

        The colormap registry stores a copy of the given colormap, so that
        future changes to the original colormap instance do not affect the
        registered colormap. Think of this as the registry taking a snapshot
        of the colormap at registration.

        Parameters
        ----------
        cmap : matplotlib.colors.Colormap
            The colormap to register.

        name : str, optional
            The name for the colormap. If not given, ``cmap.name`` is used.

        force: bool, default: False
            If False, a ValueError is raised if trying to overwrite an already
            registered name. True supports overwriting registered colormaps
            other than the builtin colormaps.
        ")
                        (reparse-symbol indented_block_body) [4650 5863]))                  
                :type "class")
                nil [2941 5863])
            ("_cmap_registry" variable nil nil [5865 5902])
            ("globals" code nil nil [5903 5935])
            ("cmap_d" variable nil nil [5978 6029])
            ("__builtin_cmaps" variable nil nil [6030 6069])
            ("_colormaps" variable nil nil [6237 6282])
            ("register_cmap" function
               (:documentation "
    Add a colormap to the set recognized by :func:`get_cmap`.

    Register a new colormap to be accessed by name ::

        LinearSegmentedColormap('swirly', data, lut)
        register_cmap(cmap=swirly_cmap)

    Parameters
    ----------
    name : str, optional
       The name that can be used in :func:`get_cmap` or :rc:`image.cmap`

       If absent, the name will be the :attr:`~matplotlib.colors.Colormap.name`
       attribute of the *cmap*.

    cmap : matplotlib.colors.Colormap
       Despite being the second argument and having a default value, this
       is a required argument.

    override_builtin : bool

        Allow built-in colormaps to be overridden by a user-supplied
        colormap.

        Please do not use this unless you are sure you need it.

    Notes
    -----
    Registering a colormap stores a reference to the colormap object
    which can currently be modified and inadvertently change the global
    colormap state. This behavior is deprecated and in Matplotlib 3.5
    the registered colormap will be immutable.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [6303 6307])
                    ("cmap" variable nil (reparse-symbol function_parameters) [6314 6318])
                    ("override_builtin" variable nil (reparse-symbol function_parameters) [6328 6344]))                  )
                nil [6285 8270])
            ("get_cmap" function
               (:documentation "
    Get a colormap instance, defaulting to rc values if *name* is None.

    Colormaps added with :func:`register_cmap` take precedence over
    built-in colormaps.

    Notes
    -----
    Currently, this returns the global colormap object. This is undesired
    because users could accidentally modify the global colormap.
    From Matplotlib 3.6 on, this will return a copy instead.

    Parameters
    ----------
    name : `matplotlib.colors.Colormap` or str or None, default: None
        If a `.Colormap` instance, it will be returned. Otherwise, the name of
        a colormap known to Matplotlib, which will be resampled by *lut*. The
        default, None, means :rc:`image.cmap`.
    lut : int or None, default: None
        If *name* is not already a Colormap instance and *lut* is not None, the
        colormap will be resampled to have *lut* entries in the lookup table.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [8285 8289])
                    ("lut" variable nil (reparse-symbol function_parameters) [8296 8299]))                  )
                nil [8272 9509])
            ("unregister_cmap" function
               (:documentation "
    Remove a colormap recognized by :func:`get_cmap`.

    You may not remove built-in colormaps.

    If the named colormap is not registered, returns with no error, raises
    if you try to de-register a default colormap.

    .. warning ::

      Colormap names are currently a shared namespace that may be used
      by multiple packages. Use `unregister_cmap` only if you know you
      have registered that name before. In particular, do not
      unregister just in case to clean the name before registering a
      new colormap.

    Parameters
    ----------
    name : str
        The name of the colormap to be un-registered

    Returns
    -------
    ColorMap or None
        If the colormap was registered, return it if not return `None`

    Raises
    ------
    ValueError
       If you try to de-register a default built-in colormap.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9531 9535]))                  )
                nil [9511 10639])
            ("ScalarMappable" type
               (:documentation "
    A mixin class to map scalar data to RGBA.

    The ScalarMappable applies data normalization before returning RGBA colors
    from the given colormap.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        Parameters
        ----------
        norm : `matplotlib.colors.Normalize` (or subclass thereof)
            The normalizing object which scales data, typically into the
            interval ``[0, 1]``.
            If *None*, *norm* defaults to a *colors.Normalize* object which
            initializes its scaling based on the first data processed.
        cmap : str or `~matplotlib.colors.Colormap`
            The colormap used to map normalized data values to RGBA colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10889 11391])
                            ("self" variable nil (reparse-symbol indented_block_body) [11400 11414])
                            ("self" variable nil (reparse-symbol indented_block_body) [11423 11440])
                            ("self" code nil (reparse-symbol indented_block_body) [11497 11516])
                            ("self" variable nil (reparse-symbol indented_block_body) [11575 11591])
                            ("self" code nil (reparse-symbol indented_block_body) [11648 11667])
                            ("self" variable nil (reparse-symbol indented_block_body) [11804 11824])
                            ("self" variable nil (reparse-symbol indented_block_body) [11833 11874]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10852 10856])
                            ("norm" variable nil (reparse-symbol function_parameters) [10858 10862])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10869 10873]))                          
                        :documentation "

        Parameters
        ----------
        norm : `matplotlib.colors.Normalize` (or subclass thereof)
            The normalizing object which scales data, typically into the
            interval ``[0, 1]``.
            If *None*, *norm* defaults to a *colors.Normalize* object which
            initializes its scaling based on the first data processed.
        cmap : str or `~matplotlib.colors.Colormap`
            The colormap used to map normalized data values to RGBA colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10839 11875])
                    ("callbacksSM" variable nil (reparse-symbol indented_block_body) [11880 11989])
                    ("_scale_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12011 12015])
                            ("norm" variable nil (reparse-symbol function_parameters) [12017 12021])
                            ("vmin" variable nil (reparse-symbol function_parameters) [12023 12027])
                            ("vmax" variable nil (reparse-symbol function_parameters) [12029 12033]))                          
                        :documentation "
        Helper for initial scaling.

        Used by public functions that create a ScalarMappable and support
        parameters *vmin*, *vmax* and *norm*. This makes sure that a *norm*
        will take precedence over *vmin*, *vmax*.

        Note that this method does not set the norm.
        ")
                        (reparse-symbol indented_block_body) [11995 12851])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12868 12872])
                            ("x" variable nil (reparse-symbol function_parameters) [12874 12875])
                            ("alpha" variable nil (reparse-symbol function_parameters) [12877 12882])
                            ("bytes" variable nil (reparse-symbol function_parameters) [12889 12894])
                            ("norm" variable nil (reparse-symbol function_parameters) [12902 12906]))                          
                        :documentation "
        Return a normalized rgba array corresponding to *x*.

        In the normal case, *x* is a 1D or 2D sequence of scalars, and
        the corresponding ndarray of rgba values will be returned,
        based on the norm and colormap set for this ScalarMappable.

        There is one special case, for handling images that are already
        rgb or rgba, such as might have been read from an image file.
        If *x* is an ndarray with 3 dimensions,
        and the last dimension is either 3 or 4, then it will be
        treated as an rgb or rgba array, and no mapping will be done.
        The array can be uint8, or it can be floating point with
        values in the 0-1 range; otherwise a ValueError will be raised.
        If it is a masked array, the mask will be ignored.
        If the last dimension is 3, the *alpha* kwarg (defaulting to 1)
        will be used to fill in the transparency.  If the last dimension
        is 4, the *alpha* kwarg is ignored; it does not
        replace the pre-existing alpha.  A ValueError will be raised
        if the third dimension is other than 3 or 4.

        In either case, if *bytes* is *False* (default), the rgba
        array will be floats in the 0-1 range; if it is *True*,
        the returned rgba array will be uint8 in the 0 to 255 range.

        If norm is False, no normalization of the input data is
        performed, and it is assumed to be in the range (0-1).

        ")
                        (reparse-symbol indented_block_body) [12856 16003])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16022 16026])
                            ("A" variable nil (reparse-symbol function_parameters) [16028 16029]))                          
                        :documentation "
        Set the value array from array-like *A*.

        Parameters
        ----------
        A : array-like or None
            The values that are mapped to colors.

            The base class `.ScalarMappable` does not make any assumptions on
            the dimensionality and shape of the value array *A*.
        ")
                        (reparse-symbol indented_block_body) [16008 16690])
                    ("get_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16709 16713]))                          
                        :documentation "
        Return the array of values, that are mapped to colors.

        The base class `.ScalarMappable` does not make any assumptions on
        the dimensionality and shape of the array.
        ")
                        (reparse-symbol indented_block_body) [16695 16952])
                    ("get_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16970 16974]))                          
                        :documentation "Return the `.Colormap` instance.")
                        (reparse-symbol indented_block_body) [16957 17049])
                    ("get_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17067 17071]))                          
                        :documentation "
        Return the values (min, max) that are mapped to the colormap limits.
        ")
                        (reparse-symbol indented_block_body) [17054 17221])
                    ("set_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17239 17243])
                            ("vmin" variable nil (reparse-symbol function_parameters) [17245 17249])
                            ("vmax" variable nil (reparse-symbol function_parameters) [17256 17260]))                          
                        :documentation "
        Set the norm limits for image scaling.

        Parameters
        ----------
        vmin, vmax : float
             The limits.

             The limits may also be passed as a tuple (*vmin*, *vmax*) as a
             single positional argument.

             .. ACCEPTS: (vmin: float, vmax: float)
        ")
                        (reparse-symbol indented_block_body) [17226 18046])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18065 18069]))                          
                        :documentation "
        Returns
        -------
        float
            Always returns 1.
        ")
                        (reparse-symbol indented_block_body) [18051 18263])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18281 18285])
                            ("cmap" variable nil (reparse-symbol function_parameters) [18287 18291]))                          
                        :documentation "
        Set the colormap for luminance data.

        Parameters
        ----------
        cmap : `.Colormap` or str or None
        ")
                        (reparse-symbol indented_block_body) [18268 18625])
                    ("norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18653 18657]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18630 18686])
                    ("norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18717 18721])
                            ("norm" variable nil (reparse-symbol function_parameters) [18723 18727]))                          
                        :decorators 
                          ( ("norm.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18691 19342])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19360 19364])
                            ("norm" variable nil (reparse-symbol function_parameters) [19366 19370]))                          
                        :documentation "
        Set the normalization instance.

        Parameters
        ----------
        norm : `.Normalize` or None

        Notes
        -----
        If there are any colorbars using the mappable for this norm, setting
        the norm of the mappable will reset the norm, locator, and formatters
        on the colorbar to default.
        ")
                        (reparse-symbol indented_block_body) [19347 19757])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19776 19780]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array
        ")
                        (reparse-symbol indented_block_body) [19762 20156])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20180 20184]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array, changing only limits that are None
        ")
                        (reparse-symbol indented_block_body) [20161 20601])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20618 20622]))                          
                        :documentation "
        Call this whenever the mappable is changed to notify all the
        callbackSM listeners to the 'changed' signal.
        ")
                        (reparse-symbol indented_block_body) [20606 20846]))                  
                :type "class")
                nil [10641 20846]))          
      :file "cm.py"
      :pointmax 20846
      :fsize 20845
      :lastmodtime '(25218 25732 351935 958000)
      :unmatched-syntax '((INDENT_BLOCK 7579 . 7696) (NEWLINE 7578 . 7579) (COLON 7577 . 7578) (TRY 7507 . 7510) (AS 7571 . 7573) (MULT 6325 . 6326) (COMMA 6326 . 6327) (MULT 4675 . 4676) (COMMA 4676 . 4677)))
    (semanticdb-table "semanticdb-table-157fb346cfd0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for converting numbers or color arguments to *RGB* or *RGBA*.

*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
range 0-1.

This module includes functions and classes for color specification conversions,
and for mapping numbers to colors in a 1-D array of colors called a colormap.

Mapping data onto colors using a colormap typically involves two steps: a data
array is first mapped onto the range 0-1 using a subclass of `Normalize`,
then this number is mapped to a color using a subclass of `Colormap`.  Two
subclasses of `Colormap` provided here:  `LinearSegmentedColormap`, which uses
piecewise-linear interpolation to define colormaps, and `ListedColormap`, which
makes a colormap from a list of colors.

.. seealso::

  :doc:`/tutorials/colors/colormap-manipulation` for examples of how to
  make colormaps and

  :doc:`/tutorials/colors/colormaps` for a list of built-in colormaps.

  :doc:`/tutorials/colors/colormapnorms` for more details about data
  normalization

  More colormaps are available at palettable_.

The module also provides functions for checking whether an object can be
interpreted as a color (`is_color_like`), for converting such an object
to an RGBA tuple (`to_rgba`) or to an HTML-like hex string in the
\"#rrggbb\" format (`to_hex`), and a sequence of colors to an (n, 4)
RGBA array (`to_rgba_array`).  Caching is used for efficiency.

Colors that Matplotlib recognizes are listed at
:doc:`/tutorials/colors/colors`.

.. _palettable: https://jiffyclub.github.io/palettable/
.. _xkcd color survey: https://xkcd.com/color/rgb/
\"\"\"" code nil nil [1 1594])
            ("base64" include nil nil [1596 1609])
            ("collections.abc" include nil nil [1610 1653])
            ("copy" include nil nil [1654 1665])
            ("functools" include nil nil [1666 1682])
            ("inspect" include nil nil [1683 1697])
            ("io" include nil nil [1698 1707])
            ("itertools" include nil nil [1708 1724])
            ("numbers" include nil nil [1725 1751])
            ("re" include nil nil [1752 1761])
            ("PIL" include nil nil [1762 1783])
            ("PIL.PngImagePlugin" include nil nil [1784 1822])
            ("matplotlib" include nil nil [1824 1848])
            ("numpy" include nil nil [1849 1867])
            ("matplotlib" include nil nil [1868 1909])
            ("XKCD_COLORS" include nil nil [1928 1988])
            ("CSS4_COLORS" include nil nil [1928 1988])
            ("TABLEAU_COLORS" include nil nil [1928 1988])
            ("BASE_COLORS" include nil nil [1928 1988])
            ("_ColorMapping" type
               (:superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2059 2084])
                            ("self" variable nil (reparse-symbol indented_block_body) [2093 2108]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2035 2039])
                            ("mapping" variable nil (reparse-symbol function_parameters) [2041 2048]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2022 2109])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2130 2134])
                            ("key" variable nil (reparse-symbol function_parameters) [2136 2139])
                            ("value" variable nil (reparse-symbol function_parameters) [2141 2146]))                          )
                        (reparse-symbol indented_block_body) [2114 2216])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2237 2241])
                            ("key" variable nil (reparse-symbol function_parameters) [2243 2246]))                          )
                        (reparse-symbol indented_block_body) [2221 2309]))                  
                :type "class")
                nil [1991 2309])
            ("_colors_full_map" variable nil nil [2311 2332])
            ("_colors_full_map" code nil nil [2366 2402])
            ("_colors_full_map" code nil nil [2403 2555])
            ("_colors_full_map" code nil nil [2556 2592])
            ("_colors_full_map" code nil nil [2593 2632])
            ("_colors_full_map" code nil nil [2633 2788])
            ("_colors_full_map" code nil nil [2789 2825])
            ("_colors_full_map" variable nil nil [2826 2876])
            ("_REPR_PNG_SIZE" variable nil nil [2878 2904])
            ("get_named_colors_mapping" function (:documentation "Return the global mapping of names to named colors.") nil [2907 3029])
            ("_sanitize_extrema" function (:arguments 
              ( ("ex" variable nil (reparse-symbol function_parameters) [3053 3055]))              ) nil [3031 3194])
            ("_is_nth_color" function
               (:documentation "Return whether *c* can be interpreted as an item in the color cycle."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3214 3215]))                  )
                nil [3196 3359])
            ("is_color_like" function
               (:documentation "Return whether *c* can be interpreted as an RGB(A) color."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3379 3380]))                  )
                nil [3361 3676])
            ("_check_color_like" function
               (:documentation "
    For each *key, value* pair in *kwargs*, check that *value* is color-like.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [3700 3708]))                  )
                nil [3678 3938])
            ("same_color" function
               (:documentation "
    Return whether the colors *c1* and *c2* are the same.

    *c1*, *c2* can be single colors or lists/arrays of colors.
    "
                :arguments 
                  ( ("c1" variable nil (reparse-symbol function_parameters) [3955 3957])
                    ("c2" variable nil (reparse-symbol function_parameters) [3959 3961]))                  )
                nil [3940 4632])
            ("to_rgba" function
               (:documentation "
    Convert *c* to an RGBA color.

    Parameters
    ----------
    c : Matplotlib color or ``np.ma.masked``

    alpha : float, optional
        If *alpha* is given, force the alpha value of the returned RGBA tuple
        to *alpha*.

        If None, the alpha value from *c* is used. If *c* does not have an
        alpha channel, then alpha defaults to 1.

        *alpha* is ignored for the color value ``\"none\"`` (case-insensitive),
        which always maps to ``(0, 0, 0, 0)``.

    Returns
    -------
    tuple
        Tuple of floats ``(r, g, b, a)``, where each channel (red, green, blue,
        alpha) can assume values between 0 and 1.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4646 4647])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4649 4654]))                  )
                nil [4634 6010])
            ("_to_rgba_no_colorcycle" function
               (:documentation "
    Convert *c* to an RGBA color, with no support for color-cycle syntax.

    If *alpha* is given, force the alpha value of the returned RGBA tuple
    to *alpha*. Otherwise, the alpha value from *c* is used, if it has alpha
    information, or defaults to 1.

    *alpha* is ignored for the color value ``\"none\"`` (case-insensitive),
    which always maps to ``(0, 0, 0, 0)``.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [6039 6040])
                    ("alpha" variable nil (reparse-symbol function_parameters) [6042 6047]))                  )
                nil [6012 9605])
            ("to_rgba_array" function
               (:documentation "
    Convert *c* to a (n, 4) array of RGBA colors.

    Parameters
    ----------
    c : Matplotlib color or array of colors
        If *c* is a masked array, an ndarray is returned with a (0, 0, 0, 0)
        row for each masked value or row in *c*.

    alpha : float or sequence of floats, optional
        If *alpha* is given, force the alpha value of the returned RGBA tuple
        to *alpha*.

        If None, the alpha value from *c* is used. If *c* does not have an
        alpha channel, then alpha defaults to 1.

        *alpha* is ignored for the color value ``\"none\"`` (case-insensitive),
        which always maps to ``(0, 0, 0, 0)``.

        If *alpha* is a sequence and *c* is a single color, *c* will be
        repeated to match the length of *alpha*.

    Returns
    -------
    array
        (n, 4) array of RGBA colors,  where each channel (red, green, blue,
        alpha) can assume values between 0 and 1.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [9625 9626])
                    ("alpha" variable nil (reparse-symbol function_parameters) [9628 9633]))                  )
                nil [9607 13320])
            ("to_rgb" function
               (:documentation "Convert *c* to an RGB color, silently dropping the alpha channel."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [13333 13334]))                  )
                nil [13322 13439])
            ("to_hex" function
               (:documentation "
    Convert *c* to a hex color.

    Parameters
    ----------
    c : :doc:`color </tutorials/colors/colors>` or `numpy.ma.masked`

    keep_alpha: bool, default: False
      If False, use the ``#rrggbb`` format, otherwise use ``#rrggbbaa``.

    Returns
    -------
    str
      ``#rrggbb`` or ``#rrggbbaa`` hex color string
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [13452 13453])
                    ("keep_alpha" variable nil (reparse-symbol function_parameters) [13455 13465]))                  )
                nil [13441 13954])
            ("cnames" variable nil nil [14004 14024])
            ("hexColorPattern" variable nil nil [14025 14077])
            ("rgb2hex" variable nil nil [14078 14094])
            ("hex2color" variable nil nil [14095 14113])
            ("ColorConverter" type
               (:documentation "
    A class only kept for backwards compatibility.

    Its functionality is entirely provided by module-level functions.
    "
                :members 
                  ( ("colors" variable nil (reparse-symbol indented_block_body) [14280 14305])
                    ("cache" variable nil (reparse-symbol indented_block_body) [14310 14340])
                    ("to_rgb" variable nil (reparse-symbol indented_block_body) [14345 14374])
                    ("to_rgba" variable nil (reparse-symbol indented_block_body) [14379 14410])
                    ("to_rgba_array" variable nil (reparse-symbol indented_block_body) [14415 14458]))                  
                :type "class")
                nil [14116 14459])
            ("colorConverter" variable nil nil [14461 14494])
            ("_create_lookup_table" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [14577 14578])
                ("data" variable nil (reparse-symbol function_parameters) [14580 14584])
                ("gamma" variable nil (reparse-symbol function_parameters) [14586 14591]))              ) nil [14552 17848])
            ("_warn_if_global_cmap_modified" function (:arguments 
              ( ("cmap" variable nil (reparse-symbol function_parameters) [17884 17888]))              ) nil [17850 18451])
            ("Colormap" type
               (:documentation "
    Baseclass for all scalar to RGBA mappings.

    Typically, Colormap instances are used to convert data values (floats)
    from the interval ``[0, 1]`` to the RGBA color that the respective
    Colormap represents. For scaling of data into the ``[0, 1]`` interval see
    `matplotlib.colors.Normalize`. Subclasses of `matplotlib.cm.ScalarMappable`
    make heavy use of this ``data -> normalize -> map-to-color`` processing
    chain.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [18970 19147])
                            ("self" variable nil (reparse-symbol indented_block_body) [19156 19172])
                            ("self" variable nil (reparse-symbol indented_block_body) [19181 19196])
                            ("self" variable nil (reparse-symbol indented_block_body) [19236 19273])
                            ("self" variable nil (reparse-symbol indented_block_body) [19315 19338])
                            ("self" variable nil (reparse-symbol indented_block_body) [19347 19369])
                            ("self" variable nil (reparse-symbol indented_block_body) [19378 19400])
                            ("self" code nil (reparse-symbol indented_block_body) [19409 19434])
                            ("self" code nil (reparse-symbol indented_block_body) [19443 19467])
                            ("self" variable nil (reparse-symbol indented_block_body) [19476 19496])
                            ("self" variable nil (reparse-symbol indented_block_body) [19780 19808]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18942 18946])
                            ("name" variable nil (reparse-symbol function_parameters) [18948 18952])
                            ("N" variable nil (reparse-symbol function_parameters) [18954 18955]))                          
                        :documentation "
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18929 19809])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19827 19831])
                            ("X" variable nil (reparse-symbol function_parameters) [19833 19834])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19836 19841])
                            ("bytes" variable nil (reparse-symbol function_parameters) [19848 19853]))                          
                        :documentation "
        Parameters
        ----------
        X : float or int, ndarray or scalar
            The data value(s) to convert to RGBA.
            For floats, X should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, X should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float or array-like or None
            Alpha must be a scalar between 0 and 1, a sequence of such
            floats with shape matching X, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, otherwise an array of
        RGBA values with a shape of ``X.shape + (4, )``.
        ")
                        (reparse-symbol indented_block_body) [19814 23118])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23136 23140]))                          )
                        (reparse-symbol indented_block_body) [23123 23395])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23411 23415])
                            ("other" variable nil (reparse-symbol function_parameters) [23417 23422]))                          )
                        (reparse-symbol indented_block_body) [23400 23823])
                    ("get_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23840 23844]))                          
                        :documentation "Get the color for masked values.")
                        (reparse-symbol indented_block_body) [23828 23996])
                    ("set_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24013 24017])
                            ("color" variable nil (reparse-symbol function_parameters) [24019 24024])
                            ("alpha" variable nil (reparse-symbol function_parameters) [24030 24035]))                          
                        :documentation "Set the color for masked values.")
                        (reparse-symbol indented_block_body) [24001 24239])
                    ("get_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24258 24262]))                          
                        :documentation "Get the color for low out-of-range values.")
                        (reparse-symbol indented_block_body) [24244 24426])
                    ("set_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24445 24449])
                            ("color" variable nil (reparse-symbol function_parameters) [24451 24456])
                            ("alpha" variable nil (reparse-symbol function_parameters) [24462 24467]))                          
                        :documentation "Set the color for low out-of-range values.")
                        (reparse-symbol indented_block_body) [24431 24683])
                    ("get_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24701 24705]))                          
                        :documentation "Get the color for high out-of-range values.")
                        (reparse-symbol indented_block_body) [24688 24869])
                    ("set_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24887 24891])
                            ("color" variable nil (reparse-symbol function_parameters) [24893 24898])
                            ("alpha" variable nil (reparse-symbol function_parameters) [24904 24909]))                          
                        :documentation "Set the color for high out-of-range values.")
                        (reparse-symbol indented_block_body) [24874 25125])
                    ("set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25147 25151])
                            ("bad" variable nil (reparse-symbol function_parameters) [25156 25159])
                            ("under" variable nil (reparse-symbol function_parameters) [25166 25171])
                            ("over" variable nil (reparse-symbol function_parameters) [25178 25182]))                          
                        :documentation "
        Set the colors for masked (*bad*) values and, when ``norm.clip =
        False``, low (*under*) and high (*over*) out-of-range values.
        ")
                        (reparse-symbol indented_block_body) [25130 25540])
                    ("with_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25563 25567])
                            ("bad" variable nil (reparse-symbol function_parameters) [25572 25575])
                            ("under" variable nil (reparse-symbol function_parameters) [25582 25587])
                            ("over" variable nil (reparse-symbol function_parameters) [25594 25598]))                          
                        :documentation "
        Return a copy of the colormap, for which the colors for masked (*bad*)
        values and, when ``norm.clip = False``, low (*under*) and high (*over*)
        out-of-range values, have been set accordingly.
        ")
                        (reparse-symbol indented_block_body) [25545 25961])
                    ("_set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25984 25988]))                          )
                        (reparse-symbol indented_block_body) [25966 26346])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26361 26365]))                          
                        :documentation "Generate the lookup table, ``self._lut``.")
                        (reparse-symbol indented_block_body) [26351 26481])
                    ("is_gray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26498 26502]))                          
                        :documentation "Return whether the colormap is grayscale.")
                        (reparse-symbol indented_block_body) [26486 26738])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26757 26761])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [26763 26770]))                          
                        :documentation "Return a new colormap with *lutsize* entries.")
                        (reparse-symbol indented_block_body) [26743 26869])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26887 26891])
                            ("name" variable nil (reparse-symbol function_parameters) [26893 26897]))                          
                        :documentation "
        Return a reversed instance of the Colormap.

        .. note:: This function is not implemented for base class.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        See Also
        --------
        LinearSegmentedColormap.reversed
        ListedColormap.reversed
        ")
                        (reparse-symbol indented_block_body) [26874 27391])
                    ("_repr_png_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27411 27415]))                          
                        :documentation "Generate a PNG representation of the Colormap.")
                        (reparse-symbol indented_block_body) [27396 28084])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28105 28109]))                          
                        :documentation "Generate an HTML representation of the Colormap.")
                        (reparse-symbol indented_block_body) [28089 29665])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29679 29683]))                          
                        :documentation "Return a copy of the colormap.")
                        (reparse-symbol indented_block_body) [29670 29762]))                  
                :type "class")
                nil [18453 29762])
            ("LinearSegmentedColormap" type
               (:documentation "
    Colormap objects based on lookup tables using linear segments.

    The lookup table is generated using linear interpolation for each
    primary color, with the 0-1 domain divided into any number of
    segments.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create colormap from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.

        See Also
        --------
        LinearSegmentedColormap.from_list
            Static method; factory function for generating a smoothly-varying
            LinearSegmentedColormap.
        \"\"\"" code nil (reparse-symbol indented_block_body) [30109 31807])
                            ("self" variable nil (reparse-symbol indented_block_body) [31895 31918])
                            ("super" code nil (reparse-symbol indented_block_body) [31927 31952])
                            ("self" variable nil (reparse-symbol indented_block_body) [31961 31992])
                            ("self" variable nil (reparse-symbol indented_block_body) [32001 32020]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30057 30061])
                            ("name" variable nil (reparse-symbol function_parameters) [30063 30067])
                            ("segmentdata" variable nil (reparse-symbol function_parameters) [30069 30080])
                            ("N" variable nil (reparse-symbol function_parameters) [30082 30083])
                            ("gamma" variable nil (reparse-symbol function_parameters) [30089 30094]))                          
                        :documentation "
        Create colormap from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.

        See Also
        --------
        LinearSegmentedColormap.from_list
            Static method; factory function for generating a smoothly-varying
            LinearSegmentedColormap.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30044 32021])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32036 32040]))                          )
                        (reparse-symbol indented_block_body) [32026 32632])
                    ("set_gamma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32651 32655])
                            ("gamma" variable nil (reparse-symbol function_parameters) [32657 32662]))                          
                        :documentation "Set a new gamma value and regenerate colormap.")
                        (reparse-symbol indented_block_body) [32637 32775])
                    ("from_list" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [32812 32816])
                            ("colors" variable nil (reparse-symbol function_parameters) [32818 32824])
                            ("N" variable nil (reparse-symbol function_parameters) [32826 32827])
                            ("gamma" variable nil (reparse-symbol function_parameters) [32833 32838]))                          
                        :documentation "
        Create a `LinearSegmentedColormap` from a list of colors.

        Parameters
        ----------
        name : str
            The name of the colormap.
        colors : array-like of colors or array-like of (value, color)
            If only colors are given, they are equidistantly mapped from the
            range :math:`[0, 1]`; i.e. 0 maps to ``colors[0]`` and 1 maps to
            ``colors[-1]``.
            If (value, color) pairs are given, the mapping is from *value*
            to *color*. This can be used to divide the range unevenly.
        N : int
            The number of rgb quantization levels.
        gamma : float
        ")
                        (reparse-symbol indented_block_body) [32780 34216])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34235 34239])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [34241 34248]))                          
                        :documentation "Return a new colormap with *lutsize* entries.")
                        (reparse-symbol indented_block_body) [34221 34598])
                    ("_reverser" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("func" variable nil (reparse-symbol function_parameters) [34692 34696])
                            ("x" variable nil (reparse-symbol function_parameters) [34698 34699]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34660 34729])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34747 34751])
                            ("name" variable nil (reparse-symbol function_parameters) [34753 34757]))                          
                        :documentation "
        Return a reversed instance of the Colormap.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        Returns
        -------
        LinearSegmentedColormap
            The reversed colormap.
        ")
                        (reparse-symbol indented_block_body) [34734 35795]))                  
                :type "class")
                nil [29764 35795])
            ("ListedColormap" type
               (:documentation "
    Colormap object generated from a list of colors.

    This may be most useful when indexing directly into a colormap,
    but it can also be used to generate special colormaps for ordinary
    mapping.

    Parameters
    ----------
    colors : list, array
        List of Matplotlib color specifications, or an equivalent Nx3 or Nx4
        floating point array (*N* rgb or rgba values).
    name : str, optional
        String to identify the colormap.
    N : int, optional
        Number of entries in the map. The default is *None*, in which case
        there is one colormap entry for each element in the list of colors.
        If ::

            N < len(colors)

        the list will be truncated at *N*. If ::

            N > len(colors)

        the list will be extended by repetition.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36716 36739])
                            ("if" code nil (reparse-symbol indented_block_body) [36794 37470])
                            ("super" code nil (reparse-symbol indented_block_body) [37478 37503]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36667 36671])
                            ("colors" variable nil (reparse-symbol function_parameters) [36673 36679])
                            ("name" variable nil (reparse-symbol function_parameters) [36681 36685])
                            ("N" variable nil (reparse-symbol function_parameters) [36699 36700]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36654 37504])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37519 37523]))                          )
                        (reparse-symbol indented_block_body) [37509 37688])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37707 37711])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [37713 37720]))                          
                        :documentation "Return a new colormap with *lutsize* entries.")
                        (reparse-symbol indented_block_body) [37693 38094])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38112 38116])
                            ("name" variable nil (reparse-symbol function_parameters) [38118 38122]))                          
                        :documentation "
        Return a reversed instance of the Colormap.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        Returns
        -------
        ListedColormap
            A reversed instance of the colormap.
        ")
                        (reparse-symbol indented_block_body) [38099 38889]))                  
                :type "class")
                nil [35797 38889])
            ("Normalize" type
               (:documentation "
    A class which, when called, linearly normalizes data into the
    ``[0.0, 1.0]`` interval.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        vmin, vmax : float or None
            If *vmin* and/or *vmax* is not given, they are initialized from the
            minimum and maximum value, respectively, of the first input
            processed; i.e., ``__call__(A)`` calls ``autoscale_None(A)``.

        clip : bool, default: False
            If ``True`` values falling outside the range ``[vmin, vmax]``,
            are mapped to 0 or 1, whichever is closer, and masked values are
            set to 1.  If ``False`` masked values remain masked.

            Clipping silently defeats the purpose of setting the over, under,
            and masked colors in a colormap, so it is likely to lead to
            surprises; therefore the default is ``clip=False``.

        Notes
        -----
        Returns 0 if ``vmin == vmax``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39086 39937])
                            ("self" variable nil (reparse-symbol indented_block_body) [39946 39982])
                            ("self" variable nil (reparse-symbol indented_block_body) [39991 40027])
                            ("self" variable nil (reparse-symbol indented_block_body) [40036 40053])
                            ("self" variable nil (reparse-symbol indented_block_body) [40062 40080])
                            ("self" variable nil (reparse-symbol indented_block_body) [40089 40130]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39037 39041])
                            ("vmin" variable nil (reparse-symbol function_parameters) [39043 39047])
                            ("vmax" variable nil (reparse-symbol function_parameters) [39054 39058])
                            ("clip" variable nil (reparse-symbol function_parameters) [39065 39069]))                          
                        :documentation "
        Parameters
        ----------
        vmin, vmax : float or None
            If *vmin* and/or *vmax* is not given, they are initialized from the
            minimum and maximum value, respectively, of the first input
            processed; i.e., ``__call__(A)`` calls ``autoscale_None(A)``.

        clip : bool, default: False
            If ``True`` values falling outside the range ``[vmin, vmax]``,
            are mapped to 0 or 1, whichever is closer, and masked values are
            set to 1.  If ``False`` masked values remain masked.

            Clipping silently defeats the purpose of setting the over, under,
            and masked colors in a colormap, so it is likely to lead to
            surprises; therefore the default is ``clip=False``.

        Notes
        -----
        Returns 0 if ``vmin == vmax``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39024 40131])
                    ("vmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40159 40163]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40136 40192])
                    ("vmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40223 40227])
                            ("value" variable nil (reparse-symbol function_parameters) [40229 40234]))                          
                        :decorators 
                          ( ("vmin.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40197 40369])
                    ("vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40397 40401]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40374 40430])
                    ("vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40461 40465])
                            ("value" variable nil (reparse-symbol function_parameters) [40467 40472]))                          
                        :decorators 
                          ( ("vmax.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40435 40607])
                    ("clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40635 40639]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40612 40668])
                    ("clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40699 40703])
                            ("value" variable nil (reparse-symbol function_parameters) [40705 40710]))                          
                        :decorators 
                          ( ("clip.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40673 40804])
                    ("_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40822 40826]))                          
                        :documentation "
        Call this whenever the norm is changed to notify all the
        callback listeners to the 'changed' signal.
        ")
                        (reparse-symbol indented_block_body) [40809 41012])
                    ("process_value" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [41053 41058]))                          
                        :documentation "
        Homogenize the input *value* for easy and efficient normalization.

        *value* can be a scalar or sequence.

        Returns
        -------
        result : masked array
            Masked array with the same shape as *value*.
        is_scalar : bool
            Whether *value* is a scalar.

        Notes
        -----
        Float dtypes are preserved; integer types with two bytes or smaller are
        converted to np.float32, and larger types are converted to np.float64.
        Preserving float32 when possible, and using in-place operations,
        greatly improves speed for large arrays.
        ")
                        (reparse-symbol indented_block_body) [41017 42315])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42333 42337])
                            ("value" variable nil (reparse-symbol function_parameters) [42339 42344])
                            ("clip" variable nil (reparse-symbol function_parameters) [42346 42350]))                          
                        :documentation "
        Normalize *value* data in the ``[vmin, vmax]`` interval into the
        ``[0.0, 1.0]`` interval and return it.

        Parameters
        ----------
        value
            Data to normalize.
        clip : bool
            If ``None``, defaults to ``self.clip`` (which defaults to
            ``False``).

        Notes
        -----
        If not already initialized, ``self.vmin`` and ``self.vmax`` are
        initialized using ``self.autoscale_None(value)``.
        ")
                        (reparse-symbol indented_block_body) [42320 43881])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43898 43902])
                            ("value" variable nil (reparse-symbol function_parameters) [43904 43909]))                          )
                        (reparse-symbol indented_block_body) [43886 44303])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44322 44326])
                            ("A" variable nil (reparse-symbol function_parameters) [44328 44329]))                          
                        :documentation "Set *vmin*, *vmax* to min, max of *A*.")
                        (reparse-symbol indented_block_body) [44308 44470])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44494 44498])
                            ("A" variable nil (reparse-symbol function_parameters) [44500 44501]))                          
                        :documentation "If vmin or vmax are not set, use the min/max of *A* to set them.")
                        (reparse-symbol indented_block_body) [44475 44758])
                    ("scaled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44774 44778]))                          
                        :documentation "Return whether vmin and vmax are set.")
                        (reparse-symbol indented_block_body) [44763 44896]))                  
                :type "class")
                nil [38891 44896])
            ("TwoSlopeNorm" type
               (:superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Normalize data with a set center.

        Useful when mapping data with an unequal rates of change around a
        conceptual center, e.g., data that range from -2 to 4, with 0 as
        the midpoint.

        Parameters
        ----------
        vcenter : float
            The data value that defines ``0.5`` in the normalization.
        vmin : float, optional
            The data value that defines ``0.0`` in the normalization.
            Defaults to the min value of the dataset.
        vmax : float, optional
            The data value that defines ``1.0`` in the normalization.
            Defaults to the max value of the dataset.

        Examples
        --------
        This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data
        between is linearly interpolated::

            >>> import matplotlib.colors as mcolors
            >>> offset = mcolors.TwoSlopeNorm(vmin=-4000.,
                                              vcenter=0., vmax=10000)
            >>> data = [-4000., -2000., 0., 2500., 5000., 7500., 10000.]
            >>> offset(data)
            array([0., 0.25, 0.5, 0.625, 0.75, 0.875, 1.0])
        \"\"\"" code nil (reparse-symbol indented_block_body) [44992 46160])
                            ("super" code nil (reparse-symbol indented_block_body) [46170 46208])
                            ("self" variable nil (reparse-symbol indented_block_body) [46217 46240])
                            ("if" code nil (reparse-symbol indented_block_body) [46249 46429])
                            ("if" code nil (reparse-symbol indented_block_body) [46437 46617]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44946 44950])
                            ("vcenter" variable nil (reparse-symbol function_parameters) [44952 44959])
                            ("vmin" variable nil (reparse-symbol function_parameters) [44961 44965])
                            ("vmax" variable nil (reparse-symbol function_parameters) [44972 44976]))                          
                        :documentation "
        Normalize data with a set center.

        Useful when mapping data with an unequal rates of change around a
        conceptual center, e.g., data that range from -2 to 4, with 0 as
        the midpoint.

        Parameters
        ----------
        vcenter : float
            The data value that defines ``0.5`` in the normalization.
        vmin : float, optional
            The data value that defines ``0.0`` in the normalization.
            Defaults to the min value of the dataset.
        vmax : float, optional
            The data value that defines ``1.0`` in the normalization.
            Defaults to the max value of the dataset.

        Examples
        --------
        This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data
        between is linearly interpolated::

            >>> import matplotlib.colors as mcolors
            >>> offset = mcolors.TwoSlopeNorm(vmin=-4000.,
                                              vcenter=0., vmax=10000)
            >>> data = [-4000., -2000., 0., 2500., 5000., 7500., 10000.]
            >>> offset(data)
            array([0., 0.25, 0.5, 0.625, 0.75, 0.875, 1.0])
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44933 46617])
                    ("vcenter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46648 46652]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [46622 46684])
                    ("vcenter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46721 46725])
                            ("value" variable nil (reparse-symbol function_parameters) [46727 46732]))                          
                        :decorators 
                          ( ("vcenter.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [46689 46832])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46856 46860])
                            ("A" variable nil (reparse-symbol function_parameters) [46862 46863]))                          
                        :documentation "
        Get vmin and vmax, and then clip at vcenter
        ")
                        (reparse-symbol indented_block_body) [46837 47124])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47142 47146])
                            ("value" variable nil (reparse-symbol function_parameters) [47148 47153])
                            ("clip" variable nil (reparse-symbol function_parameters) [47155 47159]))                          
                        :documentation "
        Map value to the interval [0, 1]. The clip argument is unused.
        ")
                        (reparse-symbol indented_block_body) [47129 47883])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47900 47904])
                            ("value" variable nil (reparse-symbol function_parameters) [47906 47911]))                          )
                        (reparse-symbol indented_block_body) [47888 48330]))                  
                :type "class")
                nil [44898 48330])
            ("CenteredNorm" type
               (:superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Normalize symmetrical data around a center (0 by default).

        Unlike `TwoSlopeNorm`, `CenteredNorm` applies an equal rate of change
        around the center.

        Useful when mapping symmetrical data around a conceptual center
        e.g., data that range from -2 to 4, with 0 as the midpoint, and
        with equal rates of change around that midpoint.

        Parameters
        ----------
        vcenter : float, default: 0
            The data value that defines ``0.5`` in the normalization.
        halfrange : float, optional
            The range of data values that defines a range of ``0.5`` in the
            normalization, so that *vcenter* - *halfrange* is ``0.0`` and
            *vcenter* + *halfrange* is ``1.0`` in the normalization.
            Defaults to the largest absolute difference to *vcenter* for
            the values in the dataset.

        Examples
        --------
        This maps data values -2 to 0.25, 0 to 0.5, and 4 to 1.0
        (assuming equal rates of change above and below 0.0):

            >>> import matplotlib.colors as mcolors
            >>> norm = mcolors.CenteredNorm(halfrange=4.0)
            >>> data = [-2., 0., 4.]
            >>> norm(data)
            array([0.25, 0.5 , 1.  ])
        \"\"\"" code nil (reparse-symbol indented_block_body) [48434 49712])
                            ("super" code nil (reparse-symbol indented_block_body) [49721 49770])
                            ("self" variable nil (reparse-symbol indented_block_body) [49779 49802])
                            ("self" variable nil (reparse-symbol indented_block_body) [49871 49897]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48380 48384])
                            ("vcenter" variable nil (reparse-symbol function_parameters) [48386 48393])
                            ("halfrange" variable nil (reparse-symbol function_parameters) [48397 48406])
                            ("clip" variable nil (reparse-symbol function_parameters) [48413 48417]))                          
                        :documentation "
        Normalize symmetrical data around a center (0 by default).

        Unlike `TwoSlopeNorm`, `CenteredNorm` applies an equal rate of change
        around the center.

        Useful when mapping symmetrical data around a conceptual center
        e.g., data that range from -2 to 4, with 0 as the midpoint, and
        with equal rates of change around that midpoint.

        Parameters
        ----------
        vcenter : float, default: 0
            The data value that defines ``0.5`` in the normalization.
        halfrange : float, optional
            The range of data values that defines a range of ``0.5`` in the
            normalization, so that *vcenter* - *halfrange* is ``0.0`` and
            *vcenter* + *halfrange* is ``1.0`` in the normalization.
            Defaults to the largest absolute difference to *vcenter* for
            the values in the dataset.

        Examples
        --------
        This maps data values -2 to 0.25, 0 to 0.5, and 4 to 1.0
        (assuming equal rates of change above and below 0.0):

            >>> import matplotlib.colors as mcolors
            >>> norm = mcolors.CenteredNorm(halfrange=4.0)
            >>> data = [-2., 0., 4.]
            >>> norm(data)
            array([0.25, 0.5 , 1.  ])
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48367 49898])
                    ("_set_vmin_vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49922 49926]))                          
                        :documentation "
        Set *vmin* and *vmax* based on *vcenter* and *halfrange*.
        ")
                        (reparse-symbol indented_block_body) [49903 50123])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50142 50146])
                            ("A" variable nil (reparse-symbol function_parameters) [50148 50149]))                          
                        :documentation "
        Set *halfrange* to ``max(abs(A-vcenter))``, then set *vmin* and *vmax*.
        ")
                        (reparse-symbol indented_block_body) [50128 50421])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50445 50449])
                            ("A" variable nil (reparse-symbol function_parameters) [50451 50452]))                          
                        :documentation "Set *vmin* and *vmax*.")
                        (reparse-symbol indented_block_body) [50426 50598])
                    ("vcenter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50629 50633]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50603 50665])
                    ("vcenter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50702 50706])
                            ("vcenter" variable nil (reparse-symbol function_parameters) [50708 50715]))                          
                        :decorators 
                          ( ("vcenter.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50670 51106])
                    ("halfrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51139 51143]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [51111 51177])
                    ("halfrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51218 51222])
                            ("halfrange" variable nil (reparse-symbol function_parameters) [51224 51233]))                          
                        :decorators 
                          ( ("halfrange.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [51182 51418])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51436 51440])
                            ("value" variable nil (reparse-symbol function_parameters) [51442 51447])
                            ("clip" variable nil (reparse-symbol function_parameters) [51449 51453]))                          )
                        (reparse-symbol indented_block_body) [51423 51637]))                  
                :type "class")
                nil [48332 51637])
            ("make_norm_from_scale" function
               (:documentation "
    Decorator for building a `.Normalize` subclass from a `~.scale.ScaleBase`
    subclass.

    After ::

        @make_norm_from_scale(scale_cls)
        class norm_cls(Normalize):
            ...

    *norm_cls* is filled with methods so that normalization computations are
    forwarded to *scale_cls* (i.e., *scale_cls* is the scale that would be used
    for the colorbar of a mappable normalized with *norm_cls*).

    If *init* is not passed, then the constructor signature of *norm_cls*
    will be ``norm_cls(vmin=None, vmax=None, clip=False)``; these three
    parameters will be forwarded to the base class (``Normalize.__init__``),
    and a *scale_cls* object will be initialized with no arguments (other than
    a dummy axis).

    If the *scale_cls* constructor takes additional parameters, then *init*
    should be passed to `make_norm_from_scale`.  It is a callable which is
    *only* used for its signature.  First, this signature will become the
    signature of *norm_cls*.  Second, the *norm_cls* constructor will bind the
    parameters passed to it using this signature, extract the bound *vmin*,
    *vmax*, and *clip* values, pass those to ``Normalize.__init__``, and
    forward the remaining bound values (including any defaults defined by the
    signature) to the *scale_cls* constructor.
    "
                :arguments 
                  ( ("scale_cls" variable nil (reparse-symbol function_parameters) [51664 51673])
                    ("base_norm_cls" variable nil (reparse-symbol function_parameters) [51675 51688])
                    ("init" variable nil (reparse-symbol function_parameters) [51698 51702]))                  )
                nil [51639 55871])
            ("" code nil nil [55894 55983])
            ("FuncNorm" type
               (:documentation "
    Arbitrary normalization using functions for the forward and inverse.

    Parameters
    ----------
    functions : (callable, callable)
        two-tuple of the forward and inverse functions for the normalization.
        The forward function must be monotonic.

        Both functions must have the signature ::

           def forward(values: array-like) -> array-like

    vmin, vmax : float or None
        If *vmin* and/or *vmax* is not given, they are initialized from the
        minimum and maximum value, respectively, of the first input
        processed; i.e., ``__call__(A)`` calls ``autoscale_None(A)``.

    clip : bool, default: False
        If ``True`` values falling outside the range ``[vmin, vmax]``,
        are mapped to 0 or 1, whichever is closer, and masked values are
        set to 1.  If ``False`` masked values remain masked.

        Clipping silently defeats the purpose of setting the over, under,
        and masked colors in a colormap, so it is likely to lead to
        surprises; therefore the default is ``clip=False``.
    "
                :superclasses ("Normalize")
                :type "class")
                nil [55984 57090])
            ("" code nil nil [57113 57168])
            ("LogNorm" type
               (:documentation "Normalize a given value to the 0-1 range on a log scale."
                :superclasses ("Normalize")
                :members 
                  ( ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57281 57285])
                            ("A" variable nil (reparse-symbol function_parameters) [57287 57288]))                          )
                        (reparse-symbol indented_block_body) [57267 57379])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57403 57407])
                            ("A" variable nil (reparse-symbol function_parameters) [57409 57410]))                          )
                        (reparse-symbol indented_block_body) [57384 57506]))                  
                :type "class")
                nil [57169 57506])
            ("" code nil nil [57529 57669])
            ("SymLogNorm" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).

    Parameters
    ----------
    linthresh : float
        The range within which the plot is linear (to avoid having the plot
        go to infinity around zero).
    linscale : float, default: 1
        This allows the linear range (-*linthresh* to *linthresh*) to be
        stretched relative to the logarithmic range. Its value is the
        number of decades to use for each half of the linear range. For
        example, when *linscale* == 1.0 (the default), the space used for
        the positive and negative halves of the linear range will be equal
        to one decade in the logarithmic range.
    base : float, default: 10
    "
                :superclasses ("Normalize")
                :members 
                  ( ("linthresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58744 58748]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58716 58788])
                    ("linthresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58829 58833])
                            ("value" variable nil (reparse-symbol function_parameters) [58835 58840]))                          
                        :decorators 
                          ( ("linthresh.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58793 58881]))                  
                :type "class")
                nil [57670 58881])
            ("PowerNorm" type
               (:documentation "
    Linearly map a given value to the 0-1 range and then apply
    a power-law normalization over that range.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [59110 59144])
                            ("self" variable nil (reparse-symbol indented_block_body) [59153 59171]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59054 59058])
                            ("gamma" variable nil (reparse-symbol function_parameters) [59060 59065])
                            ("vmin" variable nil (reparse-symbol function_parameters) [59067 59071])
                            ("vmax" variable nil (reparse-symbol function_parameters) [59078 59082])
                            ("clip" variable nil (reparse-symbol function_parameters) [59089 59093]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59041 59172])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59190 59194])
                            ("value" variable nil (reparse-symbol function_parameters) [59196 59201])
                            ("clip" variable nil (reparse-symbol function_parameters) [59203 59207]))                          )
                        (reparse-symbol indented_block_body) [59177 60126])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60143 60147])
                            ("value" variable nil (reparse-symbol function_parameters) [60149 60154]))                          )
                        (reparse-symbol indented_block_body) [60131 60537]))                  
                :type "class")
                nil [58883 60537])
            ("BoundaryNorm" type
               (:documentation "
    Generate a colormap index based on discrete intervals.

    Unlike `Normalize` or `LogNorm`, `BoundaryNorm` maps values to integers
    instead of to the interval 0-1.

    Mapping to the 0-1 interval could have been done via piece-wise linear
    interpolation, but using integers seems simpler, and reduces the number of
    conversions back and forth between integer and floating point.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        boundaries : array-like
            Monotonically increasing sequence of at least 2 boundaries.
        ncolors : int
            Number of colors in the colormap to be used.
        clip : bool, optional
            If clip is ``True``, out of range values are mapped to 0 if they
            are below ``boundaries[0]`` or mapped to ``ncolors - 1`` if they
            are above ``boundaries[-1]``.

            If clip is ``False``, out of range values are mapped to -1 if
            they are below ``boundaries[0]`` or mapped to *ncolors* if they are
            above ``boundaries[-1]``. These are then converted to valid indices
            by `Colormap.__call__`.
        extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
            Extend the number of bins to include one or both of the
            regions beyond the boundaries.  For example, if ``extend``
            is 'min', then the color to which the region between the first
            pair of boundaries is mapped will be distinct from the first
            color in the colormap, and by default a
            `~matplotlib.colorbar.Colorbar` will be drawn with
            the triangle extension on the left or lower end.

        Returns
        -------
        int16 scalar or array

        Notes
        -----
        *boundaries* defines the edges of bins, and data falling within a bin
        is mapped to the color with the same index.

        If the number of bins, including any extensions, is less than
        *ncolors*, the color index is chosen by linear interpolation, mapping
        the ``[0, nbins - 1]`` range onto the ``[0, ncolors - 1]`` range.
        \"\"\"" code nil (reparse-symbol indented_block_body) [61066 62778])
                            ("if" code nil (reparse-symbol indented_block_body) [62787 62896])
                            ("super" code nil (reparse-symbol indented_block_body) [62904 62972])
                            ("self" variable nil (reparse-symbol indented_block_body) [62981 63021])
                            ("self" variable nil (reparse-symbol indented_block_body) [63030 63059])
                            ("if" code nil (reparse-symbol indented_block_body) [63068 63231])
                            ("self" variable nil (reparse-symbol indented_block_body) [63239 63259])
                            ("self" variable nil (reparse-symbol indented_block_body) [63268 63288])
                            ("self" variable nil (reparse-symbol indented_block_body) [63298 63316])
                            ("self" code nil (reparse-symbol indented_block_body) [63358 63386])
                            ("self" variable nil (reparse-symbol indented_block_body) [63422 63438])
                            ("if" code nil (reparse-symbol indented_block_body) [63447 63539])
                            ("if" code nil (reparse-symbol indented_block_body) [63547 63610])
                            ("if" code nil (reparse-symbol indented_block_body) [63618 63915]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60997 61001])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [61003 61013])
                            ("ncolors" variable nil (reparse-symbol function_parameters) [61015 61022])
                            ("clip" variable nil (reparse-symbol function_parameters) [61024 61028])
                            ("extend" variable nil (reparse-symbol function_parameters) [61039 61045]))                          
                        :documentation "
        Parameters
        ----------
        boundaries : array-like
            Monotonically increasing sequence of at least 2 boundaries.
        ncolors : int
            Number of colors in the colormap to be used.
        clip : bool, optional
            If clip is ``True``, out of range values are mapped to 0 if they
            are below ``boundaries[0]`` or mapped to ``ncolors - 1`` if they
            are above ``boundaries[-1]``.

            If clip is ``False``, out of range values are mapped to -1 if
            they are below ``boundaries[0]`` or mapped to *ncolors* if they are
            above ``boundaries[-1]``. These are then converted to valid indices
            by `Colormap.__call__`.
        extend : {'neither', 'both', 'min', 'max'}, default: 'neither'
            Extend the number of bins to include one or both of the
            regions beyond the boundaries.  For example, if ``extend``
            is 'min', then the color to which the region between the first
            pair of boundaries is mapped will be distinct from the first
            color in the colormap, and by default a
            `~matplotlib.colorbar.Colorbar` will be drawn with
            the triangle extension on the left or lower end.

        Returns
        -------
        int16 scalar or array

        Notes
        -----
        *boundaries* defines the edges of bins, and data falling within a bin
        is mapped to the color with the same index.

        If the number of bins, including any extensions, is less than
        *ncolors*, the color index is chosen by linear interpolation, mapping
        the ``[0, nbins - 1]`` range onto the ``[0, ncolors - 1]`` range.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60984 63915])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63933 63937])
                            ("value" variable nil (reparse-symbol function_parameters) [63939 63944])
                            ("clip" variable nil (reparse-symbol function_parameters) [63946 63950]))                          )
                        (reparse-symbol indented_block_body) [63920 65624])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65641 65645])
                            ("value" variable nil (reparse-symbol function_parameters) [65647 65652]))                          
                        :documentation "
        Raises
        ------
        ValueError
            BoundaryNorm is not invertible, so calling this method will always
            raise an error
        ")
                        (reparse-symbol indented_block_body) [65629 65893]))                  
                :type "class")
                nil [60539 65893])
            ("NoNorm" type
               (:documentation "
    Dummy replacement for `Normalize`, for the case where we want to use
    indices directly in a `~matplotlib.cm.ScalarMappable`.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66085 66089])
                            ("value" variable nil (reparse-symbol function_parameters) [66091 66096])
                            ("clip" variable nil (reparse-symbol function_parameters) [66098 66102]))                          )
                        (reparse-symbol indented_block_body) [66072 66131])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66148 66152])
                            ("value" variable nil (reparse-symbol function_parameters) [66154 66159]))                          )
                        (reparse-symbol indented_block_body) [66136 66183]))                  
                :type "class")
                nil [65895 66183])
            ("rgb_to_hsv" function
               (:documentation "
    Convert float rgb values (in the range [0, 1]), in a numpy array to hsv
    values.

    Parameters
    ----------
    arr : (..., 3) array-like
       All values must be in the range [0, 1]

    Returns
    -------
    (..., 3) ndarray
       Colors converted to hsv values in range [0, 1]
    "
                :arguments 
                  ( ("arr" variable nil (reparse-symbol function_parameters) [66200 66203]))                  )
                nil [66185 67660])
            ("hsv_to_rgb" function
               (:documentation "
    Convert hsv values to rgb.

    Parameters
    ----------
    hsv : (..., 3) array-like
       All values assumed to be in range [0, 1]

    Returns
    -------
    (..., 3) ndarray
       Colors converted to RGB values in range [0, 1]
    "
                :arguments 
                  ( ("hsv" variable nil (reparse-symbol function_parameters) [67677 67680]))                  )
                nil [67662 69299])
            ("_vector_magnitude" function (:arguments 
              ( ("arr" variable nil (reparse-symbol function_parameters) [69323 69326]))              ) nil [69301 69611])
            ("LightSource" type
               (:documentation "
    Create a light source coming from the specified azimuth and elevation.
    Angles are in degrees, with the azimuth measured
    clockwise from north and elevation up from the zero plane of the surface.

    `shade` is used to produce \"shaded\" rgb values for a data array.
    `shade_rgb` can be used to combine an rgb image with an elevation map.
    `hillshade` produces an illumination map of a surface.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : float, default: 315 degrees (from the northwest)
            The azimuth (0-360, degrees clockwise from North) of the light
            source.
        altdeg : float, default: 45 degrees
            The altitude (0-90, degrees up from horizontal) of the light
            source.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into `shade` or `shade_rgb`.
        See the documentation for `blend_hsv` for more details.
        \"\"\"" code nil (reparse-symbol indented_block_body) [70190 71087])
                            ("self" variable nil (reparse-symbol indented_block_body) [71096 71114])
                            ("self" variable nil (reparse-symbol indented_block_body) [71123 71143])
                            ("self" variable nil (reparse-symbol indented_block_body) [71152 71182])
                            ("self" variable nil (reparse-symbol indented_block_body) [71191 71221])
                            ("self" variable nil (reparse-symbol indented_block_body) [71230 71260])
                            ("self" variable nil (reparse-symbol indented_block_body) [71269 71299]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70076 70080])
                            ("azdeg" variable nil (reparse-symbol function_parameters) [70082 70087])
                            ("altdeg" variable nil (reparse-symbol function_parameters) [70093 70099])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [70104 70115])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [70119 70130])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [70151 70162])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [70166 70177]))                          
                        :documentation "
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : float, default: 315 degrees (from the northwest)
            The azimuth (0-360, degrees clockwise from North) of the light
            source.
        altdeg : float, default: 45 degrees
            The altitude (0-90, degrees up from horizontal) of the light
            source.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into `shade` or `shade_rgb`.
        See the documentation for `blend_hsv` for more details.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70063 71300])
                    ("direction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71333 71337]))                          
                        :documentation "The unit vector direction towards the light source.")
                        (reparse-symbol indented_block_body) [71305 71757])
                    ("hillshade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71776 71780])
                            ("elevation" variable nil (reparse-symbol function_parameters) [71782 71791])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [71793 71802])
                            ("dx" variable nil (reparse-symbol function_parameters) [71806 71808])
                            ("dy" variable nil (reparse-symbol function_parameters) [71812 71814])
                            ("fraction" variable nil (reparse-symbol function_parameters) [71818 71826]))                          
                        :documentation "
        Calculate the illumination intensity for a surface using the defined
        azimuth and elevation for the light source.

        This computes the normal vectors for the surface, and then passes them
        on to `shade_normals`

        Parameters
        ----------
        elevation : 2D array-like
            The height values used to generate an illumination map
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs. meters) or to
            exaggerate or de-emphasize topographic effects.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.

        Returns
        -------
        ndarray
            A 2D array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        ")
                        (reparse-symbol indented_block_body) [71762 74048])
                    ("shade_normals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74071 74075])
                            ("normals" variable nil (reparse-symbol function_parameters) [74077 74084])
                            ("fraction" variable nil (reparse-symbol function_parameters) [74086 74094]))                          
                        :documentation "
        Calculate the illumination intensity for the normal vectors of a
        surface using the defined azimuth and elevation for the light source.

        Imagine an artificial sun placed at infinity in some azimuth and
        elevation position illuminating our surface. The parts of the surface
        that slope toward the sun should brighten while those sides facing away
        should become darker.

        Parameters
        ----------
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.

        Returns
        -------
        ndarray
            A 2D array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        ")
                        (reparse-symbol indented_block_body) [74053 75958])
                    ("shade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75973 75977])
                            ("data" variable nil (reparse-symbol function_parameters) [75979 75983])
                            ("cmap" variable nil (reparse-symbol function_parameters) [75985 75989])
                            ("norm" variable nil (reparse-symbol function_parameters) [75991 75995])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [76002 76012])
                            ("vmin" variable nil (reparse-symbol function_parameters) [76024 76028])
                            ("vmax" variable nil (reparse-symbol function_parameters) [76049 76053])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [76060 76069])
                            ("dx" variable nil (reparse-symbol function_parameters) [76073 76075])
                            ("dy" variable nil (reparse-symbol function_parameters) [76079 76081])
                            ("fraction" variable nil (reparse-symbol function_parameters) [76085 76093])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [76097 76105]))                          
                        :documentation "
        Combine colormapped data values with an illumination intensity map
        (a.k.a.  \"hillshade\") of the values.

        Parameters
        ----------
        data : 2D array-like
            The height values used to generate a shaded map.
        cmap : `~matplotlib.colors.Colormap`
            The colormap used to color the *data* array. Note that this must be
            a `~matplotlib.colors.Colormap` instance.  For example, rather than
            passing in ``cmap='gist_earth'``, use
            ``cmap=plt.get_cmap('gist_earth')`` instead.
        norm : `~matplotlib.colors.Normalize` instance, optional
            The normalization used to scale values before colormapping. If
            None, the input will be linearly scaled between its min and max.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data
            values with the illumination intensity.  Default is
            \"overlay\".  Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to
            combine an MxNx3 RGB array of floats (ranging 0 to 1) with
            an MxNx1 hillshade array (also 0 to 1).  (Call signature
            ``func(rgb, illum, **kwargs)``) Additional kwargs supplied
            to this function will be passed on to the *blend_mode*
            function.
        vmin : float or None, optional
            The minimum value used in colormapping *data*. If *None* the
            minimum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vmax : float or None, optional
            The maximum value used in colormapping *data*. If *None* the
            maximum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs. meters) or to
            exaggerate or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        ndarray
            An MxNx4 array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [75963 79745])
                    ("shade_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79764 79768])
                            ("rgb" variable nil (reparse-symbol function_parameters) [79770 79773])
                            ("elevation" variable nil (reparse-symbol function_parameters) [79775 79784])
                            ("fraction" variable nil (reparse-symbol function_parameters) [79786 79794])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [79799 79809])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [79835 79844])
                            ("dx" variable nil (reparse-symbol function_parameters) [79848 79850])
                            ("dy" variable nil (reparse-symbol function_parameters) [79854 79856])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [79860 79868]))                          
                        :documentation "
        Use this light source to adjust the colors of the *rgb* input array to
        give the impression of a shaded relief map with the given *elevation*.

        Parameters
        ----------
        rgb : array-like
            An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.
        elevation : array-like
            An (M, N) array of the height values used to generate a shaded map.
        fraction : number
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data values
            with the illumination intensity.  For backwards compatibility, this
            defaults to \"hsv\". Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to combine an
            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade
            array (also 0 to 1).  (Call signature
            ``func(rgb, illum, **kwargs)``)
            Additional kwargs supplied to this function will be passed on to
            the *blend_mode* function.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs. meters) or to
            exaggerate or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        ndarray
            An (m, n, 3) array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [79750 83205])
                    ("blend_hsv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83224 83228])
                            ("rgb" variable nil (reparse-symbol function_parameters) [83230 83233])
                            ("intensity" variable nil (reparse-symbol function_parameters) [83235 83244])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [83246 83257])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [83264 83275])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [83300 83311])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [83318 83329]))                          
                        :documentation "
        Take the input data array, convert to HSV values in the given colormap,
        then adjust those color values to give the impression of a shaded
        relief map with a specified light source.  RGBA values are returned,
        which can then be used to plot the shaded image with imshow.

        The color of the resulting image will be darkened by moving the (s, v)
        values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the
        shaded regions, or lightened by sliding (s, v) toward (hsv_max_sat,
        hsv_max_val) in regions that are illuminated.  The default extremes are
        chose so that completely shaded points are nearly black (s = 1, v = 0)
        and completely illuminated points are nearly white (s = 0, v = 1).

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
        hsv_max_sat : number, default: 1
            The maximum saturation value that the *intensity* map can shift the
            output image to.
        hsv_min_sat : number, optional
            The minimum saturation value that the *intensity* map can shift the
            output image to. Defaults to 0.
        hsv_max_val : number, optional
            The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 1.
        hsv_min_val : number, optional
            The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 0.

        Returns
        -------
        ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [83210 86471])
                    ("blend_soft_light" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86497 86501])
                            ("rgb" variable nil (reparse-symbol function_parameters) [86503 86506])
                            ("intensity" variable nil (reparse-symbol function_parameters) [86508 86517]))                          
                        :documentation "
        Combine an rgb image with an intensity map using \"soft light\" blending,
        using the \"pegtop\" formula.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [86476 87081])
                    ("blend_overlay" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87104 87108])
                            ("rgb" variable nil (reparse-symbol function_parameters) [87110 87113])
                            ("intensity" variable nil (reparse-symbol function_parameters) [87115 87124]))                          
                        :documentation "
        Combine an rgb image with an intensity map using \"overlay\" blending.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [87086 87715]))                  
                :type "class")
                nil [69613 87715])
            ("from_levels_and_colors" function
               (:documentation "
    A helper routine to generate a cmap and a norm instance which
    behave similar to contourf's levels and colors arguments.

    Parameters
    ----------
    levels : sequence of numbers
        The quantization levels used to construct the `BoundaryNorm`.
        Value ``v`` is quantized to level ``i`` if ``lev[i] <= v < lev[i+1]``.
    colors : sequence of colors
        The fill color to use for each level. If *extend* is \"neither\" there
        must be ``n_level - 1`` colors. For an *extend* of \"min\" or \"max\" add
        one extra color, and for an *extend* of \"both\" add two colors.
    extend : {'neither', 'min', 'max', 'both'}, optional
        The behaviour when a value falls out of range of the given levels.
        See `~.Axes.contourf` for details.

    Returns
    -------
    cmap : `~matplotlib.colors.Normalize`
    norm : `~matplotlib.colors.Colormap`
    "
                :arguments 
                  ( ("levels" variable nil (reparse-symbol function_parameters) [87744 87750])
                    ("colors" variable nil (reparse-symbol function_parameters) [87752 87758])
                    ("extend" variable nil (reparse-symbol function_parameters) [87760 87766]))                  )
                nil [87717 89618]))          
      :file "colors.py"
      :pointmax 89618
      :fsize 89617
      :lastmodtime '(25218 25732 441936 36000)
      :unmatched-syntax '((INDENT_BLOCK 82805 . 82947) (NEWLINE 82804 . 82805) (COLON 82803 . 82804) (TRY 82702 . 82705) (AS 82797 . 82799) (MULT 61036 . 61037) (COMMA 61037 . 61038) (RETURN 55342 . 55348) (IF 55358 . 55360) (ELSE 55371 . 55375) (RETURN 54567 . 54573) (IF 54585 . 54587) (ELSE 54598 . 54602) (MULT 51695 . 51696) (COMMA 51696 . 51697) (MULT 25569 . 25570) (COMMA 25570 . 25571) (MULT 25153 . 25154) (COMMA 25154 . 25155) (NAME 20910 . 20918) (IF 20928 . 20930) (ELSE 20950 . 20954) (INDENT_BLOCK 16725 . 16798) (NEWLINE 16724 . 16725) (COLON 16723 . 16724) (TRY 16660 . 16663) (AS 16717 . 16719) (NAME 11531 . 11537) (IF 11553 . 11555) (ELSE 11574 . 11578) (NAME 10956 . 10960) (IF 10982 . 10984) (ELSE 11004 . 11008) (RETURN 8538 . 8544) (IF 8560 . 8562) (ELSE 8581 . 8585) (FROM 1910 . 1914) (PERIOD 1915 . 1916)))
    (semanticdb-table "semanticdb-table-157fb346d008"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
2D lines with support for a variety of line styles, markers, colors, etc.
\"\"\"" code nil nil [1 82])
            ("numbers" include nil nil [84 126])
            ("logging" include nil nil [127 141])
            ("numpy" include nil nil [143 161])
            ("matplotlib" include nil nil [163 187])
            ("rcParams" include nil nil [195 261])
            ("docstring" include nil nil [195 261])
            ("colors" include nil nil [195 261])
            ("cbook" include nil nil [195 261])
            ("artist" include nil nil [195 261])
            ("_api" include nil nil [195 261])
            ("allow_rasterization" include nil nil [275 309])
            ("Artist" include nil nil [275 309])
            ("" code nil nil [329 401])
            ("MarkerStyle" include nil nil [416 434])
            ("Path" include nil nil [446 457])
            ("TransformedPath" include nil nil [475 520])
            ("BboxTransformTo" include nil nil [475 520])
            ("Bbox" include nil nil [475 520])
            ("CapStyle" include nil nil [534 560])
            ("JoinStyle" include nil nil [534 560])
            ("_path" include nil nil [653 665])
            ("" code nil nil [687 841])
            ("_log" variable nil nil [843 877])
            ("_get_dash_pattern" function
               (:documentation "Convert linestyle to dash pattern."
                :arguments 
                  ( ("style" variable nil (reparse-symbol function_parameters) [902 907]))                  )
                nil [880 1762])
            ("_scale_dashes" function (:arguments 
              ( ("offset" variable nil (reparse-symbol function_parameters) [1782 1788])
                ("dashes" variable nil (reparse-symbol function_parameters) [1790 1796])
                ("lw" variable nil (reparse-symbol function_parameters) [1798 1800]))              ) nil [1764 2075])
            ("segment_hits" function
               (:documentation "
    Return the indices of the segments in the polyline with coordinates (*cx*,
    *cy*) that are within a distance *radius* of the point (*x*, *y*).
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [2094 2096])
                    ("cy" variable nil (reparse-symbol function_parameters) [2098 2100])
                    ("x" variable nil (reparse-symbol function_parameters) [2102 2103])
                    ("y" variable nil (reparse-symbol function_parameters) [2105 2106])
                    ("radius" variable nil (reparse-symbol function_parameters) [2108 2114]))                  )
                nil [2077 3553])
            ("_mark_every_path" function
               (:documentation "
    Helper function that sorts out how to deal the input
    `markevery` and returns the points where markers should be drawn.

    Takes in the `markevery` value and the line path and returns the
    sub-sampled path.
    "
                :arguments 
                  ( ("markevery" variable nil (reparse-symbol function_parameters) [3576 3585])
                    ("tpath" variable nil (reparse-symbol function_parameters) [3587 3592])
                    ("affine" variable nil (reparse-symbol function_parameters) [3594 3600])
                    ("ax" variable nil (reparse-symbol function_parameters) [3602 3604]))                  )
                nil [3555 7596])
            ("" code nil nil [7639 7926])
            ("Line2D" type
               (:documentation "
    A line - the line can have both a solid linestyle connecting all
    the vertices, and a marker at each vertex.  Additionally, the
    drawing of the solid line is influenced by the drawstyle, e.g., one
    can create \"stepped\" lines in various styles.
    "
                :superclasses ("Artist")
                :members 
                  ( ("lineStyles" variable nil (reparse-symbol indented_block_body) [8227 8516])
                    ("_drawStyles_l" variable nil (reparse-symbol indented_block_body) [8522 8706])
                    ("_drawStyles_s" variable nil (reparse-symbol indented_block_body) [8712 8771])
                    ("drawStyles" variable nil (reparse-symbol indented_block_body) [8820 8867])
                    ("drawStyleKeys" variable nil (reparse-symbol indented_block_body) [8921 8969])
                    ("markers" variable nil (reparse-symbol indented_block_body) [9054 9083])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [9088 9131])
                    ("fillStyles" variable nil (reparse-symbol indented_block_body) [9136 9171])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [9177 9187])
                    ("" code nil (reparse-symbol indented_block_body) [9209 9216])
                    ("validCap" function
                       (:decorators 
                          ( ("_api.classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9258 9261]))                          )
                        (reparse-symbol indented_block_body) [9221 9314])
                    ("" code nil (reparse-symbol indented_block_body) [9335 9342])
                    ("validJoin" function
                       (:decorators 
                          ( ("_api.classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9385 9388]))                          )
                        (reparse-symbol indented_block_body) [9347 9442])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9459 9463]))                          )
                        (reparse-symbol indented_block_body) [9447 9917])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a `.Line2D` instance with *x* and *y* data in sequences of
        *xdata*, *ydata*.

        Additional keyword arguments are `.Line2D` properties:

        %(Line2D:kwdoc)s

        See :meth:`set_linestyle` for a description of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        \"\"\"" code nil (reparse-symbol indented_block_body) [10673 11085])
                            ("super" code nil (reparse-symbol indented_block_body) [11094 11112])
                            ("if" code nil (reparse-symbol indented_block_body) [11167 11253])
                            ("if" code nil (reparse-symbol indented_block_body) [11261 11347])
                            ("if" code nil (reparse-symbol indented_block_body) [11356 11430])
                            ("if" code nil (reparse-symbol indented_block_body) [11439 11513])
                            ("if" code nil (reparse-symbol indented_block_body) [11521 11586])
                            ("if" code nil (reparse-symbol indented_block_body) [11594 11656])
                            ("if" code nil (reparse-symbol indented_block_body) [11665 11742])
                            ("if" code nil (reparse-symbol indented_block_body) [11750 11830])
                            ("if" code nil (reparse-symbol indented_block_body) [11838 11924])
                            ("if" code nil (reparse-symbol indented_block_body) [11932 12021])
                            ("if" code nil (reparse-symbol indented_block_body) [12029 12118])
                            ("if" code nil (reparse-symbol indented_block_body) [12126 12218])
                            ("if" code nil (reparse-symbol indented_block_body) [12227 12283])
                            ("self" variable nil (reparse-symbol indented_block_body) [12292 12317])
                            ("self" variable nil (reparse-symbol indented_block_body) [12326 12352])
                            ("self" variable nil (reparse-symbol indented_block_body) [12361 12388])
                            ("self" variable nil (reparse-symbol indented_block_body) [12397 12423])
                            ("self" code nil (reparse-symbol indented_block_body) [12432 12469])
                            ("self" code nil (reparse-symbol indented_block_body) [12478 12517])
                            ("self" code nil (reparse-symbol indented_block_body) [12526 12565])
                            ("self" code nil (reparse-symbol indented_block_body) [12574 12615])
                            ("self" variable nil (reparse-symbol indented_block_body) [12625 12648])
                            ("self" variable nil (reparse-symbol indented_block_body) [12657 12679])
                            ("self" variable nil (reparse-symbol indented_block_body) [12688 12715])
                            ("self" variable nil (reparse-symbol indented_block_body) [12756 12776])
                            ("self" variable nil (reparse-symbol indented_block_body) [12785 12805])
                            ("self" variable nil (reparse-symbol indented_block_body) [12910 12933])
                            ("self" variable nil (reparse-symbol indented_block_body) [12942 12965])
                            ("self" code nil (reparse-symbol indented_block_body) [12975 13004])
                            ("self" code nil (reparse-symbol indented_block_body) [13013 13042])
                            ("self" code nil (reparse-symbol indented_block_body) [13051 13080])
                            ("self" variable nil (reparse-symbol indented_block_body) [13090 13108])
                            ("self" code nil (reparse-symbol indented_block_body) [13117 13138])
                            ("self" variable nil (reparse-symbol indented_block_body) [13147 13192])
                            ("self" variable nil (reparse-symbol indented_block_body) [13202 13224])
                            ("self" variable nil (reparse-symbol indented_block_body) [13233 13256])
                            ("self" variable nil (reparse-symbol indented_block_body) [13265 13289])
                            ("self" code nil (reparse-symbol indented_block_body) [13299 13328])
                            ("self" code nil (reparse-symbol indented_block_body) [13337 13370])
                            ("self" code nil (reparse-symbol indented_block_body) [13379 13410])
                            ("self" variable nil (reparse-symbol indented_block_body) [13420 13448])
                            ("self" variable nil (reparse-symbol indented_block_body) [13457 13485])
                            ("self" variable nil (reparse-symbol indented_block_body) [13494 13522])
                            ("self" variable nil (reparse-symbol indented_block_body) [13531 13562])
                            ("self" code nil (reparse-symbol indented_block_body) [13572 13613])
                            ("self" code nil (reparse-symbol indented_block_body) [13648 13695])
                            ("self" code nil (reparse-symbol indented_block_body) [13704 13745])
                            ("self" code nil (reparse-symbol indented_block_body) [13780 13821])
                            ("self" code nil (reparse-symbol indented_block_body) [13952 13971])
                            ("self" variable nil (reparse-symbol indented_block_body) [13980 14008])
                            ("self" variable nil (reparse-symbol indented_block_body) [14017 14036])
                            ("if" code nil (reparse-symbol indented_block_body) [14045 14182])
                            ("self" variable nil (reparse-symbol indented_block_body) [14191 14219])
                            ("self" variable nil (reparse-symbol indented_block_body) [14228 14256])
                            ("self" variable nil (reparse-symbol indented_block_body) [14265 14286])
                            ("self" variable nil (reparse-symbol indented_block_body) [14295 14316])
                            ("self" variable nil (reparse-symbol indented_block_body) [14325 14339])
                            ("self" variable nil (reparse-symbol indented_block_body) [14348 14362])
                            ("self" variable nil (reparse-symbol indented_block_body) [14371 14386])
                            ("self" variable nil (reparse-symbol indented_block_body) [14395 14412])
                            ("self" variable nil (reparse-symbol indented_block_body) [14421 14450])
                            ("self" variable nil (reparse-symbol indented_block_body) [14459 14481])
                            ("self" variable nil (reparse-symbol indented_block_body) [14490 14511])
                            ("self" code nil (reparse-symbol indented_block_body) [14561 14588]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9935 9939])
                            ("xdata" variable nil (reparse-symbol function_parameters) [9941 9946])
                            ("ydata" variable nil (reparse-symbol function_parameters) [9948 9953])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [9972 9981])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [10032 10041])
                            ("color" variable nil (reparse-symbol function_parameters) [10065 10070])
                            ("marker" variable nil (reparse-symbol function_parameters) [10094 10100])
                            ("markersize" variable nil (reparse-symbol function_parameters) [10124 10134])
                            ("markeredgewidth" variable nil (reparse-symbol function_parameters) [10158 10173])
                            ("markeredgecolor" variable nil (reparse-symbol function_parameters) [10197 10212])
                            ("markerfacecolor" variable nil (reparse-symbol function_parameters) [10236 10251])
                            ("markerfacecoloralt" variable nil (reparse-symbol function_parameters) [10275 10293])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [10319 10328])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10352 10363])
                            ("dash_capstyle" variable nil (reparse-symbol function_parameters) [10387 10400])
                            ("solid_capstyle" variable nil (reparse-symbol function_parameters) [10424 10438])
                            ("dash_joinstyle" variable nil (reparse-symbol function_parameters) [10462 10476])
                            ("solid_joinstyle" variable nil (reparse-symbol function_parameters) [10500 10515])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [10539 10549])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [10570 10579])
                            ("markevery" variable nil (reparse-symbol function_parameters) [10603 10612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10636 10644]))                          
                        :documentation "
        Create a `.Line2D` instance with *x* and *y* data in sequences of
        *xdata*, *ydata*.

        Additional keyword arguments are `.Line2D` properties:

        %(Line2D:kwdoc)s

        See :meth:`set_linestyle` for a description of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9922 14589])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14607 14611])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [14613 14623]))                          
                        :documentation "
        Test whether *mouseevent* occurred on the line.

        An event is deemed to have occurred \"on\" the line if it is less
        than ``self.pickradius`` (default: 5 points) away from it.  Use
        `~.Line2D.get_pickradius` or `~.Line2D.set_pickradius` to get or set
        the pick radius.

        Parameters
        ----------
        mouseevent : `matplotlib.backend_bases.MouseEvent`

        Returns
        -------
        contains : bool
            Whether any values are within the radius.
        details : dict
            A dictionary ``{'ind': pointlist}``, where *pointlist* is a
            list of points of the line that are within the pickradius around
            the event position.

            TODO: sort returned indices by distance
        ")
                        (reparse-symbol indented_block_body) [14594 17141])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17165 17169]))                          
                        :documentation "
        Return the pick radius used for containment tests.

        See `.contains` for more details.
        ")
                        (reparse-symbol indented_block_body) [17146 17330])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17354 17358])
                            ("d" variable nil (reparse-symbol function_parameters) [17360 17361]))                          
                        :documentation "
        Set the pick radius used for containment tests.

        See `.contains` for more details.

        Parameters
        ----------
        d : float
            Pick radius, in points.
        ")
                        (reparse-symbol indented_block_body) [17335 17721])
                    ("pickradius" variable nil (reparse-symbol indented_block_body) [17726 17779])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17803 17807]))                          
                        :documentation "
        Return the marker fill style.

        See also `~.Line2D.set_fillstyle`.
        ")
                        (reparse-symbol indented_block_body) [17785 17960])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17983 17987])
                            ("fs" variable nil (reparse-symbol function_parameters) [17989 17991]))                          
                        :documentation "
        Set the marker fill style.

        Parameters
        ----------
        fs : {'full', 'left', 'right', 'bottom', 'top', 'none'}
            Possible values:

            - 'full': Fill the whole marker with the *markerfacecolor*.
            - 'left', 'right', 'bottom', 'top': Fill the marker half at
              the given side with the *markerfacecolor*. The other
              half of the marker is filled with *markerfacecoloralt*.
            - 'none': No filling.

            For examples see :ref:`marker_fill_styles`.
        ")
                        (reparse-symbol indented_block_body) [17965 18652])
                    ("set_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18675 18679])
                            ("every" variable nil (reparse-symbol function_parameters) [18681 18686]))                          
                        :documentation "
        Set the markevery property to subsample the plot when using markers.

        e.g., if ``every=5``, every 5-th marker will be plotted.

        Parameters
        ----------
        every : None or int or (int, int) or slice or list[int] or float or \\
(float, float) or list[bool]
            Which markers to plot.

            - ``every=None``: every point will be plotted.
            - ``every=N``: every N-th marker will be plotted starting with
              marker 0.
            - ``every=(start, N)``: every N-th marker, starting at index
              *start*, will be plotted.
            - ``every=slice(start, end, N)``: every N-th marker, starting at
              index *start*, up to but not including index *end*, will be
              plotted.
            - ``every=[i, j, m, ...]``: only markers at the given indices
              will be plotted.
            - ``every=[True, False, True, ...]``: only positions that are True
              will be plotted. The list must have the same length as the data
              points.
            - ``every=0.1``, (i.e. a float): markers will be spaced at
              approximately equal visual distances along the line; the distance
              along the line between markers is determined by multiplying the
              display-coordinate distance of the axes bounding-box diagonal
              by the value of *every*.
            - ``every=(0.5, 0.1)`` (i.e. a length-2 tuple of float): similar
              to ``every=0.1`` but the first marker will be offset along the
              line by 0.5 multiplied by the
              display-coordinate-diagonal-distance along the line.

            For examples see
            :doc:`/gallery/lines_bars_and_markers/markevery_demo`.

        Notes
        -----
        Setting *markevery* will still only draw markers at actual data points.
        While the float argument form aims for uniform visual spacing, it has
        to coerce from the ideal spacing to the nearest available data point.
        Depending on the number and distribution of data points, the result
        may still not look evenly spaced.

        When using a start offset to specify the first marker, the offset will
        be from the first data point which may be different from the first
        the visible data point if the plot is zoomed in.

        If zooming in on a plot when using float arguments then the actual
        data points that have markers will change because the distance between
        markers is always determined from the display-coordinates
        axes-bounding-box-diagonal regardless of the actual axes data limits.

        ")
                        (reparse-symbol indented_block_body) [18657 21426])
                    ("get_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21449 21453]))                          
                        :documentation "
        Return the markevery setting for marker subsampling.

        See also `~.Line2D.set_markevery`.
        ")
                        (reparse-symbol indented_block_body) [21431 21616])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21636 21640])
                            ("p" variable nil (reparse-symbol function_parameters) [21642 21643]))                          
                        :documentation "
        Set the event picker details for the line.

        Parameters
        ----------
        p : float or callable[[Artist, Event], tuple[bool, dict]]
            If a float, it is used as the pick radius in points.
        ")
                        (reparse-symbol indented_block_body) [21621 22017])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22044 22048])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22050 22058]))                          )
                        (reparse-symbol indented_block_body) [22022 22462])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22480 22484])
                            ("args" variable nil (reparse-symbol function_parameters) [22486 22491]))                          
                        :documentation "
        Set the x and y data.

        Parameters
        ----------
        *args : (2, N) array or two 1D arrays
        ")
                        (reparse-symbol indented_block_body) [22467 22778])
                    ("recache_always" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22802 22806]))                          )
                        (reparse-symbol indented_block_body) [22783 22843])
                    ("recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22860 22864])
                            ("always" variable nil (reparse-symbol function_parameters) [22866 22872]))                          )
                        (reparse-symbol indented_block_body) [22848 24525])
                    ("_transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24550 24554])
                            ("subslice" variable nil (reparse-symbol function_parameters) [24556 24564]))                          
                        :documentation "
        Put a TransformedPath instance at self._transformed_path;
        all invalidation of the transform is then handled by the
        TransformedPath instance.
        ")
                        (reparse-symbol indented_block_body) [24530 25180])
                    ("_get_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25211 25215]))                          
                        :documentation "Return this line's `~matplotlib.transforms.TransformedPath`.")
                        (reparse-symbol indented_block_body) [25185 25409])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25432 25436])
                            ("t" variable nil (reparse-symbol function_parameters) [25438 25439]))                          )
                        (reparse-symbol indented_block_body) [25414 25565])
                    ("_is_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25585 25589])
                            ("x" variable nil (reparse-symbol function_parameters) [25591 25592]))                          
                        :documentation "Return whether x is sorted in ascending order.")
                        (reparse-symbol indented_block_body) [25570 25751])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25790 25794])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25796 25804]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25756 31562])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31587 31591]))                          
                        :documentation "Return whether antialiased rendering is used.")
                        (reparse-symbol indented_block_body) [31567 31687])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31706 31710]))                          
                        :documentation "
        Return the line color.

        See also `~.Line2D.set_color`.
        ")
                        (reparse-symbol indented_block_body) [31692 31835])
                    ("get_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31858 31862]))                          
                        :documentation "
        Return the drawstyle.

        See also `~.Line2D.set_drawstyle`.
        ")
                        (reparse-symbol indented_block_body) [31840 31994])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32017 32021]))                          
                        :documentation "
        Return the linestyle.

        See also `~.Line2D.set_linestyle`.
        ")
                        (reparse-symbol indented_block_body) [31999 32153])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32176 32180]))                          
                        :documentation "
        Return the linewidth in points.

        See also `~.Line2D.set_linewidth`.
        ")
                        (reparse-symbol indented_block_body) [32158 32322])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32342 32346]))                          
                        :documentation "
        Return the line marker.

        See also `~.Line2D.set_marker`.
        ")
                        (reparse-symbol indented_block_body) [32327 32487])
                    ("get_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32516 32520]))                          
                        :documentation "
        Return the marker edge color.

        See also `~.Line2D.set_markeredgecolor`.
        ")
                        (reparse-symbol indented_block_body) [32492 33105])
                    ("get_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33134 33138]))                          
                        :documentation "
        Return the marker edge width in points.

        See also `~.Line2D.set_markeredgewidth`.
        ")
                        (reparse-symbol indented_block_body) [33110 33300])
                    ("_get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33330 33334])
                            ("alt" variable nil (reparse-symbol function_parameters) [33336 33339]))                          )
                        (reparse-symbol indented_block_body) [33305 33611])
                    ("get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33640 33644]))                          
                        :documentation "
        Return the marker face color.

        See also `~.Line2D.set_markerfacecolor`.
        ")
                        (reparse-symbol indented_block_body) [33616 33811])
                    ("get_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33843 33847]))                          
                        :documentation "
        Return the alternate marker face color.

        See also `~.Line2D.set_markerfacecoloralt`.
        ")
                        (reparse-symbol indented_block_body) [33816 34026])
                    ("get_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34050 34054]))                          
                        :documentation "
        Return the marker size in points.

        See also `~.Line2D.set_markersize`.
        ")
                        (reparse-symbol indented_block_body) [34031 34200])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34218 34222])
                            ("orig" variable nil (reparse-symbol function_parameters) [34224 34228]))                          
                        :documentation "
        Return the line data as an ``(xdata, ydata)`` pair.

        If *orig* is *True*, return the original data.
        ")
                        (reparse-symbol indented_block_body) [34205 34444])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34463 34467])
                            ("orig" variable nil (reparse-symbol function_parameters) [34469 34473]))                          
                        :documentation "
        Return the xdata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34449 34745])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34764 34768])
                            ("orig" variable nil (reparse-symbol function_parameters) [34770 34774]))                          
                        :documentation "
        Return the ydata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34750 35046])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35064 35068]))                          
                        :documentation "Return the `~matplotlib.path.Path` associated with this line.")
                        (reparse-symbol indented_block_body) [35051 35245])
                    ("get_xydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35265 35269]))                          
                        :documentation "
        Return the *xy* data as a Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [35250 35443])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35468 35472])
                            ("b" variable nil (reparse-symbol function_parameters) [35474 35475]))                          
                        :documentation "
        Set whether to use antialiased rendering.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [35448 35703])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35722 35726])
                            ("color" variable nil (reparse-symbol function_parameters) [35728 35733]))                          
                        :documentation "
        Set the color of the line.

        Parameters
        ----------
        color : color
        ")
                        (reparse-symbol indented_block_body) [35708 35957])
                    ("set_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35980 35984])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [35986 35995]))                          
                        :documentation "
        Set the drawstyle of the plot.

        The drawstyle determines how the points are connected.

        Parameters
        ----------
        drawstyle : {'default', 'steps', 'steps-pre', 'steps-mid', \\
'steps-post'}, default: 'default'
            For 'default', the points are connected with straight lines.

            The steps variants connect the points with step-like lines,
            i.e. horizontal lines with vertical steps. They differ in the
            location of the step:

            - 'steps-pre': The step is at the beginning of the line segment,
              i.e. the line will be at the y-value of point to the right.
            - 'steps-mid': The step is halfway between the points.
            - 'steps-post: The step is at the end of the line segment,
              i.e. the line will be at the y-value of the point to the left.
            - 'steps' is equal to 'steps-pre' and is maintained for
              backward-compatibility.

            For examples see :doc:`/gallery/lines_bars_and_markers/step_demo`.
        ")
                        (reparse-symbol indented_block_body) [35962 37402])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37425 37429])
                            ("w" variable nil (reparse-symbol function_parameters) [37431 37432]))                          
                        :documentation "
        Set the line width in points.

        Parameters
        ----------
        w : float
            Line width, in points.
        ")
                        (reparse-symbol indented_block_body) [37407 37865])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37888 37892])
                            ("ls" variable nil (reparse-symbol function_parameters) [37894 37896]))                          
                        :documentation "
        Set the linestyle of the line.

        Parameters
        ----------
        ls : {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
            Possible values:

            - A string:

              ==========================================  =================
              linestyle                                   description
              ==========================================  =================
              ``'-'`` or ``'solid'``                      solid line
              ``'--'`` or  ``'dashed'``                   dashed line
              ``'-.'`` or  ``'dashdot'``                  dash-dotted line
              ``':'`` or ``'dotted'``                     dotted line
              ``'none'``, ``'None'``, ``' '``, or ``''``  draw nothing
              ==========================================  =================

            - Alternatively a dash tuple of the following form can be
              provided::

                  (offset, onoffseq)

              where ``onoffseq`` is an even length tuple of on and off ink
              in points. See also :meth:`set_dashes`.

            For examples see :doc:`/gallery/lines_bars_and_markers/linestyles`.
        ")
                        (reparse-symbol indented_block_body) [37870 39733])
                    ("set_marker" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39776 39780])
                            ("marker" variable nil (reparse-symbol function_parameters) [39782 39788]))                          
                        :documentation "
        Set the line marker.

        Parameters
        ----------
        marker : marker style string, `~.path.Path` or `~.markers.MarkerStyle`
            See `~matplotlib.markers` for full description of possible
            arguments.
        ")
                        (reparse-symbol indented_block_body) [39738 40155])
                    ("_set_markercolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40181 40185])
                            ("name" variable nil (reparse-symbol function_parameters) [40187 40191])
                            ("has_rcdefault" variable nil (reparse-symbol function_parameters) [40193 40206])
                            ("val" variable nil (reparse-symbol function_parameters) [40208 40211]))                          )
                        (reparse-symbol indented_block_body) [40160 40692])
                    ("set_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40721 40725])
                            ("ec" variable nil (reparse-symbol function_parameters) [40727 40729]))                          
                        :documentation "
        Set the marker edge color.

        Parameters
        ----------
        ec : color
        ")
                        (reparse-symbol indented_block_body) [40697 40908])
                    ("set_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40937 40941])
                            ("fc" variable nil (reparse-symbol function_parameters) [40943 40945]))                          
                        :documentation "
        Set the marker face color.

        Parameters
        ----------
        fc : color
        ")
                        (reparse-symbol indented_block_body) [40913 41124])
                    ("set_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41156 41160])
                            ("fc" variable nil (reparse-symbol function_parameters) [41162 41164]))                          
                        :documentation "
        Set the alternate marker face color.

        Parameters
        ----------
        fc : color
        ")
                        (reparse-symbol indented_block_body) [41129 41357])
                    ("set_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41386 41390])
                            ("ew" variable nil (reparse-symbol function_parameters) [41392 41394]))                          
                        :documentation "
        Set the marker edge width in points.

        Parameters
        ----------
        ew : float
             Marker edge width, in points.
        ")
                        (reparse-symbol indented_block_body) [41362 41746])
                    ("set_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41770 41774])
                            ("sz" variable nil (reparse-symbol function_parameters) [41776 41778]))                          
                        :documentation "
        Set the marker size in points.

        Parameters
        ----------
        sz : float
             Marker size, in points.
        ")
                        (reparse-symbol indented_block_body) [41751 42057])
                    ("set_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42076 42080])
                            ("x" variable nil (reparse-symbol function_parameters) [42082 42083]))                          
                        :documentation "
        Set the data array for x.

        Parameters
        ----------
        x : 1D array
        ")
                        (reparse-symbol indented_block_body) [42062 42284])
                    ("set_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42303 42307])
                            ("y" variable nil (reparse-symbol function_parameters) [42309 42310]))                          
                        :documentation "
        Set the data array for y.

        Parameters
        ----------
        y : 1D array
        ")
                        (reparse-symbol indented_block_body) [42289 42511])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42531 42535])
                            ("seq" variable nil (reparse-symbol function_parameters) [42537 42540]))                          
                        :documentation "
        Set the dash sequence.

        The dash sequence is a sequence of floats of even length describing
        the length of dashes and spaces in points.

        For example, (5, 2, 1, 2) describes a sequence of 5 point and 1 point
        dashes separated by 2 point spaces.

        Parameters
        ----------
        seq : sequence of floats (on/off ink in points) or (None, None)
            If *seq* is empty or ``(None, None)``, the linestyle will be set
            to solid.
        ")
                        (reparse-symbol indented_block_body) [42516 43199])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43220 43224])
                            ("other" variable nil (reparse-symbol function_parameters) [43226 43231]))                          
                        :documentation "Copy properties from *other* to self.")
                        (reparse-symbol indented_block_body) [43204 44241])
                    ("set_dash_joinstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44292 44296])
                            ("s" variable nil (reparse-symbol function_parameters) [44298 44299]))                          
                        :documentation "
        How to join segments of the line if it `~Line2D.is_dashed`.

        The default joinstyle is :rc:`lines.dash_joinstyle`.

        Parameters
        ----------
        s : `.JoinStyle` or %(JoinStyle)s
        ")
                        (reparse-symbol indented_block_body) [44246 44664])
                    ("set_solid_joinstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44716 44720])
                            ("s" variable nil (reparse-symbol function_parameters) [44722 44723]))                          
                        :documentation "
        How to join segments if the line is solid (not `~Line2D.is_dashed`).

        The default joinstyle is :rc:`lines.solid_joinstyle`.

        Parameters
        ----------
        s : `.JoinStyle` or %(JoinStyle)s
        ")
                        (reparse-symbol indented_block_body) [44669 45100])
                    ("get_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45128 45132]))                          
                        :documentation "
        Return the `.JoinStyle` for dashed lines.

        See also `~.Line2D.set_dash_joinstyle`.
        ")
                        (reparse-symbol indented_block_body) [45105 45298])
                    ("get_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45327 45331]))                          
                        :documentation "
        Return the `.JoinStyle` for solid lines.

        See also `~.Line2D.set_solid_joinstyle`.
        ")
                        (reparse-symbol indented_block_body) [45303 45498])
                    ("set_dash_capstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45548 45552])
                            ("s" variable nil (reparse-symbol function_parameters) [45554 45555]))                          
                        :documentation "
        How to draw the end caps if the line is `~Line2D.is_dashed`.

        The default capstyle is :rc:`lines.dash_capstyle`.

        Parameters
        ----------
        s : `.CapStyle` or %(CapStyle)s
        ")
                        (reparse-symbol indented_block_body) [45503 45914])
                    ("set_solid_capstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45965 45969])
                            ("s" variable nil (reparse-symbol function_parameters) [45971 45972]))                          
                        :documentation "
        How to draw the end caps if the line is solid (not `~Line2D.is_dashed`)

        The default capstyle is :rc:`lines.solid_capstyle`.

        Parameters
        ----------
        s : `.CapStyle` or %(CapStyle)s
        ")
                        (reparse-symbol indented_block_body) [45919 46345])
                    ("get_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46372 46376]))                          
                        :documentation "
        Return the `.CapStyle` for dashed lines.

        See also `~.Line2D.set_dash_capstyle`.
        ")
                        (reparse-symbol indented_block_body) [46350 46539])
                    ("get_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46567 46571]))                          
                        :documentation "
        Return the `.CapStyle` for solid lines.

        See also `~.Line2D.set_solid_capstyle`.
        ")
                        (reparse-symbol indented_block_body) [46544 46735])
                    ("is_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46754 46758]))                          
                        :documentation "
        Return whether line has a dashed linestyle.

        A custom linestyle is assumed to be dashed, we do not inspect the
        ``onoffseq`` directly.

        See also `~.Line2D.set_linestyle`.
        ")
                        (reparse-symbol indented_block_body) [46740 47039]))                  
                :type "class")
                nil [7927 47039])
            ("_AxLine" type
               (:documentation "
    A helper class that implements `~.Axes.axline`, by recomputing the artist
    transform at draw time.
    "
                :superclasses ("Line2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [47246 47288])
                            ("if" code nil (reparse-symbol indented_block_body) [47298 47486])
                            ("self" variable nil (reparse-symbol indented_block_body) [47495 47514])
                            ("self" variable nil (reparse-symbol indented_block_body) [47523 47538])
                            ("self" variable nil (reparse-symbol indented_block_body) [47547 47562]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47204 47208])
                            ("xy1" variable nil (reparse-symbol function_parameters) [47210 47213])
                            ("xy2" variable nil (reparse-symbol function_parameters) [47215 47218])
                            ("slope" variable nil (reparse-symbol function_parameters) [47220 47225])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47227 47235]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47191 47563])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47586 47590]))                          )
                        (reparse-symbol indented_block_body) [47568 49146])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49160 49164])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49166 49174]))                          )
                        (reparse-symbol indented_block_body) [49151 49262]))                  
                :type "class")
                nil [47041 49262])
            ("VertexSelector" type
               (:documentation "
    Manage the callbacks to maintain a list of selected vertices for `.Line2D`.
    Derived classes should override the `process_selected` method to do
    something with the picks.

    Here is an example which highlights the selected verts with red
    circles::

        import numpy as np
        import matplotlib.pyplot as plt
        import matplotlib.lines as lines

        class HighlightSelected(lines.VertexSelector):
            def __init__(self, line, fmt='ro', **kwargs):
                lines.VertexSelector.__init__(self, line)
                self.markers, = self.axes.plot([], [], fmt, **kwargs)

            def process_selected(self, ind, xs, ys):
                self.markers.set_data(xs, ys)
                self.canvas.draw()

        fig, ax = plt.subplots()
        x, y = np.random.rand(2, 30)
        line, = ax.plot(x, y, 'bs-', picker=5)

        selector = HighlightSelected(line)
        plt.show()

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the class with a `.Line2D`.  The line should already be
        added to an `~.axes.Axes` and should have the picker property set.
        \"\"\"" code nil (reparse-symbol indented_block_body) [50273 50438])
                            ("if" code nil (reparse-symbol indented_block_body) [50447 50543])
                            ("if" code nil (reparse-symbol indented_block_body) [50552 50701])
                            ("self" variable nil (reparse-symbol indented_block_body) [50710 50731])
                            ("self" variable nil (reparse-symbol indented_block_body) [50740 50756])
                            ("self" variable nil (reparse-symbol indented_block_body) [50765 50802])
                            ("self" variable nil (reparse-symbol indented_block_body) [50811 50872])
                            ("self" variable nil (reparse-symbol indented_block_body) [50882 50898]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50252 50256])
                            ("line" variable nil (reparse-symbol function_parameters) [50258 50262]))                          
                        :documentation "
        Initialize the class with a `.Line2D`.  The line should already be
        added to an `~.axes.Axes` and should have the picker property set.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50239 50899])
                    ("process_selected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50925 50929])
                            ("ind" variable nil (reparse-symbol function_parameters) [50931 50934])
                            ("xs" variable nil (reparse-symbol function_parameters) [50936 50938])
                            ("ys" variable nil (reparse-symbol function_parameters) [50940 50942]))                          
                        :documentation "
        Default \"do nothing\" implementation of the `process_selected` method.

        Parameters
        ----------
        ind : list of int
            The indices of the selected vertices.
        xs, ys : array-like
            The coordinates of the selected vertices.
        ")
                        (reparse-symbol indented_block_body) [50904 51257])
                    ("onpick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51273 51277])
                            ("event" variable nil (reparse-symbol function_parameters) [51279 51284]))                          
                        :documentation "When the line is picked, update the set of selected indices.")
                        (reparse-symbol indented_block_body) [51262 51592]))                  
                :type "class")
                nil [49264 51592])
            ("lineStyles" variable nil nil [51594 51625])
            ("lineMarkers" variable nil nil [51626 51659])
            ("drawStyles" variable nil nil [51660 51690])
            ("fillStyles" variable nil nil [51691 51726]))          
      :file "lines.py"
      :pointmax 51727
      :fsize 51726
      :lastmodtime '(25218 25732 305269 252000)
      :unmatched-syntax '((INDENT_BLOCK 40625 . 40659) (NEWLINE 40624 . 40625) (COLON 40623 . 40624) (IF 40571 . 40573) (IF 40584 . 40586) (ELSE 40615 . 40619) (NAME 40250 . 40253) (IF 40282 . 40284) (ELSE 40299 . 40303) (NAME 33433 . 33435) (IF 33463 . 33465) (ELSE 33470 . 33474) (INDENT_BLOCK 7358 . 7507) (NEWLINE 7357 . 7358) (COLON 7356 . 7357) (TRY 7229 . 7232) (AS 7350 . 7352) (FROM 666 . 670) (PERIOD 671 . 672) (FROM 646 . 650) (PERIOD 651 . 652) (FROM 521 . 525) (PERIOD 526 . 527) (FROM 458 . 462) (PERIOD 463 . 464) (FROM 435 . 439) (PERIOD 440 . 441) (FROM 402 . 406) (PERIOD 407 . 408) (FROM 310 . 314) (PERIOD 315 . 316) (FROM 262 . 266) (PERIOD 267 . 268) (FROM 188 . 192) (PERIOD 193 . 194)))
    (semanticdb-table "semanticdb-table-157fb346cf34"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for including text in a figure.
\"\"\"" code nil nil [1 48])
            ("logging" include nil nil [50 64])
            ("math" include nil nil [65 76])
            ("weakref" include nil nil [77 91])
            ("numpy" include nil nil [93 111])
            ("matplotlib" include nil nil [113 137])
            ("docstring" include nil nil [145 182])
            ("cbook" include nil nil [145 182])
            ("artist" include nil nil [145 182])
            ("_api" include nil nil [145 182])
            ("Artist" include nil nil [196 209])
            ("FontProperties" include nil nil [229 250])
            ("Rectangle" include nil nil [265 314])
            ("FancyBboxPatch" include nil nil [265 314])
            ("FancyArrowPatch" include nil nil [265 314])
            ("TextPath" include nil nil [330 345])
            ("" code nil nil [405 483])
            ("_log" variable nil nil [486 520])
            ("get_rotation" function
               (:documentation "
    Return *rotation* normalized to an angle between 0 and 360 degrees.

    Parameters
    ----------
    rotation : float or {None, 'horizontal', 'vertical'}
        Rotation angle in degrees. *None* and 'horizontal' equal 0,
        'vertical' equals 90.

    Returns
    -------
    float
    "
                :arguments 
                  ( ("rotation" variable nil (reparse-symbol function_parameters) [594 602]))                  )
                nil [577 1391])
            ("_get_textbox" function
               (:documentation "
    Calculate the bounding box of the text.

    The bbox position takes text rotation into account, but the width and
    height are those of the unrotated box (unlike `.Text.get_window_extent`).
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [1410 1414])
                    ("renderer" variable nil (reparse-symbol function_parameters) [1416 1424]))                  )
                nil [1393 2637])
            ("" code nil nil [2680 3058])
            ("Text" type
               (:documentation "Handle storing and drawing of text in window or data coordinates."
                :superclasses ("Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [3160 3170])
                    ("_cached" variable nil (reparse-symbol indented_block_body) [3175 3202])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3221 3225]))                          )
                        (reparse-symbol indented_block_body) [3208 3301])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a `.Text` instance at *x*, *y* with string *text*.

        Valid keyword arguments are:

        %(Text:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [3989 4132])
                            ("super" code nil (reparse-symbol indented_block_body) [4141 4159])
                            ("self, self" code nil (reparse-symbol indented_block_body) [4168 4191])
                            ("self" variable nil (reparse-symbol indented_block_body) [4200 4215])
                            ("self" code nil (reparse-symbol indented_block_body) [4224 4243])
                            ("self" code nil (reparse-symbol indented_block_body) [4252 4339])
                            ("self" code nil (reparse-symbol indented_block_body) [4348 4387])
                            ("self" code nil (reparse-symbol indented_block_body) [4396 4419])
                            ("self" code nil (reparse-symbol indented_block_body) [4428 4459])
                            ("self" code nil (reparse-symbol indented_block_body) [4468 4487])
                            ("self" code nil (reparse-symbol indented_block_body) [4496 4541])
                            ("self" code nil (reparse-symbol indented_block_body) [4550 4599])
                            ("self" variable nil (reparse-symbol indented_block_body) [4608 4645])
                            ("self" variable nil (reparse-symbol indented_block_body) [4654 4679])
                            ("self" variable nil (reparse-symbol indented_block_body) [4688 4741])
                            ("self" variable nil (reparse-symbol indented_block_body) [4750 4773])
                            ("self" variable nil (reparse-symbol indented_block_body) [4811 4832])
                            ("if" code nil (reparse-symbol indented_block_body) [4841 4924])
                            ("self" variable nil (reparse-symbol indented_block_body) [4932 4963])
                            ("self" code nil (reparse-symbol indented_block_body) [4972 5009])
                            ("self" code nil (reparse-symbol indented_block_body) [5018 5037]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3319 3323])
                            ("x" variable nil (reparse-symbol function_parameters) [3342 3343])
                            ("y" variable nil (reparse-symbol function_parameters) [3347 3348])
                            ("text" variable nil (reparse-symbol function_parameters) [3352 3356])
                            ("color" variable nil (reparse-symbol function_parameters) [3378 3383])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [3441 3458])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [3488 3507])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [3533 3547])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [3571 3585])
                            ("rotation" variable nil (reparse-symbol function_parameters) [3641 3649])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [3673 3684])
                            ("rotation_mode" variable nil (reparse-symbol function_parameters) [3708 3721])
                            ("usetex" variable nil (reparse-symbol function_parameters) [3745 3751])
                            ("wrap" variable nil (reparse-symbol function_parameters) [3822 3826])
                            ("transform_rotates_text" variable nil (reparse-symbol function_parameters) [3851 3873])
                            ("parse_math" variable nil (reparse-symbol function_parameters) [3918 3928])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3952 3960]))                          
                        :documentation "
        Create a `.Text` instance at *x*, *y* with string *text*.

        Valid keyword arguments are:

        %(Text:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3306 5038])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5054 5058])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5060 5066]))                          )
                        (reparse-symbol indented_block_body) [5043 5654])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5676 5680]))                          )
                        (reparse-symbol indented_block_body) [5659 5818])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5836 5840])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [5842 5852]))                          
                        :documentation "
        Return whether the mouse event occurred inside the axis-aligned
        bounding-box of the text.
        ")
                        (reparse-symbol indented_block_body) [5823 6940])
                    ("_get_xy_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6965 6969]))                          
                        :documentation "
        Get the (possibly unit converted) transformed x, y in display coords.
        ")
                        (reparse-symbol indented_block_body) [6945 7172])
                    ("_get_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7201 7205]))                          )
                        (reparse-symbol indented_block_body) [7177 7352])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7374 7378]))                          
                        :documentation "Return the text angle in degrees between 0 and 360.")
                        (reparse-symbol indented_block_body) [7357 7818])
                    ("get_transform_rotates_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7854 7858]))                          
                        :documentation "
        Return whether rotations of the transform affect the text direction.
        ")
                        (reparse-symbol indented_block_body) [7823 8006])
                    ("set_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8033 8037])
                            ("m" variable nil (reparse-symbol function_parameters) [8039 8040]))                          
                        :documentation "
        Set text rotation mode.

        Parameters
        ----------
        m : {None, 'default', 'anchor'}
            If ``None`` or ``\"default\"``, the text will be first rotated, then
            aligned according to their horizontal and vertical alignments.  If
            ``\"anchor\"``, then alignment occurs before rotation.
        ")
                        (reparse-symbol indented_block_body) [8011 8532])
                    ("get_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8559 8563]))                          
                        :documentation "Return the text rotation mode.")
                        (reparse-symbol indented_block_body) [8537 8646])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8667 8671])
                            ("other" variable nil (reparse-symbol function_parameters) [8673 8678]))                          )
                        (reparse-symbol indented_block_body) [8651 9273])
                    ("_get_layout_cache_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9304 9308])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9310 9318]))                          
                        :documentation "
        Return a hashable tuple of properties that lets `_get_layout` know
        whether a previously computed layout can be reused.
        ")
                        (reparse-symbol indented_block_body) [9278 9891])
                    ("_get_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9912 9916])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9918 9926]))                          
                        :documentation "
        Return the extent (bbox) of the text together with
        multiple-alignment information. Note that it returns an extent
        of a rotated text when necessary.
        ")
                        (reparse-symbol indented_block_body) [9896 15284])
                    ("set_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15302 15306])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [15308 15317]))                          
                        :documentation "
        Draw a bounding box around self.

        Parameters
        ----------
        rectprops : dict with properties for `.patches.FancyBboxPatch`
             The default boxstyle is 'square'. The mutation
             scale of the `.patches.FancyBboxPatch` is set to the fontsize.

        Examples
        --------
        ::

            t.set_bbox(dict(facecolor='red', alpha=0.5))
        ")
                        (reparse-symbol indented_block_body) [15289 16597])
                    ("get_bbox_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16621 16625]))                          
                        :documentation "
        Return the bbox Patch, or None if the `.patches.FancyBboxPatch`
        is not made.
        ")
                        (reparse-symbol indented_block_body) [16602 16777])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16812 16816])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16818 16826]))                          
                        :documentation "
        Update the location and the size of the bbox.

        This method should be used when the position and size of the bbox needs
        to be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [16782 17814])
                    ("_update_clip_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17847 17851]))                          )
                        (reparse-symbol indented_block_body) [17819 18076])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18098 18102])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [18104 18111]))                          )
                        (reparse-symbol indented_block_body) [18081 18222])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18245 18249])
                            ("path" variable nil (reparse-symbol function_parameters) [18251 18255])
                            ("transform" variable nil (reparse-symbol function_parameters) [18257 18266]))                          )
                        (reparse-symbol indented_block_body) [18227 18391])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18412 18416])
                            ("b" variable nil (reparse-symbol function_parameters) [18418 18419]))                          )
                        (reparse-symbol indented_block_body) [18396 18523])
                    ("get_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18541 18545]))                          
                        :documentation "Return whether the text can be wrapped.")
                        (reparse-symbol indented_block_body) [18528 18628])
                    ("set_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18646 18650])
                            ("wrap" variable nil (reparse-symbol function_parameters) [18652 18656]))                          
                        :documentation "
        Set whether the text can be wrapped.

        Parameters
        ----------
        wrap : bool

        Notes
        -----
        Wrapping does not work together with
        ``savefig(..., bbox_inches='tight')`` (which is also used internally
        by ``%matplotlib inline`` in IPython/Jupyter). The 'tight' setting
        rescales the canvas to accommodate all content and happens before
        wrapping.
        ")
                        (reparse-symbol indented_block_body) [18633 19131])
                    ("_get_wrap_line_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19161 19165]))                          
                        :documentation "
        Return the maximum line width for wrapping text based on the current
        orientation.
        ")
                        (reparse-symbol indented_block_body) [19136 19989])
                    ("_get_dist_to_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20015 20019])
                            ("rotation" variable nil (reparse-symbol function_parameters) [20021 20029])
                            ("x0" variable nil (reparse-symbol function_parameters) [20031 20033])
                            ("y0" variable nil (reparse-symbol function_parameters) [20035 20037])
                            ("figure_box" variable nil (reparse-symbol function_parameters) [20039 20049]))                          
                        :documentation "
        Return the distance from the given points to the boundaries of a
        rotated box, in pixels.
        ")
                        (reparse-symbol indented_block_body) [19994 20916])
                    ("_get_rendered_text_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20950 20954])
                            ("text" variable nil (reparse-symbol function_parameters) [20956 20960]))                          
                        :documentation "
        Return the width of a given text string, in pixels.
        ")
                        (reparse-symbol indented_block_body) [20921 21215])
                    ("_get_wrapped_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21242 21246]))                          
                        :documentation "
        Return a copy of the text string with new lines added so that the text
        is wrapped relative to the parent figure (if `get_wrap` is True).
        ")
                        (reparse-symbol indented_block_body) [21220 23247])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23293 23297])
                            ("renderer" variable nil (reparse-symbol function_parameters) [23299 23307]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23252 25847])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25866 25870]))                          
                        :documentation "Return the color of the text.")
                        (reparse-symbol indented_block_body) [25852 25944])
                    ("get_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25972 25976]))                          
                        :documentation "Return the `.font_manager.FontProperties`.")
                        (reparse-symbol indented_block_body) [25949 26072])
                    ("get_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26096 26100]))                          
                        :documentation "
        Return the list of font families used for font lookup.

        See Also
        --------
        .font_manager.FontProperties.get_family
        ")
                        (reparse-symbol indented_block_body) [26077 26322])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26344 26348]))                          
                        :documentation "
        Return the font name as a string.

        See Also
        --------
        .font_manager.FontProperties.get_name
        ")
                        (reparse-symbol indented_block_body) [26327 26545])
                    ("get_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26568 26572]))                          
                        :documentation "
        Return the font style as a string.

        See Also
        --------
        .font_manager.FontProperties.get_style
        ")
                        (reparse-symbol indented_block_body) [26550 26772])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26794 26798]))                          
                        :documentation "
        Return the font size as an integer.

        See Also
        --------
        .font_manager.FontProperties.get_size_in_points
        ")
                        (reparse-symbol indented_block_body) [26777 27017])
                    ("get_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27042 27046]))                          
                        :documentation "
        Return the font variant as a string.

        See Also
        --------
        .font_manager.FontProperties.get_variant
        ")
                        (reparse-symbol indented_block_body) [27022 27252])
                    ("get_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27276 27280]))                          
                        :documentation "
        Return the font weight as a string or a number.

        See Also
        --------
        .font_manager.FontProperties.get_weight
        ")
                        (reparse-symbol indented_block_body) [27257 27495])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27516 27520]))                          
                        :documentation "
        Return the font stretch as a string or a number.

        See Also
        --------
        .font_manager.FontProperties.get_stretch
        ")
                        (reparse-symbol indented_block_body) [27500 27738])
                    ("get_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27771 27775]))                          
                        :documentation "
        Return the horizontal alignment as a string.  Will be one of
        'left', 'center' or 'right'.
        ")
                        (reparse-symbol indented_block_body) [27743 27949])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27980 27984]))                          
                        :documentation "Return the (x, y) unitless position of the text.")
                        (reparse-symbol indented_block_body) [27954 28322])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28344 28348]))                          
                        :documentation "Return the (x, y) position of the text.")
                        (reparse-symbol indented_block_body) [28327 28553])
                    ("" code nil (reparse-symbol indented_block_body) [28644 28651])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28673 28677])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28679 28687]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [28656 29418])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29436 29440]))                          
                        :documentation "Return the text string.")
                        (reparse-symbol indented_block_body) [29423 29507])
                    ("get_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29538 29542]))                          
                        :documentation "
        Return the vertical alignment as a string.  Will be one of
        'top', 'center', 'bottom', 'baseline' or 'center_baseline'.
        ")
                        (reparse-symbol indented_block_body) [29512 29743])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29770 29774])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29776 29784])
                            ("dpi" variable nil (reparse-symbol function_parameters) [29791 29794]))                          
                        :documentation "
        Return the `.Bbox` bounding the text, in display units.

        In addition to being used internally, this is useful for specifying
        clickable regions in a png file on a web page.

        Parameters
        ----------
        renderer : Renderer, optional
            A renderer is needed to compute the bounding box.  If the artist
            has already been drawn, the renderer is cached; thus, it is only
            necessary to pass this argument when calling `get_window_extent`
            before the first `draw`.  In practice, it is usually easier to
            trigger a draw first (e.g. by saving the figure).

        dpi : float, optional
            The dpi value for computing the bbox, defaults to
            ``self.figure.dpi`` (*not* the renderer dpi); should be set e.g. if
            to match regions with a figure saved with a custom dpi value.
        ")
                        (reparse-symbol indented_block_body) [29748 31596])
                    ("set_backgroundcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31625 31629])
                            ("color" variable nil (reparse-symbol function_parameters) [31631 31636]))                          
                        :documentation "
        Set the background color of the text by updating the bbox.

        Parameters
        ----------
        color : color

        See Also
        --------
        .set_bbox : To change the position of the bounding box
        ")
                        (reparse-symbol indented_block_body) [31601 32131])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32150 32154])
                            ("color" variable nil (reparse-symbol function_parameters) [32156 32161]))                          
                        :documentation "
        Set the foreground color of the text

        Parameters
        ----------
        color : color
        ")
                        (reparse-symbol indented_block_body) [32136 32784])
                    ("set_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32817 32821])
                            ("align" variable nil (reparse-symbol function_parameters) [32823 32828]))                          
                        :documentation "
        Set the horizontal alignment to one of

        Parameters
        ----------
        align : {'center', 'right', 'left'}
        ")
                        (reparse-symbol indented_block_body) [32789 33122])
                    ("set_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33150 33154])
                            ("align" variable nil (reparse-symbol function_parameters) [33156 33161]))                          
                        :documentation "
        Set the text alignment for multiline texts.

        The layout of the bounding box of all the lines is determined by the
        horizontalalignment and verticalalignment properties. This property
        controls the alignment of the text lines within that box.

        Parameters
        ----------
        align : {'left', 'right', 'center'}
        ")
                        (reparse-symbol indented_block_body) [33127 33675])
                    ("set_linespacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33700 33704])
                            ("spacing" variable nil (reparse-symbol function_parameters) [33706 33713]))                          
                        :documentation "
        Set the line spacing as a multiple of the font size.

        The default line spacing is 1.2.

        Parameters
        ----------
        spacing : float (multiple of font size)
        ")
                        (reparse-symbol indented_block_body) [33680 33992])
                    ("set_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34016 34020])
                            ("fontname" variable nil (reparse-symbol function_parameters) [34022 34030]))                          
                        :documentation "
        Set the font family.  May be either a single string, or a list of
        strings in decreasing priority.  Each string may be either a real font
        name or a generic font class name.  If the latter, the specific font
        names will be looked up in the corresponding rcParams.

        If a `Text` instance is constructed with ``fontfamily=None``, then the
        font is set to :rc:`font.family`, and the
        same is done when `set_fontfamily()` is called on an existing
        `Text` instance.

        Parameters
        ----------
        fontname : {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', \\
'monospace'}

        See Also
        --------
        .font_manager.FontProperties.set_family
        ")
                        (reparse-symbol indented_block_body) [33997 34863])
                    ("set_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34888 34892])
                            ("variant" variable nil (reparse-symbol function_parameters) [34894 34901]))                          
                        :documentation "
        Set the font variant.

        Parameters
        ----------
        variant : {'normal', 'small-caps'}

        See Also
        --------
        .font_manager.FontProperties.set_variant
        ")
                        (reparse-symbol indented_block_body) [34868 35200])
                    ("set_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35223 35227])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [35229 35238]))                          
                        :documentation "
        Set the font style.

        Parameters
        ----------
        fontstyle : {'normal', 'italic', 'oblique'}

        See Also
        --------
        .font_manager.FontProperties.set_style
        ")
                        (reparse-symbol indented_block_body) [35205 35542])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35564 35568])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [35570 35578]))                          
                        :documentation "
        Set the font size.

        Parameters
        ----------
        fontsize : float or {'xx-small', 'x-small', 'small', 'medium', \\
'large', 'x-large', 'xx-large'}
            If float, the fontsize in points. The string values denote sizes
            relative to the default font size.

        See Also
        --------
        .font_manager.FontProperties.set_size
        ")
                        (reparse-symbol indented_block_body) [35547 36055])
                    ("get_math_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36084 36088]))                          
                        :documentation "
        Return the font family name for math text rendered by Matplotlib.

        The default value is :rc:`mathtext.fontset`.

        See Also
        --------
        set_math_fontfamily
        ")
                        (reparse-symbol indented_block_body) [36060 36364])
                    ("set_math_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36393 36397])
                            ("fontfamily" variable nil (reparse-symbol function_parameters) [36399 36409]))                          
                        :documentation "
        Set the font family for math text rendered by Matplotlib.

        This does only affect Matplotlib's own math renderer. It has no effect
        when rendering with TeX (``usetex=True``).

        Parameters
        ----------
        fontfamily : str
            The name of the font family.

            Available font families are defined in the
            :ref:`matplotlibrc.template file
            <customizing-with-matplotlibrc-files>`.

        See Also
        --------
        get_math_fontfamily
        ")
                        (reparse-symbol indented_block_body) [36369 37015])
                    ("set_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37039 37043])
                            ("weight" variable nil (reparse-symbol function_parameters) [37045 37051]))                          
                        :documentation "
        Set the font weight.

        Parameters
        ----------
        weight : {a numeric value in range 0-1000, 'ultralight', 'light', \\
'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', \\
'demi', 'bold', 'heavy', 'extra bold', 'black'}

        See Also
        --------
        .font_manager.FontProperties.set_weight
        ")
                        (reparse-symbol indented_block_body) [37020 37501])
                    ("set_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37526 37530])
                            ("stretch" variable nil (reparse-symbol function_parameters) [37532 37539]))                          
                        :documentation "
        Set the font stretch (horizontal condensation or expansion).

        Parameters
        ----------
        stretch : {a numeric value in range 0-1000, 'ultra-condensed', \\
'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', \\
'expanded', 'extra-expanded', 'ultra-expanded'}

        See Also
        --------
        .font_manager.FontProperties.set_stretch
        ")
                        (reparse-symbol indented_block_body) [37506 38034])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38056 38060])
                            ("xy" variable nil (reparse-symbol function_parameters) [38062 38064]))                          
                        :documentation "
        Set the (*x*, *y*) position of the text.

        Parameters
        ----------
        xy : (float, float)
        ")
                        (reparse-symbol indented_block_body) [38039 38259])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38274 38278])
                            ("x" variable nil (reparse-symbol function_parameters) [38280 38281]))                          
                        :documentation "
        Set the *x* position of the text.

        Parameters
        ----------
        x : float
        ")
                        (reparse-symbol indented_block_body) [38264 38453])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38468 38472])
                            ("y" variable nil (reparse-symbol function_parameters) [38474 38475]))                          
                        :documentation "
        Set the *y* position of the text.

        Parameters
        ----------
        y : float
        ")
                        (reparse-symbol indented_block_body) [38458 38647])
                    ("set_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38669 38673])
                            ("s" variable nil (reparse-symbol function_parameters) [38675 38676]))                          
                        :documentation "
        Set the rotation of the text.

        Parameters
        ----------
        s : float or {'vertical', 'horizontal'}
            The rotation angle in degrees in mathematically positive direction
            (counterclockwise). 'horizontal' equals 0, 'vertical' equals 90.
        ")
                        (reparse-symbol indented_block_body) [38652 39037])
                    ("set_transform_rotates_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39073 39077])
                            ("t" variable nil (reparse-symbol function_parameters) [39079 39080]))                          
                        :documentation "
        Whether rotations of the transform affect the text direction.

        Parameters
        ----------
        t : bool
        ")
                        (reparse-symbol indented_block_body) [39042 39300])
                    ("set_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39331 39335])
                            ("align" variable nil (reparse-symbol function_parameters) [39337 39342]))                          
                        :documentation "
        Set the vertical alignment.

        Parameters
        ----------
        align : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
        ")
                        (reparse-symbol indented_block_body) [39305 39710])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39728 39732])
                            ("s" variable nil (reparse-symbol function_parameters) [39734 39735]))                          )
                        (reparse-symbol indented_block_body) [39715 40190])
                    ("_preprocess_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40216 40220])
                            ("s" variable nil (reparse-symbol function_parameters) [40222 40223]))                          
                        :documentation "
        Return the string *s* after mathtext preprocessing, and the kind of
        mathtext support needed.

        - If *self* is configured to use TeX, return *s* unchanged except that
          a single space gets escaped, and the flag \"TeX\".
        - Otherwise, if *s* is mathtext (has an even number of unescaped dollar
          signs) and ``parse_math`` is not set to False, return *s* and the
          flag True.
        - Otherwise, return *s* with dollar signs unescaped, and the flag
          False.
        ")
                        (reparse-symbol indented_block_body) [40195 41068])
                    ("set_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41096 41100])
                            ("fp" variable nil (reparse-symbol function_parameters) [41102 41104]))                          
                        :documentation "
        Set the font properties that control the text.

        Parameters
        ----------
        fp : `.font_manager.FontProperties` or `str` or `pathlib.Path`
            If a `str`, it is interpreted as a fontconfig pattern parsed by
            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the
            absolute path to a font file.
        ")
                        (reparse-symbol indented_block_body) [41073 41585])
                    ("set_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41605 41609])
                            ("usetex" variable nil (reparse-symbol function_parameters) [41611 41617]))                          
                        :documentation "
        Parameters
        ----------
        usetex : bool or None
            Whether to render using TeX, ``None`` means to use
            :rc:`text.usetex`.
        ")
                        (reparse-symbol indented_block_body) [41590 41968])
                    ("get_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41988 41992]))                          
                        :documentation "Return whether this `Text` object uses TeX for rendering.")
                        (reparse-symbol indented_block_body) [41973 42095])
                    ("set_parse_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42119 42123])
                            ("parse_math" variable nil (reparse-symbol function_parameters) [42125 42135]))                          
                        :documentation "
        Override switch to disable any mathtext parsing for this `Text`.

        Parameters
        ----------
        parse_math : bool
            If False, this `Text` will never use mathtext.  If True, mathtext
            will be used if there is an even number of unescaped dollar signs.
        ")
                        (reparse-symbol indented_block_body) [42100 42501])
                    ("get_parse_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42525 42529]))                          
                        :documentation "Return whether mathtext parsing is considered for this `Text`.")
                        (reparse-symbol indented_block_body) [42506 42641])
                    ("set_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42663 42667])
                            ("fontname" variable nil (reparse-symbol function_parameters) [42669 42677]))                          
                        :documentation "
        Alias for `set_family`.

        One-way alias only: the getter differs.

        Parameters
        ----------
        fontname : {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', \\
'monospace'}

        See Also
        --------
        .font_manager.FontProperties.set_family

        ")
                        (reparse-symbol indented_block_body) [42646 43039]))                  
                :type "class")
                nil [3059 43039])
            ("OffsetFrom" type
               (:documentation "Callable helper class for working with `Annotation`."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        artist : `.Artist` or `.BboxBase` or `.Transform`
            The object to compute the offset from.

        ref_coord : (float, float)
            If *artist* is an `.Artist` or `.BboxBase`, this values is
            the location to of the offset origin in fractions of the
            *artist* bounding box.

            If *artist* is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}, default: 'points'
            The screen units to use (pixels or points) for the offset input.
        \"\"\"" code nil (reparse-symbol indented_block_body) [43189 43805])
                            ("self" variable nil (reparse-symbol indented_block_body) [43814 43835])
                            ("self" variable nil (reparse-symbol indented_block_body) [43844 43871])
                            ("self" code nil (reparse-symbol indented_block_body) [43880 43899]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43140 43144])
                            ("artist" variable nil (reparse-symbol function_parameters) [43146 43152])
                            ("ref_coord" variable nil (reparse-symbol function_parameters) [43154 43163])
                            ("unit" variable nil (reparse-symbol function_parameters) [43165 43169]))                          
                        :documentation "
        Parameters
        ----------
        artist : `.Artist` or `.BboxBase` or `.Transform`
            The object to compute the offset from.

        ref_coord : (float, float)
            If *artist* is an `.Artist` or `.BboxBase`, this values is
            the location to of the offset origin in fractions of the
            *artist* bounding box.

            If *artist* is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}, default: 'points'
            The screen units to use (pixels or points) for the offset input.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43127 43900])
                    ("set_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43918 43922])
                            ("unit" variable nil (reparse-symbol function_parameters) [43924 43928]))                          
                        :documentation "
        Set the unit for input to the transform used by ``__call__``.

        Parameters
        ----------
        unit : {'points', 'pixels'}
        ")
                        (reparse-symbol indented_block_body) [43905 44186])
                    ("get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44204 44208]))                          
                        :documentation "Return the unit for input to the transform used by ``__call__``.")
                        (reparse-symbol indented_block_body) [44191 44316])
                    ("_get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44336 44340])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44342 44350]))                          )
                        (reparse-symbol indented_block_body) [44321 44498])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44516 44520])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44522 44530]))                          
                        :documentation "
        Return the offset transform.

        Parameters
        ----------
        renderer : `RendererBase`
            The renderer to use to compute the offset

        Returns
        -------
        `Transform`
            Maps (x, y) in pixel or point units to screen units
            relative to the given artist.
        ")
                        (reparse-symbol indented_block_body) [44503 45589]))                  
                :type "class")
                nil [43041 45589])
            ("_AnnotationBase" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [45741 45753])
                            ("self" variable nil (reparse-symbol indented_block_body) [45762 45786])
                            ("self" code nil (reparse-symbol indented_block_body) [45795 45836])
                            ("self" variable nil (reparse-symbol indented_block_body) [45846 45868]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45631 45635])
                            ("xy" variable nil (reparse-symbol function_parameters) [45654 45656])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [45675 45683])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [45709 45724]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45618 45869])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45886 45890])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45892 45900])
                            ("x" variable nil (reparse-symbol function_parameters) [45902 45903])
                            ("y" variable nil (reparse-symbol function_parameters) [45905 45906])
                            ("s" variable nil (reparse-symbol function_parameters) [45908 45909]))                          )
                        (reparse-symbol indented_block_body) [45874 46219])
                    ("_get_xy_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46246 46250])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46252 46260])
                            ("s" variable nil (reparse-symbol function_parameters) [46262 46263]))                          )
                        (reparse-symbol indented_block_body) [46224 49179])
                    ("_get_ref_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49200 49204])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49206 49214]))                          
                        :documentation "
        Return x, y (in display coordinates) that is to be used for a reference
        of any offset coordinate.
        ")
                        (reparse-symbol indented_block_body) [49184 49418])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49804 49808])
                            ("b" variable nil (reparse-symbol function_parameters) [49810 49811]))                          
                        :documentation "
        Set the annotation's clipping behavior.

        Parameters
        ----------
        b : bool or None
            - True: the annotation will only be drawn when ``self.xy`` is
              inside the axes.
            - False: the annotation will always be drawn regardless of its
              position.
            - None: the ``self.xy`` will be checked only if *xycoords* is
              \"data\".
        ")
                        (reparse-symbol indented_block_body) [49780 50284])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50313 50317]))                          
                        :documentation "
        Return the annotation's clipping behavior.

        See `set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [50289 50501])
                    ("_get_position_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50527 50531])
                            ("renderer" variable nil (reparse-symbol function_parameters) [50533 50541]))                          
                        :documentation "Return the pixel position of the annotated point.")
                        (reparse-symbol indented_block_body) [50506 50690])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50709 50713])
                            ("renderer" variable nil (reparse-symbol function_parameters) [50715 50723]))                          
                        :documentation "Check whether the annotation at *xy_pixel* should be drawn.")
                        (reparse-symbol indented_block_body) [50695 51076])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51095 51099])
                            ("state" variable nil (reparse-symbol function_parameters) [51101 51106])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [51113 51121]))                          
                        :documentation "
        Set whether the annotation is draggable with the mouse.

        Parameters
        ----------
        state : bool or None
            - True or False: set the draggability.
            - None: toggle the draggability.

        Returns
        -------
        DraggableAnnotation or None
            If the annotation is draggable, the corresponding
            `.DraggableAnnotation` helper is returned.
        ")
                        (reparse-symbol indented_block_body) [51081 52083]))                  
                :type "class")
                nil [45591 52083])
            ("Annotation" type
               (:documentation "
    An `.Annotation` is a `.Text` that can refer to a specific position *xy*.
    Optionally an arrow pointing from the text to *xy* can be drawn.

    Attributes
    ----------
    xy
        The annotated position.
    xycoords
        The coordinate system for *xy*.
    arrow_patch
        A `.FancyArrowPatch` to point from *xytext* to *xy*.
    "
                :superclasses ("Text" "_AnnotationBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52506 52510]))                          )
                        (reparse-symbol indented_block_body) [52494 52592])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Annotate the point *xy* with text *text*.

        In the simplest form, the text is placed at *xy*.

        Optionally, the text can be displayed in another position *xytext*.
        An arrow pointing from the text to the annotated point *xy* can then
        be added by defining *arrowprops*.

        Parameters
        ----------
        text : str
            The text of the annotation.

        xy : (float, float)
            The point *(x, y)* to annotate. The coordinate system is determined
            by *xycoords*.

        xytext : (float, float), default: *xy*
            The position *(x, y)* to place the text at. The coordinate system
            is determined by *textcoords*.

        xycoords : str or `.Artist` or `.Transform` or callable or \\
(float, float), default: 'data'

            The coordinate system that *xy* is given in. The following types
            of values are supported:

            - One of the following strings:

              ==================== ============================================
              Value                Description
              ==================== ============================================
              'figure points'      Points from the lower left of the figure
              'figure pixels'      Pixels from the lower left of the figure
              'figure fraction'    Fraction of figure from lower left
              'subfigure points'   Points from the lower left of the subfigure
              'subfigure pixels'   Pixels from the lower left of the subfigure
              'subfigure fraction' Fraction of subfigure from lower left
              'axes points'        Points from lower left corner of axes
              'axes pixels'        Pixels from lower left corner of axes
              'axes fraction'      Fraction of axes from lower left
              'data'               Use the coordinate system of the object
                                   being annotated (default)
              'polar'              *(theta, r)* if not native 'data'
                                   coordinates
              ==================== ============================================

              Note that 'subfigure pixels' and 'figure pixels' are the same
              for the parent figure, so users who want code that is usable in
              a subfigure can use 'subfigure pixels'.

            - An `.Artist`: *xy* is interpreted as a fraction of the artist's
              `~matplotlib.transforms.Bbox`. E.g. *(0, 0)* would be the lower
              left corner of the bounding box and *(0.5, 1)* would be the
              center top of the bounding box.

            - A `.Transform` to transform *xy* to screen coordinates.

            - A function with one of the following signatures::

                def transform(renderer) -> Bbox
                def transform(renderer) -> Transform

              where *renderer* is a `.RendererBase` subclass.

              The result of the function is interpreted like the `.Artist` and
              `.Transform` cases above.

            - A tuple *(xcoords, ycoords)* specifying separate coordinate
              systems for *x* and *y*. *xcoords* and *ycoords* must each be
              of one of the above described types.

            See :ref:`plotting-guide-annotation` for more details.

        textcoords : str or `.Artist` or `.Transform` or callable or \\
(float, float), default: value of *xycoords*
            The coordinate system that *xytext* is given in.

            All *xycoords* values are valid as well as the following
            strings:

            =================   =========================================
            Value               Description
            =================   =========================================
            'offset points'     Offset (in points) from the *xy* value
            'offset pixels'     Offset (in pixels) from the *xy* value
            =================   =========================================

        arrowprops : dict, optional
            The properties used to draw a `.FancyArrowPatch` arrow between the
            positions *xy* and *xytext*.  Defaults to None, i.e. no arrow is
            drawn.

            For historical reasons there are two different ways to specify
            arrows, \"simple\" and \"fancy\":

            **Simple arrow:**

            If *arrowprops* does not contain the key 'arrowstyle' the
            allowed keys are:

            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        The width of the arrow in points
            headwidth    The width of the base of the arrow head in points
            headlength   The length of the arrow head in points
            shrink       Fraction of total length to shrink from both ends
            ?            Any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================

            The arrow is attached to the edge of the text box, the exact
            position (corners or centers) depending on where it's pointing to.

            **Fancy arrow:**

            This is used if 'arrowstyle' is provided in the *arrowprops*.

            Valid keys are the following `~matplotlib.patches.FancyArrowPatch`
            parameters:

            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           see below; default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================

            The exact starting point position of the arrow is defined by
            *relpos*. It's a tuple of relative coordinates of the text box,
            where (0, 0) is the lower left corner and (1, 1) is the upper
            right corner. Values <0 and >1 are supported and specify points
            outside the text box. By default (0.5, 0.5) the starting point is
            centered in the text box.

        annotation_clip : bool or None, default: None
            Whether to draw the annotation when the annotation point *xy* is
            outside the axes area.

            - If *True*, the annotation will only be drawn when *xy* is
              within the axes.
            - If *False*, the annotation will always be drawn.
            - If *None*, the annotation will only be drawn when *xy* is
              within the axes and *xycoords* is 'data'.

        **kwargs
            Additional kwargs are passed to `~matplotlib.text.Text`.

        Returns
        -------
        `.Annotation`

        See Also
        --------
        :ref:`plotting-guide-annotation`

        \"\"\"" code nil (reparse-symbol indented_block_body) [52833 60263])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [60272 60457])
                            ("if" code nil (reparse-symbol indented_block_body) [60504 60817])
                            ("if" code nil (reparse-symbol indented_block_body) [60875 60937])
                            ("self" variable nil (reparse-symbol indented_block_body) [60945 60974])
                            ("if" code nil (reparse-symbol indented_block_body) [61018 61066])
                            ("x, y" code nil (reparse-symbol indented_block_body) [61074 61087])
                            ("self" variable nil (reparse-symbol indented_block_body) [61097 61125])
                            ("if" code nil (reparse-symbol indented_block_body) [61134 61691])
                            ("Text" code nil (reparse-symbol indented_block_body) [61775 61816]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52610 52614])
                            ("text" variable nil (reparse-symbol function_parameters) [52616 52620])
                            ("xy" variable nil (reparse-symbol function_parameters) [52622 52624])
                            ("xytext" variable nil (reparse-symbol function_parameters) [52643 52649])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [52673 52681])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [52707 52717])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [52741 52751])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [52775 52790])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52814 52822]))                          
                        :documentation "
        Annotate the point *xy* with text *text*.

        In the simplest form, the text is placed at *xy*.

        Optionally, the text can be displayed in another position *xytext*.
        An arrow pointing from the text to the annotated point *xy* can then
        be added by defining *arrowprops*.

        Parameters
        ----------
        text : str
            The text of the annotation.

        xy : (float, float)
            The point *(x, y)* to annotate. The coordinate system is determined
            by *xycoords*.

        xytext : (float, float), default: *xy*
            The position *(x, y)* to place the text at. The coordinate system
            is determined by *textcoords*.

        xycoords : str or `.Artist` or `.Transform` or callable or \\
(float, float), default: 'data'

            The coordinate system that *xy* is given in. The following types
            of values are supported:

            - One of the following strings:

              ==================== ============================================
              Value                Description
              ==================== ============================================
              'figure points'      Points from the lower left of the figure
              'figure pixels'      Pixels from the lower left of the figure
              'figure fraction'    Fraction of figure from lower left
              'subfigure points'   Points from the lower left of the subfigure
              'subfigure pixels'   Pixels from the lower left of the subfigure
              'subfigure fraction' Fraction of subfigure from lower left
              'axes points'        Points from lower left corner of axes
              'axes pixels'        Pixels from lower left corner of axes
              'axes fraction'      Fraction of axes from lower left
              'data'               Use the coordinate system of the object
                                   being annotated (default)
              'polar'              *(theta, r)* if not native 'data'
                                   coordinates
              ==================== ============================================

              Note that 'subfigure pixels' and 'figure pixels' are the same
              for the parent figure, so users who want code that is usable in
              a subfigure can use 'subfigure pixels'.

            - An `.Artist`: *xy* is interpreted as a fraction of the artist's
              `~matplotlib.transforms.Bbox`. E.g. *(0, 0)* would be the lower
              left corner of the bounding box and *(0.5, 1)* would be the
              center top of the bounding box.

            - A `.Transform` to transform *xy* to screen coordinates.

            - A function with one of the following signatures::

                def transform(renderer) -> Bbox
                def transform(renderer) -> Transform

              where *renderer* is a `.RendererBase` subclass.

              The result of the function is interpreted like the `.Artist` and
              `.Transform` cases above.

            - A tuple *(xcoords, ycoords)* specifying separate coordinate
              systems for *x* and *y*. *xcoords* and *ycoords* must each be
              of one of the above described types.

            See :ref:`plotting-guide-annotation` for more details.

        textcoords : str or `.Artist` or `.Transform` or callable or \\
(float, float), default: value of *xycoords*
            The coordinate system that *xytext* is given in.

            All *xycoords* values are valid as well as the following
            strings:

            =================   =========================================
            Value               Description
            =================   =========================================
            'offset points'     Offset (in points) from the *xy* value
            'offset pixels'     Offset (in pixels) from the *xy* value
            =================   =========================================

        arrowprops : dict, optional
            The properties used to draw a `.FancyArrowPatch` arrow between the
            positions *xy* and *xytext*.  Defaults to None, i.e. no arrow is
            drawn.

            For historical reasons there are two different ways to specify
            arrows, \"simple\" and \"fancy\":

            **Simple arrow:**

            If *arrowprops* does not contain the key 'arrowstyle' the
            allowed keys are:

            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        The width of the arrow in points
            headwidth    The width of the base of the arrow head in points
            headlength   The length of the arrow head in points
            shrink       Fraction of total length to shrink from both ends
            ?            Any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================

            The arrow is attached to the edge of the text box, the exact
            position (corners or centers) depending on where it's pointing to.

            **Fancy arrow:**

            This is used if 'arrowstyle' is provided in the *arrowprops*.

            Valid keys are the following `~matplotlib.patches.FancyArrowPatch`
            parameters:

            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           see below; default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================

            The exact starting point position of the arrow is defined by
            *relpos*. It's a tuple of relative coordinates of the text box,
            where (0, 0) is the lower left corner and (1, 1) is the upper
            right corner. Values <0 and >1 are supported and specify points
            outside the text box. By default (0.5, 0.5) the starting point is
            centered in the text box.

        annotation_clip : bool or None, default: None
            Whether to draw the annotation when the annotation point *xy* is
            outside the axes area.

            - If *True*, the annotation will only be drawn when *xy* is
              within the axes.
            - If *False*, the annotation will always be drawn.
            - If *None*, the annotation will only be drawn when *xy* is
              within the axes and *xycoords* is 'data'.

        **kwargs
            Additional kwargs are passed to `~matplotlib.text.Text`.

        Returns
        -------
        `.Annotation`

        See Also
        --------
        :ref:`plotting-guide-annotation`

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52597 61817])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61835 61839])
                            ("event" variable nil (reparse-symbol function_parameters) [61841 61846]))                          )
                        (reparse-symbol indented_block_body) [61822 62193])
                    ("xycoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62225 62229]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62198 62262])
                    ("xycoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62301 62305])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [62307 62315]))                          
                        :decorators 
                          ( ("xycoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62267 62631])
                    ("xyann" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62660 62664]))                          
                        :documentation "
        The text position.

        See also *xytext* in `.Annotation`.
        ")
                        (reparse-symbol indented_block_body) [62636 62798])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62831 62835])
                            ("xytext" variable nil (reparse-symbol function_parameters) [62837 62843]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62803 62880])
                    ("get_anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62903 62907]))                          
                        :documentation "
        Return the coordinate system to use for `.Annotation.xyann`.

        See also *xycoords* in `.Annotation`.
        ")
                        (reparse-symbol indented_block_body) [62885 63082])
                    ("set_anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63105 63109])
                            ("coords" variable nil (reparse-symbol function_parameters) [63111 63117]))                          
                        :documentation "
        Set the coordinate system to use for `.Annotation.xyann`.

        See also *xycoords* in `.Annotation`.
        ")
                        (reparse-symbol indented_block_body) [63087 63291])
                    ("anncoords" variable nil (reparse-symbol indented_block_body) [63296 63420])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63441 63445])
                            ("fig" variable nil (reparse-symbol function_parameters) [63447 63450]))                          )
                        (reparse-symbol indented_block_body) [63426 63606])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63632 63636])
                            ("renderer" variable nil (reparse-symbol function_parameters) [63638 63646]))                          
                        :documentation "
        Update the pixel positions of the annotation text and the arrow patch.
        ")
                        (reparse-symbol indented_block_body) [63611 66890])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66936 66940])
                            ("renderer" variable nil (reparse-symbol function_parameters) [66942 66950]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66895 67765])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67792 67796])
                            ("renderer" variable nil (reparse-symbol function_parameters) [67798 67806]))                          )
                        (reparse-symbol indented_block_body) [67770 68619])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68642 68646])
                            ("renderer" variable nil (reparse-symbol function_parameters) [68648 68656]))                          )
                        (reparse-symbol indented_block_body) [68624 68808]))                  
                :type "class")
                nil [52085 68808])
            ("docstring" code nil nil [68810 68874]))          
      :file "text.py"
      :pointmax 68875
      :fsize 68874
      :lastmodtime '(25218 25732 428602 691000)
      :unmatched-syntax '((NAME 24766 . 24771) (IF 24779 . 24781) (ELSE 24797 . 24801) (MULT 3898 . 3899) (COMMA 3899 . 3900) (INDENT_BLOCK 1003 . 1391) (NEWLINE 1002 . 1003) (COLON 1001 . 1002) (TRY 918 . 921) (AS 995 . 997) (FROM 381 . 385) (PERIOD 386 . 387) (FROM 315 . 319) (PERIOD 320 . 321) (FROM 251 . 255) (PERIOD 256 . 257) (FROM 210 . 214) (PERIOD 215 . 216) (FROM 183 . 187) (PERIOD 188 . 189) (FROM 138 . 142) (PERIOD 143 . 144)))
    (semanticdb-table "semanticdb-table-157fb351af9c"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
Patches are `.Artist`\\s with a face color and an edge color.
\"\"\"" code nil nil [1 70])
            ("contextlib" include nil nil [72 89])
            ("functools" include nil nil [90 106])
            ("inspect" include nil nil [107 121])
            ("math" include nil nil [122 133])
            ("numbers" include nil nil [134 160])
            ("textwrap" include nil nil [161 176])
            ("collections" include nil nil [177 211])
            ("numpy" include nil nil [213 231])
            ("matplotlib" include nil nil [233 257])
            ("" code nil nil [272 373])
            ("" code nil nil [394 580])
            ("Path" include nil nil [592 603])
            ("CapStyle" include nil nil [617 643])
            ("JoinStyle" include nil nil [617 643])
            ("" code nil nil [687 819])
            ("Patch" type
               (:documentation "
    A patch is a 2D artist with a face color and an edge color.

    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
    are *None*, they default to their rc params setting.
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [1060 1070])
                    ("" code nil (reparse-symbol indented_block_body) [1092 1099])
                    ("validCap" function
                       (:decorators 
                          ( ("_api.classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1141 1144]))                          )
                        (reparse-symbol indented_block_body) [1104 1250])
                    ("" code nil (reparse-symbol indented_block_body) [1271 1278])
                    ("validJoin" function
                       (:decorators 
                          ( ("_api.classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1321 1324]))                          )
                        (reparse-symbol indented_block_body) [1283 1431])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [1522 1543])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following kwarg properties are supported

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [1922 2015])
                            ("super" code nil (reparse-symbol indented_block_body) [2024 2042])
                            ("if" code nil (reparse-symbol indented_block_body) [2052 2130])
                            ("if" code nil (reparse-symbol indented_block_body) [2138 2192])
                            ("if" code nil (reparse-symbol indented_block_body) [2200 2258])
                            ("if" code nil (reparse-symbol indented_block_body) [2266 2328])
                            ("if" code nil (reparse-symbol indented_block_body) [2336 2420])
                            ("self" variable nil (reparse-symbol indented_block_body) [2429 2492])
                            ("self" variable nil (reparse-symbol indented_block_body) [2501 2518])
                            ("if" code nil (reparse-symbol indented_block_body) [2560 2941])
                            ("self" variable nil (reparse-symbol indented_block_body) [3013 3035])
                            ("self" variable nil (reparse-symbol indented_block_body) [3044 3063])
                            ("self" code nil (reparse-symbol indented_block_body) [3073 3092])
                            ("self" code nil (reparse-symbol indented_block_body) [3101 3130])
                            ("self" code nil (reparse-symbol indented_block_body) [3139 3168])
                            ("self" code nil (reparse-symbol indented_block_body) [3177 3210])
                            ("self" code nil (reparse-symbol indented_block_body) [3219 3240])
                            ("self" code nil (reparse-symbol indented_block_body) [3249 3276])
                            ("self" code nil (reparse-symbol indented_block_body) [3285 3314])
                            ("if" code nil (reparse-symbol indented_block_body) [3324 3372]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1562 1566])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [1585 1594])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [1618 1627])
                            ("color" variable nil (reparse-symbol function_parameters) [1651 1656])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [1680 1689])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [1713 1722])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [1746 1757])
                            ("hatch" variable nil (reparse-symbol function_parameters) [1781 1786])
                            ("fill" variable nil (reparse-symbol function_parameters) [1810 1814])
                            ("capstyle" variable nil (reparse-symbol function_parameters) [1838 1846])
                            ("joinstyle" variable nil (reparse-symbol function_parameters) [1870 1879])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1903 1911]))                          
                        :documentation "
        The following kwarg properties are supported

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1549 3372])
                    ("get_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3391 3395]))                          
                        :documentation "
        Return a copy of the vertices used in this patch.

        If the patch contains Bezier curves, the curves will be interpolated by
        line segments.  To access the curves as curves, use `get_path`.
        ")
                        (reparse-symbol indented_block_body) [3377 3819])
                    ("_process_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3844 3848])
                            ("radius" variable nil (reparse-symbol function_parameters) [3850 3856]))                          )
                        (reparse-symbol indented_block_body) [3824 4171])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4189 4193])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [4195 4205])
                            ("radius" variable nil (reparse-symbol function_parameters) [4207 4213]))                          
                        :documentation "
        Test whether the mouse event occurred in the patch.

        Returns
        -------
        (bool, empty dict)
        ")
                        (reparse-symbol indented_block_body) [4176 5278])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5302 5306])
                            ("point" variable nil (reparse-symbol function_parameters) [5308 5313])
                            ("radius" variable nil (reparse-symbol function_parameters) [5315 5321]))                          
                        :documentation "
        Return whether the given point is inside the patch.

        Parameters
        ----------
        point : (float, float)
            The point (x, y) to check, in target coordinates of
            ``self.get_transform()``. These are display coordinates for patches
            that are added to a figure or axes.
        radius : float, optional
            Add an additional margin on the patch in target coordinates of
            ``self.get_transform()``. See `.Path.contains_point` for further
            details.

        Returns
        -------
        bool

        Notes
        -----
        The proper use of this method depends on the transform of the patch.
        Isolated patches do not have a transform. In this case, the patch
        creation coordinates and the point coordinates match. The following
        example checks that the center of a circle is within the circle

        >>> center = 0, 0
        >>> c = Circle(center, radius=1)
        >>> c.contains_point(center)
        True

        The convention of checking against the transformed patch stems from
        the fact that this method is predominantly used to check if display
        coordinates (e.g. from mouse events) are within the patch. If you want
        to do the above check with data coordinates, you have to properly
        transform them first:

        >>> center = 0, 0
        >>> c = Circle(center, radius=1)
        >>> plt.gca().add_patch(c)
        >>> transformed_center = c.get_transform().transform(center)
        >>> c.contains_point(transformed_center)
        True

        ")
                        (reparse-symbol indented_block_body) [5283 7165])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7190 7194])
                            ("points" variable nil (reparse-symbol function_parameters) [7196 7202])
                            ("radius" variable nil (reparse-symbol function_parameters) [7204 7210]))                          
                        :documentation "
        Return whether the given points are inside the patch.

        Parameters
        ----------
        points : (N, 2) array
            The points to check, in target coordinates of
            ``self.get_transform()``. These are display coordinates for patches
            that are added to a figure or axes. Columns contain x and y values.
        radius : float, optional
            Add an additional margin on the patch in target coordinates of
            ``self.get_transform()``. See `.Path.contains_point` for further
            details.

        Returns
        -------
        length-N bool array

        Notes
        -----
        The proper use of this method depends on the transform of the patch.
        See the notes on `.Patch.contains_point`.
        ")
                        (reparse-symbol indented_block_body) [7170 8239])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8260 8264])
                            ("other" variable nil (reparse-symbol function_parameters) [8266 8271]))                          )
                        (reparse-symbol indented_block_body) [8244 9186])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9207 9211]))                          
                        :documentation "
        Return the `Patch`'s axis-aligned extents as a `~.transforms.Bbox`.
        ")
                        (reparse-symbol indented_block_body) [9191 9379])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9402 9406]))                          
                        :documentation "Return the `~.transforms.Transform` applied to the `Patch`.")
                        (reparse-symbol indented_block_body) [9384 9561])
                    ("get_data_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9589 9593]))                          
                        :documentation "
        Return the `~.transforms.Transform` mapping data coordinates to
        physical coordinates.
        ")
                        (reparse-symbol indented_block_body) [9566 9771])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9800 9804]))                          
                        :documentation "
        Return the `~.transforms.Transform` instance mapping patch coordinates
        to data coordinates.

        For example, one may define a patch of a circle which represents a
        radius of 5 by providing coordinates for a unit circle, and a
        transform which scales the coordinates (the patch coordinate) by 5.
        ")
                        (reparse-symbol indented_block_body) [9776 10207])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10232 10236]))                          
                        :documentation "Return whether antialiasing is used for drawing.")
                        (reparse-symbol indented_block_body) [10212 10335])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10358 10362]))                          
                        :documentation "Return the edge color.")
                        (reparse-symbol indented_block_body) [10340 10433])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10456 10460]))                          
                        :documentation "Return the face color.")
                        (reparse-symbol indented_block_body) [10438 10531])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10554 10558]))                          
                        :documentation "Return the line width in points.")
                        (reparse-symbol indented_block_body) [10536 10639])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10662 10666]))                          
                        :documentation "Return the linestyle.")
                        (reparse-symbol indented_block_body) [10644 10736])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10761 10765])
                            ("aa" variable nil (reparse-symbol function_parameters) [10767 10769]))                          
                        :documentation "
        Set whether to use antialiased rendering.

        Parameters
        ----------
        aa : bool or None
        ")
                        (reparse-symbol indented_block_body) [10741 11042])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11066 11070])
                            ("color" variable nil (reparse-symbol function_parameters) [11072 11077]))                          )
                        (reparse-symbol indented_block_body) [11047 11562])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11585 11589])
                            ("color" variable nil (reparse-symbol function_parameters) [11591 11596]))                          
                        :documentation "
        Set the patch edge color.

        Parameters
        ----------
        color : color or None
        ")
                        (reparse-symbol indented_block_body) [11567 11802])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11826 11830])
                            ("color" variable nil (reparse-symbol function_parameters) [11832 11837]))                          )
                        (reparse-symbol indented_block_body) [11807 12048])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12071 12075])
                            ("color" variable nil (reparse-symbol function_parameters) [12077 12082]))                          
                        :documentation "
        Set the patch face color.

        Parameters
        ----------
        color : color or None
        ")
                        (reparse-symbol indented_block_body) [12053 12288])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12307 12311])
                            ("c" variable nil (reparse-symbol function_parameters) [12313 12314]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        Parameters
        ----------
        c : color

        See Also
        --------
        Patch.set_facecolor, Patch.set_edgecolor
            For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [12293 12653])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12672 12676])
                            ("alpha" variable nil (reparse-symbol function_parameters) [12678 12683]))                          )
                        (reparse-symbol indented_block_body) [12658 12857])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12912 12916])
                            ("w" variable nil (reparse-symbol function_parameters) [12918 12919]))                          
                        :documentation "
        Set the patch linewidth in points.

        Parameters
        ----------
        w : float or None
        ")
                        (reparse-symbol indented_block_body) [12894 13454])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13477 13481])
                            ("ls" variable nil (reparse-symbol function_parameters) [13483 13485]))                          
                        :documentation "
        Set the patch linestyle.

        ==========================================  =================
        linestyle                                   description
        ==========================================  =================
        ``'-'`` or ``'solid'``                      solid line
        ``'--'`` or  ``'dashed'``                   dashed line
        ``'-.'`` or  ``'dashdot'``                  dash-dotted line
        ``':'`` or ``'dotted'``                     dotted line
        ``'none'``, ``'None'``, ``' '``, or ``''``  draw nothing
        ==========================================  =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq)

        where ``onoffseq`` is an even length tuple of on and off ink in points.

        Parameters
        ----------
        ls : {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
            The line style.
        ")
                        (reparse-symbol indented_block_body) [13459 14893])
                    ("set_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14911 14915])
                            ("b" variable nil (reparse-symbol function_parameters) [14917 14918]))                          
                        :documentation "
        Set whether to fill the patch.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [14898 15203])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15221 15225]))                          
                        :documentation "Return whether the patch is filled.")
                        (reparse-symbol indented_block_body) [15208 15304])
                    ("fill" variable nil (reparse-symbol indented_block_body) [15451 15486])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15532 15536])
                            ("s" variable nil (reparse-symbol function_parameters) [15538 15539]))                          
                        :documentation "
        Set the `.CapStyle`.

        The default capstyle is 'round' for `.FancyArrowPatch` and 'butt' for
        all other patches.

        Parameters
        ----------
        s : `.CapStyle` or %(CapStyle)s
        ")
                        (reparse-symbol indented_block_body) [15492 15859])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15881 15885]))                          
                        :documentation "Return the capstyle.")
                        (reparse-symbol indented_block_body) [15864 15953])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15999 16003])
                            ("s" variable nil (reparse-symbol function_parameters) [16005 16006]))                          
                        :documentation "
        Set the `.JoinStyle`.

        The default joinstyle is 'round' for `.FancyArrowPatch` and 'miter' for
        all other patches.

        Parameters
        ----------
        s : `.JoinStyle` or %(JoinStyle)s
        ")
                        (reparse-symbol indented_block_body) [15958 16333])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16356 16360]))                          
                        :documentation "Return the joinstyle.")
                        (reparse-symbol indented_block_body) [16338 16430])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16449 16453])
                            ("hatch" variable nil (reparse-symbol function_parameters) [16455 16460]))                          )
                        (reparse-symbol indented_block_body) [16435 17362])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17381 17385]))                          
                        :documentation "Return the hatching pattern.")
                        (reparse-symbol indented_block_body) [17367 17458])
                    ("_bind_draw_path_function" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17523 17527])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17529 17537]))                          
                        :documentation "
        ``draw()`` helper factored out for sharing with `FancyArrowPatch`.

        Yields a callable ``dp`` such that calling ``dp(*args, **kwargs)`` is
        equivalent to calling ``renderer1.draw_path(gc, *args, **kwargs)``
        where ``renderer1`` and ``gc`` have been suitably set from ``renderer``
        and the artist's properties.
        ")
                        (reparse-symbol indented_block_body) [17463 19317])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19363 19367])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19369 19377]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19322 20152])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20170 20174]))                          
                        :documentation "Return the path of this patch.")
                        (reparse-symbol indented_block_body) [20157 20281])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20308 20312])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20314 20322]))                          )
                        (reparse-symbol indented_block_body) [20286 20395])
                    ("_convert_xy_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20422 20426])
                            ("xy" variable nil (reparse-symbol function_parameters) [20428 20430]))                          
                        :documentation "Convert x and y units for a tuple (x, y).")
                        (reparse-symbol indented_block_body) [20400 20587]))                  
                :type "class")
                nil [820 20587])
            ("Shadow" type
               (:superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20626 20630]))                          )
                        (reparse-symbol indented_block_body) [20614 20681])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a shadow of the given *patch*.

        By default, the shadow will have the same face color as the *patch*,
        but darkened.

        Parameters
        ----------
        patch : `.Patch`
            The patch to create the shadow for.
        ox, oy : float
            The shift of the shadow in data coordinates, scaled by a factor
            of dpi/72.
        **kwargs
            Properties of the shadow patch. Supported keys are:

            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [20769 21274])
                            ("super" code nil (reparse-symbol indented_block_body) [21283 21301])
                            ("self" variable nil (reparse-symbol indented_block_body) [21310 21328])
                            ("self, self" code nil (reparse-symbol indented_block_body) [21337 21364])
                            ("self" variable nil (reparse-symbol indented_block_body) [21373 21419])
                            ("self" code nil (reparse-symbol indented_block_body) [21429 21457])
                            ("color" code nil (reparse-symbol indented_block_body) [21466 21532])
                            ("self" code nil (reparse-symbol indented_block_body) [21541 21791]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20729 20733])
                            ("patch" variable nil (reparse-symbol function_parameters) [20735 20740])
                            ("ox" variable nil (reparse-symbol function_parameters) [20742 20744])
                            ("oy" variable nil (reparse-symbol function_parameters) [20746 20748])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20750 20758]))                          
                        :documentation "
        Create a shadow of the given *patch*.

        By default, the shadow will have the same face color as the *patch*,
        but darkened.

        Parameters
        ----------
        patch : `.Patch`
            The patch to create the shadow for.
        ox, oy : float
            The shift of the shadow in data coordinates, scaled by a factor
            of dpi/72.
        **kwargs
            Properties of the shadow patch. Supported keys are:

            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20686 21792])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21819 21823])
                            ("renderer" variable nil (reparse-symbol function_parameters) [21825 21833]))                          )
                        (reparse-symbol indented_block_body) [21797 21991])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22009 22013]))                          )
                        (reparse-symbol indented_block_body) [21996 22053])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22082 22086]))                          )
                        (reparse-symbol indented_block_body) [22058 22162])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22176 22180])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22182 22190]))                          )
                        (reparse-symbol indented_block_body) [22167 22265]))                  
                :type "class")
                nil [20589 22265])
            ("Rectangle" type
               (:documentation "
    A rectangle defined via an anchor point *xy* and its *width* and *height*.

    The rectangle extends from ``xy[0]`` to ``xy[0] + width`` in x-direction
    and from ``xy[1]`` to ``xy[1] + height`` in y-direction. ::

      :                +------------------+
      :                |                  |
      :              height               |
      :                |                  |
      :               (xy)---- width -----+

    One may picture *xy* as the bottom left corner, but which corner *xy* is
    actually depends on the direction of the axis and the sign of *width*
    and *height*; e.g. *xy* would be the bottom right corner if the x-axis
    was inverted or if *width* was negative.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23038 23042]))                          )
                        (reparse-symbol indented_block_body) [23026 23214])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : (float, float)
            The anchor point.
        width : float
            Rectangle width.
        height : float
            Rectangle height.
        angle : float, default: 0
            Rotation in degrees anti-clockwise about *xy*.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties
            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [23317 23743])
                            ("super" code nil (reparse-symbol indented_block_body) [23752 23778])
                            ("self" variable nil (reparse-symbol indented_block_body) [23787 23803])
                            ("self" variable nil (reparse-symbol indented_block_body) [23812 23828])
                            ("self" variable nil (reparse-symbol indented_block_body) [23837 23856])
                            ("self" variable nil (reparse-symbol indented_block_body) [23865 23886])
                            ("self" variable nil (reparse-symbol indented_block_body) [23895 23920])
                            ("self" code nil (reparse-symbol indented_block_body) [23929 23950]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23262 23266])
                            ("xy" variable nil (reparse-symbol function_parameters) [23268 23270])
                            ("width" variable nil (reparse-symbol function_parameters) [23272 23277])
                            ("height" variable nil (reparse-symbol function_parameters) [23279 23285])
                            ("angle" variable nil (reparse-symbol function_parameters) [23287 23292])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23298 23306]))                          
                        :documentation "
        Parameters
        ----------
        xy : (float, float)
            The anchor point.
        width : float
            Rectangle width.
        height : float
            Rectangle height.
        angle : float, default: 0
            Rotation in degrees anti-clockwise about *xy*.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties
            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23219 23975])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23993 23997]))                          
                        :documentation "Return the vertices of the rectangle.")
                        (reparse-symbol indented_block_body) [23980 24089])
                    ("_convert_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24113 24117]))                          
                        :documentation "Convert bounds of the rectangle.")
                        (reparse-symbol indented_block_body) [24094 24398])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24427 24431]))                          )
                        (reparse-symbol indented_block_body) [24403 24890])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24905 24909]))                          
                        :documentation "Return the left coordinate of the rectangle.")
                        (reparse-symbol indented_block_body) [24895 24995])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25010 25014]))                          
                        :documentation "Return the bottom coordinate of the rectangle.")
                        (reparse-symbol indented_block_body) [25000 25102])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25118 25122]))                          
                        :documentation "Return the left and bottom coords of the rectangle as a tuple.")
                        (reparse-symbol indented_block_body) [25107 25236])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25255 25259]))                          
                        :documentation "Return the width of the rectangle.")
                        (reparse-symbol indented_block_body) [25241 25338])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25358 25362]))                          
                        :documentation "Return the height of the rectangle.")
                        (reparse-symbol indented_block_body) [25343 25443])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25462 25466]))                          
                        :documentation "Get the rotation angle in degrees.")
                        (reparse-symbol indented_block_body) [25448 25544])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25559 25563])
                            ("x" variable nil (reparse-symbol function_parameters) [25565 25566]))                          
                        :documentation "Set the left coordinate of the rectangle.")
                        (reparse-symbol indented_block_body) [25549 25672])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25687 25691])
                            ("y" variable nil (reparse-symbol function_parameters) [25693 25694]))                          
                        :documentation "Set the bottom coordinate of the rectangle.")
                        (reparse-symbol indented_block_body) [25677 25802])
                    ("set_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25821 25825])
                            ("angle" variable nil (reparse-symbol function_parameters) [25827 25832]))                          
                        :documentation "
        Set the rotation angle in degrees.

        The rotation is performed anti-clockwise around *xy*.
        ")
                        (reparse-symbol indented_block_body) [25807 26018])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26034 26038])
                            ("xy" variable nil (reparse-symbol function_parameters) [26040 26042]))                          
                        :documentation "
        Set the left and bottom coordinates of the rectangle.

        Parameters
        ----------
        xy : (float, float)
        ")
                        (reparse-symbol indented_block_body) [26023 26256])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26275 26279])
                            ("w" variable nil (reparse-symbol function_parameters) [26281 26282]))                          
                        :documentation "Set the width of the rectangle.")
                        (reparse-symbol indented_block_body) [26261 26381])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26401 26405])
                            ("h" variable nil (reparse-symbol function_parameters) [26407 26408]))                          
                        :documentation "Set the height of the rectangle.")
                        (reparse-symbol indented_block_body) [26386 26509])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26529 26533])
                            ("args" variable nil (reparse-symbol function_parameters) [26535 26540]))                          
                        :documentation "
        Set the bounds of the rectangle as *left*, *bottom*, *width*, *height*.

        The values may be passed as separate parameters or as a tuple::

            set_bounds(left, bottom, width, height)
            set_bounds((left, bottom, width, height))

        .. ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [26514 27099])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27117 27121]))                          
                        :documentation "Return the `.Bbox`.")
                        (reparse-symbol indented_block_body) [27104 27265])
                    ("xy" variable nil (reparse-symbol indented_block_body) [27270 27299]))                  
                :type "class")
                nil [22267 27300])
            ("RegularPolygon" type
               (:documentation "A regular polygon patch."
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27383 27387]))                          )
                        (reparse-symbol indented_block_body) [27371 27573])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : (float, float)
            The center position.

        numVertices : int
            The number of vertices.

        radius : float
            The distance from the center to each of the vertices.

        orientation : float
            The polygon rotation angle (in radians).

        **kwargs
            `Patch` properties:

            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [27705 28133])
                            ("self" variable nil (reparse-symbol indented_block_body) [28142 28154])
                            ("self" variable nil (reparse-symbol indented_block_body) [28163 28193])
                            ("self" variable nil (reparse-symbol indented_block_body) [28202 28232])
                            ("self" variable nil (reparse-symbol indented_block_body) [28241 28261])
                            ("self" variable nil (reparse-symbol indented_block_body) [28270 28321])
                            ("self" variable nil (reparse-symbol indented_block_body) [28330 28375])
                            ("super" code nil (reparse-symbol indented_block_body) [28384 28410]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27621 27625])
                            ("xy" variable nil (reparse-symbol function_parameters) [27627 27629])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [27631 27642])
                            ("radius" variable nil (reparse-symbol function_parameters) [27644 27650])
                            ("orientation" variable nil (reparse-symbol function_parameters) [27654 27665])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27686 27694]))                          
                        :documentation "
        Parameters
        ----------
        xy : (float, float)
            The center position.

        numVertices : int
            The number of vertices.

        radius : float
            The distance from the center to each of the vertices.

        orientation : float
            The polygon rotation angle (in radians).

        **kwargs
            `Patch` properties:

            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27578 28411])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28429 28433]))                          )
                        (reparse-symbol indented_block_body) [28416 28462])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28491 28495]))                          )
                        (reparse-symbol indented_block_body) [28467 28652]))                  
                :type "class")
                nil [27302 28652])
            ("PathPatch" type
               (:documentation "A general polycurve path patch."
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [28725 28745])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28763 28767]))                          )
                        (reparse-symbol indented_block_body) [28751 28888])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *path* is a `~.path.Path` object.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [28967 29087])
                            ("super" code nil (reparse-symbol indented_block_body) [29096 29122])
                            ("self" variable nil (reparse-symbol indented_block_body) [29131 29148]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28936 28940])
                            ("path" variable nil (reparse-symbol function_parameters) [28942 28946])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28948 28956]))                          
                        :documentation "
        *path* is a `~.path.Path` object.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28893 29149])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29167 29171]))                          )
                        (reparse-symbol indented_block_body) [29154 29200])
                    ("set_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29218 29222])
                            ("path" variable nil (reparse-symbol function_parameters) [29224 29228]))                          )
                        (reparse-symbol indented_block_body) [29205 29257]))                  
                :type "class")
                nil [28654 29257])
            ("StepPatch" type
               (:documentation "
    A path patch describing a stepwise constant function.

    By default the path is not closed and starts and stops at
    baseline value.
    "
                :superclasses ("PathPatch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [29449 29470])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        values : array-like
            The step heights.

        edges : array-like
            The edge positions, with ``len(edges) == len(vals) + 1``,
            between which the curve takes on vals values.

        orientation : {'vertical', 'horizontal'}, default: 'vertical'
            The direction of the steps. Vertical means that *values* are
            along the y-axis, and edges are along the x-axis.

        baseline : float, array-like or None, default: 0
            The bottom value of the bounding edges or when
            ``fill=True``, position of lower edge. If *fill* is
            True or an array is passed to *baseline*, a closed
            path is drawn.

        Other valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [29615 30428])
                            ("self" variable nil (reparse-symbol indented_block_body) [30437 30467])
                            ("self" variable nil (reparse-symbol indented_block_body) [30476 30507])
                            ("self" variable nil (reparse-symbol indented_block_body) [30516 30549])
                            ("None" code nil (reparse-symbol indented_block_body) [30625 30629])
                            ("self" code nil (reparse-symbol indented_block_body) [30638 30657])
                            ("super" code nil (reparse-symbol indented_block_body) [30666 30704]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29519 29523])
                            ("values" variable nil (reparse-symbol function_parameters) [29525 29531])
                            ("edges" variable nil (reparse-symbol function_parameters) [29533 29538])
                            ("orientation" variable nil (reparse-symbol function_parameters) [29560 29571])
                            ("baseline" variable nil (reparse-symbol function_parameters) [29584 29592])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29596 29604]))                          
                        :documentation "
        Parameters
        ----------
        values : array-like
            The step heights.

        edges : array-like
            The edge positions, with ``len(edges) == len(vals) + 1``,
            between which the curve takes on vals values.

        orientation : {'vertical', 'horizontal'}, default: 'vertical'
            The direction of the steps. Vertical means that *values* are
            along the y-axis, and edges are along the x-axis.

        baseline : float, array-like or None, default: 0
            The bottom value of the bounding edges or when
            ``fill=True``, position of lower edge. If *fill* is
            True or an array is passed to *baseline*, a closed
            path is drawn.

        Other valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29476 30705])
                    ("_update_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30727 30731]))                          )
                        (reparse-symbol indented_block_body) [30710 32615])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32633 32637]))                          
                        :documentation "Get `.StepPatch` values, edges and baseline as namedtuple.")
                        (reparse-symbol indented_block_body) [32620 32850])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32868 32872])
                            ("values" variable nil (reparse-symbol function_parameters) [32874 32880])
                            ("edges" variable nil (reparse-symbol function_parameters) [32887 32892])
                            ("baseline" variable nil (reparse-symbol function_parameters) [32899 32907]))                          
                        :documentation "
        Set `.StepPatch` values, edges and baseline.

        Parameters
        ----------
        values : 1D array-like or None
            Will not update values, if passing None
        edges : 1D array-like, optional
        baseline : float, 1D array-like or None
        ")
                        (reparse-symbol indented_block_body) [32855 33638]))                  
                :type "class")
                nil [29259 33638])
            ("Polygon" type
               (:documentation "A general polygon patch."
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33714 33718]))                          )
                        (reparse-symbol indented_block_body) [33702 33921])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [34011 34250])
                            ("super" code nil (reparse-symbol indented_block_body) [34259 34285])
                            ("self" variable nil (reparse-symbol indented_block_body) [34294 34315])
                            ("self" code nil (reparse-symbol indented_block_body) [34324 34339]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33969 33973])
                            ("xy" variable nil (reparse-symbol function_parameters) [33975 33977])
                            ("closed" variable nil (reparse-symbol function_parameters) [33979 33985])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33992 34000]))                          
                        :documentation "
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33926 34340])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34358 34362]))                          
                        :documentation "Get the `.Path` of the polygon.")
                        (reparse-symbol indented_block_body) [34345 34437])
                    ("get_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34457 34461]))                          
                        :documentation "Return whether the polygon is closed.")
                        (reparse-symbol indented_block_body) [34442 34544])
                    ("set_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34564 34568])
                            ("closed" variable nil (reparse-symbol function_parameters) [34570 34576]))                          
                        :documentation "
        Set whether the polygon is closed.

        Parameters
        ----------
        closed : bool
           True if the polygon is closed
        ")
                        (reparse-symbol indented_block_body) [34549 34905])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34921 34925]))                          
                        :documentation "
        Get the vertices of the path.

        Returns
        -------
        (N, 2) numpy array
            The coordinates of the vertices.
        ")
                        (reparse-symbol indented_block_body) [34910 35130])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35146 35150])
                            ("xy" variable nil (reparse-symbol function_parameters) [35152 35154]))                          
                        :documentation "
        Set the vertices of the polygon.

        Parameters
        ----------
        xy : (N, 2) array-like
            The coordinates of the vertices.

        Notes
        -----
        Unlike `~.path.Path`, we do not ignore the last input vertex. If the
        polygon is meant to be closed, and the last point of the polygon is not
        equal to the first, we assume that the user has not explicitly passed a
        ``CLOSEPOLY`` vertex, and add it ourselves.
        ")
                        (reparse-symbol indented_block_body) [35135 36441])
                    ("xy" variable nil (reparse-symbol indented_block_body) [36446 36548]))                  
                :type "class")
                nil [33640 36549])
            ("Wedge" type
               (:documentation "Wedge shaped patch."
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36618 36622]))                          )
                        (reparse-symbol indented_block_body) [36606 36838])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        A wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [36950 37264])
                            ("super" code nil (reparse-symbol indented_block_body) [37273 37299])
                            ("self" variable nil (reparse-symbol indented_block_body) [37308 37328])
                            ("self, self" code nil (reparse-symbol indented_block_body) [37337 37366])
                            ("self, self" code nil (reparse-symbol indented_block_body) [37375 37416])
                            ("self" variable nil (reparse-symbol indented_block_body) [37425 37479])
                            ("self" code nil (reparse-symbol indented_block_body) [37488 37510]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36886 36890])
                            ("center" variable nil (reparse-symbol function_parameters) [36892 36898])
                            ("r" variable nil (reparse-symbol function_parameters) [36900 36901])
                            ("theta1" variable nil (reparse-symbol function_parameters) [36903 36909])
                            ("theta2" variable nil (reparse-symbol function_parameters) [36911 36917])
                            ("width" variable nil (reparse-symbol function_parameters) [36919 36924])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36931 36939]))                          
                        :documentation "
        A wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36843 37511])
                    ("_recompute_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37536 37540]))                          )
                        (reparse-symbol indented_block_body) [37516 38796])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38816 38820])
                            ("center" variable nil (reparse-symbol function_parameters) [38822 38828]))                          )
                        (reparse-symbol indented_block_body) [38801 38912])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38932 38936])
                            ("radius" variable nil (reparse-symbol function_parameters) [38938 38944]))                          )
                        (reparse-symbol indented_block_body) [38917 39023])
                    ("set_theta1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39043 39047])
                            ("theta1" variable nil (reparse-symbol function_parameters) [39049 39055]))                          )
                        (reparse-symbol indented_block_body) [39028 39139])
                    ("set_theta2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39159 39163])
                            ("theta2" variable nil (reparse-symbol function_parameters) [39165 39171]))                          )
                        (reparse-symbol indented_block_body) [39144 39255])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39274 39278])
                            ("width" variable nil (reparse-symbol function_parameters) [39280 39285]))                          )
                        (reparse-symbol indented_block_body) [39260 39367])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39385 39389]))                          )
                        (reparse-symbol indented_block_body) [39372 39484]))                  
                :type "class")
                nil [36551 39484])
            ("Arrow" type
               (:documentation "An arrow patch."
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39603 39607]))                          )
                        (reparse-symbol indented_block_body) [39591 39635])
                    ("_path" variable nil (reparse-symbol indented_block_body) [39640 39837])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).
        The width of the arrow is scaled by *width*.

        Parameters
        ----------
        x : float
            x coordinate of the arrow tail.
        y : float
            y coordinate of the arrow tail.
        dx : float
            Arrow length in the x direction.
        dy : float
            Arrow length in the y direction.
        width : float, default: 1
            Scale factor for the width of the arrow. With a default value of 1,
            the tail width is 0.2 and head width is 0.6.
        **kwargs
            Keyword arguments control the `Patch` properties:

            %(Patch:kwdoc)s

        See Also
        --------
        FancyArrow
            Patch that allows independent control of the head and tail
            properties.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39936 40791])
                            ("super" code nil (reparse-symbol indented_block_body) [40800 40826])
                            ("self" variable nil (reparse-symbol indented_block_body) [40835 41030]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39886 39890])
                            ("x" variable nil (reparse-symbol function_parameters) [39892 39893])
                            ("y" variable nil (reparse-symbol function_parameters) [39895 39896])
                            ("dx" variable nil (reparse-symbol function_parameters) [39898 39900])
                            ("dy" variable nil (reparse-symbol function_parameters) [39902 39904])
                            ("width" variable nil (reparse-symbol function_parameters) [39906 39911])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39917 39925]))                          
                        :documentation "
        Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).
        The width of the arrow is scaled by *width*.

        Parameters
        ----------
        x : float
            x coordinate of the arrow tail.
        y : float
            y coordinate of the arrow tail.
        dx : float
            Arrow length in the x direction.
        dy : float
            Arrow length in the y direction.
        width : float, default: 1
            Scale factor for the width of the arrow. With a default value of 1,
            the tail width is 0.2 and head width is 0.6.
        **kwargs
            Keyword arguments control the `Patch` properties:

            %(Patch:kwdoc)s

        See Also
        --------
        FancyArrow
            Patch that allows independent control of the head and tail
            properties.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39843 41031])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41049 41053]))                          )
                        (reparse-symbol indented_block_body) [41036 41082])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41111 41115]))                          )
                        (reparse-symbol indented_block_body) [41087 41155]))                  
                :type "class")
                nil [39540 41155])
            ("FancyArrow" type
               (:documentation "
    Like Arrow, but lets you set head width and head height independently.
    "
                :superclasses ("Polygon")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [41280 41300])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41318 41322]))                          )
                        (reparse-symbol indented_block_body) [41306 41355])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        x, y : float
            The x and y coordinates of the arrow base.

        dx, dy : float
            The length of the arrow along x and y direction.

        width : float, default: 0.001
            Width of full arrow tail.

        length_includes_head : bool, default: False
            True if head is to be counted in calculating the length.

        head_width : float or None, default: 3*width
            Total width of the full arrow head.

        head_length : float or None, default: 1.5*head_width
            Length of arrow head.

        shape : {'full', 'left', 'right'}, default: 'full'
            Draw the left-half, right-half, or full arrow.

        overhang : float, default: 0
            Fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

        head_starts_at_zero : bool, default: False
            If True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        **kwargs
            `.Patch` properties:

            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [41605 42753])
                            ("self" variable nil (reparse-symbol indented_block_body) [42762 42773])
                            ("self" variable nil (reparse-symbol indented_block_body) [42782 42793])
                            ("self" variable nil (reparse-symbol indented_block_body) [42802 42815])
                            ("self" variable nil (reparse-symbol indented_block_body) [42824 42837])
                            ("self" variable nil (reparse-symbol indented_block_body) [42846 42865])
                            ("self" variable nil (reparse-symbol indented_block_body) [42874 42923])
                            ("self" variable nil (reparse-symbol indented_block_body) [42932 42961])
                            ("self" variable nil (reparse-symbol indented_block_body) [42970 43001])
                            ("self" variable nil (reparse-symbol indented_block_body) [43010 43029])
                            ("self" variable nil (reparse-symbol indented_block_body) [43038 43063])
                            ("self" variable nil (reparse-symbol indented_block_body) [43072 43119])
                            ("self" code nil (reparse-symbol indented_block_body) [43128 43146])
                            ("super" code nil (reparse-symbol indented_block_body) [43155 43206]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41403 41407])
                            ("x" variable nil (reparse-symbol function_parameters) [41409 41410])
                            ("y" variable nil (reparse-symbol function_parameters) [41412 41413])
                            ("dx" variable nil (reparse-symbol function_parameters) [41415 41417])
                            ("dy" variable nil (reparse-symbol function_parameters) [41419 41421])
                            ("width" variable nil (reparse-symbol function_parameters) [41423 41428])
                            ("length_includes_head" variable nil (reparse-symbol function_parameters) [41436 41456])
                            ("head_width" variable nil (reparse-symbol function_parameters) [41481 41491])
                            ("head_length" variable nil (reparse-symbol function_parameters) [41498 41509])
                            ("shape" variable nil (reparse-symbol function_parameters) [41516 41521])
                            ("overhang" variable nil (reparse-symbol function_parameters) [41530 41538])
                            ("head_starts_at_zero" variable nil (reparse-symbol function_parameters) [41559 41578])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41586 41594]))                          
                        :documentation "
        Parameters
        ----------
        x, y : float
            The x and y coordinates of the arrow base.

        dx, dy : float
            The length of the arrow along x and y direction.

        width : float, default: 0.001
            Width of full arrow tail.

        length_includes_head : bool, default: False
            True if head is to be counted in calculating the length.

        head_width : float or None, default: 3*width
            Total width of the full arrow head.

        head_length : float or None, default: 1.5*head_width
            Length of arrow head.

        shape : {'full', 'left', 'right'}, default: 'full'
            Draw the left-half, right-half, or full arrow.

        overhang : float, default: 0
            Fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

        head_starts_at_zero : bool, default: False
            If True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        **kwargs
            `.Patch` properties:

            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41360 43207])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43225 43229])
                            ("x" variable nil (reparse-symbol function_parameters) [43234 43235])
                            ("y" variable nil (reparse-symbol function_parameters) [43242 43243])
                            ("dx" variable nil (reparse-symbol function_parameters) [43250 43252])
                            ("dy" variable nil (reparse-symbol function_parameters) [43259 43261])
                            ("width" variable nil (reparse-symbol function_parameters) [43268 43273])
                            ("head_width" variable nil (reparse-symbol function_parameters) [43297 43307])
                            ("head_length" variable nil (reparse-symbol function_parameters) [43314 43325]))                          
                        :documentation "
        Set `.FancyArrow` x, y, dx, dy, width, head_with, and head_length.
        Values left as None will not be updated.

        Parameters
        ----------
        x, y : float or None, default: None
            The x and y coordinates of the arrow base.

        dx, dy : float or None, default: None
            The length of the arrow along x and y direction.

        width: float or None, default: None
            Width of full arrow tail.

        head_width: float or None, default: None
            Total width of the full arrow head.

        head_length: float or None, default: None
            Length of arrow head.
        ")
                        (reparse-symbol indented_block_body) [43212 44477])
                    ("_make_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44498 44502]))                          )
                        (reparse-symbol indented_block_body) [44482 47034]))                  
                :type "class")
                nil [41157 47034])
            ("docstring" code nil nil [47036 47158])
            ("CirclePolygon" type
               (:documentation "A polygon-approximation of a circle patch."
                :superclasses ("RegularPolygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47268 47272]))                          )
                        (reparse-symbol indented_block_body) [47256 47414])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a circle at *xy* = (*x*, *y*) with given *radius*.

        This circle is approximated by a regular polygon with *resolution*
        sides.  For a smoother circle drawn with splines, see `Circle`.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [47577 47869])
                            ("super" code nil (reparse-symbol indented_block_body) [47878 47943]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47462 47466])
                            ("xy" variable nil (reparse-symbol function_parameters) [47468 47470])
                            ("radius" variable nil (reparse-symbol function_parameters) [47472 47478])
                            ("resolution" variable nil (reparse-symbol function_parameters) [47499 47509])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47557 47566]))                          
                        :documentation "
        Create a circle at *xy* = (*x*, *y*) with given *radius*.

        This circle is approximated by a regular polygon with *resolution*
        sides.  For a smoother circle drawn with splines, see `Circle`.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47419 47944]))                  
                :type "class")
                nil [47161 47944])
            ("Ellipse" type
               (:documentation "A scale-free ellipse."
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48017 48021]))                          )
                        (reparse-symbol indented_block_body) [48005 48221])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : (float, float)
            xy coordinates of ellipse centre.
        width : float
            Total length (diameter) of horizontal axis.
        height : float
            Total length (diameter) of vertical axis.
        angle : float, default: 0
            Rotation in degrees anti-clockwise.

        Notes
        -----
        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [48322 48777])
                            ("super" code nil (reparse-symbol indented_block_body) [48786 48812])
                            ("self" variable nil (reparse-symbol indented_block_body) [48822 48839])
                            ("self, self" code nil (reparse-symbol indented_block_body) [48848 48889])
                            ("self" variable nil (reparse-symbol indented_block_body) [48898 48917])
                            ("self" variable nil (reparse-symbol indented_block_body) [48926 48957])
                            ("self" variable nil (reparse-symbol indented_block_body) [49039 49093]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48269 48273])
                            ("xy" variable nil (reparse-symbol function_parameters) [48275 48277])
                            ("width" variable nil (reparse-symbol function_parameters) [48279 48284])
                            ("height" variable nil (reparse-symbol function_parameters) [48286 48292])
                            ("angle" variable nil (reparse-symbol function_parameters) [48294 48299])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48303 48311]))                          
                        :documentation "
        Parameters
        ----------
        xy : (float, float)
            xy coordinates of ellipse centre.
        width : float
            Total length (diameter) of horizontal axis.
        height : float
            Total length (diameter) of vertical axis.
        angle : float, default: 0
            Rotation in degrees anti-clockwise.

        Notes
        -----
        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48226 49094])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49124 49128]))                          
                        :documentation "
        Notes
        -----
        This cannot be called until after this has been added to an Axes,
        otherwise unit conversion will fail. This makes it very important to
        call the accessor method and not directly access the transformation
        member variable.
        ")
                        (reparse-symbol indented_block_body) [49099 49821])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49839 49843]))                          
                        :documentation "Return the path of the ellipse.")
                        (reparse-symbol indented_block_body) [49826 49918])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49947 49951]))                          )
                        (reparse-symbol indented_block_body) [49923 50027])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50047 50051])
                            ("xy" variable nil (reparse-symbol function_parameters) [50053 50055]))                          
                        :documentation "
        Set the center of the ellipse.

        Parameters
        ----------
        xy : (float, float)
        ")
                        (reparse-symbol indented_block_body) [50032 50240])
                    ("get_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50260 50264]))                          
                        :documentation "Return the center of the ellipse.")
                        (reparse-symbol indented_block_body) [50245 50343])
                    ("center" variable nil (reparse-symbol indented_block_body) [50348 50389])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50409 50413])
                            ("width" variable nil (reparse-symbol function_parameters) [50415 50420]))                          
                        :documentation "
        Set the width of the ellipse.

        Parameters
        ----------
        width : float
        ")
                        (reparse-symbol indented_block_body) [50395 50600])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50619 50623]))                          
                        :documentation "
        Return the width of the ellipse.
        ")
                        (reparse-symbol indented_block_body) [50605 50718])
                    ("width" variable nil (reparse-symbol indented_block_body) [50723 50761])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50782 50786])
                            ("height" variable nil (reparse-symbol function_parameters) [50788 50794]))                          
                        :documentation "
        Set the height of the ellipse.

        Parameters
        ----------
        height : float
        ")
                        (reparse-symbol indented_block_body) [50767 50978])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50998 51002]))                          
                        :documentation "Return the height of the ellipse.")
                        (reparse-symbol indented_block_body) [50983 51081])
                    ("height" variable nil (reparse-symbol indented_block_body) [51086 51127])
                    ("set_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51147 51151])
                            ("angle" variable nil (reparse-symbol function_parameters) [51153 51158]))                          
                        :documentation "
        Set the angle of the ellipse.

        Parameters
        ----------
        angle : float
        ")
                        (reparse-symbol indented_block_body) [51133 51338])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51357 51361]))                          
                        :documentation "Return the angle of the ellipse.")
                        (reparse-symbol indented_block_body) [51343 51438])
                    ("angle" variable nil (reparse-symbol indented_block_body) [51443 51481]))                  
                :type "class")
                nil [47946 51482])
            ("Annulus" type
               (:documentation "
    An elliptical annulus.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : (float, float)
            xy coordinates of annulus centre.
        r : float or (float, float)
            The radius, or semi-axes:

            - If float: radius of the outer circle.
            - If two floats: semi-major and -minor axes of outer ellipse.
        width : float
            Width (thickness) of the annular ring. The width is measured inward
            from the outer ellipse so that for the inner ellipse the semi-axes
            are given by ``r - width``. *width* must be less than or equal to
            the semi-minor axis.
        angle : float, default: 0
            Rotation angle in degrees (anti-clockwise from the positive
            x-axis). Ignored for circular annuli (i.e., if *r* is a scalar).
        **kwargs
            Keyword arguments control the `Patch` properties:

            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [51647 52558])
                            ("super" code nil (reparse-symbol indented_block_body) [52567 52593])
                            ("self" code nil (reparse-symbol indented_block_body) [52603 52620])
                            ("self" variable nil (reparse-symbol indented_block_body) [52629 52645])
                            ("self" variable nil (reparse-symbol indented_block_body) [52654 52672])
                            ("self" variable nil (reparse-symbol indented_block_body) [52681 52699])
                            ("self" variable nil (reparse-symbol indented_block_body) [52708 52725]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51597 51601])
                            ("xy" variable nil (reparse-symbol function_parameters) [51603 51605])
                            ("r" variable nil (reparse-symbol function_parameters) [51607 51608])
                            ("width" variable nil (reparse-symbol function_parameters) [51610 51615])
                            ("angle" variable nil (reparse-symbol function_parameters) [51617 51622])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51628 51636]))                          
                        :documentation "
        Parameters
        ----------
        xy : (float, float)
            xy coordinates of annulus centre.
        r : float or (float, float)
            The radius, or semi-axes:

            - If float: radius of the outer circle.
            - If two floats: semi-major and -minor axes of outer ellipse.
        width : float
            Width (thickness) of the annular ring. The width is measured inward
            from the outer ellipse so that for the inner ellipse the semi-axes
            are given by ``r - width``. *width* must be less than or equal to
            the semi-minor axis.
        angle : float, default: 0
            Rotation angle in degrees (anti-clockwise from the positive
            x-axis). Ignored for circular annuli (i.e., if *r* is a scalar).
        **kwargs
            Keyword arguments control the `Patch` properties:

            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51554 52726])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52743 52747]))                          )
                        (reparse-symbol indented_block_body) [52731 52976])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52996 53000])
                            ("xy" variable nil (reparse-symbol function_parameters) [53002 53004]))                          
                        :documentation "
        Set the center of the annulus.

        Parameters
        ----------
        xy : (float, float)
        ")
                        (reparse-symbol indented_block_body) [52981 53215])
                    ("get_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53235 53239]))                          
                        :documentation "Return the center of the annulus.")
                        (reparse-symbol indented_block_body) [53220 53318])
                    ("center" variable nil (reparse-symbol indented_block_body) [53323 53364])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53384 53388])
                            ("width" variable nil (reparse-symbol function_parameters) [53390 53395]))                          
                        :documentation "
        Set the width (thickness) of the annulus ring.

        The width is measured inwards from the outer ellipse.

        Parameters
        ----------
        width : float
        ")
                        (reparse-symbol indented_block_body) [53370 53832])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53851 53855]))                          
                        :documentation "Return the width (thickness) of the annulus ring.")
                        (reparse-symbol indented_block_body) [53837 53949])
                    ("width" variable nil (reparse-symbol indented_block_body) [53954 53992])
                    ("set_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54012 54016])
                            ("angle" variable nil (reparse-symbol function_parameters) [54018 54023]))                          
                        :documentation "
        Set the tilt angle of the annulus.

        Parameters
        ----------
        angle : float
        ")
                        (reparse-symbol indented_block_body) [53998 54234])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54253 54257]))                          
                        :documentation "Return the angle of the annulus.")
                        (reparse-symbol indented_block_body) [54239 54334])
                    ("angle" variable nil (reparse-symbol indented_block_body) [54339 54377])
                    ("set_semimajor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54401 54405])
                            ("a" variable nil (reparse-symbol function_parameters) [54407 54408]))                          
                        :documentation "
        Set the semi-major axis *a* of the annulus.

        Parameters
        ----------
        a : float
        ")
                        (reparse-symbol indented_block_body) [54383 54622])
                    ("set_semiminor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54645 54649])
                            ("b" variable nil (reparse-symbol function_parameters) [54651 54652]))                          
                        :documentation "
        Set the semi-minor axis *b* of the annulus.

        Parameters
        ----------
        b : float
        ")
                        (reparse-symbol indented_block_body) [54627 54866])
                    ("set_radii" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54885 54889])
                            ("r" variable nil (reparse-symbol function_parameters) [54891 54892]))                          
                        :documentation "
        Set the semi-major (*a*) and semi-minor radii (*b*) of the annulus.

        Parameters
        ----------
        r : float or (float, float)
            The radius, or semi-axes:

            - If float: radius of the outer circle.
            - If two floats: semi-major and -minor axes of outer ellipse.
        ")
                        (reparse-symbol indented_block_body) [54871 55509])
                    ("get_radii" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55528 55532]))                          
                        :documentation "Return the semi-major and semi-minor radii of the annulus.")
                        (reparse-symbol indented_block_body) [55514 55638])
                    ("radii" variable nil (reparse-symbol indented_block_body) [55643 55681])
                    ("_transform_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55708 55712])
                            ("verts" variable nil (reparse-symbol function_parameters) [55714 55719])
                            ("a" variable nil (reparse-symbol function_parameters) [55721 55722])
                            ("b" variable nil (reparse-symbol function_parameters) [55724 55725]))                          )
                        (reparse-symbol indented_block_body) [55687 55952])
                    ("_recompute_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55977 55981]))                          )
                        (reparse-symbol indented_block_body) [55957 56529])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56547 56551]))                          )
                        (reparse-symbol indented_block_body) [56534 56646]))                  
                :type "class")
                nil [51484 56646])
            ("Circle" type
               (:documentation "
    A circle patch.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56723 56727]))                          )
                        (reparse-symbol indented_block_body) [56711 56862])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a true circle at center *xy* = (*x*, *y*) with given *radius*.

        Unlike `CirclePolygon` which is a polygonal approximation, this uses
        Bezier splines and is much closer to a scale-free circle.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [56949 57249])
                            ("super" code nil (reparse-symbol indented_block_body) [57258 57312])
                            ("self" variable nil (reparse-symbol indented_block_body) [57321 57341]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56910 56914])
                            ("xy" variable nil (reparse-symbol function_parameters) [56916 56918])
                            ("radius" variable nil (reparse-symbol function_parameters) [56920 56926])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56930 56938]))                          
                        :documentation "
        Create a true circle at center *xy* = (*x*, *y*) with given *radius*.

        Unlike `CirclePolygon` which is a polygonal approximation, this uses
        Bezier splines and is much closer to a scale-free circle.

        Valid keyword arguments are:

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56867 57342])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57362 57366])
                            ("radius" variable nil (reparse-symbol function_parameters) [57368 57374]))                          
                        :documentation "
        Set the radius of the circle.

        Parameters
        ----------
        radius : float
        ")
                        (reparse-symbol indented_block_body) [57347 57573])
                    ("get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57593 57597]))                          
                        :documentation "Return the radius of the circle.")
                        (reparse-symbol indented_block_body) [57578 57678])
                    ("radius" variable nil (reparse-symbol indented_block_body) [57683 57724]))                  
                :type "class")
                nil [56648 57725])
            ("Arc" type
               (:documentation "
    An elliptical arc, i.e. a segment of an ellipse.

    Due to internal optimizations, there are certain restrictions on using Arc:

    - The arc cannot be filled.

    - The arc must be used in an `~.axes.Axes` instance. It can not be added
      directly to a `.Figure` because it is optimized to only render the
      segments that are inside the axes bounding box with high resolution.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58172 58176]))                          )
                        (reparse-symbol indented_block_body) [58160 58438])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : (float, float)
            The center of the ellipse.

        width : float
            The length of the horizontal axis.

        height : float
            The length of the vertical axis.

        angle : float
            Rotation of the ellipse in degrees (counterclockwise).

        theta1, theta2 : float, default: 0, 360
            Starting and ending angles of the arc in degrees. These values
            are relative to *angle*, e.g. if *angle* = 45 and *theta1* = 90
            the absolute starting angle is 135.
            Default *theta1* = 0, *theta2* = 360, i.e. a complete ellipse.
            The arc is drawn in the counterclockwise direction.
            Angles greater than or equal to 360, or smaller than 0, are
            represented by an equivalent angle in the range [0, 360), by
            taking the input value mod 360.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties
            Most `.Patch` properties are supported as keyword arguments,
            with the exception of *fill* and *facecolor* because filling is
            not supported.

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [58584 59800])
                            ("fill" variable nil (reparse-symbol indented_block_body) [59809 59848])
                            ("if" code nil (reparse-symbol indented_block_body) [59857 59928])
                            ("super" code nil (reparse-symbol indented_block_body) [59937 59989])
                            ("self" variable nil (reparse-symbol indented_block_body) [59999 60019])
                            ("self" variable nil (reparse-symbol indented_block_body) [60028 60048]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58486 58490])
                            ("xy" variable nil (reparse-symbol function_parameters) [58492 58494])
                            ("width" variable nil (reparse-symbol function_parameters) [58496 58501])
                            ("height" variable nil (reparse-symbol function_parameters) [58503 58509])
                            ("angle" variable nil (reparse-symbol function_parameters) [58511 58516])
                            ("theta1" variable nil (reparse-symbol function_parameters) [58539 58545])
                            ("theta2" variable nil (reparse-symbol function_parameters) [58551 58557])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58565 58573]))                          
                        :documentation "
        Parameters
        ----------
        xy : (float, float)
            The center of the ellipse.

        width : float
            The length of the horizontal axis.

        height : float
            The length of the vertical axis.

        angle : float
            Rotation of the ellipse in degrees (counterclockwise).

        theta1, theta2 : float, default: 0, 360
            Starting and ending angles of the arc in degrees. These values
            are relative to *angle*, e.g. if *angle* = 45 and *theta1* = 90
            the absolute starting angle is 135.
            Default *theta1* = 0, *theta2* = 360, i.e. a complete ellipse.
            The arc is drawn in the counterclockwise direction.
            Angles greater than or equal to 360, or smaller than 0, are
            represented by an equivalent angle in the range [0, 360), by
            taking the input value mod 360.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties
            Most `.Patch` properties are supported as keyword arguments,
            with the exception of *fill* and *facecolor* because filling is
            not supported.

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58443 60049])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60095 60099])
                            ("renderer" variable nil (reparse-symbol function_parameters) [60101 60109]))                          
                        :documentation "
        Draw the arc to the given *renderer*.

        Notes
        -----
        Ellipses are normally drawn using an approximation that uses
        eight cubic Bezier splines.  The error of this approximation
        is 1.89818e-6, according to this unverified source:

          Lancaster, Don.  *Approximating a Circle or an Ellipse Using
          Four Bezier Cubic Splines.*

          https://www.tinaja.com/glib/ellipse4.pdf

        There is a use case where very large ellipses must be drawn
        with very high accuracy, and it is too expensive to render the
        entire ellipse with enough segments (either splines or line
        segments).  Therefore, in the case where either radius of the
        ellipse is large enough that the error of the spline
        approximation will be visible (greater than one pixel offset
        from the ideal), a different technique is used.

        In that case, only the visible parts of the ellipse are drawn,
        with each visible arc using a fixed number of spline segments
        (8).  The algorithm proceeds as follows:

        1. The points where the ellipse intersects the axes bounding
           box are located.  (This is done be performing an inverse
           transformation on the axes bbox such that it is relative
           to the unit circle -- this makes the intersection
           calculation much easier than doing rotated ellipse
           intersection directly).

           This uses the \"line intersecting a circle\" algorithm from:

               Vince, John.  *Geometry for Computer Graphics: Formulae,
               Examples & Proofs.*  London: Springer-Verlag, 2005.

        2. The angles of each of the intersection points are calculated.

        3. Proceeding counterclockwise starting in the positive
           x-direction, each of the visible arc-segments between the
           pairs of vertices are drawn using the Bezier arc
           approximation technique implemented in `.Path.arc`.
        ")
                        (reparse-symbol indented_block_body) [60054 67161]))                  
                :type "class")
                nil [57727 67161])
            ("bbox_artist" function
               (:documentation "
    A debug function to draw a rectangle around the bounding
    box returned by an artist's `.Artist.get_window_extent`
    to test whether the artist is returning the correct bbox.

    *props* is a dict of rectangle props with the additional property
    'pad' that sets the padding around the bbox in points.
    "
                :arguments 
                  ( ("artist" variable nil (reparse-symbol function_parameters) [67179 67185])
                    ("renderer" variable nil (reparse-symbol function_parameters) [67187 67195])
                    ("props" variable nil (reparse-symbol function_parameters) [67197 67202])
                    ("fill" variable nil (reparse-symbol function_parameters) [67209 67213]))                  )
                nil [67163 68020])
            ("draw_bbox" function
               (:documentation "
    A debug function to draw a rectangle around the bounding
    box returned by an artist's `.Artist.get_window_extent`
    to test whether the artist is returning the correct bbox.
    "
                :arguments 
                  ( ("bbox" variable nil (reparse-symbol function_parameters) [68036 68040])
                    ("renderer" variable nil (reparse-symbol function_parameters) [68042 68050])
                    ("color" variable nil (reparse-symbol function_parameters) [68052 68057])
                    ("trans" variable nil (reparse-symbol function_parameters) [68063 68068]))                  )
                nil [68022 68494])
            ("_simpleprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    {stylename: styleclass}, return a string rep of the list of keys.
    Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [68520 68527]))                  )
                nil [68496 68789])
            ("_Style" type
               (:documentation "
    A base class for the Styles. It is meant to be a container class,
    where actual styles are declared as subclass of it, and it
    provides some helper functions.
    "
                :members 
                  ( ("__new__" function
                       (:documentation "Return the instance of the subclass with the given style name."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [69006 69009])
                            ("stylename" variable nil (reparse-symbol function_parameters) [69011 69020])
                            ("kw" variable nil (reparse-symbol function_parameters) [69022 69026]))                          )
                        (reparse-symbol indented_block_body) [68994 69810])
                    ("get_styles" function
                       (:documentation "Return a dictionary of available styles."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [69847 69850]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [69815 69939])
                    ("pprint_styles" function
                       (:documentation "Return the available styles as pretty-printed string."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [69979 69982]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [69944 71022])
                    ("register" function
                       (:documentation "Register a new style."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [71057 71060])
                            ("name" variable nil (reparse-symbol function_parameters) [71062 71066])
                            ("style" variable nil (reparse-symbol function_parameters) [71068 71073]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [71027 71338]))                  
                :type "class")
                nil [68791 71338])
            ("_register_style" function
               (:documentation "Class decorator that stashes a class in a (style) dictionary."
                :arguments 
                  ( ("style_list" variable nil (reparse-symbol function_parameters) [71360 71370])
                    ("cls" variable nil (reparse-symbol function_parameters) [71372 71375])
                    ("name" variable nil (reparse-symbol function_parameters) [71385 71389]))                  )
                nil [71340 71628])
            ("BoxStyle" type
               (:documentation "
    `BoxStyle` is a container class which defines several
    boxstyle classes, which are used for `FancyBboxPatch`.

    A style object can be created as::

           BoxStyle.Round(pad=0.2)

    or::

           BoxStyle(\"Round\", pad=0.2)

    or::

           BoxStyle(\"Round, pad=0.2\")

    The following boxstyle classes are defined.

    %(AvailableBoxstyles)s

    An instance of any boxstyle class is an callable object,
    whose call signature is::

       __call__(self, x0, y0, width, height, mutation_size)

    and returns a `.Path` instance. *x0*, *y0*, *width* and
    *height* specify the location and size of the box to be
    drawn. *mutation_scale* determines the overall size of the
    mutation (by which I mean the transformation of the rectangle to
    the fancy box).
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [72469 72485])
                    ("" code nil (reparse-symbol indented_block_body) [72507 72514])
                    ("_Base" type
                       (:documentation "
        Abstract base class for styling of `.FancyBboxPatch`.

        This class is not an artist itself.  The `__call__` method returns the
        `~matplotlib.path.Path` for outlining the fancy box. The actual drawing
        is handled in `.FancyBboxPatch`.

        Subclasses may only use parameters with default values in their
        ``__init__`` method because they must be able to be initialized
        without arguments.

        Subclasses must implement the `__call__` method. It receives the
        enclosing rectangle *x0, y0, width, height* as well as the
        *mutation_size*, which scales the outline properties such as padding.
        It returns the outline of the fancy box as `.path.Path`.
        "
                        :members 
                          ( ("" code nil (reparse-symbol indented_block_body) [73300 73307])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [73330 73334])
                                    ("x0" variable nil (reparse-symbol function_parameters) [73336 73338])
                                    ("y0" variable nil (reparse-symbol function_parameters) [73340 73342])
                                    ("width" variable nil (reparse-symbol function_parameters) [73344 73349])
                                    ("height" variable nil (reparse-symbol function_parameters) [73351 73357])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [73359 73372]))                                  
                                :documentation "Return the `~.path.Path` outlining the given rectangle.")
                                (reparse-symbol indented_block_body) [73316 73520])
                            ("__init_subclass__" function (:arguments 
                              ( ("cls" variable nil (reparse-symbol function_parameters) [73707 73710]))                              ) (reparse-symbol indented_block_body) [73685 74965])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74987 74991])
                                    ("x0" variable nil (reparse-symbol function_parameters) [74993 74995])
                                    ("y0" variable nil (reparse-symbol function_parameters) [74997 74999])
                                    ("width" variable nil (reparse-symbol function_parameters) [75001 75006])
                                    ("height" variable nil (reparse-symbol function_parameters) [75008 75014])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [75016 75029]))                                  
                                :documentation "
            Given the location and size of the box, return the path of
            the box around it.

            Parameters
            ----------
            x0, y0, width, height : float
                Location and size of the box.
            mutation_size : float
                A reference scale for the mutation.

            Returns
            -------
            `~matplotlib.path.Path`
            ")
                                (reparse-symbol indented_block_body) [74974 75527]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [72519 75527])
                    ("" code nil (reparse-symbol indented_block_body) [75548 75561])
                    ("Square" type
                       (:documentation "A square box."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [75665 75831])
                                    ("self" variable nil (reparse-symbol indented_block_body) [75844 75858]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75637 75641])
                                    ("pad" variable nil (reparse-symbol function_parameters) [75643 75646]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [75624 75859])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75881 75885])
                                    ("x0" variable nil (reparse-symbol function_parameters) [75887 75889])
                                    ("y0" variable nil (reparse-symbol function_parameters) [75891 75893])
                                    ("width" variable nil (reparse-symbol function_parameters) [75895 75900])
                                    ("height" variable nil (reparse-symbol function_parameters) [75902 75908])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [75910 75923]))                                  )
                                (reparse-symbol indented_block_body) [75868 76321]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [75566 76321])
                    ("" code nil (reparse-symbol indented_block_body) [76342 76355])
                    ("Circle" type
                       (:documentation "A circular box."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [76461 76627])
                                    ("self" variable nil (reparse-symbol indented_block_body) [76640 76654]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [76433 76437])
                                    ("pad" variable nil (reparse-symbol function_parameters) [76439 76442]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [76420 76655])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [76677 76681])
                                    ("x0" variable nil (reparse-symbol function_parameters) [76683 76685])
                                    ("y0" variable nil (reparse-symbol function_parameters) [76687 76689])
                                    ("width" variable nil (reparse-symbol function_parameters) [76691 76696])
                                    ("height" variable nil (reparse-symbol function_parameters) [76698 76704])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [76706 76719]))                                  )
                                (reparse-symbol indented_block_body) [76664 77029]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [76360 77029])
                    ("" code nil (reparse-symbol indented_block_body) [77050 77063])
                    ("LArrow" type
                       (:documentation "A box in the shape of a left-pointing arrow."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [77198 77364])
                                    ("self" variable nil (reparse-symbol indented_block_body) [77377 77391]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [77170 77174])
                                    ("pad" variable nil (reparse-symbol function_parameters) [77176 77179]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [77157 77392])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [77414 77418])
                                    ("x0" variable nil (reparse-symbol function_parameters) [77420 77422])
                                    ("y0" variable nil (reparse-symbol function_parameters) [77424 77426])
                                    ("width" variable nil (reparse-symbol function_parameters) [77428 77433])
                                    ("height" variable nil (reparse-symbol function_parameters) [77435 77441])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [77443 77456]))                                  )
                                (reparse-symbol indented_block_body) [77401 78171]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [77068 78171])
                    ("" code nil (reparse-symbol indented_block_body) [78192 78205])
                    ("RArrow" type
                       (:documentation "A box in the shape of a right-pointing arrow."
                        :superclasses ("LArrow")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [78314 78318])
                                    ("x0" variable nil (reparse-symbol function_parameters) [78320 78322])
                                    ("y0" variable nil (reparse-symbol function_parameters) [78324 78326])
                                    ("width" variable nil (reparse-symbol function_parameters) [78328 78333])
                                    ("height" variable nil (reparse-symbol function_parameters) [78335 78341])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [78343 78356]))                                  )
                                (reparse-symbol indented_block_body) [78301 78547]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [78210 78547])
                    ("" code nil (reparse-symbol indented_block_body) [78568 78581])
                    ("DArrow" type
                       (:documentation "A box in the shape of a two-way arrow."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [78775 78941])
                                    ("self" variable nil (reparse-symbol indented_block_body) [78954 78968]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [78747 78751])
                                    ("pad" variable nil (reparse-symbol function_parameters) [78753 78756]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [78734 78969])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [78991 78995])
                                    ("x0" variable nil (reparse-symbol function_parameters) [78997 78999])
                                    ("y0" variable nil (reparse-symbol function_parameters) [79001 79003])
                                    ("width" variable nil (reparse-symbol function_parameters) [79005 79010])
                                    ("height" variable nil (reparse-symbol function_parameters) [79012 79018])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [79020 79033]))                                  )
                                (reparse-symbol indented_block_body) [78978 79997]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [78586 79997])
                    ("" code nil (reparse-symbol indented_block_body) [80018 80031])
                    ("Round" type
                       (:documentation "A box with round corners."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            rounding_size : float, default: *pad*
                Radius of the corners.
            \"\"\"" code nil (reparse-symbol indented_block_body) [80166 80421])
                                    ("self" variable nil (reparse-symbol indented_block_body) [80434 80448])
                                    ("self" variable nil (reparse-symbol indented_block_body) [80461 80495]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [80118 80122])
                                    ("pad" variable nil (reparse-symbol function_parameters) [80124 80127])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [80133 80146]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            rounding_size : float, default: *pad*
                Radius of the corners.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [80105 80496])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [80518 80522])
                                    ("x0" variable nil (reparse-symbol function_parameters) [80524 80526])
                                    ("y0" variable nil (reparse-symbol function_parameters) [80528 80530])
                                    ("width" variable nil (reparse-symbol function_parameters) [80532 80537])
                                    ("height" variable nil (reparse-symbol function_parameters) [80539 80545])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [80547 80560]))                                  )
                                (reparse-symbol indented_block_body) [80505 81907]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [80036 81907])
                    ("" code nil (reparse-symbol indented_block_body) [81928 81941])
                    ("Round4" type
                       (:documentation "A box with rounded edges."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            rounding_size : float, default: *pad*/2
                Rounding of edges.
            \"\"\"" code nil (reparse-symbol indented_block_body) [82077 82330])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82343 82357])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82370 82404]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [82029 82033])
                                    ("pad" variable nil (reparse-symbol function_parameters) [82035 82038])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [82044 82057]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            rounding_size : float, default: *pad*/2
                Rounding of edges.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [82016 82405])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [82427 82431])
                                    ("x0" variable nil (reparse-symbol function_parameters) [82433 82435])
                                    ("y0" variable nil (reparse-symbol function_parameters) [82437 82439])
                                    ("width" variable nil (reparse-symbol function_parameters) [82441 82446])
                                    ("height" variable nil (reparse-symbol function_parameters) [82448 82454])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [82456 82469]))                                  )
                                (reparse-symbol indented_block_body) [82414 83618]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [81946 83618])
                    ("" code nil (reparse-symbol indented_block_body) [83639 83652])
                    ("Sawtooth" type
                       (:documentation "A box with a sawtooth outline."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            tooth_size : float, default: *pad*/2
                Size of the sawtooth.
            \"\"\"" code nil (reparse-symbol indented_block_body) [83792 84045])
                                    ("self" variable nil (reparse-symbol indented_block_body) [84058 84072])
                                    ("self" variable nil (reparse-symbol indented_block_body) [84085 84113]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [83747 83751])
                                    ("pad" variable nil (reparse-symbol function_parameters) [83753 83756])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [83762 83772]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float, default: 0.3
                The amount of padding around the original box.
            tooth_size : float, default: *pad*/2
                Size of the sawtooth.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [83734 84114])
                            ("_get_sawtooth_vertices" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [84150 84154])
                                    ("x0" variable nil (reparse-symbol function_parameters) [84156 84158])
                                    ("y0" variable nil (reparse-symbol function_parameters) [84160 84162])
                                    ("width" variable nil (reparse-symbol function_parameters) [84164 84169])
                                    ("height" variable nil (reparse-symbol function_parameters) [84171 84177])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [84179 84192]))                                  )
                                (reparse-symbol indented_block_body) [84123 86780])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86802 86806])
                                    ("x0" variable nil (reparse-symbol function_parameters) [86808 86810])
                                    ("y0" variable nil (reparse-symbol function_parameters) [86812 86814])
                                    ("width" variable nil (reparse-symbol function_parameters) [86816 86821])
                                    ("height" variable nil (reparse-symbol function_parameters) [86823 86829])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [86831 86844]))                                  )
                                (reparse-symbol indented_block_body) [86789 87070]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [83657 87070])
                    ("" code nil (reparse-symbol indented_block_body) [87091 87104])
                    ("Roundtooth" type
                       (:documentation "A box with a rounded sawtooth outline."
                        :superclasses ("Sawtooth")
                        :members 
                          ( ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87212 87216])
                                    ("x0" variable nil (reparse-symbol function_parameters) [87218 87220])
                                    ("y0" variable nil (reparse-symbol function_parameters) [87222 87224])
                                    ("width" variable nil (reparse-symbol function_parameters) [87226 87231])
                                    ("height" variable nil (reparse-symbol function_parameters) [87233 87239])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [87241 87254]))                                  )
                                (reparse-symbol indented_block_body) [87199 87816]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [87109 87816]))                  
                :type "class")
                nil [71630 87816])
            ("ConnectionStyle" type
               (:documentation "
    `ConnectionStyle` is a container class which defines
    several connectionstyle classes, which is used to create a path
    between two points.  These are mainly used with `FancyArrowPatch`.

    A connectionstyle object can be either created as::

           ConnectionStyle.Arc3(rad=0.2)

    or::

           ConnectionStyle(\"Arc3\", rad=0.2)

    or::

           ConnectionStyle(\"Arc3, rad=0.2\")

    The following classes are defined

    %(AvailableConnectorstyles)s

    An instance of any connection style class is an callable object,
    whose call signature is::

        __call__(self, posA, posB,
                 patchA=None, patchB=None,
                 shrinkA=2., shrinkB=2.)

    and it returns a `.Path` instance. *posA* and *posB* are
    tuples of (x, y) coordinates of the two points to be
    connected. *patchA* (or *patchB*) is given, the returned path is
    clipped so that it start (or end) from the boundary of the
    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
    which is given in points.
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [88915 88931])
                    ("_Base" type
                       (:documentation "
        A base class for connectionstyle classes. The subclass needs
        to implement a *connect* method whose call signature is::

          connect(posA, posB)

        where posA and posB are tuples of x, y coordinates to be
        connected.  The method needs to return a path connecting two
        points. This base class defines a __call__ method, and a few
        helper methods.
        "
                        :members 
                          ( ("SimpleEvent" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self, self" code nil (reparse-symbol indented_block_body) [89448 89467]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [89421 89425])
                                            ("xy" variable nil (reparse-symbol function_parameters) [89427 89429]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [89408 89468]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [89377 89468])
                            ("_clip" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89487 89491])
                                    ("path" variable nil (reparse-symbol function_parameters) [89493 89497])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [89499 89505])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [89507 89513]))                                  
                                :documentation "
            Clip the path to the boundary of the patchA and patchB.
            The starting point of the path needed to be inside of the
            patchA and the end point inside the patch B. The *contains*
            methods of each patch object is utilized to test if the point
            is inside the path.
            ")
                                (reparse-symbol indented_block_body) [89477 90655])
                            ("_shrink" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [90676 90680])
                                    ("path" variable nil (reparse-symbol function_parameters) [90682 90686])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [90688 90695])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [90697 90704]))                                  
                                :documentation "
            Shrink the path by fixed size (in points) with shrinkA and shrinkB.
            ")
                                (reparse-symbol indented_block_body) [90664 91321])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [91343 91347])
                                    ("posA" variable nil (reparse-symbol function_parameters) [91349 91353])
                                    ("posB" variable nil (reparse-symbol function_parameters) [91355 91359])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [91382 91389])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [91394 91401])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [91406 91412])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [91419 91425]))                                  
                                :documentation "
            Call the *connect* method to create a path between *posA* and
            *posB*; then clip and shrink the path.
            ")
                                (reparse-symbol indented_block_body) [91330 91796]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [88937 91796])
                    ("" code nil (reparse-symbol indented_block_body) [91817 91830])
                    ("Arc3" type
                       (:documentation "
        Creates a simple quadratic Bezier curve between two
        points. The curve is created so that the middle control point
        (C1) is located at the same distance from the start (C0) and
        end points(C2) and the distance of the C1 to the line
        connecting C0-C2 is *rad* times the distance of C0-C2.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *rad*
              curvature of the curve.
            \"\"\"" code nil (reparse-symbol indented_block_body) [92251 92326])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92339 92353]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [92224 92228])
                                    ("rad" variable nil (reparse-symbol function_parameters) [92230 92233]))                                  
                                :documentation "
            *rad*
              curvature of the curve.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [92211 92354])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [92375 92379])
                                    ("posA" variable nil (reparse-symbol function_parameters) [92381 92385])
                                    ("posB" variable nil (reparse-symbol function_parameters) [92387 92391]))                                  )
                                (reparse-symbol indented_block_body) [92363 92860]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [91835 92860])
                    ("" code nil (reparse-symbol indented_block_body) [92881 92894])
                    ("Angle3" type
                       (:documentation "
        Creates a simple quadratic Bezier curve between two
        points. The middle control points is placed at the
        intersecting point of two lines which cross the start and
        end point, and have a slope of angleA and angleB, respectively.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            \"\"\"" code nil (reparse-symbol indented_block_body) [93263 93405])
                                    ("self" variable nil (reparse-symbol indented_block_body) [93419 93439])
                                    ("self" variable nil (reparse-symbol indented_block_body) [93452 93472]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [93223 93227])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [93229 93235])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [93240 93246]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [93210 93473])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [93494 93498])
                                    ("posA" variable nil (reparse-symbol function_parameters) [93500 93504])
                                    ("posB" variable nil (reparse-symbol function_parameters) [93506 93510]))                                  )
                                (reparse-symbol indented_block_body) [93482 94060]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [92899 94060])
                    ("" code nil (reparse-symbol indented_block_body) [94081 94094])
                    ("Angle" type
                       (:documentation "
        Creates a piecewise continuous quadratic Bezier path between
        two points. The path has a one passing-through point placed at
        the intersecting point of two lines which cross the start
        and end point, and have a slope of angleA and angleB, respectively.
        The connecting edges are rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            \"\"\"" code nil (reparse-symbol indented_block_body) [94548 94751])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94765 94785])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94798 94818])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94832 94846]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94500 94504])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [94506 94512])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [94517 94523])
                                    ("rad" variable nil (reparse-symbol function_parameters) [94527 94530]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [94487 94847])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94868 94872])
                                    ("posA" variable nil (reparse-symbol function_parameters) [94874 94878])
                                    ("posB" variable nil (reparse-symbol function_parameters) [94880 94884]))                                  )
                                (reparse-symbol indented_block_body) [94856 96081]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [94099 96081])
                    ("" code nil (reparse-symbol indented_block_body) [96102 96115])
                    ("Arc" type
                       (:documentation "
        Creates a piecewise continuous quadratic Bezier path between
        two points. The path can have two passing-through points, a
        point placed at the distance of armA and angle of angleA from
        point A, another point with respect to point B. The edges are
        rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            \"\"\"" code nil (reparse-symbol indented_block_body) [96558 96892])
                                    ("self" variable nil (reparse-symbol indented_block_body) [96906 96926])
                                    ("self" variable nil (reparse-symbol indented_block_body) [96939 96959])
                                    ("self" variable nil (reparse-symbol indented_block_body) [96972 96988])
                                    ("self" variable nil (reparse-symbol indented_block_body) [97001 97017])
                                    ("self" variable nil (reparse-symbol indented_block_body) [97031 97045]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [96489 96493])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [96495 96501])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [96505 96511])
                                    ("armA" variable nil (reparse-symbol function_parameters) [96515 96519])
                                    ("armB" variable nil (reparse-symbol function_parameters) [96526 96530])
                                    ("rad" variable nil (reparse-symbol function_parameters) [96537 96540]))                                  
                                :documentation "
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [96476 97046])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [97067 97071])
                                    ("posA" variable nil (reparse-symbol function_parameters) [97073 97077])
                                    ("posB" variable nil (reparse-symbol function_parameters) [97079 97083]))                                  )
                                (reparse-symbol indented_block_body) [97055 99187]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [96120 99187])
                    ("" code nil (reparse-symbol indented_block_body) [99208 99221])
                    ("Bar" type
                       (:documentation "
        A line with *angle* between A and B with *armA* and
        *armB*. One of the arms is extended so that they are connected in
        a right angle. The length of armA is determined by (*armA*
        + *fraction* x AB distance). Same for armB.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            \"\"\"" code nil (reparse-symbol indented_block_body) [99606 100072])
                                    ("self" variable nil (reparse-symbol indented_block_body) [100085 100101])
                                    ("self" variable nil (reparse-symbol indented_block_body) [100114 100130])
                                    ("self" variable nil (reparse-symbol indented_block_body) [100143 100167])
                                    ("self" variable nil (reparse-symbol indented_block_body) [100180 100198]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [99543 99547])
                                    ("armA" variable nil (reparse-symbol function_parameters) [99549 99553])
                                    ("armB" variable nil (reparse-symbol function_parameters) [99558 99562])
                                    ("fraction" variable nil (reparse-symbol function_parameters) [99567 99575])
                                    ("angle" variable nil (reparse-symbol function_parameters) [99581 99586]))                                  
                                :documentation "
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [99530 100199])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [100220 100224])
                                    ("posA" variable nil (reparse-symbol function_parameters) [100226 100230])
                                    ("posB" variable nil (reparse-symbol function_parameters) [100232 100236]))                                  )
                                (reparse-symbol indented_block_body) [100208 101509]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [99226 101509]))                  
                :type "class")
                nil [87818 101509])
            ("_point_along_a_line" function
               (:documentation "
    Return the point on the line connecting (*x0*, *y0*) -- (*x1*, *y1*) whose
    distance from (*x0*, *y0*) is *d*.
    "
                :arguments 
                  ( ("x0" variable nil (reparse-symbol function_parameters) [101535 101537])
                    ("y0" variable nil (reparse-symbol function_parameters) [101539 101541])
                    ("x1" variable nil (reparse-symbol function_parameters) [101543 101545])
                    ("y1" variable nil (reparse-symbol function_parameters) [101547 101549])
                    ("d" variable nil (reparse-symbol function_parameters) [101551 101552]))                  )
                nil [101511 101817])
            ("ArrowStyle" type
               (:documentation "
    `ArrowStyle` is a container class which defines several
    arrowstyle classes, which is used to create an arrow path along a
    given path.  These are mainly used with `FancyArrowPatch`.

    A arrowstyle object can be either created as::

           ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy\", head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy, head_length=.4, head_width=.4, tail_width=.4\")

    The following classes are defined

    %(AvailableArrowstyles)s

    An instance of any arrow style class is a callable object,
    whose call signature is::

        __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)

    and it returns a tuple of a `.Path` instance and a boolean
    value. *path* is a `.Path` instance along which the arrow
    will be drawn. *mutation_size* and *aspect_ratio* have the same
    meaning as in `BoxStyle`. *linewidth* is a line width to be
    stroked. This is meant to be used to correct the location of the
    head so that it does not overshoot the destination point, but not all
    classes support it.
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [103023 103039])
                    ("_Base" type
                       (:documentation "
        Arrow Transmuter Base class

        ArrowTransmuterBase and its derivatives are used to make a fancy
        arrow around a given path. The __call__ method returns a path
        (which will be used to create a PathPatch instance) and a boolean
        value indicating the path is open therefore is not fillable.  This
        class is not an artist and actual drawing of the fancy arrow is
        done by the FancyArrowPatch class.
        "
                        :members 
                          ( ("ensure_quadratic_bezier" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("path" variable nil (reparse-symbol function_parameters) [103760 103764]))                                  
                                :documentation "
            Some ArrowStyle classes only works with a simple quadratic
            Bezier curve (created with `.ConnectionStyle.Arc3` or
            `.ConnectionStyle.Angle3`). This static method checks if the
            provided path is a simple quadratic Bezier curve and returns its
            control points if true.
            ")
                                (reparse-symbol indented_block_body) [103710 104451])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [104474 104478])
                                    ("path" variable nil (reparse-symbol function_parameters) [104480 104484])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [104486 104499])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [104501 104510]))                                  
                                :documentation "
            The transmute method is the very core of the ArrowStyle class and
            must be overridden in the subclasses. It receives the path object
            along which the arrow will be drawn, and the mutation_size, with
            which the arrow head etc. will be scaled. The linewidth may be
            used to adjust the path so that it does not pass beyond the given
            points. It returns a tuple of a Path instance and a boolean. The
            boolean value indicate whether the path can be filled or not. The
            return value can also be a list of paths and list of booleans of a
            same length.
            ")
                                (reparse-symbol indented_block_body) [104460 105253])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [105275 105279])
                                    ("path" variable nil (reparse-symbol function_parameters) [105281 105285])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [105287 105300])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [105302 105311])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [105334 105346]))                                  
                                :documentation "
            The __call__ method is a thin wrapper around the transmute method
            and takes care of the aspect ratio.
            ")
                                (reparse-symbol indented_block_body) [105262 106491]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [103045 106491])
                    ("_Curve" type
                       (:documentation "
        A simple arrow which will work with any path instance. The
        returned path is the concatenation of the original path, and at
        most two paths representing the arrow head or bracket at the begin
        point and at the end point. The arrow heads can be either open
        or closed.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("beginarrow" variable nil (reparse-symbol indented_block_body) [106854 106882])
                            ("arrow" variable nil (reparse-symbol indented_block_body) [106920 106931])
                            ("fillbegin" variable nil (reparse-symbol indented_block_body) [106940 106967])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, default: 0.4
                Length of the arrow head, relative to *mutation_scale*.
            head_width : float, default: 0.2
                Width of the arrow head, relative to *mutation_scale*.
            widthA : float, default: 1.0
                Width of the bracket at the beginning of the arrow
            widthB : float, default: 1.0
                Width of the bracket at the end of the arrow
            lengthA : float, default: 0.2
                Length of the bracket at the beginning of the arrow
            lengthB : float, default: 0.2
                Length of the bracket at the end of the arrow
            angleA : float, default 0
                Orientation of the bracket at the beginning, as a
                counterclockwise angle. 0 degrees means perpendicular
                to the line.
            angleB : float, default 0
                Orientation of the bracket at the beginning, as a
                counterclockwise angle. 0 degrees means perpendicular
                to the line.
            scaleA : float, default *mutation_size*
                The mutation_size for the beginning bracket
            scaleB : float, default *mutation_size*
                The mutation_size for the end bracket
            \"\"\"" code nil (reparse-symbol indented_block_body) [107206 108553])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [108567 108626])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [108639 108680])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [108693 108738])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [108751 108792])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [108805 108846])
                                    ("self" variable nil (reparse-symbol indented_block_body) [108860 108889])
                                    ("self" variable nil (reparse-symbol indented_block_body) [108902 108934])
                                    ("self" variable nil (reparse-symbol indented_block_body) [108947 108974])
                                    ("self" variable nil (reparse-symbol indented_block_body) [108987 109017])
                                    ("if" code nil (reparse-symbol indented_block_body) [109031 109175])
                                    ("beginarrow, endarrow" code nil (reparse-symbol indented_block_body) [109188 109235])
                                    ("if" code nil (reparse-symbol indented_block_body) [109249 110189])
                                    ("if" code nil (reparse-symbol indented_block_body) [110202 111106])
                                    ("super" code nil (reparse-symbol indented_block_body) [111119 111137]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [107020 107024])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [107026 107037])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [107042 107052])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [107057 107063])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [107068 107074])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [107100 107107])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [107113 107120])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [107126 107132])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [107136 107142])
                                    ("scaleA" variable nil (reparse-symbol function_parameters) [107146 107152])
                                    ("scaleB" variable nil (reparse-symbol function_parameters) [107180 107186]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, default: 0.4
                Length of the arrow head, relative to *mutation_scale*.
            head_width : float, default: 0.2
                Width of the arrow head, relative to *mutation_scale*.
            widthA : float, default: 1.0
                Width of the bracket at the beginning of the arrow
            widthB : float, default: 1.0
                Width of the bracket at the end of the arrow
            lengthA : float, default: 0.2
                Length of the bracket at the beginning of the arrow
            lengthB : float, default: 0.2
                Length of the bracket at the end of the arrow
            angleA : float, default 0
                Orientation of the bracket at the beginning, as a
                counterclockwise angle. 0 degrees means perpendicular
                to the line.
            angleB : float, default 0
                Orientation of the bracket at the beginning, as a
                counterclockwise angle. 0 degrees means perpendicular
                to the line.
            scaleA : float, default *mutation_size*
                The mutation_size for the beginning bracket
            scaleB : float, default *mutation_size*
                The mutation_size for the end bracket
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [107007 111138])
                            ("_get_arrow_wedge" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [111168 111172])
                                    ("x0" variable nil (reparse-symbol function_parameters) [111174 111176])
                                    ("y0" variable nil (reparse-symbol function_parameters) [111178 111180])
                                    ("x1" variable nil (reparse-symbol function_parameters) [111182 111184])
                                    ("y1" variable nil (reparse-symbol function_parameters) [111186 111188])
                                    ("head_dist" variable nil (reparse-symbol function_parameters) [111219 111228])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [111230 111235])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [111237 111242])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [111244 111253]))                                  
                                :documentation "
            Return the paths for arrow heads. Since arrow lines are
            drawn with capstyle=projected, The arrow goes beyond the
            desired point. This method also returns the amount of the path
            to be shrunken so that it does not overshoot.
            ")
                                (reparse-symbol indented_block_body) [111147 112744])
                            ("_get_bracket" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [112770 112774])
                                    ("x0" variable nil (reparse-symbol function_parameters) [112776 112778])
                                    ("y0" variable nil (reparse-symbol function_parameters) [112780 112782])
                                    ("x1" variable nil (reparse-symbol function_parameters) [112809 112811])
                                    ("y1" variable nil (reparse-symbol function_parameters) [112813 112815])
                                    ("width" variable nil (reparse-symbol function_parameters) [112817 112822])
                                    ("length" variable nil (reparse-symbol function_parameters) [112824 112830])
                                    ("angle" variable nil (reparse-symbol function_parameters) [112832 112837]))                                  )
                                (reparse-symbol indented_block_body) [112753 113684])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [113707 113711])
                                    ("path" variable nil (reparse-symbol function_parameters) [113713 113717])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [113719 113732])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [113734 113743]))                                  )
                                (reparse-symbol indented_block_body) [113693 117698]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [106496 117698])
                    ("" code nil (reparse-symbol indented_block_body) [117719 117742])
                    ("Curve" type
                       (:documentation "A simple curve without any arrow head."
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [118050 118097]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [117843 117847]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [117830 118098]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [117747 118098])
                    ("" code nil (reparse-symbol indented_block_body) [118119 118143])
                    ("CurveA" type
                       (:documentation "An arrow with a head at its begin point."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [118233 118245]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118148 118246])
                    ("" code nil (reparse-symbol indented_block_body) [118267 118291])
                    ("CurveB" type
                       (:documentation "An arrow with a head at its end point."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [118379 118391]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118296 118392])
                    ("" code nil (reparse-symbol indented_block_body) [118413 118438])
                    ("CurveAB" type
                       (:documentation "An arrow with heads both at the begin and the end point."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [118545 118558]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118443 118559])
                    ("" code nil (reparse-symbol indented_block_body) [118580 118605])
                    ("CurveFilledA" type
                       (:documentation "An arrow with filled triangle head at the begin."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [118709 118722]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118610 118723])
                    ("" code nil (reparse-symbol indented_block_body) [118744 118769])
                    ("CurveFilledB" type
                       (:documentation "An arrow with filled triangle head at the end."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [118871 118884]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118774 118885])
                    ("" code nil (reparse-symbol indented_block_body) [118906 118933])
                    ("CurveFilledAB" type
                       (:documentation "An arrow with filled triangle heads at both ends."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [119039 119054]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118938 119055])
                    ("" code nil (reparse-symbol indented_block_body) [119076 119100])
                    ("BracketA" type
                       (:documentation "An arrow with an outward square bracket at its start."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [119205 119217])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, default: 1.0
                Width of the bracket.
            lengthA : float, default: 0.2
                Length of the bracket.
            angleA : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [119293 119697])
                                    ("super" code nil (reparse-symbol indented_block_body) [119710 119773]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [119240 119244])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [119246 119252])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [119257 119264])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [119270 119276]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, default: 1.0
                Width of the bracket.
            lengthA : float, default: 0.2
                Length of the bracket.
            angleA : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [119227 119774]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [119105 119774])
                    ("" code nil (reparse-symbol indented_block_body) [119795 119819])
                    ("BracketB" type
                       (:documentation "An arrow with an outward square bracket at its end."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [119922 119934])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthB : float, default: 1.0
                Width of the bracket.
            lengthB : float, default: 0.2
                Length of the bracket.
            angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [120010 120414])
                                    ("super" code nil (reparse-symbol indented_block_body) [120427 120490]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [119957 119961])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [119963 119969])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [119974 119981])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [119987 119993]))                                  
                                :documentation "
            Parameters
            ----------
            widthB : float, default: 1.0
                Width of the bracket.
            lengthB : float, default: 0.2
                Length of the bracket.
            angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [119944 120491]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [119824 120491])
                    ("" code nil (reparse-symbol indented_block_body) [120512 120537])
                    ("BracketAB" type
                       (:documentation "An arrow with outward square brackets at both ends."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [120641 120654])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA, widthB : float, default: 1.0
                Width of the bracket.
            lengthA, lengthB : float, default: 0.2
                Length of the bracket.
            angleA, angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [120806 121235])
                                    ("super" code nil (reparse-symbol indented_block_body) [121248 121387]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [120677 120681])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [120704 120710])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [120715 120722])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [120728 120734])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [120759 120765])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [120770 120777])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [120783 120789]))                                  
                                :documentation "
            Parameters
            ----------
            widthA, widthB : float, default: 1.0
                Width of the bracket.
            lengthA, lengthB : float, default: 0.2
                Length of the bracket.
            angleA, angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [120664 121388]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [120542 121388])
                    ("" code nil (reparse-symbol indented_block_body) [121409 121434])
                    ("BarAB" type
                       (:documentation "An arrow with vertical bars ``|`` at both ends."
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [121530 121543])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA, widthB : float, default: 1.0
                Width of the bracket.
            angleA, angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [121627 121966])
                                    ("super" code nil (reparse-symbol indented_block_body) [121979 122106]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [121566 121570])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [121572 121578])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [121583 121589])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [121593 121599])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [121604 121610]))                                  
                                :documentation "
            Parameters
            ----------
            widthA, widthB : float, default: 1.0
                Width of the bracket.
            angleA, angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [121553 122107]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [121439 122107])
                    ("" code nil (reparse-symbol indented_block_body) [122128 122153])
                    ("BracketCurve" type
                       (:documentation "
        An arrow with an outward square bracket at its start and a head at
        the end.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [122310 122323])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, default: 1.0
                Width of the bracket.
            lengthA : float, default: 0.2
                Length of the bracket.
            angleA : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [122402 122806])
                                    ("super" code nil (reparse-symbol indented_block_body) [122819 122882]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [122346 122350])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [122352 122358])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [122363 122370])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [122376 122382]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, default: 1.0
                Width of the bracket.
            lengthA : float, default: 0.2
                Length of the bracket.
            angleA : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [122333 122883]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [122158 122883])
                    ("" code nil (reparse-symbol indented_block_body) [122904 122929])
                    ("CurveBracket" type
                       (:documentation "
        An arrow with an outward square bracket at its end and a head at
        the start.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("arrow" variable nil (reparse-symbol indented_block_body) [123086 123099])
                            ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthB : float, default: 1.0
                Width of the bracket.
            lengthB : float, default: 0.2
                Length of the bracket.
            angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            \"\"\"" code nil (reparse-symbol indented_block_body) [123178 123582])
                                    ("super" code nil (reparse-symbol indented_block_body) [123595 123658]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [123122 123126])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [123128 123134])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [123139 123146])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [123152 123158]))                                  
                                :documentation "
            Parameters
            ----------
            widthB : float, default: 1.0
                Width of the bracket.
            lengthB : float, default: 0.2
                Length of the bracket.
            angleB : float, default: 0 degrees
                Orientation of the bracket, as a counterclockwise angle.
                0 degrees means perpendicular to the line.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [123109 123659]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [122934 123659])
                    ("" code nil (reparse-symbol indented_block_body) [123680 123693])
                    ("Simple" type
                       (:documentation "A simple arrow. Only works with a quadratic Bezier curve."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, default: 0.5
                Length of the arrow head.

            head_width : float, default: 0.5
                Width of the arrow head.

            tail_width : float, default: 0.2
                Width of the arrow tail.
            \"\"\"" code nil (reparse-symbol indented_block_body) [123878 124205])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [124218 124324])
                                    ("super" code nil (reparse-symbol indented_block_body) [124337 124355]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [123813 123817])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [123819 123830])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [123835 123845])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [123850 123860]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, default: 0.5
                Length of the arrow head.

            head_width : float, default: 0.5
                Width of the arrow head.

            tail_width : float, default: 0.2
                Width of the arrow tail.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [123800 124356])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [124379 124383])
                                    ("path" variable nil (reparse-symbol function_parameters) [124385 124389])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [124391 124404])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [124406 124415]))                                  )
                                (reparse-symbol indented_block_body) [124365 127079]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [123698 127079])
                    ("" code nil (reparse-symbol indented_block_body) [127100 127113])
                    ("Fancy" type
                       (:documentation "A fancy arrow. Only works with a quadratic Bezier curve."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, default: 0.4
                Length of the arrow head.

            head_width : float, default: 0.4
                Width of the arrow head.

            tail_width : float, default: 0.4
                Width of the arrow tail.
            \"\"\"" code nil (reparse-symbol indented_block_body) [127296 127623])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [127636 127742])
                                    ("super" code nil (reparse-symbol indented_block_body) [127755 127773]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [127231 127235])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [127237 127248])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [127253 127263])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [127268 127278]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, default: 0.4
                Length of the arrow head.

            head_width : float, default: 0.4
                Width of the arrow head.

            tail_width : float, default: 0.4
                Width of the arrow tail.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [127218 127774])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [127797 127801])
                                    ("path" variable nil (reparse-symbol function_parameters) [127803 127807])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [127809 127822])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [127824 127833]))                                  )
                                (reparse-symbol indented_block_body) [127783 130762]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [127118 130762])
                    ("" code nil (reparse-symbol indented_block_body) [130783 130796])
                    ("Wedge" type
                       (:documentation "
        Wedge(?) shape. Only works with a quadratic Bezier curve.  The
        begin point has a width of the tail_width and the end point has a
        width of 0. At the middle, the width is shrink_factor*tail_width.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            tail_width : float, default: 0.3
                Width of the tail.

            shrink_factor : float, default: 0.5
                Fraction of the arrow width at the middle point.
            \"\"\"" code nil (reparse-symbol indented_block_body) [131139 131398])
                                    ("self" variable nil (reparse-symbol indented_block_body) [131411 131439])
                                    ("self" variable nil (reparse-symbol indented_block_body) [131452 131486])
                                    ("super" code nil (reparse-symbol indented_block_body) [131499 131517]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [131086 131090])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [131092 131102])
                                    ("shrink_factor" variable nil (reparse-symbol function_parameters) [131107 131120]))                                  
                                :documentation "
            Parameters
            ----------
            tail_width : float, default: 0.3
                Width of the tail.

            shrink_factor : float, default: 0.5
                Fraction of the arrow width at the middle point.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [131073 131518])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [131541 131545])
                                    ("path" variable nil (reparse-symbol function_parameters) [131547 131551])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [131553 131566])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [131568 131577]))                                  )
                                (reparse-symbol indented_block_body) [131527 132453]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [130801 132453]))                  
                :type "class")
                nil [101819 132453])
            ("docstring" code nil nil [132455 132707])
            ("docstring" code nil nil [132708 132742])
            ("docstring" code nil nil [132743 132779])
            ("docstring" code nil nil [132780 132821])
            ("FancyBboxPatch" type
               (:documentation "
    A fancy box around a rectangle with lower left at *xy* = (*x*, *y*)
    with specified width and height.

    `.FancyBboxPatch` is similar to `.Rectangle`, but it draws a fancy box
    around the rectangle. The transformation of the rectangle box to the
    fancy box is delegated to the style classes defined in `.BoxStyle`.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [133204 133224])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133242 133246]))                          )
                        (reparse-symbol indented_block_body) [133230 133386])
                    ("" code nil (reparse-symbol indented_block_body) [133443 133493])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy : float, float
          The lower left corner of the box.

        width : float
            The width of the box.

        height : float
            The height of the box.

        boxstyle : str or `matplotlib.patches.BoxStyle`
            The style of the fancy box. This can either be a `.BoxStyle`
            instance or a string of the style name and optionally comma
            seprarated attributes (e.g. \"Round, pad=0.2\"). This string is
            passed to `.BoxStyle` to construct a `.BoxStyle` object. See
            there for a full documentation.

            The following box styles are available:

            %(AvailableBoxstyles)s

        mutation_scale : float, default: 1
            Scaling factor applied to the attributes of the box style
            (e.g. pad or rounding_size).

        mutation_aspect : float, default: 1
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it. For example, this allows different horizontal and vertical
            padding.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties

        %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [133683 134974])
                            ("super" code nil (reparse-symbol indented_block_body) [134984 135010])
                            ("self" variable nil (reparse-symbol indented_block_body) [135020 135035])
                            ("self" variable nil (reparse-symbol indented_block_body) [135044 135059])
                            ("self" variable nil (reparse-symbol indented_block_body) [135068 135087])
                            ("self" variable nil (reparse-symbol indented_block_body) [135096 135117])
                            ("if" code nil (reparse-symbol indented_block_body) [135127 135694])
                            ("self" variable nil (reparse-symbol indented_block_body) [135703 135740])
                            ("self" variable nil (reparse-symbol indented_block_body) [135749 135788])
                            ("self" variable nil (reparse-symbol indented_block_body) [135798 135815]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133511 133515])
                            ("xy" variable nil (reparse-symbol function_parameters) [133517 133519])
                            ("width" variable nil (reparse-symbol function_parameters) [133521 133526])
                            ("height" variable nil (reparse-symbol function_parameters) [133528 133534])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [133553 133561])
                            ("bbox_transmuter" variable nil (reparse-symbol function_parameters) [133571 133586])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [133610 133624])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [133628 133643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [133664 133672]))                          
                        :documentation "
        Parameters
        ----------
        xy : float, float
          The lower left corner of the box.

        width : float
            The width of the box.

        height : float
            The height of the box.

        boxstyle : str or `matplotlib.patches.BoxStyle`
            The style of the fancy box. This can either be a `.BoxStyle`
            instance or a string of the style name and optionally comma
            seprarated attributes (e.g. \"Round, pad=0.2\"). This string is
            passed to `.BoxStyle` to construct a `.BoxStyle` object. See
            there for a full documentation.

            The following box styles are available:

            %(AvailableBoxstyles)s

        mutation_scale : float, default: 1
            Scaling factor applied to the attributes of the box style
            (e.g. pad or rounding_size).

        mutation_aspect : float, default: 1
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it. For example, this allows different horizontal and vertical
            padding.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties

        %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [133498 135816])
                    ("set_boxstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135868 135872])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [135874 135882])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [135889 135897]))                          
                        :documentation "
        Set the box style.

        Most box styles can be further configured using attributes.
        Attributes from the previous box style are not reused.

        Without argument (or with ``boxstyle=None``), the available box styles
        are returned as a human-readable string.

        Parameters
        ----------
        boxstyle : str or `matplotlib.patches.BoxStyle`
            The style of the fancy box. This can either be a `.BoxStyle`
            instance or a string of the style name and optionally comma
            seprarated attributes (e.g. \"Round, pad=0.2\"). This string is
            passed to `.BoxStyle` to construct a `.BoxStyle` object. See
            there for a full documentation.

            The following box styles are available:

            %(AvailableBoxstyles)s

            .. ACCEPTS: %(ListBoxstyles)s

        **kwargs
            Additional attributes for the box style. See the table above for
            supported parameters.

        Examples
        --------
        ::

            set_boxstyle(\"round,pad=0.2\")
            set_boxstyle(\"round\", pad=0.2)

        ")
                        (reparse-symbol indented_block_body) [135821 137332])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137360 137364])
                            ("scale" variable nil (reparse-symbol function_parameters) [137366 137371]))                          
                        :documentation "
        Set the mutation scale.

        Parameters
        ----------
        scale : float
        ")
                        (reparse-symbol indented_block_body) [137337 137554])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137582 137586]))                          
                        :documentation "Return the mutation scale.")
                        (reparse-symbol indented_block_body) [137559 137666])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137695 137699])
                            ("aspect" variable nil (reparse-symbol function_parameters) [137701 137707]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        Parameters
        ----------
        aspect : float
        ")
                        (reparse-symbol indented_block_body) [137671 137912])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137941 137945]))                          
                        :documentation "Return the aspect ratio of the bbox mutation.")
                        (reparse-symbol indented_block_body) [137917 138122])
                    ("get_boxstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138144 138148]))                          
                        :documentation "Return the boxstyle object.")
                        (reparse-symbol indented_block_body) [138127 138230])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138248 138252]))                          
                        :documentation "Return the mutated path of the rectangle.")
                        (reparse-symbol indented_block_body) [138235 139403])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139482 139486]))                          
                        :documentation "Return the left coord of the rectangle.")
                        (reparse-symbol indented_block_body) [139472 139566])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139581 139585]))                          
                        :documentation "Return the bottom coord of the rectangle.")
                        (reparse-symbol indented_block_body) [139571 139667])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139686 139690]))                          
                        :documentation "Return the width of the rectangle.")
                        (reparse-symbol indented_block_body) [139672 139769])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139789 139793]))                          
                        :documentation "Return the height of the rectangle.")
                        (reparse-symbol indented_block_body) [139774 139874])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139889 139893])
                            ("x" variable nil (reparse-symbol function_parameters) [139895 139896]))                          
                        :documentation "
        Set the left coord of the rectangle.

        Parameters
        ----------
        x : float
        ")
                        (reparse-symbol indented_block_body) [139879 140071])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140086 140090])
                            ("y" variable nil (reparse-symbol function_parameters) [140092 140093]))                          
                        :documentation "
        Set the bottom coord of the rectangle.

        Parameters
        ----------
        y : float
        ")
                        (reparse-symbol indented_block_body) [140076 140270])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140289 140293])
                            ("w" variable nil (reparse-symbol function_parameters) [140295 140296]))                          
                        :documentation "
        Set the rectangle width.

        Parameters
        ----------
        w : float
        ")
                        (reparse-symbol indented_block_body) [140275 140463])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140483 140487])
                            ("h" variable nil (reparse-symbol function_parameters) [140489 140490]))                          
                        :documentation "
        Set the rectangle height.

        Parameters
        ----------
        h : float
        ")
                        (reparse-symbol indented_block_body) [140468 140659])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140679 140683])
                            ("args" variable nil (reparse-symbol function_parameters) [140685 140690]))                          
                        :documentation "
        Set the bounds of the rectangle.

        Call signatures::

            set_bounds(left, bottom, width, height)
            set_bounds((left, bottom, width, height))

        Parameters
        ----------
        left, bottom : float
            The coordinates of the bottom left corner of the rectangle.
        width, height : float
            The width/height of the rectangle.
        ")
                        (reparse-symbol indented_block_body) [140664 141328])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141346 141350]))                          
                        :documentation "Return the `.Bbox`.")
                        (reparse-symbol indented_block_body) [141333 141518]))                  
                :type "class")
                nil [132824 141518])
            ("FancyArrowPatch" type
               (:documentation "
    A fancy arrow patch. It draws an arrow using the `ArrowStyle`.

    The head and tail positions are fixed at the specified start and end points
    of the arrow, but the size and shape (in display coordinates) of the arrow
    does not change when the axis is moved or zoomed.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [141851 141871])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141889 141893]))                          )
                        (reparse-symbol indented_block_body) [141877 142146])
                    ("" code nil (reparse-symbol indented_block_body) [142203 142221])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        There are two ways for defining an arrow:

        - If *posA* and *posB* are given, a path connecting two points is
          created according to *connectionstyle*. The path will be
          clipped with *patchA* and *patchB* and further shrunken by
          *shrinkA* and *shrinkB*. An arrow is drawn along this
          resulting path using the *arrowstyle* parameter.

        - Alternatively if *path* is provided, an arrow is drawn along this
          path and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.

        Parameters
        ----------
        posA, posB : (float, float), default: None
            (x, y) coordinates of arrow tail and arrow head respectively.

        path : `~matplotlib.path.Path`, default: None
            If provided, an arrow is drawn along this path and *patchA*,
            *patchB*, *shrinkA*, and *shrinkB* are ignored.

        arrowstyle : str or `.ArrowStyle`, default: 'simple'
            The `.ArrowStyle` with which the fancy arrow is drawn.  If a
            string, it should be one of the available arrowstyle names, with
            optional comma-separated attributes.  The optional attributes are
            meant to be scaled with the *mutation_scale*.  The following arrow
            styles are available:

            %(AvailableArrowstyles)s

        connectionstyle : str or `.ConnectionStyle` or None, optional, \\
default: 'arc3'
            The `.ConnectionStyle` with which *posA* and *posB* are connected.
            If a string, it should be one of the available connectionstyle
            names, with optional comma-separated attributes.  The following
            connection styles are available:

            %(AvailableConnectorstyles)s

        patchA, patchB : `.Patch`, default: None
            Head and tail patches, respectively.

        shrinkA, shrinkB : float, default: 2
            Shrinking factor of the tail and head of the arrow respectively.

        mutation_scale : float, default: 1
            Value with which attributes of *arrowstyle* (e.g., *head_length*)
            will be scaled.

        mutation_aspect : None or float, default: None
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it.

        dpi_cor : float, default: 1
            dpi_cor is currently used for linewidth-related things and shrink
            factor. Mutation scale is affected by this.  Deprecated.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties, optional
            Here is a list of available `.Patch` properties:

        %(Patch:kwdoc)s

            In contrast to other patches, the default ``capstyle`` and
            ``joinstyle`` for `FancyArrowPatch` are set to ``\"round\"``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [142540 145410])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [145497 145544])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [145553 145598])
                            ("super" code nil (reparse-symbol indented_block_body) [145608 145634])
                            ("if" code nil (reparse-symbol indented_block_body) [145644 146076])
                            ("self" variable nil (reparse-symbol indented_block_body) [146085 146105])
                            ("self" variable nil (reparse-symbol indented_block_body) [146114 146134])
                            ("self" variable nil (reparse-symbol indented_block_body) [146143 146165])
                            ("self" variable nil (reparse-symbol indented_block_body) [146174 146196])
                            ("self" variable nil (reparse-symbol indented_block_body) [146206 146232])
                            ("self" code nil (reparse-symbol indented_block_body) [146242 146273])
                            ("self" variable nil (reparse-symbol indented_block_body) [146283 146320])
                            ("self" variable nil (reparse-symbol indented_block_body) [146329 146368])
                            ("self" variable nil (reparse-symbol indented_block_body) [146378 146401]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142239 142243])
                            ("posA" variable nil (reparse-symbol function_parameters) [142245 142249])
                            ("posB" variable nil (reparse-symbol function_parameters) [142256 142260])
                            ("path" variable nil (reparse-symbol function_parameters) [142267 142271])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [142295 142305])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [142316 142331])
                            ("patchA" variable nil (reparse-symbol function_parameters) [142357 142363])
                            ("patchB" variable nil (reparse-symbol function_parameters) [142370 142376])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [142400 142407])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [142411 142418])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [142439 142453])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [142457 142472])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [142493 142500])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [142521 142529]))                          
                        :documentation "
        There are two ways for defining an arrow:

        - If *posA* and *posB* are given, a path connecting two points is
          created according to *connectionstyle*. The path will be
          clipped with *patchA* and *patchB* and further shrunken by
          *shrinkA* and *shrinkB*. An arrow is drawn along this
          resulting path using the *arrowstyle* parameter.

        - Alternatively if *path* is provided, an arrow is drawn along this
          path and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.

        Parameters
        ----------
        posA, posB : (float, float), default: None
            (x, y) coordinates of arrow tail and arrow head respectively.

        path : `~matplotlib.path.Path`, default: None
            If provided, an arrow is drawn along this path and *patchA*,
            *patchB*, *shrinkA*, and *shrinkB* are ignored.

        arrowstyle : str or `.ArrowStyle`, default: 'simple'
            The `.ArrowStyle` with which the fancy arrow is drawn.  If a
            string, it should be one of the available arrowstyle names, with
            optional comma-separated attributes.  The optional attributes are
            meant to be scaled with the *mutation_scale*.  The following arrow
            styles are available:

            %(AvailableArrowstyles)s

        connectionstyle : str or `.ConnectionStyle` or None, optional, \\
default: 'arc3'
            The `.ConnectionStyle` with which *posA* and *posB* are connected.
            If a string, it should be one of the available connectionstyle
            names, with optional comma-separated attributes.  The following
            connection styles are available:

            %(AvailableConnectorstyles)s

        patchA, patchB : `.Patch`, default: None
            Head and tail patches, respectively.

        shrinkA, shrinkB : float, default: 2
            Shrinking factor of the tail and head of the arrow respectively.

        mutation_scale : float, default: 1
            Value with which attributes of *arrowstyle* (e.g., *head_length*)
            will be scaled.

        mutation_aspect : None or float, default: None
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it.

        dpi_cor : float, default: 1
            dpi_cor is currently used for linewidth-related things and shrink
            factor. Mutation scale is affected by this.  Deprecated.

        Other Parameters
        ----------------
        **kwargs : `.Patch` properties, optional
            Here is a list of available `.Patch` properties:

        %(Patch:kwdoc)s

            In contrast to other patches, the default ``capstyle`` and
            ``joinstyle`` for `FancyArrowPatch` are set to ``\"round\"``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [142226 146402])
                    ("" code nil (reparse-symbol indented_block_body) [146423 146430])
                    ("set_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146451 146455])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [146457 146464]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.

        Parameters
        ----------
        dpi_cor : float
        ")
                        (reparse-symbol indented_block_body) [146435 146738])
                    ("" code nil (reparse-symbol indented_block_body) [146759 146766])
                    ("get_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146787 146791]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.

        Returns
        -------
        scalar
        ")
                        (reparse-symbol indented_block_body) [146771 147021])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147044 147048])
                            ("posA" variable nil (reparse-symbol function_parameters) [147050 147054])
                            ("posB" variable nil (reparse-symbol function_parameters) [147056 147060]))                          
                        :documentation "
        Set the begin and end positions of the connecting path.

        Parameters
        ----------
        posA, posB : None, tuple
            (x, y) coordinates of arrow tail and arrow head respectively. If
            `None` use current value.
        ")
                        (reparse-symbol indented_block_body) [147026 147498])
                    ("set_patchA" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147518 147522])
                            ("patchA" variable nil (reparse-symbol function_parameters) [147524 147530]))                          
                        :documentation "
        Set the tail patch.

        Parameters
        ----------
        patchA : `.patches.Patch`
        ")
                        (reparse-symbol indented_block_body) [147503 147713])
                    ("set_patchB" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147733 147737])
                            ("patchB" variable nil (reparse-symbol function_parameters) [147739 147745]))                          
                        :documentation "
        Set the head patch.

        Parameters
        ----------
        patchB : `.patches.Patch`
        ")
                        (reparse-symbol indented_block_body) [147718 147928])
                    ("set_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147957 147961])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [147963 147978])
                            ("kw" variable nil (reparse-symbol function_parameters) [147980 147984]))                          
                        :documentation "
        Set the connection style. Old attributes are forgotten.

        Parameters
        ----------
        connectionstyle : str or `.ConnectionStyle` or None, optional
            Can be a string with connectionstyle name with
            optional comma-separated attributes, e.g.::

                set_connectionstyle(\"arc,angleA=0,armA=30,rad=10\")

            Alternatively, the attributes can be provided as keywords, e.g.::

                set_connectionstyle(\"arc\", angleA=0,armA=30,rad=10)

            Without any arguments (or with ``connectionstyle=None``), return
            available styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [147933 148998])
                    ("get_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149027 149031]))                          
                        :documentation "Return the `ConnectionStyle` used.")
                        (reparse-symbol indented_block_body) [149003 149114])
                    ("set_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149138 149142])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [149144 149154])
                            ("kw" variable nil (reparse-symbol function_parameters) [149161 149165]))                          
                        :documentation "
        Set the arrow style. Old attributes are forgotten. Without arguments
        (or with ``arrowstyle=None``) returns available box styles as a list of
        strings.

        Parameters
        ----------
        arrowstyle : None or ArrowStyle or str, default: None
            Can be a string with arrowstyle name with optional comma-separated
            attributes, e.g.::

                set_arrowstyle(\"Fancy,head_length=0.2\")

            Alternatively attributes can be provided as keywords, e.g.::

                set_arrowstyle(\"fancy\", head_length=0.2)

        ")
                        (reparse-symbol indented_block_body) [149119 150053])
                    ("get_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150077 150081]))                          
                        :documentation "Return the arrowstyle object.")
                        (reparse-symbol indented_block_body) [150058 150166])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150194 150198])
                            ("scale" variable nil (reparse-symbol function_parameters) [150200 150205]))                          
                        :documentation "
        Set the mutation scale.

        Parameters
        ----------
        scale : float
        ")
                        (reparse-symbol indented_block_body) [150171 150388])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150416 150420]))                          
                        :documentation "
        Return the mutation scale.

        Returns
        -------
        scalar
        ")
                        (reparse-symbol indented_block_body) [150393 150566])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150595 150599])
                            ("aspect" variable nil (reparse-symbol function_parameters) [150601 150607]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        Parameters
        ----------
        aspect : float
        ")
                        (reparse-symbol indented_block_body) [150571 150812])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150841 150845]))                          
                        :documentation "Return the aspect ratio of the bbox mutation.")
                        (reparse-symbol indented_block_body) [150817 151022])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151040 151044]))                          
                        :documentation "Return the path of the arrow in the data coordinates.")
                        (reparse-symbol indented_block_body) [151027 151436])
                    ("_get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151471 151475]))                          
                        :documentation "Return the mutated path of the arrow in display coordinates.")
                        (reparse-symbol indented_block_body) [151441 152546])
                    ("get_path_in_displaycoord" variable nil (reparse-symbol indented_block_body) [152551 152704])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152719 152723])
                            ("renderer" variable nil (reparse-symbol function_parameters) [152725 152733]))                          )
                        (reparse-symbol indented_block_body) [152710 153576]))                  
                :type "class")
                nil [141520 153576])
            ("ConnectionPatch" type
               (:documentation "A patch that connects two points (possibly in different axes)."
                :superclasses ("FancyArrowPatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153708 153712]))                          )
                        (reparse-symbol indented_block_body) [153696 153840])
                    ("" code nil (reparse-symbol indented_block_body) [153897 153915])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*.

        Valid keys are

        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for `matplotlib.patches.PathPatch`
        ===============  ======================================================

        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        ==================== ==================================================
        Property             Description
        ==================== ==================================================
        'figure points'      points from the lower left corner of the figure
        'figure pixels'      pixels from the lower left corner of the figure
        'figure fraction'    0, 0 is lower left of figure and 1, 1 is upper
                             right
        'subfigure points'   points from the lower left corner of the subfigure
        'subfigure pixels'   pixels from the lower left corner of the subfigure
        'subfigure fraction' fraction of the subfigure, 0, 0 is lower left.
        'axes points'        points from lower left corner of axes
        'axes pixels'        pixels from lower left corner of axes
        'axes fraction'      0, 0 is lower left of axes and 1, 1 is upper right
        'data'               use the coordinate system of the object being
                             annotated (default)
        'offset points'      offset (in points) from the *xy* value
        'polar'              you can specify *theta*, *r* for the annotation,
                             even in cartesian plots.  Note that if you are
                             using a polar axes, you do not need to specify
                             polar for the coordinate system since that is the
                             native \"data\" coordinate system.
        ==================== ==================================================

        Alternatively they can be set to any valid
        `~matplotlib.transforms.Transform`.

        Note that 'subfigure pixels' and 'figure pixels' are the same
        for the parent figure, so users who want code that is usable in
        a subfigure can use 'subfigure pixels'.

        .. note::

           Using `ConnectionPatch` across two `~.axes.Axes` instances
           is not directly compatible with :doc:`constrained layout
           </tutorials/intermediate/constrainedlayout_guide>`. Add the artist
           directly to the `.Figure` instead of adding it to a specific Axes,
           or exclude it from the layout using ``con.set_in_layout(False)``.

           .. code-block:: default

              fig, ax = plt.subplots(1, 2, constrained_layout=True)
              con = ConnectionPatch(..., axesA=ax[0], axesB=ax[1])
              fig.add_artist(con)

        \"\"\"" code nil (reparse-symbol indented_block_body) [154378 157806])
                            ("if" code nil (reparse-symbol indented_block_body) [157815 157865])
                            ("self" variable nil (reparse-symbol indented_block_body) [157942 157956])
                            ("self" variable nil (reparse-symbol indented_block_body) [157965 157979])
                            ("self" variable nil (reparse-symbol indented_block_body) [157988 158010])
                            ("self" variable nil (reparse-symbol indented_block_body) [158019 158041])
                            ("self" variable nil (reparse-symbol indented_block_body) [158051 158069])
                            ("self" variable nil (reparse-symbol indented_block_body) [158078 158096])
                            ("super" code nil (reparse-symbol indented_block_body) [158106 158559])
                            ("self" variable nil (reparse-symbol indented_block_body) [158568 158591])
                            ("self" variable nil (reparse-symbol indented_block_body) [158671 158699]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153933 153937])
                            ("xyA" variable nil (reparse-symbol function_parameters) [153939 153942])
                            ("xyB" variable nil (reparse-symbol function_parameters) [153944 153947])
                            ("coordsA" variable nil (reparse-symbol function_parameters) [153949 153956])
                            ("coordsB" variable nil (reparse-symbol function_parameters) [153958 153965])
                            ("axesA" variable nil (reparse-symbol function_parameters) [153989 153994])
                            ("axesB" variable nil (reparse-symbol function_parameters) [154001 154006])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [154030 154040])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [154063 154078])
                            ("patchA" variable nil (reparse-symbol function_parameters) [154104 154110])
                            ("patchB" variable nil (reparse-symbol function_parameters) [154134 154140])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [154164 154171])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [154193 154200])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [154222 154236])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [154259 154274])
                            ("clip_on" variable nil (reparse-symbol function_parameters) [154298 154305])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [154330 154337])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [154359 154367]))                          
                        :documentation "
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*.

        Valid keys are

        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for `matplotlib.patches.PathPatch`
        ===============  ======================================================

        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        ==================== ==================================================
        Property             Description
        ==================== ==================================================
        'figure points'      points from the lower left corner of the figure
        'figure pixels'      pixels from the lower left corner of the figure
        'figure fraction'    0, 0 is lower left of figure and 1, 1 is upper
                             right
        'subfigure points'   points from the lower left corner of the subfigure
        'subfigure pixels'   pixels from the lower left corner of the subfigure
        'subfigure fraction' fraction of the subfigure, 0, 0 is lower left.
        'axes points'        points from lower left corner of axes
        'axes pixels'        pixels from lower left corner of axes
        'axes fraction'      0, 0 is lower left of axes and 1, 1 is upper right
        'data'               use the coordinate system of the object being
                             annotated (default)
        'offset points'      offset (in points) from the *xy* value
        'polar'              you can specify *theta*, *r* for the annotation,
                             even in cartesian plots.  Note that if you are
                             using a polar axes, you do not need to specify
                             polar for the coordinate system since that is the
                             native \"data\" coordinate system.
        ==================== ==================================================

        Alternatively they can be set to any valid
        `~matplotlib.transforms.Transform`.

        Note that 'subfigure pixels' and 'figure pixels' are the same
        for the parent figure, so users who want code that is usable in
        a subfigure can use 'subfigure pixels'.

        .. note::

           Using `ConnectionPatch` across two `~.axes.Axes` instances
           is not directly compatible with :doc:`constrained layout
           </tutorials/intermediate/constrainedlayout_guide>`. Add the artist
           directly to the `.Figure` instead of adding it to a specific Axes,
           or exclude it from the layout using ``con.set_in_layout(False)``.

           .. code-block:: default

              fig, ax = plt.subplots(1, 2, constrained_layout=True)
              con = ConnectionPatch(..., axesA=ax[0], axesB=ax[1])
              fig.add_artist(con)

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [153920 158700])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158717 158721])
                            ("xy" variable nil (reparse-symbol function_parameters) [158723 158725])
                            ("s" variable nil (reparse-symbol function_parameters) [158727 158728])
                            ("axes" variable nil (reparse-symbol function_parameters) [158730 158734]))                          
                        :documentation "Calculate the pixel position of given point.")
                        (reparse-symbol indented_block_body) [158705 160973])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161002 161006])
                            ("b" variable nil (reparse-symbol function_parameters) [161008 161009]))                          
                        :documentation "
        Set the clipping behavior.

        Parameters
        ----------
        b : bool or None

            - *False*: The annotation will always be drawn regardless of its
              position.
            - *True*: The annotation will only be drawn if ``self.xy`` is
              inside the axes.
            - *None*: The annotation will only be drawn if ``self.xy`` is
              inside the axes and  ``self.xycoords == \"data\"``.
        ")
                        (reparse-symbol indented_block_body) [160978 161540])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161569 161573]))                          
                        :documentation "
        Return the clipping behavior.

        See `.set_annotation_clip` for the meaning of the return value.
        ")
                        (reparse-symbol indented_block_body) [161545 161748])
                    ("_get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161783 161787]))                          
                        :documentation "Return the mutated path of the arrow in display coordinates.")
                        (reparse-symbol indented_block_body) [161753 162468])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162487 162491])
                            ("renderer" variable nil (reparse-symbol function_parameters) [162493 162501]))                          
                        :documentation "Check whether the annotation needs to be drawn.")
                        (reparse-symbol indented_block_body) [162473 163283])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163297 163301])
                            ("renderer" variable nil (reparse-symbol function_parameters) [163303 163311]))                          )
                        (reparse-symbol indented_block_body) [163288 163502]))                  
                :type "class")
                nil [153578 163502]))          
      :file "patches.py"
      :pointmax 163502
      :fsize 163501
      :lastmodtime '(25218 25732 428602 691000)
      :unmatched-syntax '((NAME 160732 . 160733) (IF 160746 . 160748) (ELSE 160756 . 160760) (NAME 160681 . 160682) (IF 160695 . 160697) (ELSE 160705 . 160709) (NAME 160486 . 160487) (IF 160500 . 160502) (ELSE 160510 . 160514) (NAME 160435 . 160436) (IF 160449 . 160451) (ELSE 160459 . 160463) (NAME 160226 . 160227) (IF 160240 . 160242) (ELSE 160250 . 160254) (NAME 160175 . 160176) (IF 160189 . 160191) (ELSE 160199 . 160203) (NAME 114161 . 114167) (IF 114184 . 114186) (ELSE 114207 . 114211) (NAME 114086 . 114092) (IF 114109 . 114111) (ELSE 114132 . 114136) (MULT 71382 . 71383) (COMMA 71383 . 71384) (INDENT_BLOCK 69643 . 69755) (NEWLINE 69642 . 69643) (COLON 69641 . 69642) (AS 69635 . 69637) (INDENT_BLOCK 69405 . 69477) (NEWLINE 69404 . 69405) (COLON 69403 . 69404) (TRY 69326 . 69329) (AS 69397 . 69399) (MULT 43231 . 43232) (COMMA 43232 . 43233) (NAME 30558 . 30562) (IF 30596 . 30598) (ELSE 30620 . 30624) (MULT 29540 . 29541) (COMMA 29541 . 29542) (INDENT_BLOCK 19647 . 20152) (NEWLINE 19646 . 19647) (COLON 19645 . 19646) (AS 19633 . 19635) (WITH 19530 . 19534) (COMMA 19573 . 19574) (NAME 11926 . 11931) (IF 11946 . 11948) (ELSE 11960 . 11964) (FROM 604 . 608) (PERIOD 609 . 610) (FROM 581 . 585) (PERIOD 586 . 587) (FROM 374 . 378) (PERIOD 379 . 380) (FROM 258 . 262) (PERIOD 263 . 264)))
    (semanticdb-table "semanticdb-table-157fb351afd4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
GUI neutral widgets
===================

Widgets that are designed to work for any of the GUI backends.
All of these widgets require you to predefine a `matplotlib.axes.Axes`
instance and pass that as the first parameter.  Matplotlib doesn't try to
be too smart with respect to layout -- you will have to figure out how
wide and tall you want your Axes to be to accommodate your widget.
\"\"\"" code nil nil [1 395])
            ("contextlib" include nil nil [397 429])
            ("copy" include nil nil [430 441])
            ("numbers" include nil nil [442 478])
            ("numpy" include nil nil [480 498])
            ("matplotlib" include nil nil [500 524])
            ("matplotlib" include nil nil [525 557])
            ("ticker" include nil nil [565 614])
            ("colors" include nil nil [565 614])
            ("cbook" include nil nil [565 614])
            ("backend_tools" include nil nil [565 614])
            ("_api" include nil nil [565 614])
            ("Line2D" include nil nil [627 640])
            ("Ellipse" include nil nil [655 688])
            ("Rectangle" include nil nil [655 688])
            ("Circle" include nil nil [655 688])
            ("TransformedPatchPath" include nil nil [706 733])
            ("LockDraw" type
               (:documentation "
    Some widgets, like the cursor, draw onto the canvas, and this is not
    desirable under all circumstances, like when the toolbar is in zoom-to-rect
    mode and drawing a rectangle.  To avoid this, a widget can acquire a
    canvas' lock with ``canvas.widgetlock(widget)`` before drawing on the
    canvas; this will prevent other widgets from doing so at the same time (if
    they also try to acquire the lock first).
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1226 1244]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1211 1215]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1198 1245])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1263 1267])
                            ("o" variable nil (reparse-symbol function_parameters) [1269 1270]))                          
                        :documentation "Reserve the lock for *o*.")
                        (reparse-symbol indented_block_body) [1250 1418])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1435 1439])
                            ("o" variable nil (reparse-symbol function_parameters) [1441 1442]))                          
                        :documentation "Release the lock from *o*.")
                        (reparse-symbol indented_block_body) [1423 1604])
                    ("available" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1623 1627])
                            ("o" variable nil (reparse-symbol function_parameters) [1629 1630]))                          
                        :documentation "Return whether drawing is available to *o*.")
                        (reparse-symbol indented_block_body) [1609 1743])
                    ("isowner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1760 1764])
                            ("o" variable nil (reparse-symbol function_parameters) [1766 1767]))                          
                        :documentation "Return whether *o* owns this lock.")
                        (reparse-symbol indented_block_body) [1748 1851])
                    ("locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1867 1871]))                          
                        :documentation "Return whether the lock is currently held by an owner.")
                        (reparse-symbol indented_block_body) [1856 1982]))                  
                :type "class")
                nil [736 1982])
            ("Widget" type
               (:documentation "
    Abstract base class for GUI neutral widgets.
    "
                :members 
                  ( ("drawon" variable nil (reparse-symbol indented_block_body) [2067 2080])
                    ("eventson" variable nil (reparse-symbol indented_block_body) [2085 2100])
                    ("_active" variable nil (reparse-symbol indented_block_body) [2105 2119])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2140 2144])
                            ("active" variable nil (reparse-symbol function_parameters) [2146 2152]))                          
                        :documentation "Set whether the widget is active.")
                        (reparse-symbol indented_block_body) [2125 2233])
                    ("get_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2253 2257]))                          
                        :documentation "Get whether the widget is active.")
                        (reparse-symbol indented_block_body) [2238 2336])
                    ("active" variable nil (reparse-symbol indented_block_body) [2392 2462])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2479 2483])
                            ("event" variable nil (reparse-symbol function_parameters) [2485 2490]))                          
                        :documentation "
        Return whether *event* should be ignored.

        This method should be called at the beginning of any event callback.
        ")
                        (reparse-symbol indented_block_body) [2468 2676]))                  
                :type "class")
                nil [1984 2676])
            ("AxesWidget" type
               (:documentation "
    Widget connected to a single `~matplotlib.axes.Axes`.

    To guarantee that the widget remains responsive and not garbage-collected,
    a reference to the object should be maintained by the user.

    This is necessary because the callback registry
    maintains only weak-refs to the functions, which are member
    functions of the widget.  If there are no references to the widget
    object it may be garbage collected which will disconnect the callbacks.

    Attributes
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    canvas : `~matplotlib.backend_bases.FigureCanvasBase`
        The parent figure canvas for the widget.
    active : bool
        If False, the widget does not respond to events.
    "
                :superclasses ("Widget")
                :members 
                  ( ("cids" variable nil (reparse-symbol indented_block_body) [3477 3541])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3579 3591])
                            ("self" variable nil (reparse-symbol indented_block_body) [3600 3630])
                            ("self" variable nil (reparse-symbol indented_block_body) [3639 3654]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3560 3564])
                            ("ax" variable nil (reparse-symbol function_parameters) [3566 3568]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3547 3655])
                    ("connect_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3678 3682])
                            ("event" variable nil (reparse-symbol function_parameters) [3684 3689])
                            ("callback" variable nil (reparse-symbol function_parameters) [3691 3699]))                          
                        :documentation "
        Connect a callback function with an event.

        This should be used in lieu of ``figure.canvas.mpl_connect`` since this
        function stores callback ids for later clean up.
        ")
                        (reparse-symbol indented_block_body) [3660 4001])
                    ("disconnect_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4028 4032]))                          
                        :documentation "Disconnect all events created by this widget.")
                        (reparse-symbol indented_block_body) [4006 4166]))                  
                :type "class")
                nil [2678 4166])
            ("Button" type
               (:documentation "
    A GUI neutral button.

    For the button to remain responsive you must keep a reference to it.
    Call `.on_clicked` to connect to the button.

    Attributes
    ----------
    ax
        The `matplotlib.axes.Axes` the button renders into.
    label
        A `matplotlib.text.Text` instance.
    color
        The color of the button when not hovering.
    hovercolor
        The color of the button when hovering.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("cnt" variable nil (reparse-symbol indented_block_body) [4638 4772])
                    ("observers" variable nil (reparse-symbol indented_block_body) [4777 4881])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance the button will be placed into.
        label : str
            The button text.
        image : array-like or PIL Image
            The image to place in the button, if not *None*.  The parameter is
            directly forwarded to `~matplotlib.axes.Axes.imshow`.
        color : color
            The color of the button when not activated.
        hovercolor : color
            The color of the button when the mouse is over it.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4988 5551])
                            ("super" code nil (reparse-symbol indented_block_body) [5560 5580])
                            ("if" code nil (reparse-symbol indented_block_body) [5590 5641])
                            ("self" variable nil (reparse-symbol indented_block_body) [5649 5855])
                            ("self" variable nil (reparse-symbol indented_block_body) [5865 5907])
                            ("self" code nil (reparse-symbol indented_block_body) [5917 5970])
                            ("self" code nil (reparse-symbol indented_block_body) [5979 6036])
                            ("self" code nil (reparse-symbol indented_block_body) [6045 6100])
                            ("ax" code nil (reparse-symbol indented_block_body) [6109 6131])
                            ("ax" code nil (reparse-symbol indented_block_body) [6140 6163])
                            ("ax" code nil (reparse-symbol indented_block_body) [6172 6189])
                            ("ax" code nil (reparse-symbol indented_block_body) [6198 6215])
                            ("self" variable nil (reparse-symbol indented_block_body) [6224 6242])
                            ("self" variable nil (reparse-symbol indented_block_body) [6251 6279]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4900 4904])
                            ("ax" variable nil (reparse-symbol function_parameters) [4906 4908])
                            ("label" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("image" variable nil (reparse-symbol function_parameters) [4917 4922])
                            ("color" variable nil (reparse-symbol function_parameters) [4946 4951])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [4960 4970]))                          
                        :documentation "
        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance the button will be placed into.
        label : str
            The button text.
        image : array-like or PIL Image
            The image to place in the button, if not *None*.  The parameter is
            directly forwarded to `~matplotlib.axes.Axes.imshow`.
        color : color
            The color of the button when not activated.
        hovercolor : color
            The color of the button when the mouse is over it.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4887 6280])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6296 6300])
                            ("event" variable nil (reparse-symbol function_parameters) [6302 6307]))                          )
                        (reparse-symbol indented_block_body) [6285 6503])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6521 6525])
                            ("event" variable nil (reparse-symbol function_parameters) [6527 6532]))                          )
                        (reparse-symbol indented_block_body) [6508 6778])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6795 6799])
                            ("event" variable nil (reparse-symbol function_parameters) [6801 6806]))                          )
                        (reparse-symbol indented_block_body) [6783 7102])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7122 7126])
                            ("func" variable nil (reparse-symbol function_parameters) [7128 7132]))                          
                        :documentation "
        Connect the callback function *func* to button click events.

        Returns a connection id, which can be used to disconnect the callback.
        ")
                        (reparse-symbol indented_block_body) [7107 7385])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7405 7409])
                            ("cid" variable nil (reparse-symbol function_parameters) [7411 7414]))                          
                        :documentation "Remove the callback function with connection id *cid*.")
                        (reparse-symbol indented_block_body) [7390 7526]))                  
                :type "class")
                nil [4168 7526])
            ("SliderBase" type
               (:documentation "
    The base class for constructing Slider widgets. Not intended for direct
    usage.

    For the slider to remain responsive you must maintain a reference to it.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7870 7957])
                            ("super" code nil (reparse-symbol indented_block_body) [7966 7986])
                            ("_api" code nil (reparse-symbol indented_block_body) [7995 8066])
                            ("self" variable nil (reparse-symbol indented_block_body) [8076 8106])
                            ("self" variable nil (reparse-symbol indented_block_body) [8115 8141])
                            ("self" variable nil (reparse-symbol indented_block_body) [8150 8176])
                            ("self" variable nil (reparse-symbol indented_block_body) [8185 8205])
                            ("self" variable nil (reparse-symbol indented_block_body) [8214 8234])
                            ("self" variable nil (reparse-symbol indented_block_body) [8243 8265])
                            ("self" variable nil (reparse-symbol indented_block_body) [8274 8298])
                            ("self" variable nil (reparse-symbol indented_block_body) [8307 8327])
                            ("if" code nil (reparse-symbol indented_block_body) [8337 8521])
                            ("self" variable nil (reparse-symbol indented_block_body) [8530 8568])
                            ("if" code nil (reparse-symbol indented_block_body) [8577 8717])
                            ("self" code nil (reparse-symbol indented_block_body) [8725 8755])
                            ("self" code nil (reparse-symbol indented_block_body) [8787 8818])
                            ("ax" code nil (reparse-symbol indented_block_body) [8868 8885])
                            ("ax" code nil (reparse-symbol indented_block_body) [8894 8916])
                            ("self" code nil (reparse-symbol indented_block_body) [8926 8980])
                            ("self" code nil (reparse-symbol indented_block_body) [8989 9045])
                            ("if" code nil (reparse-symbol indented_block_body) [9054 9135])
                            ("self" variable nil (reparse-symbol indented_block_body) [9143 9185]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7756 7760])
                            ("ax" variable nil (reparse-symbol function_parameters) [7762 7764])
                            ("orientation" variable nil (reparse-symbol function_parameters) [7766 7777])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [7779 7788])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [7790 7799])
                            ("valmin" variable nil (reparse-symbol function_parameters) [7818 7824])
                            ("valmax" variable nil (reparse-symbol function_parameters) [7826 7832])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [7834 7840])
                            ("dragging" variable nil (reparse-symbol function_parameters) [7842 7850])
                            ("valstep" variable nil (reparse-symbol function_parameters) [7852 7859]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7743 9186])
                    ("_stepped_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9210 9214])
                            ("val" variable nil (reparse-symbol function_parameters) [9216 9219]))                          
                        :documentation "Return *val* coerced to closest number in the ``valstep`` grid.")
                        (reparse-symbol indented_block_body) [9191 9785])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9805 9809])
                            ("cid" variable nil (reparse-symbol function_parameters) [9811 9814]))                          
                        :documentation "
        Remove the observer with connection id *cid*.

        Parameters
        ----------
        cid : int
            Connection id of the observer to be removed.
        ")
                        (reparse-symbol indented_block_body) [9790 10049])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10064 10068]))                          
                        :documentation "Reset the slider to the initial value.")
                        (reparse-symbol indented_block_body) [10054 10208]))                  
                :type "class")
                nil [7528 10208])
            ("Slider" type
               (:documentation "
    A slider representing a floating point range.

    Create a slider from *valmin* to *valmax* in axes *ax*. For the slider to
    remain responsive you must maintain a reference to it. Call
    :meth:`on_changed` to connect to the slider event.

    Attributes
    ----------
    val : float
        Slider value.
    "
                :superclasses ("SliderBase")
                :members 
                  ( ("cnt" variable nil (reparse-symbol indented_block_body) [10574 10708])
                    ("observers" variable nil (reparse-symbol indented_block_body) [10713 10817])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : float, default: 0.5
            The slider initial position.

        valfmt : str, default: None
            %-format string used to format the slider value.  If None, a
            `.ScalarFormatter` is used instead.

        closedmin : bool, default: True
            Whether the slider interval is closed on the bottom.

        closedmax : bool, default: True
            Whether the slider interval is closed on the top.

        slidermin : Slider, default: None
            Do not allow the current slider to have a value less than
            the value of the Slider *slidermin*.

        slidermax : Slider, default: None
            Do not allow the current slider to have a value greater than
            the value of the Slider *slidermax*.

        dragging : bool, default: True
            If True the slider can be dragged by the mouse.

        valstep : float or array-like, default: None
            If a float, the slider will snap to multiples of *valstep*.
            If an array the slider will snap to the values in the array.

        orientation : {'horizontal', 'vertical'}, default: 'horizontal'
            The orientation of the slider.

        initcolor : color, default: 'r'
            The color of the line at the *valinit* position. Set to ``'none'``
            for no line.

        track_color : color, default: 'lightgrey'
            The color of the background track. The track is accessible for
            further styling via the *track* attribute.

        handle_style : dict
            Properties of the slider handle. Default values are

            ========= ===== ======= ========================================
            Key       Value Default Description
            ========= ===== ======= ========================================
            facecolor color 'white' The facecolor of the slider handle.
            edgecolor color '.75'   The edgecolor of the slider handle.
            size      int   10      The size of the slider handle in points.
            ========= ===== ======= ========================================

            Other values will be transformed as marker{foo} and passed to the
            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will
            result in ``markerstyle = 'x'``.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        `~matplotlib.patches.Polygon` that draws the slider knob.  See the
        `.Polygon` documentation for valid property names (``facecolor``,
        ``edgecolor``, ``alpha``, etc.).
        \"\"\"" code nil (reparse-symbol indented_block_body) [11163 14063])
                            ("super" code nil (reparse-symbol indented_block_body) [14072 14195])
                            ("if" code nil (reparse-symbol indented_block_body) [14205 14367])
                            ("if" code nil (reparse-symbol indented_block_body) [14375 14537])
                            ("self" variable nil (reparse-symbol indented_block_body) [14545 14571])
                            ("self" variable nil (reparse-symbol indented_block_body) [14580 14606])
                            ("valinit" variable nil (reparse-symbol indented_block_body) [14615 14655])
                            ("if" code nil (reparse-symbol indented_block_body) [14664 14713])
                            ("self" variable nil (reparse-symbol indented_block_body) [14721 14739])
                            ("self" variable nil (reparse-symbol indented_block_body) [14748 14770])
                            ("defaults" variable nil (reparse-symbol indented_block_body) [14780 14845])
                            ("handle_style" code nil (reparse-symbol indented_block_body) [14901 14913])
                            ("marker_props" variable nil (reparse-symbol indented_block_body) [14922 15025])
                            ("if" code nil (reparse-symbol indented_block_body) [15035 16132])
                            ("self" variable nil (reparse-symbol indented_block_body) [16140 16268])
                            ("if" code nil (reparse-symbol indented_block_body) [16278 17230])
                            ("self" code nil (reparse-symbol indented_block_body) [17239 17260]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10836 10840])
                            ("ax" variable nil (reparse-symbol function_parameters) [10842 10844])
                            ("label" variable nil (reparse-symbol function_parameters) [10846 10851])
                            ("valmin" variable nil (reparse-symbol function_parameters) [10853 10859])
                            ("valmax" variable nil (reparse-symbol function_parameters) [10861 10867])
                            ("valinit" variable nil (reparse-symbol function_parameters) [10869 10876])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [10882 10888])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [10912 10921])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [10928 10937])
                            ("slidermin" variable nil (reparse-symbol function_parameters) [10944 10953])
                            ("slidermax" variable nil (reparse-symbol function_parameters) [10977 10986])
                            ("dragging" variable nil (reparse-symbol function_parameters) [10993 11001])
                            ("valstep" variable nil (reparse-symbol function_parameters) [11008 11015])
                            ("orientation" variable nil (reparse-symbol function_parameters) [11039 11050])
                            ("initcolor" variable nil (reparse-symbol function_parameters) [11068 11077])
                            ("track_color" variable nil (reparse-symbol function_parameters) [11100 11111])
                            ("handle_style" variable nil (reparse-symbol function_parameters) [11125 11137])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11144 11152]))                          
                        :documentation "
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : float, default: 0.5
            The slider initial position.

        valfmt : str, default: None
            %-format string used to format the slider value.  If None, a
            `.ScalarFormatter` is used instead.

        closedmin : bool, default: True
            Whether the slider interval is closed on the bottom.

        closedmax : bool, default: True
            Whether the slider interval is closed on the top.

        slidermin : Slider, default: None
            Do not allow the current slider to have a value less than
            the value of the Slider *slidermin*.

        slidermax : Slider, default: None
            Do not allow the current slider to have a value greater than
            the value of the Slider *slidermax*.

        dragging : bool, default: True
            If True the slider can be dragged by the mouse.

        valstep : float or array-like, default: None
            If a float, the slider will snap to multiples of *valstep*.
            If an array the slider will snap to the values in the array.

        orientation : {'horizontal', 'vertical'}, default: 'horizontal'
            The orientation of the slider.

        initcolor : color, default: 'r'
            The color of the line at the *valinit* position. Set to ``'none'``
            for no line.

        track_color : color, default: 'lightgrey'
            The color of the background track. The track is accessible for
            further styling via the *track* attribute.

        handle_style : dict
            Properties of the slider handle. Default values are

            ========= ===== ======= ========================================
            Key       Value Default Description
            ========= ===== ======= ========================================
            facecolor color 'white' The facecolor of the slider handle.
            edgecolor color '.75'   The edgecolor of the slider handle.
            size      int   10      The size of the slider handle in points.
            ========= ===== ======= ========================================

            Other values will be transformed as marker{foo} and passed to the
            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will
            result in ``markerstyle = 'x'``.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        `~matplotlib.patches.Polygon` that draws the slider knob.  See the
        `.Polygon` documentation for valid property names (``facecolor``,
        ``edgecolor``, ``alpha``, etc.).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10823 17261])
                    ("_value_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("val" variable nil (reparse-symbol function_parameters) [17293 17296]))                          
                        :documentation "Makes sure *val* is with given bounds.")
                        (reparse-symbol indented_block_body) [17266 17981])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17998 18002])
                            ("event" variable nil (reparse-symbol function_parameters) [18004 18009]))                          
                        :documentation "Update the slider position.")
                        (reparse-symbol indented_block_body) [17986 18825])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18842 18846])
                            ("val" variable nil (reparse-symbol function_parameters) [18848 18851]))                          
                        :documentation "Pretty-print *val*.")
                        (reparse-symbol indented_block_body) [18830 19175])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19192 19196])
                            ("val" variable nil (reparse-symbol function_parameters) [19198 19201]))                          
                        :documentation "
        Set slider value to *val*.

        Parameters
        ----------
        val : float
        ")
                        (reparse-symbol indented_block_body) [19180 19851])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19871 19875])
                            ("func" variable nil (reparse-symbol function_parameters) [19877 19881]))                          
                        :documentation "
        Connect *func* as callback function to changes of the slider value.

        Parameters
        ----------
        func : callable
            Function to call when slider is changed.
            The function must accept a single float as its arguments.

        Returns
        -------
        int
            Connection id (which can be used to disconnect *func*).
        ")
                        (reparse-symbol indented_block_body) [19856 20356]))                  
                :type "class")
                nil [10210 20356])
            ("RangeSlider" type
               (:documentation "
    A slider representing a range of floating point values. Defines the min and
    max of the range via the *val* attribute as a tuple of (min, max).

    Create a slider that defines a range contained within [*valmin*, *valmax*]
    in axes *ax*. For the slider to remain responsive you must maintain a
    reference to it. Call :meth:`on_changed` to connect to the slider event.

    Attributes
    ----------
    val : tuple of float
        Slider value.
    "
                :superclasses ("SliderBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : tuple of float or None, default: None
            The initial positions of the slider. If None the initial positions
            will be at the 25th and 75th percentiles of the range.

        valfmt : str, default: None
            %-format string used to format the slider values.  If None, a
            `.ScalarFormatter` is used instead.

        closedmin : bool, default: True
            Whether the slider interval is closed on the bottom.

        closedmax : bool, default: True
            Whether the slider interval is closed on the top.

        dragging : bool, default: True
            If True the slider can be dragged by the mouse.

        valstep : float, default: None
            If given, the slider will snap to multiples of *valstep*.

        orientation : {'horizontal', 'vertical'}, default: 'horizontal'
            The orientation of the slider.

        track_color : color, default: 'lightgrey'
            The color of the background track. The track is accessible for
            further styling via the *track* attribute.

        handle_style : dict
            Properties of the slider handles. Default values are

            ========= ===== ======= =========================================
            Key       Value Default Description
            ========= ===== ======= =========================================
            facecolor color 'white' The facecolor of the slider handles.
            edgecolor color '.75'   The edgecolor of the slider handles.
            size      int   10      The size of the slider handles in points.
            ========= ===== ======= =========================================

            Other values will be transformed as marker{foo} and passed to the
            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will
            result in ``markerstyle = 'x'``.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        `~matplotlib.patches.Polygon` that draws the slider knob.  See the
        `.Polygon` documentation for valid property names (``facecolor``,
        ``edgecolor``, ``alpha``, etc.).
        \"\"\"" code nil (reparse-symbol indented_block_body) [21220 23690])
                            ("super" code nil (reparse-symbol indented_block_body) [23699 23822])
                            ("self" variable nil (reparse-symbol indented_block_body) [23891 23918])
                            ("if" code nil (reparse-symbol indented_block_body) [23927 24217])
                            ("self" variable nil (reparse-symbol indented_block_body) [24225 24243])
                            ("self" variable nil (reparse-symbol indented_block_body) [24252 24274])
                            ("defaults" variable nil (reparse-symbol indented_block_body) [24284 24349])
                            ("handle_style" code nil (reparse-symbol indented_block_body) [24405 24417])
                            ("marker_props" variable nil (reparse-symbol indented_block_body) [24426 24529])
                            ("if" code nil (reparse-symbol indented_block_body) [24539 25297])
                            ("self" variable nil (reparse-symbol indented_block_body) [25305 25633])
                            ("if" code nil (reparse-symbol indented_block_body) [25643 26697])
                            ("self" variable nil (reparse-symbol indented_block_body) [26706 26732])
                            ("self" code nil (reparse-symbol indented_block_body) [26741 26762]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20892 20896])
                            ("ax" variable nil (reparse-symbol function_parameters) [20906 20908])
                            ("label" variable nil (reparse-symbol function_parameters) [20918 20923])
                            ("valmin" variable nil (reparse-symbol function_parameters) [20933 20939])
                            ("valmax" variable nil (reparse-symbol function_parameters) [20949 20955])
                            ("valinit" variable nil (reparse-symbol function_parameters) [20965 20972])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [20987 20993])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [21008 21017])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [21032 21041])
                            ("dragging" variable nil (reparse-symbol function_parameters) [21056 21064])
                            ("valstep" variable nil (reparse-symbol function_parameters) [21079 21086])
                            ("orientation" variable nil (reparse-symbol function_parameters) [21101 21112])
                            ("track_color" variable nil (reparse-symbol function_parameters) [21135 21146])
                            ("handle_style" variable nil (reparse-symbol function_parameters) [21168 21180])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21195 21203]))                          
                        :documentation "
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : tuple of float or None, default: None
            The initial positions of the slider. If None the initial positions
            will be at the 25th and 75th percentiles of the range.

        valfmt : str, default: None
            %-format string used to format the slider values.  If None, a
            `.ScalarFormatter` is used instead.

        closedmin : bool, default: True
            Whether the slider interval is closed on the bottom.

        closedmax : bool, default: True
            Whether the slider interval is closed on the top.

        dragging : bool, default: True
            If True the slider can be dragged by the mouse.

        valstep : float, default: None
            If given, the slider will snap to multiples of *valstep*.

        orientation : {'horizontal', 'vertical'}, default: 'horizontal'
            The orientation of the slider.

        track_color : color, default: 'lightgrey'
            The color of the background track. The track is accessible for
            further styling via the *track* attribute.

        handle_style : dict
            Properties of the slider handles. Default values are

            ========= ===== ======= =========================================
            Key       Value Default Description
            ========= ===== ======= =========================================
            facecolor color 'white' The facecolor of the slider handles.
            edgecolor color '.75'   The edgecolor of the slider handles.
            size      int   10      The size of the slider handles in points.
            ========= ===== ======= =========================================

            Other values will be transformed as marker{foo} and passed to the
            `~.Line2D` constructor. e.g. ``handle_style = {'style'='x'}`` will
            result in ``markerstyle = 'x'``.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        `~matplotlib.patches.Polygon` that draws the slider knob.  See the
        `.Polygon` documentation for valid property names (``facecolor``,
        ``edgecolor``, ``alpha``, etc.).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20870 26763])
                    ("_min_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26787 26791])
                            ("min" variable nil (reparse-symbol function_parameters) [26793 26796]))                          
                        :documentation "Ensure the new min value is between valmin and self.val[1].")
                        (reparse-symbol indented_block_body) [26768 27105])
                    ("_max_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27129 27133])
                            ("max" variable nil (reparse-symbol function_parameters) [27135 27138]))                          
                        :documentation "Ensure the new max value is between valmax and self.val[0].")
                        (reparse-symbol indented_block_body) [27110 27448])
                    ("_value_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27474 27478])
                            ("vals" variable nil (reparse-symbol function_parameters) [27480 27484]))                          
                        :documentation "Clip min, max values to the bounds.")
                        (reparse-symbol indented_block_body) [27453 27613])
                    ("_update_val_from_pos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27643 27647])
                            ("pos" variable nil (reparse-symbol function_parameters) [27649 27652]))                          
                        :documentation "Update the slider value based on a given position.")
                        (reparse-symbol indented_block_body) [27618 28152])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28169 28173])
                            ("event" variable nil (reparse-symbol function_parameters) [28175 28180]))                          
                        :documentation "Update the slider position.")
                        (reparse-symbol indented_block_body) [28157 29607])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29624 29628])
                            ("val" variable nil (reparse-symbol function_parameters) [29630 29633]))                          
                        :documentation "Pretty-print *val*.")
                        (reparse-symbol indented_block_body) [29612 30177])
                    ("set_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30194 30198])
                            ("min" variable nil (reparse-symbol function_parameters) [30200 30203]))                          
                        :documentation "
        Set the lower value of the slider to *min*.

        Parameters
        ----------
        min : float
        ")
                        (reparse-symbol indented_block_body) [30182 30382])
                    ("set_max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30399 30403])
                            ("max" variable nil (reparse-symbol function_parameters) [30405 30408]))                          
                        :documentation "
        Set the lower value of the slider to *max*.

        Parameters
        ----------
        max : float
        ")
                        (reparse-symbol indented_block_body) [30387 30587])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30604 30608])
                            ("val" variable nil (reparse-symbol function_parameters) [30610 30613]))                          
                        :documentation "
        Set slider value to *val*.

        Parameters
        ----------
        val : tuple or array-like of float
        ")
                        (reparse-symbol indented_block_body) [30592 31882])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31902 31906])
                            ("func" variable nil (reparse-symbol function_parameters) [31908 31912]))                          
                        :documentation "
        Connect *func* as callback function to changes of the slider value.

        Parameters
        ----------
        func : callable
            Function to call when slider is changed. The function
            must accept a numpy array with shape (2,) as its argument.

        Returns
        -------
        int
            Connection id (which can be used to disconnect *func*).
        ")
                        (reparse-symbol indented_block_body) [31887 32401]))                  
                :type "class")
                nil [20358 32401])
            ("CheckButtons" type
               (:superclasses ("AxesWidget")
                :members 
                  ( ("r\"\"\"
    A GUI neutral set of check buttons.

    For the check buttons to remain responsive you must keep a
    reference to this object.

    Connect to the CheckButtons with the `.on_clicked` method.

    Attributes
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    labels : list of `.Text`

    rectangles : list of `.Rectangle`

    lines : list of (`.Line2D`, `.Line2D`) pairs
        List of lines for the x's in the check boxes.  These lines exist for
        each box, but have ``set_visible(False)`` when its box is not checked.
    \"\"\"" code nil (reparse-symbol indented_block_body) [32439 33027])
                    ("cnt" variable nil (reparse-symbol indented_block_body) [33033 33167])
                    ("observers" variable nil (reparse-symbol indented_block_body) [33172 33276])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add check buttons to `matplotlib.axes.Axes` instance *ax*.

        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The parent axes for the widget.

        labels : list of str
            The labels of the check buttons.

        actives : list of bool, optional
            The initial check states of the buttons. The list must have the
            same length as *labels*. If not given, all buttons are unchecked.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33336 33809])
                            ("super" code nil (reparse-symbol indented_block_body) [33818 33838])
                            ("ax" code nil (reparse-symbol indented_block_body) [33848 33865])
                            ("ax" code nil (reparse-symbol indented_block_body) [33874 33891])
                            ("ax" code nil (reparse-symbol indented_block_body) [33900 33922])
                            ("if" code nil (reparse-symbol indented_block_body) [33932 33996])
                            ("if" code nil (reparse-symbol indented_block_body) [34005 34178])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [34187 34215])
                            ("self" variable nil (reparse-symbol indented_block_body) [34225 34241])
                            ("self" variable nil (reparse-symbol indented_block_body) [34250 34265])
                            ("self" variable nil (reparse-symbol indented_block_body) [34274 34294])
                            ("lineparams" variable nil (reparse-symbol indented_block_body) [34304 34425])
                            ("for" code nil (reparse-symbol indented_block_body) [34434 35259])
                            ("self" code nil (reparse-symbol indented_block_body) [35268 35323])
                            ("self" variable nil (reparse-symbol indented_block_body) [35333 35375]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33295 33299])
                            ("ax" variable nil (reparse-symbol function_parameters) [33301 33303])
                            ("labels" variable nil (reparse-symbol function_parameters) [33305 33311])
                            ("actives" variable nil (reparse-symbol function_parameters) [33313 33320]))                          
                        :documentation "
        Add check buttons to `matplotlib.axes.Axes` instance *ax*.

        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The parent axes for the widget.

        labels : list of str
            The labels of the check buttons.

        actives : list of bool, optional
            The initial check states of the buttons. The list must have the
            same length as *labels*. If not given, all buttons are unchecked.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33282 35376])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35394 35398])
                            ("event" variable nil (reparse-symbol function_parameters) [35400 35405]))                          )
                        (reparse-symbol indented_block_body) [35381 35773])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35793 35797])
                            ("index" variable nil (reparse-symbol function_parameters) [35799 35804]))                          
                        :documentation "
        Toggle (activate or deactivate) a check button by index.

        Callbacks will be triggered if :attr:`eventson` is True.

        Parameters
        ----------
        index : int
            Index of the check button to toggle.

        Raises
        ------
        ValueError
            If *index* is invalid.
        ")
                        (reparse-symbol indented_block_body) [35778 36569])
                    ("get_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36589 36593]))                          
                        :documentation "
        Return a tuple of the status (True/False) of all of the check buttons.
        ")
                        (reparse-symbol indented_block_body) [36574 36760])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36780 36784])
                            ("func" variable nil (reparse-symbol function_parameters) [36786 36790]))                          
                        :documentation "
        Connect the callback function *func* to button click events.

        Returns a connection id, which can be used to disconnect the callback.
        ")
                        (reparse-symbol indented_block_body) [36765 37041])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37061 37065])
                            ("cid" variable nil (reparse-symbol function_parameters) [37067 37070]))                          
                        :documentation "Remove the observer with connection id *cid*.")
                        (reparse-symbol indented_block_body) [37046 37173]))                  
                :type "class")
                nil [32403 37173])
            ("TextBox" type
               (:documentation "
    A GUI neutral text input box.

    For the text box to remain responsive you must keep a reference to it.

    Call `.on_text_change` to be updated whenever the text changes.

    Call `.on_submit` to be updated whenever the user hits enter or
    leaves the text entry field.

    Attributes
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    label : `.Text`

    color : color
        The color of the text box when not hovering.
    hovercolor : color
        The color of the text box when hovering.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("cnt" variable nil (reparse-symbol indented_block_body) [37772 37920])
                    ("change_observers" variable nil (reparse-symbol indented_block_body) [37925 38035])
                    ("submit_observers" variable nil (reparse-symbol indented_block_body) [38040 38150])
                    ("DIST_FROM_LEFT" variable nil (reparse-symbol indented_block_body) [38155 38213])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance the button will be placed into.
        label : str
            Label for this text box.
        initial : str
            Initial value in the text box.
        color : color
            The color of the box.
        hovercolor : color
            The color of the box when the mouse is over it.
        label_pad : float
            The distance between the label and the right side of the textbox.
        textalignment : {'left', 'center', 'right'}
            The horizontal location of the text.
        \"\"\"" code nil (reparse-symbol indented_block_body) [38370 39001])
                            ("super" code nil (reparse-symbol indented_block_body) [39010 39030])
                            ("self" variable nil (reparse-symbol indented_block_body) [39040 39066])
                            ("self" variable nil (reparse-symbol indented_block_body) [39076 39216])
                            ("self" variable nil (reparse-symbol indented_block_body) [39226 39376])
                            ("self" variable nil (reparse-symbol indented_block_body) [39452 39663])
                            ("self" variable nil (reparse-symbol indented_block_body) [39673 39715])
                            ("ax" code nil (reparse-symbol indented_block_body) [39725 39890])
                            ("self" variable nil (reparse-symbol indented_block_body) [39900 39921])
                            ("self" variable nil (reparse-symbol indented_block_body) [39931 40073])
                            ("self" code nil (reparse-symbol indented_block_body) [40083 40136])
                            ("self" code nil (reparse-symbol indented_block_body) [40145 40202])
                            ("self" code nil (reparse-symbol indented_block_body) [40211 40266])
                            ("self" code nil (reparse-symbol indented_block_body) [40275 40328])
                            ("self" code nil (reparse-symbol indented_block_body) [40337 40385])
                            ("self" variable nil (reparse-symbol indented_block_body) [40395 40413])
                            ("self" variable nil (reparse-symbol indented_block_body) [40422 40450])
                            ("self" variable nil (reparse-symbol indented_block_body) [40460 40490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38232 38236])
                            ("ax" variable nil (reparse-symbol function_parameters) [38238 38240])
                            ("label" variable nil (reparse-symbol function_parameters) [38242 38247])
                            ("initial" variable nil (reparse-symbol function_parameters) [38249 38256])
                            ("color" variable nil (reparse-symbol function_parameters) [38278 38283])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [38291 38301])
                            ("label_pad" variable nil (reparse-symbol function_parameters) [38307 38316])
                            ("textalignment" variable nil (reparse-symbol function_parameters) [38339 38352]))                          
                        :documentation "
        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance the button will be placed into.
        label : str
            Label for this text box.
        initial : str
            Initial value in the text box.
        color : color
            The color of the box.
        hovercolor : color
            The color of the box when the mouse is over it.
        label_pad : float
            The distance between the label and the right side of the textbox.
        textalignment : {'left', 'center', 'right'}
            The horizontal location of the text.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38219 40491])
                    ("text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40519 40523]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40496 40567])
                    ("_rendercursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40590 40594]))                          )
                        (reparse-symbol indented_block_body) [40572 42035])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42053 42057])
                            ("event" variable nil (reparse-symbol function_parameters) [42059 42064]))                          )
                        (reparse-symbol indented_block_body) [42040 42230])
                    ("_keypress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42249 42253])
                            ("event" variable nil (reparse-symbol function_parameters) [42255 42260]))                          )
                        (reparse-symbol indented_block_body) [42235 43690])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43707 43711])
                            ("val" variable nil (reparse-symbol function_parameters) [43713 43716]))                          )
                        (reparse-symbol indented_block_body) [43695 44005])
                    ("begin_typing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44027 44031])
                            ("x" variable nil (reparse-symbol function_parameters) [44033 44034]))                          )
                        (reparse-symbol indented_block_body) [44010 45134])
                    ("stop_typing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45155 45159]))                          )
                        (reparse-symbol indented_block_body) [45139 45703])
                    ("position_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45728 45732])
                            ("x" variable nil (reparse-symbol function_parameters) [45734 45735]))                          )
                        (reparse-symbol indented_block_body) [45708 46151])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46167 46171])
                            ("event" variable nil (reparse-symbol function_parameters) [46173 46178]))                          )
                        (reparse-symbol indented_block_body) [46156 46577])
                    ("_resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46594 46598])
                            ("event" variable nil (reparse-symbol function_parameters) [46600 46605]))                          )
                        (reparse-symbol indented_block_body) [46582 46635])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46652 46656])
                            ("event" variable nil (reparse-symbol function_parameters) [46658 46663]))                          )
                        (reparse-symbol indented_block_body) [46640 46959])
                    ("on_text_change" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46983 46987])
                            ("func" variable nil (reparse-symbol function_parameters) [46989 46993]))                          
                        :documentation "
        When the text changes, call this *func* with event.

        A connection id is returned which can be used to disconnect.
        ")
                        (reparse-symbol indented_block_body) [46964 47224])
                    ("on_submit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47243 47247])
                            ("func" variable nil (reparse-symbol function_parameters) [47249 47253]))                          
                        :documentation "
        When the user hits enter or leaves the submission box, call this
        *func* with event.

        A connection id is returned which can be used to disconnect.
        ")
                        (reparse-symbol indented_block_body) [47229 47524])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47544 47548])
                            ("cid" variable nil (reparse-symbol function_parameters) [47550 47553]))                          
                        :documentation "Remove the observer with connection id *cid*.")
                        (reparse-symbol indented_block_body) [47529 47656]))                  
                :type "class")
                nil [37175 47656])
            ("RadioButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the buttons to remain responsive you must keep a reference to this
    object.

    Connect to the RadioButtons with the `.on_clicked` method.

    Attributes
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    activecolor : color
        The color of the selected button.
    labels : list of `.Text`
        The button labels.
    circles : list of `~.patches.Circle`
        The buttons.
    value_selected : str
        The label text of the currently selected button.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add radio buttons to an `~.axes.Axes`.

        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The axes to add the buttons to.
        labels : list of str
            The button labels.
        active : int
            The index of the initially selected button.
        activecolor : color
            The color of the selected button.
        \"\"\"" code nil (reparse-symbol indented_block_body) [48335 48728])
                            ("super" code nil (reparse-symbol indented_block_body) [48737 48757])
                            ("self" variable nil (reparse-symbol indented_block_body) [48766 48796])
                            ("self" variable nil (reparse-symbol indented_block_body) [48805 48831])
                            ("ax" code nil (reparse-symbol indented_block_body) [48841 48858])
                            ("ax" code nil (reparse-symbol indented_block_body) [48867 48884])
                            ("ax" code nil (reparse-symbol indented_block_body) [48893 48915])
                            ("dy" code nil (reparse-symbol indented_block_body) [48924 48951])
                            ("ys" variable nil (reparse-symbol indented_block_body) [48960 49001])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [49010 49017])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [49026 49054])
                            ("circle_radius" code nil (reparse-symbol indented_block_body) [49139 49168])
                            ("circle_radius" variable nil (reparse-symbol indented_block_body) [49247 49287])
                            ("self" variable nil (reparse-symbol indented_block_body) [49297 49313])
                            ("self" variable nil (reparse-symbol indented_block_body) [49322 49339])
                            ("for" code nil (reparse-symbol indented_block_body) [49348 49984])
                            ("self" code nil (reparse-symbol indented_block_body) [49993 50048])
                            ("self" variable nil (reparse-symbol indented_block_body) [50058 50100]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48278 48282])
                            ("ax" variable nil (reparse-symbol function_parameters) [48284 48286])
                            ("labels" variable nil (reparse-symbol function_parameters) [48288 48294])
                            ("active" variable nil (reparse-symbol function_parameters) [48296 48302])
                            ("activecolor" variable nil (reparse-symbol function_parameters) [48306 48317]))                          
                        :documentation "
        Add radio buttons to an `~.axes.Axes`.

        Parameters
        ----------
        ax : `~matplotlib.axes.Axes`
            The axes to add the buttons to.
        labels : list of str
            The button labels.
        active : int
            The index of the initially selected button.
        activecolor : color
            The color of the selected button.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48265 50101])
                    ("cnt" variable nil (reparse-symbol indented_block_body) [50106 50240])
                    ("observers" variable nil (reparse-symbol indented_block_body) [50245 50349])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50368 50372])
                            ("event" variable nil (reparse-symbol function_parameters) [50374 50379]))                          )
                        (reparse-symbol indented_block_body) [50355 50977])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50997 51001])
                            ("index" variable nil (reparse-symbol function_parameters) [51003 51008]))                          
                        :documentation "
        Select button with number *index*.

        Callbacks will be triggered if :attr:`eventson` is True.
        ")
                        (reparse-symbol indented_block_body) [50982 51708])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51728 51732])
                            ("func" variable nil (reparse-symbol function_parameters) [51734 51738]))                          
                        :documentation "
        Connect the callback function *func* to button click events.

        Returns a connection id, which can be used to disconnect the callback.
        ")
                        (reparse-symbol indented_block_body) [51713 51970])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51990 51994])
                            ("cid" variable nil (reparse-symbol function_parameters) [51996 51999]))                          
                        :documentation "Remove the observer with connection id *cid*.")
                        (reparse-symbol indented_block_body) [51975 52102]))                  
                :type "class")
                nil [47658 52102])
            ("SubplotTool" type
               (:documentation "
    A tool to adjust the subplot params of a `matplotlib.figure.Figure`.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        targetfig : `.Figure`
            The figure instance to adjust.
        toolfig : `.Figure`
            The figure instance to embed the subplot tool into.
        \"\"\"" code nil (reparse-symbol indented_block_body) [52273 52491])
                            ("self" variable nil (reparse-symbol indented_block_body) [52501 52522])
                            ("self" variable nil (reparse-symbol indented_block_body) [52531 52557])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [52566 52610])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [52619 52678])
                            ("self" variable nil (reparse-symbol indented_block_body) [52688 52706])
                            ("names" variable nil (reparse-symbol indented_block_body) [52715 52777])
                            ("for" code nil (reparse-symbol indented_block_body) [52865 53168])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [53176 53201])
                            ("" code nil (reparse-symbol indented_block_body) [53210 53343])
                            ("for" code nil (reparse-symbol indented_block_body) [53352 53502])
                            ("for" code nil (reparse-symbol indented_block_body) [53510 53597])
                            ("self" variable nil (reparse-symbol indented_block_body) [53628 53672])
                            ("self" variable nil (reparse-symbol indented_block_body) [53681 53725])
                            ("self" variable nil (reparse-symbol indented_block_body) [53734 53778])
                            ("self" variable nil (reparse-symbol indented_block_body) [53787 53831])
                            ("bax" variable nil (reparse-symbol indented_block_body) [53841 53889])
                            ("self" variable nil (reparse-symbol indented_block_body) [53898 53937])
                            ("self" code nil (reparse-symbol indented_block_body) [53946 53989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52238 52242])
                            ("targetfig" variable nil (reparse-symbol function_parameters) [52244 52253])
                            ("toolfig" variable nil (reparse-symbol function_parameters) [52255 52262]))                          
                        :documentation "
        Parameters
        ----------
        targetfig : `.Figure`
            The figure instance to adjust.
        toolfig : `.Figure`
            The figure instance to embed the subplot tool into.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52225 53990])
                    ("_on_slider_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54018 54022])
                            ("_" variable nil (reparse-symbol function_parameters) [54024 54025]))                          )
                        (reparse-symbol indented_block_body) [53995 54229])
                    ("_on_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54248 54252])
                            ("event" variable nil (reparse-symbol function_parameters) [54254 54259]))                          )
                        (reparse-symbol indented_block_body) [54234 55047]))                  
                :type "class")
                nil [52104 55047])
            ("Cursor" type
               (:documentation "
    A crosshair cursor that spans the axes and moves with mouse cursor.

    For the cursor to remain responsive you must keep a reference to it.

    Parameters
    ----------
    ax : `matplotlib.axes.Axes`
        The `~.axes.Axes` to attach the cursor to.
    horizOn : bool, default: True
        Whether to draw the horizontal line.
    vertOn : bool, default: True
        Whether to draw the vertical line.
    useblit : bool, default: False
        Use blitting for faster drawing if supported by the backend.

    Other Parameters
    ----------------
    **lineprops
        `.Line2D` properties that control the appearance of the lines.
        See also `~.Axes.axhline`.

    Examples
    --------
    See :doc:`/gallery/widgets/cursor`.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [55951 55971])
                            ("self" code nil (reparse-symbol indented_block_body) [55981 56035])
                            ("self" code nil (reparse-symbol indented_block_body) [56044 56088])
                            ("self" variable nil (reparse-symbol indented_block_body) [56098 56117])
                            ("self" variable nil (reparse-symbol indented_block_body) [56126 56148])
                            ("self" variable nil (reparse-symbol indented_block_body) [56157 56177])
                            ("self" code nil (reparse-symbol indented_block_body) [56186 56238])
                            ("if" code nil (reparse-symbol indented_block_body) [56248 56306])
                            ("self" variable nil (reparse-symbol indented_block_body) [56314 56385])
                            ("self" variable nil (reparse-symbol indented_block_body) [56394 56465])
                            ("self" variable nil (reparse-symbol indented_block_body) [56475 56497])
                            ("self" variable nil (reparse-symbol indented_block_body) [56506 56528]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55860 55864])
                            ("ax" variable nil (reparse-symbol function_parameters) [55866 55868])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [55870 55877])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [55884 55890])
                            ("useblit" variable nil (reparse-symbol function_parameters) [55897 55904])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [55929 55940]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55847 56529])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56544 56548])
                            ("event" variable nil (reparse-symbol function_parameters) [56550 56555]))                          
                        :documentation "Internal event handler to clear the cursor.")
                        (reparse-symbol indented_block_body) [56534 56838])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56854 56858])
                            ("event" variable nil (reparse-symbol function_parameters) [56860 56865]))                          
                        :documentation "Internal event handler to draw the cursor when the mouse moves.")
                        (reparse-symbol indented_block_body) [56843 57655])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57672 57676]))                          )
                        (reparse-symbol indented_block_body) [57660 58010]))                  
                :type "class")
                nil [55049 58010])
            ("MultiCursor" type
               (:documentation "
    Provide a vertical (default) and/or horizontal line cursor shared between
    multiple axes.

    For the cursor to remain responsive you must keep a reference to it.

    Parameters
    ----------
    canvas : `matplotlib.backend_bases.FigureCanvasBase`
        The FigureCanvas that contains all the axes.

    axes : list of `matplotlib.axes.Axes`
        The `~.axes.Axes` to attach the cursor to.

    useblit : bool, default: True
        Use blitting for faster drawing if supported by the backend.

    horizOn : bool, default: False
        Whether to draw the horizontal line.

    vertOn: bool, default: True
        Whether to draw the vertical line.

    Other Parameters
    ----------------
    **lineprops
        `.Line2D` properties that control the appearance of the lines.
        See also `~.Axes.axhline`.

    Examples
    --------
    See :doc:`/gallery/widgets/multicursor`.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [59078 59098])
                            ("self" variable nil (reparse-symbol indented_block_body) [59107 59123])
                            ("self" variable nil (reparse-symbol indented_block_body) [59132 59154])
                            ("self" variable nil (reparse-symbol indented_block_body) [59163 59183])
                            ("xmin, xmax" code nil (reparse-symbol indented_block_body) [59193 59225])
                            ("ymin, ymax" code nil (reparse-symbol indented_block_body) [59234 59266])
                            ("xmid" code nil (reparse-symbol indented_block_body) [59275 59301])
                            ("ymid" code nil (reparse-symbol indented_block_body) [59310 59336])
                            ("self" variable nil (reparse-symbol indented_block_body) [59346 59365])
                            ("self" code nil (reparse-symbol indented_block_body) [59374 59426])
                            ("self" variable nil (reparse-symbol indented_block_body) [59435 59457])
                            ("self" variable nil (reparse-symbol indented_block_body) [59466 59488])
                            ("if" code nil (reparse-symbol indented_block_body) [59498 59556])
                            ("if" code nil (reparse-symbol indented_block_body) [59565 59734])
                            ("if" code nil (reparse-symbol indented_block_body) [59743 59913])
                            ("self" code nil (reparse-symbol indented_block_body) [59922 59936]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58977 58981])
                            ("canvas" variable nil (reparse-symbol function_parameters) [58983 58989])
                            ("axes" variable nil (reparse-symbol function_parameters) [58991 58995])
                            ("useblit" variable nil (reparse-symbol function_parameters) [58997 59004])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [59011 59018])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [59026 59032])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [59056 59067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58964 59937])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59954 59958]))                          
                        :documentation "Connect events.")
                        (reparse-symbol indented_block_body) [59942 60201])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60221 60225]))                          
                        :documentation "Disconnect events.")
                        (reparse-symbol indented_block_body) [60206 60363])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60378 60382])
                            ("event" variable nil (reparse-symbol function_parameters) [60384 60389]))                          
                        :documentation "Clear the cursor.")
                        (reparse-symbol indented_block_body) [60368 60683])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60699 60703])
                            ("event" variable nil (reparse-symbol function_parameters) [60705 60710]))                          )
                        (reparse-symbol indented_block_body) [60688 61334])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61351 61355]))                          )
                        (reparse-symbol indented_block_body) [61339 61829]))                  
                :type "class")
                nil [58012 61829])
            ("_SelectorWidget" type
               (:superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [61984 62004])
                            ("self" variable nil (reparse-symbol indented_block_body) [62014 62033])
                            ("self" variable nil (reparse-symbol indented_block_body) [62042 62066])
                            ("self" code nil (reparse-symbol indented_block_body) [62075 62127])
                            ("self" code nil (reparse-symbol indented_block_body) [62136 62165])
                            ("self" variable nil (reparse-symbol indented_block_body) [62175 62306])
                            ("self" code nil (reparse-symbol indented_block_body) [62315 62373])
                            ("self" variable nil (reparse-symbol indented_block_body) [62383 62405])
                            ("if" code nil (reparse-symbol indented_block_body) [62415 62542])
                            ("self" variable nil (reparse-symbol indented_block_body) [62623 62656])
                            ("self" variable nil (reparse-symbol indented_block_body) [62720 62743])
                            ("self" variable nil (reparse-symbol indented_block_body) [62804 62829])
                            ("self" variable nil (reparse-symbol indented_block_body) [62838 62861])
                            ("self" variable nil (reparse-symbol indented_block_body) [62870 62889])
                            ("self" variable nil (reparse-symbol indented_block_body) [62898 62925]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61884 61888])
                            ("ax" variable nil (reparse-symbol function_parameters) [61890 61892])
                            ("onselect" variable nil (reparse-symbol function_parameters) [61894 61902])
                            ("useblit" variable nil (reparse-symbol function_parameters) [61904 61911])
                            ("button" variable nil (reparse-symbol function_parameters) [61919 61925])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [61949 61968]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61871 62926])
                    ("eventpress" variable nil (reparse-symbol indented_block_body) [62931 62985])
                    ("eventrelease" variable nil (reparse-symbol indented_block_body) [62990 63046])
                    ("state" variable nil (reparse-symbol indented_block_body) [63051 63100])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63121 63125])
                            ("active" variable nil (reparse-symbol function_parameters) [63127 63133]))                          )
                        (reparse-symbol indented_block_body) [63106 63231])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63258 63262])
                            ("event" variable nil (reparse-symbol function_parameters) [63264 63269]))                          
                        :documentation "Force an update of the background.")
                        (reparse-symbol indented_block_body) [63236 64210])
                    ("connect_default_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64242 64246]))                          
                        :documentation "Connect the major canvas events to methods.")
                        (reparse-symbol indented_block_body) [64215 64754])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64770 64774])
                            ("event" variable nil (reparse-symbol function_parameters) [64776 64781]))                          )
                        (reparse-symbol indented_block_body) [64759 65798])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65814 65818]))                          
                        :documentation "Draw using blit() or draw_idle(), depending on ``self.useblit``.")
                        (reparse-symbol indented_block_body) [65803 66395])
                    ("_get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66414 66418])
                            ("event" variable nil (reparse-symbol function_parameters) [66420 66425]))                          
                        :documentation "Get the xdata and ydata for event, with limits.")
                        (reparse-symbol indented_block_body) [66400 66700])
                    ("_clean_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66722 66726])
                            ("event" variable nil (reparse-symbol function_parameters) [66728 66733]))                          
                        :documentation "
        Preprocess an event:

        - Replace *event* by the previous event if *event* has no ``xdata``.
        - Clip ``xdata`` and ``ydata`` to the axes limits.
        - Update the previous event.
        ")
                        (reparse-symbol indented_block_body) [66705 67194])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67209 67213])
                            ("event" variable nil (reparse-symbol function_parameters) [67215 67220]))                          
                        :documentation "Button press handler and validator.")
                        (reparse-symbol indented_block_body) [67199 67738])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67754 67758])
                            ("event" variable nil (reparse-symbol function_parameters) [67760 67765]))                          
                        :documentation "Button press event handler.")
                        (reparse-symbol indented_block_body) [67743 67810])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67827 67831])
                            ("event" variable nil (reparse-symbol function_parameters) [67833 67838]))                          
                        :documentation "Button release event handler and validator.")
                        (reparse-symbol indented_block_body) [67815 68231])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68249 68253])
                            ("event" variable nil (reparse-symbol function_parameters) [68255 68260]))                          
                        :documentation "Button release event handler.")
                        (reparse-symbol indented_block_body) [68236 68307])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68323 68327])
                            ("event" variable nil (reparse-symbol function_parameters) [68329 68334]))                          
                        :documentation "Cursor move event handler and validator.")
                        (reparse-symbol indented_block_body) [68312 68570])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68587 68591])
                            ("event" variable nil (reparse-symbol function_parameters) [68593 68598]))                          
                        :documentation "Cursor move event handler.")
                        (reparse-symbol indented_block_body) [68575 68642])
                    ("on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68661 68665])
                            ("event" variable nil (reparse-symbol function_parameters) [68667 68672]))                          
                        :documentation "Mouse scroll event handler and validator.")
                        (reparse-symbol indented_block_body) [68647 68801])
                    ("_on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68821 68825])
                            ("event" variable nil (reparse-symbol function_parameters) [68827 68832]))                          
                        :documentation "Mouse scroll event handler.")
                        (reparse-symbol indented_block_body) [68806 68877])
                    ("on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68899 68903])
                            ("event" variable nil (reparse-symbol function_parameters) [68905 68910]))                          
                        :documentation "Key press event handler and validator for all selection widgets.")
                        (reparse-symbol indented_block_body) [68882 69396])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69419 69423])
                            ("event" variable nil (reparse-symbol function_parameters) [69425 69430]))                          
                        :documentation "Key press event handler - for widget-specific key press actions.")
                        (reparse-symbol indented_block_body) [69401 69512])
                    ("on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69536 69540])
                            ("event" variable nil (reparse-symbol function_parameters) [69542 69547]))                          
                        :documentation "Key release event handler and validator.")
                        (reparse-symbol indented_block_body) [69517 69857])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69882 69886])
                            ("event" variable nil (reparse-symbol function_parameters) [69888 69893]))                          
                        :documentation "Key release event handler.")
                        (reparse-symbol indented_block_body) [69862 69937])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69958 69962])
                            ("visible" variable nil (reparse-symbol function_parameters) [69964 69971]))                          
                        :documentation "Set the visibility of our artists.")
                        (reparse-symbol indented_block_body) [69942 70130])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70145 70149]))                          
                        :documentation "Clear the selection and set the selector ready to make a new one.")
                        (reparse-symbol indented_block_body) [70135 70328])
                    ("artists" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70359 70363]))                          
                        :documentation "Tuple of the artists of the selector.")
                        (reparse-symbol indented_block_body) [70333 70541])
                    ("set_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70560 70564])
                            ("props" variable nil (reparse-symbol function_parameters) [70566 70573]))                          
                        :documentation "
        Set the properties of the selector artist. See the `props` argument
        in the selector docstring to know which properties are supported.
        ")
                        (reparse-symbol indented_block_body) [70546 70957])
                    ("set_handle_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70983 70987])
                            ("handle_props" variable nil (reparse-symbol function_parameters) [70989 71003]))                          
                        :documentation "
        Set the properties of the handles selector artist. See the
        `handle_props` argument in the selector docstring to know which
        properties are supported.
        ")
                        (reparse-symbol indented_block_body) [70962 71624]))                  
                :type "class")
                nil [61831 71624])
            ("SpanSelector" type
               (:documentation "
    Visually select a min/max range on a single axis and call a function with
    those values.

    To guarantee that the selector remains responsive, keep a reference to it.

    In order to turn off the SpanSelector, set ``span_selector.active`` to
    False.  To turn it back on, set it to True.

    Press and release events triggered at the same coordinates outside the
    selection will clear the selector, except when
    ``ignore_event_outside=True``.

    Parameters
    ----------
    ax : `matplotlib.axes.Axes`

    onselect : callable
        A callback function that is called after a release event and the
        selection is created, changed or removed.
        It must have the signature::

            def on_select(min: float, max: float) -> Any

    direction : {\"horizontal\", \"vertical\"}
        The direction along which to draw the span selector.

    minspan : float, default: 0
        If selection is less than or equal to *minspan*, the selection is
        removed (when already existing) or cancelled.

    useblit : bool, default: False
        If True, use the backend-dependent blitting features for faster
        canvas updates.

    props : dict, optional
        Dictionary of `matplotlib.patches.Patch` properties.
        Default:

            ``dict(facecolor='red', alpha=0.5)``

    onmove_callback : func(min, max), min/max are floats, default: None
        Called on mouse move while the span is being selected.

    span_stays : bool, default: False
        If True, the span stays visible after the mouse is released.
        Deprecated, use *interactive* instead.

    interactive : bool, default: False
        Whether to draw a set of handles that allow interaction with the
        widget after it is drawn.

    button : `.MouseButton` or list of `.MouseButton`, default: all buttons
        The mouse buttons which activate the span selector.

    handle_props : dict, default: None
        Properties of the handle lines at the edges of the span. Only used
        when *interactive* is True. See `matplotlib.lines.Line2D` for valid
        properties.

    grab_range : float, default: 10
        Distance in pixels within which the interactive tool handles can be
        activated.

    drag_from_anywhere : bool, default: False
        If `True`, the widget can be moved by clicking anywhere within
        its bounds.

    ignore_event_outside : bool, default: False
        If `True`, the event triggered outside the span selector will be
        ignored.

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> import matplotlib.widgets as mwidgets
    >>> fig, ax = plt.subplots()
    >>> ax.plot([1, 2, 3], [10, 50, 100])
    >>> def onselect(vmin, vmax):
    ...     print(vmin, vmax)
    >>> span = mwidgets.SpanSelector(ax, onselect, 'horizontal',
    ...                              props=dict(facecolor='blue', alpha=0.5))
    >>> fig.show()

    See also: :doc:`/gallery/widgets/span_selector`
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("" code nil (reparse-symbol indented_block_body) [74690 74719])
                    ("" code nil (reparse-symbol indented_block_body) [74746 74782])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [75072 75134])
                            ("if" code nil (reparse-symbol indented_block_body) [75144 75215])
                            ("props" variable nil (reparse-symbol indented_block_body) [75224 75256])
                            ("self" variable nil (reparse-symbol indented_block_body) [75266 75292])
                            ("self" variable nil (reparse-symbol indented_block_body) [75302 75321])
                            ("self" variable nil (reparse-symbol indented_block_body) [75330 75359])
                            ("self" variable nil (reparse-symbol indented_block_body) [75494 75513])
                            ("self" variable nil (reparse-symbol indented_block_body) [75523 75542])
                            ("self" variable nil (reparse-symbol indented_block_body) [75551 75589])
                            ("self" variable nil (reparse-symbol indented_block_body) [75598 75620])
                            ("self" variable nil (reparse-symbol indented_block_body) [75630 75658])
                            ("self" variable nil (reparse-symbol indented_block_body) [75667 75698])
                            ("self" variable nil (reparse-symbol indented_block_body) [75707 75732])
                            ("self" variable nil (reparse-symbol indented_block_body) [75741 75785])
                            ("self" variable nil (reparse-symbol indented_block_body) [75794 75842])
                            ("self" variable nil (reparse-symbol indented_block_body) [75911 75929])
                            ("self" code nil (reparse-symbol indented_block_body) [75938 75955])
                            ("self" variable nil (reparse-symbol indented_block_body) [75989 76121])
                            ("if" code nil (reparse-symbol indented_block_body) [76131 76256])
                            ("self" variable nil (reparse-symbol indented_block_body) [76265 76291])
                            ("self" variable nil (reparse-symbol indented_block_body) [76373 76392]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74800 74804])
                            ("ax" variable nil (reparse-symbol function_parameters) [74806 74808])
                            ("onselect" variable nil (reparse-symbol function_parameters) [74810 74818])
                            ("direction" variable nil (reparse-symbol function_parameters) [74820 74829])
                            ("minspan" variable nil (reparse-symbol function_parameters) [74831 74838])
                            ("useblit" variable nil (reparse-symbol function_parameters) [74842 74849])
                            ("props" variable nil (reparse-symbol function_parameters) [74874 74879])
                            ("onmove_callback" variable nil (reparse-symbol function_parameters) [74886 74901])
                            ("interactive" variable nil (reparse-symbol function_parameters) [74908 74919])
                            ("button" variable nil (reparse-symbol function_parameters) [74944 74950])
                            ("handle_props" variable nil (reparse-symbol function_parameters) [74957 74969])
                            ("grab_range" variable nil (reparse-symbol function_parameters) [74976 74986])
                            ("drag_from_anywhere" variable nil (reparse-symbol function_parameters) [75008 75026])
                            ("ignore_event_outside" variable nil (reparse-symbol function_parameters) [75034 75054]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74787 76393])
                    ("rect" variable nil (reparse-symbol indented_block_body) [76398 76492])
                    ("rectprops" variable nil (reparse-symbol indented_block_body) [76498 76586])
                    ("active_handle" variable nil (reparse-symbol indented_block_body) [76592 76649])
                    ("pressv" variable nil (reparse-symbol indented_block_body) [76655 76705])
                    ("span_stays" variable nil (reparse-symbol indented_block_body) [76711 76806])
                    ("prev" variable nil (reparse-symbol indented_block_body) [76812 76860])
                    ("new_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76879 76883])
                            ("ax" variable nil (reparse-symbol function_parameters) [76885 76887]))                          
                        :documentation "Set SpanSelector to operate on a new Axes.")
                        (reparse-symbol indented_block_body) [76866 77712])
                    ("_setup_edge_handles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77741 77745])
                            ("props" variable nil (reparse-symbol function_parameters) [77747 77752]))                          )
                        (reparse-symbol indented_block_body) [77717 78248])
                    ("_handles_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78288 78292]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [78253 78420])
                    ("_set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78441 78445])
                            ("enabled" variable nil (reparse-symbol function_parameters) [78447 78454]))                          
                        :documentation "Update the canvas cursor based on direction of the selector.")
                        (reparse-symbol indented_block_body) [78425 78851])
                    ("connect_default_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78883 78887]))                          )
                        (reparse-symbol indented_block_body) [78856 79077])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79093 79097])
                            ("event" variable nil (reparse-symbol function_parameters) [79099 79104]))                          
                        :documentation "Button press event handler.")
                        (reparse-symbol indented_block_body) [79082 80315])
                    ("direction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80348 80352]))                          
                        :documentation "Direction of the span selector: 'vertical' or 'horizontal'.")
                        (reparse-symbol indented_block_body) [80320 80460])
                    ("direction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("direction.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80501 80505])
                            ("direction" variable nil (reparse-symbol function_parameters) [80507 80516]))                          
                        :documentation "Set the direction of the span selector.")
                        (reparse-symbol indented_block_body) [80465 81106])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81124 81128])
                            ("event" variable nil (reparse-symbol function_parameters) [81130 81135]))                          
                        :documentation "Button release event handler.")
                        (reparse-symbol indented_block_body) [81111 82119])
                    ("_hover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82135 82139])
                            ("event" variable nil (reparse-symbol function_parameters) [82141 82146]))                          
                        :documentation "Update the canvas cursor if it's over a handle.")
                        (reparse-symbol indented_block_body) [82124 82722])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82739 82743])
                            ("event" variable nil (reparse-symbol function_parameters) [82745 82750]))                          
                        :documentation "Motion notify event handler.")
                        (reparse-symbol indented_block_body) [82727 84243])
                    ("_draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84264 84268])
                            ("vmin" variable nil (reparse-symbol function_parameters) [84270 84274])
                            ("vmax" variable nil (reparse-symbol function_parameters) [84276 84280]))                          )
                        (reparse-symbol indented_block_body) [84248 84611])
                    ("_set_active_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84639 84643])
                            ("event" variable nil (reparse-symbol function_parameters) [84645 84650]))                          
                        :documentation "Set active handle based on the location of the mouse event.")
                        (reparse-symbol indented_block_body) [84616 85722])
                    ("_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85741 85745])
                            ("event" variable nil (reparse-symbol function_parameters) [85747 85752]))                          
                        :documentation "Return True if event is within the patch.")
                        (reparse-symbol indented_block_body) [85727 85878])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85909 85913]))                          
                        :documentation "Return extents of the span selector.")
                        (reparse-symbol indented_block_body) [85883 86273])
                    ("extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86310 86314])
                            ("extents" variable nil (reparse-symbol function_parameters) [86316 86323]))                          
                        :decorators 
                          ( ("extents.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [86278 86578]))                  
                :type "class")
                nil [71626 86578])
            ("ToolLineHandles" type
               (:documentation "
    Control handles for canvas tools.

    Parameters
    ----------
    ax : `matplotlib.axes.Axes`
        Matplotlib axes where tool handles are displayed.
    positions : 1D array
        Positions of handles in data coordinates.
    direction : {\"horizontal\", \"vertical\"}
        Direction of handles, either 'vertical' or 'horizontal'
    line_props : dict, optional
        Additional line properties. See `matplotlib.lines.Line2D`.
    useblit : bool, default: True
        Whether to use blitting for faster drawing (if supported by the
        backend).
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [87290 87302])
                            ("_api" code nil (reparse-symbol indented_block_body) [87312 87379])
                            ("self" variable nil (reparse-symbol indented_block_body) [87388 87415])
                            ("if" code nil (reparse-symbol indented_block_body) [87425 87476])
                            ("line_props" code nil (reparse-symbol indented_block_body) [87484 87542])
                            ("ax" code nil (reparse-symbol indented_block_body) [87613 87623])
                            ("self" variable nil (reparse-symbol indented_block_body) [87633 87695]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87201 87205])
                            ("ax" variable nil (reparse-symbol function_parameters) [87207 87209])
                            ("positions" variable nil (reparse-symbol function_parameters) [87211 87220])
                            ("direction" variable nil (reparse-symbol function_parameters) [87222 87231])
                            ("line_props" variable nil (reparse-symbol function_parameters) [87233 87243])
                            ("useblit" variable nil (reparse-symbol function_parameters) [87267 87274]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87188 87696])
                    ("artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87727 87731]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [87701 87770])
                    ("positions" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87803 87807]))                          
                        :documentation "Positions of the handle in data coordinates.")
                        (reparse-symbol indented_block_body) [87775 88018])
                    ("direction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88051 88055]))                          
                        :documentation "Direction of the handle: 'vertical' or 'horizontal'.")
                        (reparse-symbol indented_block_body) [88023 88156])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88174 88178])
                            ("positions" variable nil (reparse-symbol function_parameters) [88180 88189]))                          
                        :documentation "
        Set x or y positions of handles, depending if the lines are vertical
        of horizontal.

        Parameters
        ----------
        positions : tuple of length 2
            Set the positions of the handle in data coordinates
        ")
                        (reparse-symbol indented_block_body) [88161 88632])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88653 88657])
                            ("value" variable nil (reparse-symbol function_parameters) [88659 88664]))                          
                        :documentation "Set the visibility state of the handles artist.")
                        (reparse-symbol indented_block_body) [88637 88803])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88825 88829])
                            ("value" variable nil (reparse-symbol function_parameters) [88831 88836]))                          
                        :documentation "Set the animated state of the handles artist.")
                        (reparse-symbol indented_block_body) [88808 88974])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88990 88994]))                          
                        :documentation "Remove the handles artist from the figure.")
                        (reparse-symbol indented_block_body) [88979 89119])
                    ("closest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89136 89140])
                            ("x" variable nil (reparse-symbol function_parameters) [89142 89143])
                            ("y" variable nil (reparse-symbol function_parameters) [89145 89146]))                          
                        :documentation "
        Return index and pixel distance to closest handle.

        Parameters
        ----------
        x, y : float
            x, y position from which the distance will be calculated to
            determinate the closest handle

        Returns
        -------
        index, distance : index of the handle and its distance from
            position x, y
        ")
                        (reparse-symbol indented_block_body) [89124 89983]))                  
                :type "class")
                nil [86580 89983])
            ("ToolHandles" type
               (:documentation "
    Control handles for canvas tools.

    Parameters
    ----------
    ax : `matplotlib.axes.Axes`
        Matplotlib axes where tool handles are displayed.
    x, y : 1D arrays
        Coordinates of control handles.
    marker : str, default: 'o'
        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.
    marker_props : dict, optional
        Additional marker properties. See `matplotlib.lines.Line2D`.
    useblit : bool, default: True
        Whether to use blitting for faster drawing (if supported by the
        backend).
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [90664 90676])
                            ("props" variable nil (reparse-symbol indented_block_body) [90685 90938])
                            ("self" variable nil (reparse-symbol indented_block_body) [90947 91002])
                            ("self" code nil (reparse-symbol indented_block_body) [91011 91042]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90594 90598])
                            ("ax" variable nil (reparse-symbol function_parameters) [90600 90602])
                            ("x" variable nil (reparse-symbol function_parameters) [90604 90605])
                            ("y" variable nil (reparse-symbol function_parameters) [90607 90608])
                            ("marker" variable nil (reparse-symbol function_parameters) [90610 90616])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [90622 90634])
                            ("useblit" variable nil (reparse-symbol function_parameters) [90641 90648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90581 91043])
                    ("x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91068 91072]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91048 91116])
                    ("y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91141 91145]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91121 91189])
                    ("artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91220 91224]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91194 91260])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91278 91282])
                            ("pts" variable nil (reparse-symbol function_parameters) [91284 91287])
                            ("y" variable nil (reparse-symbol function_parameters) [91289 91290]))                          
                        :documentation "Set x and y positions of handles.")
                        (reparse-symbol indented_block_body) [91265 91463])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91484 91488])
                            ("val" variable nil (reparse-symbol function_parameters) [91490 91493]))                          )
                        (reparse-symbol indented_block_body) [91468 91535])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91557 91561])
                            ("val" variable nil (reparse-symbol function_parameters) [91563 91566]))                          )
                        (reparse-symbol indented_block_body) [91540 91609])
                    ("closest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91626 91630])
                            ("x" variable nil (reparse-symbol function_parameters) [91632 91633])
                            ("y" variable nil (reparse-symbol function_parameters) [91635 91636]))                          
                        :documentation "Return index and pixel distance to closest index.")
                        (reparse-symbol indented_block_body) [91614 91996]))                  
                :type "class")
                nil [89985 91996])
            ("_RECTANGLESELECTOR_PARAMETERS_DOCSTRING" variable nil nil [91998 94932])
            ("" code nil nil [94958 95044])
            ("RectangleSelector" type
               (:documentation "
    Select a rectangular region of an axes.

    For the cursor to remain responsive you must keep a reference to it.

    Press and release events triggered at the same coordinates outside the
    selection will clear the selector, except when
    ``ignore_event_outside=True``.

    %s

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> import matplotlib.widgets as mwidgets
    >>> fig, ax = plt.subplots()
    >>> ax.plot([1, 2, 3], [10, 50, 100])
    >>> def onselect(eclick, erelease):
    ...     print(eclick.xdata, eclick.ydata)
    ...     print(erelease.xdata, erelease.ydata)
    >>> props = dict(facecolor='blue', alpha=0.5)
    >>> rect = mwidgets.RectangleSelector(ax, onselect, interactive=True,
                                          props=props)
    >>> fig.show()

    See also: :doc:`/gallery/widgets/rectangle_selector`
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [95976 96000])
                    ("" code nil (reparse-symbol indented_block_body) [96028 96060])
                    ("" code nil (reparse-symbol indented_block_body) [96087 96126])
                    ("" code nil (reparse-symbol indented_block_body) [96153 96182])
                    ("" code nil (reparse-symbol indented_block_body) [96209 96228])
                    ("" code nil (reparse-symbol indented_block_body) [96255 96275])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [96655 96783])
                            ("self" variable nil (reparse-symbol indented_block_body) [96793 96812])
                            ("self" variable nil (reparse-symbol indented_block_body) [96821 96852])
                            ("self" variable nil (reparse-symbol indented_block_body) [96861 96905])
                            ("self" variable nil (reparse-symbol indented_block_body) [96914 96962])
                            ("if" code nil (reparse-symbol indented_block_body) [96972 97394])
                            ("if" code nil (reparse-symbol indented_block_body) [97403 97873])
                            ("if" code nil (reparse-symbol indented_block_body) [97881 98483])
                            ("self" variable nil (reparse-symbol indented_block_body) [98492 98524])
                            ("self" variable nil (reparse-symbol indented_block_body) [98534 98558])
                            ("self" variable nil (reparse-symbol indented_block_body) [98567 98591])
                            ("_api" code nil (reparse-symbol indented_block_body) [98601 98662])
                            ("self" variable nil (reparse-symbol indented_block_body) [98671 98699])
                            ("self" variable nil (reparse-symbol indented_block_body) [98708 98733])
                            ("self" variable nil (reparse-symbol indented_block_body) [98743 98771])
                            ("if" code nil (reparse-symbol indented_block_body) [98781 99922])
                            ("self" variable nil (reparse-symbol indented_block_body) [99931 99960]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96293 96297])
                            ("ax" variable nil (reparse-symbol function_parameters) [96299 96301])
                            ("onselect" variable nil (reparse-symbol function_parameters) [96303 96311])
                            ("drawtype" variable nil (reparse-symbol function_parameters) [96313 96321])
                            ("minspanx" variable nil (reparse-symbol function_parameters) [96346 96354])
                            ("minspany" variable nil (reparse-symbol function_parameters) [96358 96366])
                            ("useblit" variable nil (reparse-symbol function_parameters) [96370 96377])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [96402 96411])
                            ("props" variable nil (reparse-symbol function_parameters) [96418 96423])
                            ("spancoords" variable nil (reparse-symbol function_parameters) [96430 96440])
                            ("button" variable nil (reparse-symbol function_parameters) [96466 96472])
                            ("grab_range" variable nil (reparse-symbol function_parameters) [96479 96489])
                            ("handle_props" variable nil (reparse-symbol function_parameters) [96494 96506])
                            ("interactive" variable nil (reparse-symbol function_parameters) [96530 96541])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [96549 96568])
                            ("drag_from_anywhere" variable nil (reparse-symbol function_parameters) [96592 96610])
                            ("ignore_event_outside" variable nil (reparse-symbol function_parameters) [96618 96638]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [96280 99961])
                    ("to_draw" variable nil (reparse-symbol indented_block_body) [99966 100063])
                    ("drawtype" variable nil (reparse-symbol indented_block_body) [100069 100121])
                    ("active_handle" variable nil (reparse-symbol indented_block_body) [100127 100184])
                    ("interactive" variable nil (reparse-symbol indented_block_body) [100190 100245])
                    ("maxdist" variable nil (reparse-symbol indented_block_body) [100251 100447])
                    ("_handles_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100488 100492]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [100453 100617])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100633 100637])
                            ("event" variable nil (reparse-symbol function_parameters) [100639 100644]))                          
                        :documentation "Button press event handler.")
                        (reparse-symbol indented_block_body) [100622 101463])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101481 101485])
                            ("event" variable nil (reparse-symbol function_parameters) [101487 101492]))                          
                        :documentation "Button release event handler.")
                        (reparse-symbol indented_block_body) [101468 103561])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103578 103582])
                            ("event" variable nil (reparse-symbol function_parameters) [103584 103589]))                          
                        :documentation "Motion notify event handler.")
                        (reparse-symbol indented_block_body) [103566 108016])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108050 108054]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [108021 108525])
                    ("corners" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108556 108560]))                          
                        :documentation "Corners of rectangle from lower left, moving clockwise.")
                        (reparse-symbol indented_block_body) [108530 108793])
                    ("edge_centers" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108829 108833]))                          
                        :documentation "Midpoint of rectangle edges from left, moving anti-clockwise.")
                        (reparse-symbol indented_block_body) [108798 109118])
                    ("center" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109148 109152]))                          
                        :documentation "Center of rectangle.")
                        (reparse-symbol indented_block_body) [109123 109287])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109318 109322]))                          
                        :documentation "Return (xmin, xmax, ymin, ymax).")
                        (reparse-symbol indented_block_body) [109292 109551])
                    ("extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109588 109592])
                            ("extents" variable nil (reparse-symbol function_parameters) [109594 109601]))                          
                        :decorators 
                          ( ("extents.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [109556 109973])
                    ("draw_shape" variable nil (reparse-symbol indented_block_body) [109978 110032])
                    ("_draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110054 110058])
                            ("extents" variable nil (reparse-symbol function_parameters) [110060 110067]))                          )
                        (reparse-symbol indented_block_body) [110038 110760])
                    ("_set_active_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110788 110792])
                            ("event" variable nil (reparse-symbol function_parameters) [110794 110799]))                          
                        :documentation "Set active handle based on the location of the mouse event.")
                        (reparse-symbol indented_block_body) [110765 112073])
                    ("_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112092 112096])
                            ("event" variable nil (reparse-symbol function_parameters) [112098 112103]))                          
                        :documentation "Return True if event is within the patch.")
                        (reparse-symbol indented_block_body) [112078 112229])
                    ("geometry" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112261 112265]))                          
                        :documentation "
        Return an array of shape (2, 5) containing the
        x (``RectangleSelector.geometry[1, :]``) and
        y (``RectangleSelector.geometry[0, :]``) coordinates
        of the four corners of the rectangle starting and ending
        in the top left corner.
        ")
                        (reparse-symbol indented_block_body) [112234 112846]))                  
                :type "class")
                nil [95045 112846])
            ("" code nil nil [112871 112955])
            ("EllipseSelector" type
               (:documentation "
    Select an elliptical region of an axes.

    For the cursor to remain responsive you must keep a reference to it.

    Press and release events triggered at the same coordinates outside the
    selection will clear the selector, except when
    ``ignore_event_outside=True``.

    %s

    Examples
    --------
    :doc:`/gallery/widgets/rectangle_selector`
    "
                :superclasses ("RectangleSelector")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [113381 113403])
                    ("draw_shape" variable nil (reparse-symbol indented_block_body) [113408 113462])
                    ("_draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113484 113488])
                            ("extents" variable nil (reparse-symbol function_parameters) [113490 113497]))                          )
                        (reparse-symbol indented_block_body) [113468 114119])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114153 114157]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [114124 114594]))                  
                :type "class")
                nil [112956 114594])
            ("LassoSelector" type
               (:documentation "
    Selection curve of an arbitrary shape.

    For the selector to remain responsive you must keep a reference to it.

    The selected path can be used in conjunction with `~.Path.contains_point`
    to select data points from an image.

    In contrast to `Lasso`, `LassoSelector` is written with an interface
    similar to `RectangleSelector` and `SpanSelector`, and will continue to
    interact with the axes until disconnected.

    Example usage::

        ax = plt.subplot()
        ax.plot(x, y)

        def onselect(verts):
            print(verts)
        lasso = LassoSelector(ax, onselect)

    Parameters
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    onselect : function
        Whenever the lasso is released, the *onselect* function is called and
        passed the vertices of the selected path.
    useblit : bool, default: True
        Whether to use blitting for faster drawing (if supported by the
        backend).
    props : dict, optional
        Properties with which the line is drawn, see `matplotlib.lines.Line2D`
        for valid properties. Default values are defined in ``mpl.rcParams``.
    button : `.MouseButton` or list of `.MouseButton`, optional
        The mouse buttons used for rectangle selection.  Default is ``None``,
        which corresponds to all buttons.
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("" code nil (reparse-symbol indented_block_body) [116031 116060])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [116168 116230])
                            ("self" variable nil (reparse-symbol indented_block_body) [116239 116256])
                            ("if" code nil (reparse-symbol indented_block_body) [116265 116310])
                            ("props" code nil (reparse-symbol indented_block_body) [116396 116446])
                            ("line" variable nil (reparse-symbol indented_block_body) [116455 116485])
                            ("self" code nil (reparse-symbol indented_block_body) [116494 116516])
                            ("self" variable nil (reparse-symbol indented_block_body) [116525 116554]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116078 116082])
                            ("ax" variable nil (reparse-symbol function_parameters) [116084 116086])
                            ("onselect" variable nil (reparse-symbol function_parameters) [116088 116096])
                            ("useblit" variable nil (reparse-symbol function_parameters) [116103 116110])
                            ("props" variable nil (reparse-symbol function_parameters) [116117 116122])
                            ("button" variable nil (reparse-symbol function_parameters) [116146 116152]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [116065 116555])
                    ("" code nil (reparse-symbol indented_block_body) [116576 116604])
                    ("onpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116621 116625])
                            ("event" variable nil (reparse-symbol function_parameters) [116627 116632]))                          )
                        (reparse-symbol indented_block_body) [116609 116661])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116677 116681])
                            ("event" variable nil (reparse-symbol function_parameters) [116683 116688]))                          )
                        (reparse-symbol indented_block_body) [116666 116785])
                    ("" code nil (reparse-symbol indented_block_body) [116806 116836])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116855 116859])
                            ("event" variable nil (reparse-symbol function_parameters) [116861 116866]))                          )
                        (reparse-symbol indented_block_body) [116841 116897])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116915 116919])
                            ("event" variable nil (reparse-symbol function_parameters) [116921 116926]))                          )
                        (reparse-symbol indented_block_body) [116902 117181])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117198 117202])
                            ("event" variable nil (reparse-symbol function_parameters) [117204 117209]))                          )
                        (reparse-symbol indented_block_body) [117186 117398]))                  
                :type "class")
                nil [114596 117398])
            ("PolygonSelector" type
               (:documentation "
    Select a polygon region of an axes.

    Place vertices with each mouse click, and make the selection by completing
    the polygon (clicking on the first vertex). Once drawn individual vertices
    can be moved by clicking and dragging with the left mouse button, or
    removed by clicking the right mouse button.

    In addition, the following modifier keys can be used:

    - Hold *ctrl* and click and drag a vertex to reposition it before the
      polygon has been completed.
    - Hold the *shift* key and click and drag anywhere in the axes to move
      all vertices.
    - Press the *esc* key to start a new polygon.

    For the selector to remain responsive you must keep a reference to it.

    Parameters
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.

    onselect : function
        When a polygon is completed or modified after completion,
        the *onselect* function is called and passed a list of the vertices as
        ``(xdata, ydata)`` tuples.

    useblit : bool, default: False
        Whether to use blitting for faster drawing (if supported by the
        backend).

    props : dict, optional
        Properties with which the line is drawn, see `matplotlib.lines.Line2D`
        for valid properties.
        Default:

            ``dict(color='k', linestyle='-', linewidth=2, alpha=0.5)``

    handle_props : dict, optional
        Artist properties for the markers drawn at the vertices of the polygon.
        See the marker arguments in `matplotlib.lines.Line2D` for valid
        properties.  Default values are defined in ``mpl.rcParams`` except for
        the default value of ``markeredgecolor`` which will be the same as the
        ``color`` property in *props*.

    grab_range : float, default: 10
        A vertex is selected (to complete the polygon or to move a vertex) if
        the mouse click is within *grab_range* pixels of the vertex.

    Examples
    --------
    :doc:`/gallery/widgets/polygon_selector_demo`

    Notes
    -----
    If only one point remains after removing points, the selector reverts to an
    incomplete state and you can start drawing a new polygon from the existing
    point.
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("" code nil (reparse-symbol indented_block_body) [119689 119718])
                    ("" code nil (reparse-symbol indented_block_body) [119745 119783])
                    ("" code nil (reparse-symbol indented_block_body) [119810 119855])
                    ("__init__" function
                       (:suite 
                          ( ("state_modifier_keys" variable nil (reparse-symbol indented_block_body) [120320 120581])
                            ("super" code nil (reparse-symbol indented_block_body) [120590 120703])
                            ("self, self" code nil (reparse-symbol indented_block_body) [120713 120742])
                            ("if" code nil (reparse-symbol indented_block_body) [120752 120845])
                            ("props" variable nil (reparse-symbol indented_block_body) [120853 120885])
                            ("self" variable nil (reparse-symbol indented_block_body) [120894 120913])
                            ("line" variable nil (reparse-symbol indented_block_body) [120922 120970])
                            ("self" code nil (reparse-symbol indented_block_body) [120979 121001])
                            ("self" variable nil (reparse-symbol indented_block_body) [121010 121039])
                            ("if" code nil (reparse-symbol indented_block_body) [121049 121206])
                            ("self" variable nil (reparse-symbol indented_block_body) [121214 121247])
                            ("self" variable nil (reparse-symbol indented_block_body) [121256 121463])
                            ("self" code nil (reparse-symbol indented_block_body) [121473 121501])
                            ("self" variable nil (reparse-symbol indented_block_body) [121510 121538])
                            ("self" code nil (reparse-symbol indented_block_body) [121548 121570]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119873 119877])
                            ("ax" variable nil (reparse-symbol function_parameters) [119879 119881])
                            ("onselect" variable nil (reparse-symbol function_parameters) [119883 119891])
                            ("useblit" variable nil (reparse-symbol function_parameters) [119893 119900])
                            ("props" variable nil (reparse-symbol function_parameters) [119925 119930])
                            ("handle_props" variable nil (reparse-symbol function_parameters) [119937 119949])
                            ("grab_range" variable nil (reparse-symbol function_parameters) [119956 119966]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [119860 121571])
                    ("line" variable nil (reparse-symbol indented_block_body) [121576 121670])
                    ("vertex_select_radius" variable nil (reparse-symbol indented_block_body) [121676 121950])
                    ("_nverts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121982 121986]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [121956 122018])
                    ("_handles_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122058 122062]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [122023 122110])
                    ("_remove_vertex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122134 122138])
                            ("i" variable nil (reparse-symbol function_parameters) [122140 122141]))                          
                        :documentation "Remove vertex with index i.")
                        (reparse-symbol indented_block_body) [122115 123004])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123020 123024])
                            ("event" variable nil (reparse-symbol function_parameters) [123026 123031]))                          
                        :documentation "Button press event handler.")
                        (reparse-symbol indented_block_body) [123009 123609])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123627 123631])
                            ("event" variable nil (reparse-symbol function_parameters) [123633 123638]))                          
                        :documentation "Button release event handler.")
                        (reparse-symbol indented_block_body) [123614 124482])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124498 124502])
                            ("event" variable nil (reparse-symbol function_parameters) [124504 124509]))                          
                        :documentation "Cursor move event handler and validator.")
                        (reparse-symbol indented_block_body) [124487 124984])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125001 125005])
                            ("event" variable nil (reparse-symbol function_parameters) [125007 125012]))                          
                        :documentation "Cursor move event handler.")
                        (reparse-symbol indented_block_body) [124989 126693])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126716 126720])
                            ("event" variable nil (reparse-symbol function_parameters) [126722 126727]))                          
                        :documentation "Key press event handler.")
                        (reparse-symbol indented_block_body) [126698 127104])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127129 127133])
                            ("event" variable nil (reparse-symbol function_parameters) [127135 127140]))                          
                        :documentation "Key release event handler.")
                        (reparse-symbol indented_block_body) [127109 127960])
                    ("_draw_polygon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127983 127987]))                          
                        :documentation "Redraw the polygon based on the new vertex positions.")
                        (reparse-symbol indented_block_body) [127965 128646])
                    ("verts" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128675 128679]))                          
                        :documentation "The polygon vertices, as a list of ``(x, y)`` pairs.")
                        (reparse-symbol indented_block_body) [128651 128804]))                  
                :type "class")
                nil [117400 128804])
            ("Lasso" type
               (:documentation "
    Selection curve of an arbitrary shape.

    The selected path can be used in conjunction with
    `~matplotlib.path.Path.contains_point` to select data points from an image.

    Unlike `LassoSelector`, this must be initialized with a starting
    point *xy*, and the `Lasso` events are destroyed upon release.

    Parameters
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    xy : (float, float)
        Coordinates of the start of the lasso.
    useblit : bool, default: True
        Whether to use blitting for faster drawing (if supported by the
        backend).
    callback : callable
        Whenever the lasso is released, the *callback* function is called and
        passed the vertices of the selected path.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [129683 129703])
                            ("self" code nil (reparse-symbol indented_block_body) [129713 129765])
                            ("if" code nil (reparse-symbol indented_block_body) [129774 129862])
                            ("x, y" code nil (reparse-symbol indented_block_body) [129871 129880])
                            ("self" variable nil (reparse-symbol indented_block_body) [129889 129910])
                            ("self" variable nil (reparse-symbol indented_block_body) [129919 129983])
                            ("self" code nil (reparse-symbol indented_block_body) [129992 130019])
                            ("self" variable nil (reparse-symbol indented_block_body) [130028 130052])
                            ("self" code nil (reparse-symbol indented_block_body) [130061 130119])
                            ("self" code nil (reparse-symbol indented_block_body) [130128 130182]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129631 129635])
                            ("ax" variable nil (reparse-symbol function_parameters) [129637 129639])
                            ("xy" variable nil (reparse-symbol function_parameters) [129641 129643])
                            ("callback" variable nil (reparse-symbol function_parameters) [129645 129653])
                            ("useblit" variable nil (reparse-symbol function_parameters) [129660 129667]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [129618 130183])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130202 130206])
                            ("event" variable nil (reparse-symbol function_parameters) [130208 130213]))                          )
                        (reparse-symbol indented_block_body) [130188 130540])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130556 130560])
                            ("event" variable nil (reparse-symbol function_parameters) [130562 130567]))                          )
                        (reparse-symbol indented_block_body) [130545 131098]))                  
                :type "class")
                nil [128806 131098]))          
      :file "widgets.py"
      :pointmax 131098
      :fsize 131097
      :lastmodtime '(25218 25732 421936 19000)
      :unmatched-syntax '((NAME 88465 . 88471) (IF 88486 . 88488) (ELSE 88520 . 88524) (NAME 87877 . 87883) (IF 87898 . 87900) (ELSE 87932 . 87936) (NAME 87552 . 87560) (IF 87574 . 87576) (ELSE 87608 . 87612) (NAME 82918 . 82919) (IF 82934 . 82936) (ELSE 82968 . 82972) (NAME 79517 . 79518) (IF 79533 . 79535) (ELSE 79567 . 79571) (NAME 46724 . 46725) (IF 46744 . 46746) (ELSE 46771 . 46775) (NAME 24358 . 24370) (IF 24376 . 24378) (ELSE 24400 . 24404) (NAME 14854 . 14866) (IF 14872 . 14874) (ELSE 14896 . 14900) (MULT 11065 . 11066) (COMMA 11066 . 11067) (NAME 6867 . 6868) (IF 6887 . 6889) (ELSE 6914 . 6918) (FROM 689 . 693) (PERIOD 694 . 695) (FROM 641 . 645) (PERIOD 646 . 647) (FROM 615 . 619) (PERIOD 620 . 621) (FROM 558 . 562) (PERIOD 563 . 564)))
    (semanticdb-table "semanticdb-table-157fb478ee04"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
A module for dealing with the polylines used throughout Matplotlib.

The primary class for polyline handling in Matplotlib is `Path`.  Almost all
vector drawing makes use of `Path`\\s somewhere in the drawing pipeline.

Whilst a `Path` instance itself cannot be drawn, some `.Artist` subclasses,
such as `.PathPatch` and `.PathCollection`, can be used for convenient `Path`
visualisation.
\"\"\"" code nil nil [1 397])
            ("copy" include nil nil [399 410])
            ("functools" include nil nil [411 442])
            ("weakref" include nil nil [443 482])
            ("numpy" include nil nil [484 502])
            ("matplotlib" include nil nil [504 528])
            ("_path" include nil nil [536 554])
            ("_api" include nil nil [536 554])
            ("simple_linear_interpolation" include nil nil [567 627])
            ("_to_unmasked_float_array" include nil nil [567 627])
            ("BezierSegment" include nil nil [641 661])
            ("Path" type
               (:documentation "
    A series of possibly disconnected, possibly closed, line and curve
    segments.

    The underlying storage is made up of two parallel numpy arrays:

    - *vertices*: an Nx2 float array of vertices
    - *codes*: an N-length uint8 array of path codes, or None

    These two arrays always have the same length in the first
    dimension.  For example, to represent a cubic curve, you must
    provide three vertices and three ``CURVE4`` codes.

    The code types are:

    - ``STOP``   :  1 vertex (ignored)
        A marker for the end of the entire path (currently not required and
        ignored)

    - ``MOVETO`` :  1 vertex
        Pick up the pen and move to the given vertex.

    - ``LINETO`` :  1 vertex
        Draw a line from the current position to the given vertex.

    - ``CURVE3`` :  1 control point, 1 endpoint
        Draw a quadratic Bezier curve from the current position, with the given
        control point, to the given end point.

    - ``CURVE4`` :  2 control points, 1 endpoint
        Draw a cubic Bezier curve from the current position, with the given
        control points, to the given end point.

    - ``CLOSEPOLY`` : 1 vertex (ignored)
        Draw a line segment to the start point of the current polyline.

    If *codes* is None, it is interpreted as a ``MOVETO`` followed by a series
    of ``LINETO``.

    Users of Path objects should not access the vertices and codes arrays
    directly.  Instead, they should use `iter_segments` or `cleaned` to get the
    vertex/code pairs.  This helps, in particular, to consistently handle the
    case of *codes* being None.

    Some behavior of Path objects can be controlled by rcParams. See the
    rcParams whose keys start with 'path.'.

    .. note::

        The vertices and codes arrays should be treated as
        immutable -- there are a number of optimizations and assumptions
        made up front in the constructor that will not change when the
        data changes.
    "
                :members 
                  ( ("code_type" variable nil (reparse-symbol indented_block_body) [2673 2693])
                    ("STOP" variable nil (reparse-symbol indented_block_body) [2716 2735])
                    ("MOVETO" variable nil (reparse-symbol indented_block_body) [2759 2780])
                    ("LINETO" variable nil (reparse-symbol indented_block_body) [2802 2823])
                    ("CURVE3" variable nil (reparse-symbol indented_block_body) [2845 2866])
                    ("CURVE4" variable nil (reparse-symbol indented_block_body) [2890 2911])
                    ("CLOSEPOLY" variable nil (reparse-symbol indented_block_body) [2935 2960])
                    ("NUM_VERTICES_FOR_CODE" variable nil (reparse-symbol indented_block_body) [3074 3310])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : (N, 2) array-like
            The path vertices, as an array, masked array or sequence of pairs.
            Masked values, if any, will be converted to NaNs, which are then
            handled correctly by the Agg PathIterator and other consumers of
            path data, such as :meth:`iter_segments`.
        codes : array-like or None, optional
            N-length array of integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.  Note that the last vertex will
            then be ignored (as the corresponding code will be set to
            CLOSEPOLY).
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3437 4890])
                            ("vertices" variable nil (reparse-symbol indented_block_body) [4899 4944])
                            ("_api" code nil (reparse-symbol indented_block_body) [4953 4999])
                            ("if" code nil (reparse-symbol indented_block_body) [5009 5931])
                            ("self" variable nil (reparse-symbol indented_block_body) [5940 5965])
                            ("self" variable nil (reparse-symbol indented_block_body) [5974 5993])
                            ("self" variable nil (reparse-symbol indented_block_body) [6002 6050])
                            ("self" code nil (reparse-symbol indented_block_body) [6059 6080])
                            ("if" code nil (reparse-symbol indented_block_body) [6090 6329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3329 3333])
                            ("vertices" variable nil (reparse-symbol function_parameters) [3335 3343])
                            ("codes" variable nil (reparse-symbol function_parameters) [3345 3350])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [3357 3377])
                            ("closed" variable nil (reparse-symbol function_parameters) [3398 3404])
                            ("readonly" variable nil (reparse-symbol function_parameters) [3412 3420]))                          
                        :documentation "
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : (N, 2) array-like
            The path vertices, as an array, masked array or sequence of pairs.
            Masked values, if any, will be converted to NaNs, which are then
            handled correctly by the Agg PathIterator and other consumers of
            path data, such as :meth:`iter_segments`.
        codes : array-like or None, optional
            N-length array of integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.  Note that the last vertex will
            then be ignored (as the corresponding code will be set to
            CLOSEPOLY).
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3316 6329])
                    ("_fast_from_codes_and_verts" function
                       (:documentation "
        Create a Path instance without the expense of calling the constructor.

        Parameters
        ----------
        verts : numpy array
        codes : numpy array
        internals_from : Path or None
            If not None, another `Path` from which the attributes
            ``should_simplify``, ``simplify_threshold``, and
            ``interpolation_steps`` will be copied.  Note that ``readonly`` is
            never copied, and always set to ``False`` by this constructor.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6382 6385])
                            ("verts" variable nil (reparse-symbol function_parameters) [6387 6392])
                            ("codes" variable nil (reparse-symbol function_parameters) [6394 6399])
                            ("internals_from" variable nil (reparse-symbol function_parameters) [6401 6415]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6334 7530])
                    ("_update_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7554 7558]))                          )
                        (reparse-symbol indented_block_body) [7535 7886])
                    ("vertices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7918 7922]))                          
                        :documentation "
        The list of vertices in the `Path` as an Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [7891 8045])
                    ("vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8084 8088])
                            ("vertices" variable nil (reparse-symbol function_parameters) [8090 8098]))                          
                        :decorators 
                          ( ("vertices.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8050 8266])
                    ("codes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8295 8299]))                          
                        :documentation "
        The list of codes in the `Path` as a 1D numpy array.  Each
        code is one of `STOP`, `MOVETO`, `LINETO`, `CURVE3`, `CURVE4`
        or `CLOSEPOLY`.  For codes that correspond to more than one
        vertex (`CURVE3` and `CURVE4`), that code will be repeated so
        that the length of `self.vertices` and `self.codes` is always
        the same.
        ")
                        (reparse-symbol indented_block_body) [8271 8716])
                    ("codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8749 8753])
                            ("codes" variable nil (reparse-symbol function_parameters) [8755 8760]))                          
                        :decorators 
                          ( ("codes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8721 8919])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8961 8965]))                          
                        :documentation "
        The fraction of a pixel difference below which vertices will
        be simplified out.
        ")
                        (reparse-symbol indented_block_body) [8924 9128])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9187 9191])
                            ("threshold" variable nil (reparse-symbol function_parameters) [9193 9202]))                          
                        :decorators 
                          ( ("simplify_threshold.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9133 9250])
                    ("should_simplify" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9289 9293]))                          
                        :documentation "
        `True` if the vertices array should be simplified.
        ")
                        (reparse-symbol indented_block_body) [9255 9416])
                    ("should_simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9469 9473])
                            ("should_simplify" variable nil (reparse-symbol function_parameters) [9475 9490]))                          
                        :decorators 
                          ( ("should_simplify.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9421 9541])
                    ("readonly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9573 9577]))                          
                        :documentation "
        `True` if the `Path` is read-only.
        ")
                        (reparse-symbol indented_block_body) [9546 9677])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9691 9695]))                          
                        :documentation "
        Return a shallow copy of the `Path`, which will share the
        vertices and codes with the source `Path`.
        ")
                        (reparse-symbol indented_block_body) [9682 9870])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9892 9896])
                            ("memo" variable nil (reparse-symbol function_parameters) [9898 9902]))                          
                        :documentation "
        Return a deepcopy of the `Path`.  The `Path` will not be
        readonly, even if the source `Path` is.
        ")
                        (reparse-symbol indented_block_body) [9875 10286])
                    ("deepcopy" variable nil (reparse-symbol indented_block_body) [10291 10314])
                    ("make_compound_path_from_polys" function
                       (:documentation "
        Make a compound path object to draw a number
        of polygons with equal numbers of sides XY is a (numpolys x
        numsides x 2) numpy array of vertices.  Return object is a
        :class:`Path`.

        .. plot:: gallery/misc/histogram_path.py

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10371 10374])
                            ("XY" variable nil (reparse-symbol function_parameters) [10376 10378]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10320 11380])
                    ("make_compound_path" function
                       (:documentation "
        Make a compound path from a list of `Path` objects. Blindly removes
        all `Path.STOP` control points.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11425 11428])
                            ("args" variable nil (reparse-symbol function_parameters) [11430 11435]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11385 12345])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12363 12367]))                          )
                        (reparse-symbol indented_block_body) [12350 12430])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12447 12451]))                          )
                        (reparse-symbol indented_block_body) [12435 12488])
                    ("iter_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12511 12515])
                            ("transform" variable nil (reparse-symbol function_parameters) [12517 12526])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [12533 12544])
                            ("clip" variable nil (reparse-symbol function_parameters) [12551 12555])
                            ("snap" variable nil (reparse-symbol function_parameters) [12584 12588])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [12596 12608])
                            ("simplify" variable nil (reparse-symbol function_parameters) [12614 12622])
                            ("curves" variable nil (reparse-symbol function_parameters) [12651 12657])
                            ("sketch" variable nil (reparse-symbol function_parameters) [12664 12670]))                          
                        :documentation "
        Iterate over all curve segments in the path.

        Each iteration returns a pair ``(vertices, code)``, where ``vertices``
        is a sequence of 1-3 coordinate pairs, and ``code`` is a `Path` code.

        Additionally, this method can provide a number of standard cleanups and
        conversions to the path.

        Parameters
        ----------
        transform : None or :class:`~matplotlib.transforms.Transform`
            If not None, the given affine transformation will be applied to the
            path.
        remove_nans : bool, optional
            Whether to remove all NaNs from the path and skip over them using
            MOVETO commands.
        clip : None or (float, float, float, float), optional
            If not None, must be a four-tuple (x1, y1, x2, y2)
            defining a rectangle in which to clip the path.
        snap : None or bool, optional
            If True, snap all nodes to pixels; if False, don't snap them.
            If None, snap if the path contains only segments
            parallel to the x or y axes, and no more than 1024 of them.
        stroke_width : float, optional
            The width of the stroke being drawn (used for path snapping).
        simplify : None or bool, optional
            Whether to simplify the path by removing vertices
            that do not affect its appearance.  If None, use the
            :attr:`should_simplify` attribute.  See also :rc:`path.simplify`
            and :rc:`path.simplify_threshold`.
        curves : bool, optional
            If True, curve segments will be returned as curve segments.
            If False, all curves will be converted to line segments.
        sketch : None or sequence, optional
            If not None, must be a 3-tuple of the form
            (scale, length, randomness), representing the sketch parameters.
        ")
                        (reparse-symbol indented_block_body) [12493 15533])
                    ("iter_bezier" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15554 15558])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15560 15568]))                          
                        :documentation "
        Iterate over each bezier curve (lines included) in a Path.

        Parameters
        ----------
        **kwargs
            Forwarded to `.iter_segments`.

        Yields
        ------
        B : matplotlib.bezier.BezierSegment
            The bezier curves that make up the current path. Note in particular
            that freestanding points are bezier curves of order 0, and lines
            are bezier curves of order 1 (with two control points).
        code : Path.code_type
            The code describing what kind of curve is being returned.
            Path.MOVETO, Path.LINETO, Path.CURVE3, Path.CURVE4 correspond to
            bezier curves with 1, 2, 3, and 4 control points (respectively).
            Path.CLOSEPOLY is a Path.LINETO with the control points correctly
            chosen based on the start/end points of the current stroke.
        ")
                        (reparse-symbol indented_block_body) [15538 17672])
                    ("cleaned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17689 17693])
                            ("transform" variable nil (reparse-symbol function_parameters) [17695 17704])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [17711 17722])
                            ("clip" variable nil (reparse-symbol function_parameters) [17730 17734])
                            ("simplify" variable nil (reparse-symbol function_parameters) [17760 17768])
                            ("curves" variable nil (reparse-symbol function_parameters) [17776 17782])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [17806 17818])
                            ("snap" variable nil (reparse-symbol function_parameters) [17824 17828])
                            ("sketch" variable nil (reparse-symbol function_parameters) [17836 17842]))                          
                        :documentation "
        Return a new Path with vertices and codes cleaned according to the
        parameters.

        See Also
        --------
        Path.iter_segments : for details of the keyword arguments.
        ")
                        (reparse-symbol indented_block_body) [17677 18377])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18398 18402])
                            ("transform" variable nil (reparse-symbol function_parameters) [18404 18413]))                          
                        :documentation "
        Return a transformed copy of the path.

        See Also
        --------
        matplotlib.transforms.TransformedPath
            A specialized path class that will cache the transformed result and
            automatically update when the transform changes.
        ")
                        (reparse-symbol indented_block_body) [18382 18824])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18848 18852])
                            ("point" variable nil (reparse-symbol function_parameters) [18854 18859])
                            ("transform" variable nil (reparse-symbol function_parameters) [18861 18870])
                            ("radius" variable nil (reparse-symbol function_parameters) [18877 18883]))                          
                        :documentation "
        Return whether the area enclosed by the path contains the given point.

        The path is always treated as closed; i.e. if the last code is not
        CLOSEPOLY an implicit segment connecting the last vertex to the first
        vertex is assumed.

        Parameters
        ----------
        point : (float, float)
            The point (x, y) to check.
        transform : `matplotlib.transforms.Transform`, optional
            If not ``None``, *point* will be compared to ``self`` transformed
            by *transform*; i.e. for a correct check, *transform* should
            transform the path into the coordinate system of *point*.
        radius : float, default: 0
            Add an additional margin on the path in coordinates of *point*.
            The path is extended tangentially by *radius/2*; i.e. if you would
            draw the path with a linewidth of *radius*, all points on the line
            would still be considered to be contained in the area. Conversely,
            negative values shrink the area: Points on the imaginary line
            will be considered outside the area.

        Returns
        -------
        bool

        Notes
        -----
        The current algorithm has some limitations:

        - The result is undefined for points exactly at the boundary
          (i.e. at the path shifted by *radius/2*).
        - The result is undefined if there is no enclosed area, i.e. all
          vertices are on a straight line.
        - If bounding lines start to cross each other due to *radius* shift,
          the result is not guaranteed to be correct.
        ")
                        (reparse-symbol indented_block_body) [18829 21058])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21083 21087])
                            ("points" variable nil (reparse-symbol function_parameters) [21089 21095])
                            ("transform" variable nil (reparse-symbol function_parameters) [21097 21106])
                            ("radius" variable nil (reparse-symbol function_parameters) [21113 21119]))                          
                        :documentation "
        Return whether the area enclosed by the path contains the given points.

        The path is always treated as closed; i.e. if the last code is not
        CLOSEPOLY an implicit segment connecting the last vertex to the first
        vertex is assumed.

        Parameters
        ----------
        points : (N, 2) array
            The points to check. Columns contain x and y values.
        transform : `matplotlib.transforms.Transform`, optional
            If not ``None``, *points* will be compared to ``self`` transformed
            by *transform*; i.e. for a correct check, *transform* should
            transform the path into the coordinate system of *points*.
        radius : float, default: 0
            Add an additional margin on the path in coordinates of *points*.
            The path is extended tangentially by *radius/2*; i.e. if you would
            draw the path with a linewidth of *radius*, all points on the line
            would still be considered to be contained in the area. Conversely,
            negative values shrink the area: Points on the imaginary line
            will be considered outside the area.

        Returns
        -------
        length-N bool array

        Notes
        -----
        The current algorithm has some limitations:

        - The result is undefined for points exactly at the boundary
          (i.e. at the path shifted by *radius/2*).
        - The result is undefined if there is no enclosed area, i.e. all
          vertices are on a straight line.
        - If bounding lines start to cross each other due to *radius* shift,
          the result is not guaranteed to be correct.
        ")
                        (reparse-symbol indented_block_body) [21063 23000])
                    ("contains_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23023 23027])
                            ("path" variable nil (reparse-symbol function_parameters) [23029 23033])
                            ("transform" variable nil (reparse-symbol function_parameters) [23035 23044]))                          
                        :documentation "
        Return whether this (closed) path completely contains the given path.

        If *transform* is not ``None``, the path will be transformed before
        checking for containment.
        ")
                        (reparse-symbol indented_block_body) [23005 23405])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23426 23430])
                            ("transform" variable nil (reparse-symbol function_parameters) [23432 23441])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23448 23456]))                          
                        :documentation "
        Get Bbox of the path.

        Parameters
        ----------
        transform : matplotlib.transforms.Transform, optional
            Transform to apply to path before computing extents, if any.
        **kwargs
            Forwarded to `.iter_bezier`.

        Returns
        -------
        matplotlib.transforms.Bbox
            The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])
        ")
                        (reparse-symbol indented_block_body) [23410 24982])
                    ("intersects_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25007 25011])
                            ("other" variable nil (reparse-symbol function_parameters) [25013 25018])
                            ("filled" variable nil (reparse-symbol function_parameters) [25020 25026]))                          
                        :documentation "
        Return whether if this path intersects another given path.

        If *filled* is True, then this also returns True if one path completely
        encloses the other (i.e., the paths are treated as filled).
        ")
                        (reparse-symbol indented_block_body) [24987 25337])
                    ("intersects_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25362 25366])
                            ("bbox" variable nil (reparse-symbol function_parameters) [25368 25372])
                            ("filled" variable nil (reparse-symbol function_parameters) [25374 25380]))                          
                        :documentation "
        Return whether this path intersects a given `~.transforms.Bbox`.

        If *filled* is True, then this also returns True if the path completely
        encloses the `.Bbox` (i.e., the path is treated as filled).

        The bounding box is always considered filled.
        ")
                        (reparse-symbol indented_block_body) [25342 25799])
                    ("interpolated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25821 25825])
                            ("steps" variable nil (reparse-symbol function_parameters) [25827 25832]))                          
                        :documentation "
        Return a new path resampled to length N x steps.

        Codes other than LINETO are not handled correctly.
        ")
                        (reparse-symbol indented_block_body) [25804 26403])
                    ("to_polygons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26424 26428])
                            ("transform" variable nil (reparse-symbol function_parameters) [26430 26439])
                            ("width" variable nil (reparse-symbol function_parameters) [26446 26451])
                            ("height" variable nil (reparse-symbol function_parameters) [26455 26461])
                            ("closed_only" variable nil (reparse-symbol function_parameters) [26465 26476]))                          
                        :documentation "
        Convert this path to a list of polygons or polylines.  Each
        polygon/polyline is an Nx2 array of vertices.  In other words,
        each polygon has no ``MOVETO`` instructions or curves.  This
        is useful for displaying in backends that do not support
        compound paths or Bezier curves.

        If *width* and *height* are both non-zero then the lines will
        be simplified so that vertices outside of (0, 0), (width,
        height) will be clipped.

        If *closed_only* is `True` (default), only closed polygons,
        with the last point being the same as the first point, will be
        returned.  Any unclosed polylines in the path will be
        explicitly closed.  If *closed_only* is `False`, any unclosed
        polygons in the path will be returned as unclosed polygons,
        and the closed polygons will be returned explicitly closed by
        setting the last point to the same as the first point.
        ")
                        (reparse-symbol indented_block_body) [26408 28269])
                    ("_unit_rectangle" variable nil (reparse-symbol indented_block_body) [28274 28296])
                    ("unit_rectangle" function
                       (:documentation "
        Return a `Path` instance of the unit rectangle from (0, 0) to (1, 1).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28338 28341]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28302 28667])
                    ("_unit_regular_polygons" variable nil (reparse-symbol indented_block_body) [28672 28718])
                    ("unit_regular_polygon" function
                       (:documentation "
        Return a :class:`Path` instance for a unit regular polygon with the
        given *numVertices* such that the circumscribing circle has radius 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28766 28769])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [28771 28782]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28724 29618])
                    ("_unit_regular_stars" variable nil (reparse-symbol indented_block_body) [29623 29666])
                    ("unit_regular_star" function
                       (:documentation "
        Return a :class:`Path` for a unit regular star with the given
        numVertices and radius of 1.0, centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29711 29714])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [29716 29727])
                            ("innerCircle" variable nil (reparse-symbol function_parameters) [29729 29740]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29672 30611])
                    ("unit_regular_asterisk" function
                       (:documentation "
        Return a :class:`Path` for a unit regular asterisk with the given
        numVertices and radius of 1.0, centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30659 30662])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [30664 30675]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30616 30890])
                    ("_unit_circle" variable nil (reparse-symbol indented_block_body) [30895 30914])
                    ("unit_circle" function
                       (:documentation "
        Return the readonly :class:`Path` of the unit circle.

        For most cases, :func:`Path.circle` will be what you want.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30953 30956]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30920 31306])
                    ("circle" function
                       (:documentation "
        Return a `Path` representing a circle of a given radius and center.

        Parameters
        ----------
        center : (float, float), default: (0, 0)
            The center of the circle.
        radius : float, default: 1
            The radius of the circle.
        readonly : bool
            Whether the created path should have the \"readonly\" argument
            set when creating the Path instance.

        Notes
        -----
        The circle is approximated using 8 cubic Bezier curves, as described in

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <https://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31339 31342])
                            ("center" variable nil (reparse-symbol function_parameters) [31344 31350])
                            ("radius" variable nil (reparse-symbol function_parameters) [31361 31367])
                            ("readonly" variable nil (reparse-symbol function_parameters) [31372 31380]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31311 33769])
                    ("_unit_circle_righthalf" variable nil (reparse-symbol indented_block_body) [33774 33803])
                    ("unit_circle_righthalf" function
                       (:documentation "
        Return a `Path` of the right half of a unit circle.

        See `Path.circle` for the reference on the approximation used.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33852 33855]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33809 35033])
                    ("arc" function
                       (:documentation "
        Return a `Path` for the unit circle arc from angles *theta1* to
        *theta2* (in degrees).

        *theta2* is unwrapped to produce the shortest arc within 360 degrees.
        That is, if *theta2* > *theta1* + 360, the arc will be from *theta1* to
        *theta2* - 360 and not a full circle plus some extra overlap.

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

           Masionobe, L.  2003.  `Drawing an elliptical arc using
           polylines, quadratic or cubic Bezier curves
           <http://www.spaceroots.org/documents/ellipse/index.html>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35063 35066])
                            ("theta1" variable nil (reparse-symbol function_parameters) [35068 35074])
                            ("theta2" variable nil (reparse-symbol function_parameters) [35076 35082])
                            ("n" variable nil (reparse-symbol function_parameters) [35084 35085])
                            ("is_wedge" variable nil (reparse-symbol function_parameters) [35092 35100]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35038 37943])
                    ("wedge" function
                       (:documentation "
        Return a `Path` for the unit circle wedge from angles *theta1* to
        *theta2* (in degrees).

        *theta2* is unwrapped to produce the shortest wedge within 360 degrees.
        That is, if *theta2* > *theta1* + 360, the wedge will be from *theta1*
        to *theta2* - 360 and not a full circle plus some extra overlap.

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

        See `Path.arc` for the reference on the approximation used.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37975 37978])
                            ("theta1" variable nil (reparse-symbol function_parameters) [37980 37986])
                            ("theta2" variable nil (reparse-symbol function_parameters) [37988 37994])
                            ("n" variable nil (reparse-symbol function_parameters) [37996 37997]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37948 38692])
                    ("" code nil (reparse-symbol indented_block_body) [38725 38728])
                    ("hatch" function
                       (:documentation "
        Given a hatch specifier, *hatchpattern*, generates a Path that
        can be used in a repeated hatching pattern.  *density* is the
        number of lines per unit square.
        "
                        :arguments 
                          ( ("hatchpattern" variable nil (reparse-symbol function_parameters) [38743 38755])
                            ("density" variable nil (reparse-symbol function_parameters) [38757 38764]))                          )
                        (reparse-symbol indented_block_body) [38733 39124])
                    ("clip_to_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39146 39150])
                            ("bbox" variable nil (reparse-symbol function_parameters) [39152 39156])
                            ("inside" variable nil (reparse-symbol function_parameters) [39158 39164]))                          
                        :documentation "
        Clip the path to the given bounding box.

        The path must be made up of one or more closed polygons.  This
        algorithm will not behave correctly for unclosed paths.

        If *inside* is `True`, clip to the inside of the box, otherwise
        to the outside of the box.
        ")
                        (reparse-symbol indented_block_body) [39129 39687]))                  
                :type "class")
                nil [664 39687])
            ("get_path_collection_extents" function (:arguments 
              ( ("master_transform" variable nil (reparse-symbol function_parameters) [39730 39746])
                ("paths" variable nil (reparse-symbol function_parameters) [39748 39753])
                ("transforms" variable nil (reparse-symbol function_parameters) [39755 39765])
                ("offsets" variable nil (reparse-symbol function_parameters) [39767 39774])
                ("offset_transform" variable nil (reparse-symbol function_parameters) [39776 39792]))              ) nil [39689 40916]))          
      :file "path.py"
      :pointmax 40916
      :fsize 40915
      :lastmodtime '(25218 25732 298602 579000)
      :unmatched-syntax '((FROM 40611 . 40615) (PERIOD 40616 . 40617) (FROM 23892 . 23896) (PERIOD 23897 . 23898) (MULT 17757 . 17758) (COMMA 17758 . 17759) (FROM 628 . 632) (PERIOD 633 . 634) (FROM 555 . 559) (PERIOD 560 . 561) (FROM 529 . 533) (PERIOD 534 . 535)))
    (semanticdb-table "semanticdb-table-157fb5480ba4"
      :major-mode python-mode
      :tags 
        '( ("collections.abc" include nil nil [1 43])
            ("functools" include nil nil [44 60])
            ("numpy" include nil nil [62 80])
            ("matplotlib" include nil nil [82 99])
            ("matplotlib" include nil nil [100 148])
            ("matplotlib.artist" include nil nil [149 198])
            ("matplotlib.transforms" include nil nil [199 242])
            ("matplotlib.patches" include nil nil [243 280])
            ("matplotlib.path" include nil nil [281 312])
            ("Spine" type
               (:documentation "
    An axis spine -- the line noting the data area boundaries.

    Spines are the lines connecting the axis tick marks and noting the
    boundaries of the data area. They can be placed at arbitrary
    positions. See `~.Spine.set_position` for more information.

    The default position is ``('outward', 0)``.

    Spines are subclasses of `.Patch`, and inherit much of their behavior.

    Spines draw a line, a circle, or an arc depending if
    `~.Spine.set_patch_line`, `~.Spine.set_patch_circle`, or
    `~.Spine.set_patch_arc` has been called. Line-like is the default.

    "
                :superclasses ("mpatches.Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [956 960]))                          )
                        (reparse-symbol indented_block_body) [944 986])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        axes : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance containing the spine.
        spine_type : str
            The spine type.
        path : `~matplotlib.path.Path`
            The `.Path` instance used to draw the spine.

        Other Parameters
        ----------------
        **kwargs
            Valid keyword arguments are:

            %(Patch:kwdoc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [1083 1523])
                            ("super" code nil (reparse-symbol indented_block_body) [1532 1558])
                            ("self" variable nil (reparse-symbol indented_block_body) [1567 1583])
                            ("self" code nil (reparse-symbol indented_block_body) [1592 1625])
                            ("self" variable nil (reparse-symbol indented_block_body) [1634 1662])
                            ("self" code nil (reparse-symbol indented_block_body) [1671 1697])
                            ("self" code nil (reparse-symbol indented_block_body) [1706 1752])
                            ("self" code nil (reparse-symbol indented_block_body) [1761 1807])
                            ("self" code nil (reparse-symbol indented_block_body) [1816 1847])
                            ("self" variable nil (reparse-symbol indented_block_body) [1856 1872])
                            ("self" code nil (reparse-symbol indented_block_body) [1882 1902])
                            ("self" code nil (reparse-symbol indented_block_body) [1911 1950])
                            ("self" variable nil (reparse-symbol indented_block_body) [1981 2000])
                            ("self" variable nil (reparse-symbol indented_block_body) [2235 2256])
                            ("_api" code nil (reparse-symbol indented_block_body) [2265 2319])
                            ("self" variable nil (reparse-symbol indented_block_body) [2328 2345])
                            ("self" variable nil (reparse-symbol indented_block_body) [2731 2756])
                            ("self" variable nil (reparse-symbol indented_block_body) [2888 2943]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1034 1038])
                            ("axes" variable nil (reparse-symbol function_parameters) [1040 1044])
                            ("spine_type" variable nil (reparse-symbol function_parameters) [1046 1056])
                            ("path" variable nil (reparse-symbol function_parameters) [1058 1062])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1064 1072]))                          
                        :documentation "
        Parameters
        ----------
        axes : `~matplotlib.axes.Axes`
            The `~.axes.Axes` instance containing the spine.
        spine_type : str
            The spine type.
        path : `~matplotlib.path.Path`
            The `.Path` instance used to draw the spine.

        Other Parameters
        ----------------
        **kwargs
            Valid keyword arguments are:

            %(Patch:kwdoc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [991 2944])
                    ("set_patch_arc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2967 2971])
                            ("center" variable nil (reparse-symbol function_parameters) [2973 2979])
                            ("radius" variable nil (reparse-symbol function_parameters) [2981 2987])
                            ("theta1" variable nil (reparse-symbol function_parameters) [2989 2995])
                            ("theta2" variable nil (reparse-symbol function_parameters) [2997 3003]))                          
                        :documentation "Set the spine to be arc-like.")
                        (reparse-symbol indented_block_body) [2949 3404])
                    ("set_patch_circle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3430 3434])
                            ("center" variable nil (reparse-symbol function_parameters) [3436 3442])
                            ("radius" variable nil (reparse-symbol function_parameters) [3444 3450]))                          
                        :documentation "Set the spine to be circular.")
                        (reparse-symbol indented_block_body) [3409 3745])
                    ("set_patch_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3769 3773]))                          
                        :documentation "Set the spine to be linear.")
                        (reparse-symbol indented_block_body) [3750 3878])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3953 3957]))                          
                        :documentation "
        Notes
        -----
        This cannot be called until after this has been added to an Axes,
        otherwise unit conversion will fail. This makes it very important to
        call the accessor method and not directly access the transformation
        member variable.
        ")
                        (reparse-symbol indented_block_body) [3928 4666])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4695 4699]))                          )
                        (reparse-symbol indented_block_body) [4671 4896])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4923 4927])
                            ("renderer" variable nil (reparse-symbol function_parameters) [4929 4937]))                          
                        :documentation "
        Return the window extent of the spines in display space, including
        padding for ticks (but not their labels)

        See Also
        --------
        matplotlib.axes.Axes.get_tightbbox
        matplotlib.axes.Axes.get_window_extent
        ")
                        (reparse-symbol indented_block_body) [4901 6935])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6953 6957]))                          )
                        (reparse-symbol indented_block_body) [6940 6986])
                    ("_ensure_position_is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7019 7023]))                          )
                        (reparse-symbol indented_block_body) [6991 7197])
                    ("register_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7220 7224])
                            ("axis" variable nil (reparse-symbol function_parameters) [7226 7230]))                          
                        :documentation "
        Register an axis.

        An axis should be registered with its corresponding spine from
        the Axes instance. This allows the spine to clear any axis
        properties when needed.
        ")
                        (reparse-symbol indented_block_body) [7202 7569])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7584 7588]))                          
                        :documentation "Clear the current spine.")
                        (reparse-symbol indented_block_body) [7574 7742])
                    ("" code nil (reparse-symbol indented_block_body) [7763 7800])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7813 7817]))                          )
                        (reparse-symbol indented_block_body) [7805 7841])
                    ("_adjust_location" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7867 7871]))                          
                        :documentation "Automatically set spine bounds to the view interval.")
                        (reparse-symbol indented_block_body) [7846 10106])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10145 10149])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10151 10159]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10111 10277])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10299 10303])
                            ("position" variable nil (reparse-symbol function_parameters) [10305 10313]))                          
                        :documentation "
        Set the position of the spine.

        Spine position is specified by a 2 tuple of (position type,
        amount). The position types are:

        * 'outward': place the spine out from the data area by the specified
          number of points. (Negative values place the spine inwards.)
        * 'axes': place the spine at the specified Axes coordinate (0 to 1).
        * 'data': place the spine at the specified data coordinate.

        Additionally, shorthand notations define a special positions:

        * 'center' -> ('axes', 0.5)
        * 'zero' -> ('data', 0.0)
        ")
                        (reparse-symbol indented_block_body) [10282 11509])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11531 11535]))                          
                        :documentation "Return the spine position.")
                        (reparse-symbol indented_block_body) [11514 11648])
                    ("get_spine_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11677 11681]))                          
                        :documentation "Return the spine transform.")
                        (reparse-symbol indented_block_body) [11653 14534])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14554 14558])
                            ("low" variable nil (reparse-symbol function_parameters) [14560 14563])
                            ("high" variable nil (reparse-symbol function_parameters) [14570 14574]))                          
                        :documentation "
        Set the spine bounds.

        Parameters
        ----------
        low : float or None, optional
            The lower spine bound. Passing *None* leaves the limit unchanged.

            The bounds may also be passed as the tuple (*low*, *high*) as the
            first positional argument.

            .. ACCEPTS: (low: float, high: float)

        high : float or None, optional
            The higher spine bound. Passing *None* leaves the limit unchanged.
        ")
                        (reparse-symbol indented_block_body) [14539 15522])
                    ("get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15542 15546]))                          
                        :documentation "Get the bounds of the spine.")
                        (reparse-symbol indented_block_body) [15527 15620])
                    ("linear_spine" function
                       (:documentation "Create and return a linear `Spine`."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15659 15662])
                            ("axes" variable nil (reparse-symbol function_parameters) [15664 15668])
                            ("spine_type" variable nil (reparse-symbol function_parameters) [15670 15680])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15682 15690]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15625 16439])
                    ("arc_spine" function
                       (:documentation "Create and return an arc `Spine`."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16475 16478])
                            ("axes" variable nil (reparse-symbol function_parameters) [16480 16484])
                            ("spine_type" variable nil (reparse-symbol function_parameters) [16486 16496])
                            ("center" variable nil (reparse-symbol function_parameters) [16498 16504])
                            ("radius" variable nil (reparse-symbol function_parameters) [16506 16512])
                            ("theta1" variable nil (reparse-symbol function_parameters) [16514 16520])
                            ("theta2" variable nil (reparse-symbol function_parameters) [16522 16528])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16548 16556]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16444 16791])
                    ("circular_spine" function
                       (:documentation "Create and return a circular `Spine`."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16832 16835])
                            ("axes" variable nil (reparse-symbol function_parameters) [16837 16841])
                            ("center" variable nil (reparse-symbol function_parameters) [16843 16849])
                            ("radius" variable nil (reparse-symbol function_parameters) [16851 16857])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16859 16867]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16796 17117])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17136 17140])
                            ("c" variable nil (reparse-symbol function_parameters) [17142 17143]))                          
                        :documentation "
        Set the edgecolor.

        Parameters
        ----------
        c : color

        Notes
        -----
        This method does not modify the facecolor (which defaults to \"none\"),
        unlike the `.Patch.set_color` method defined in the parent class.  Use
        `.Patch.set_facecolor` to set the facecolor.
        ")
                        (reparse-symbol indented_block_body) [17122 17549]))                  
                :type "class")
                nil [315 17549])
            ("SpinesProxy" type
               (:documentation "
    A proxy to broadcast ``set_*`` method calls to all contained `.Spines`.

    The proxy cannot be used for any other operations on its members.

    The supported methods are determined dynamically based on the contained
    spines. If not all spines support a given method, it's executed only on
    the subset of spines that support it.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17972 18001]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17945 17949])
                            ("spine_dict" variable nil (reparse-symbol function_parameters) [17951 17961]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17932 18002])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18023 18027])
                            ("name" variable nil (reparse-symbol function_parameters) [18029 18033]))                          )
                        (reparse-symbol indented_block_body) [18007 18602])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18619 18623]))                          )
                        (reparse-symbol indented_block_body) [18607 18839]))                  
                :type "class")
                nil [17551 18839])
            ("Spines" type
               (:superclasses ("MutableMapping")
                :members 
                  ( ("r\"\"\"
    The container of all `.Spine`\\s in an Axes.

    The interface is dict-like mapping names (e.g. 'left') to `.Spine` objects.
    Additionally it implements some pandas.Series-like features like accessing
    elements by attribute::

        spines['top'].set_visible(False)
        spines.top.set_visible(False)

    Multiple spines can be addressed simultaneously by passing a list::

        spines[['top', 'right']].set_visible(False)

    Use an open slice to address all spines::

        spines[:].set_visible(False)

    The latter two indexing methods will return a `SpinesProxy` that broadcasts
    all ``set_*`` calls to its members, but cannot be used for any other
    operation.
    \"\"\"" code nil (reparse-symbol indented_block_body) [18875 19583])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [19626 19645]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19601 19605])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19607 19615]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19588 19646])
                    ("from_dict" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19682 19685])
                            ("d" variable nil (reparse-symbol function_parameters) [19687 19688]))                          )
                        (reparse-symbol indented_block_body) [19651 19715])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19737 19741]))                          )
                        (reparse-symbol indented_block_body) [19720 19770])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19792 19796])
                            ("state" variable nil (reparse-symbol function_parameters) [19798 19803]))                          )
                        (reparse-symbol indented_block_body) [19775 19837])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19858 19862])
                            ("name" variable nil (reparse-symbol function_parameters) [19864 19868]))                          )
                        (reparse-symbol indented_block_body) [19842 20049])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20070 20074])
                            ("key" variable nil (reparse-symbol function_parameters) [20076 20079]))                          )
                        (reparse-symbol indented_block_body) [20054 20874])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20895 20899])
                            ("key" variable nil (reparse-symbol function_parameters) [20901 20904])
                            ("value" variable nil (reparse-symbol function_parameters) [20906 20911]))                          )
                        (reparse-symbol indented_block_body) [20879 21001])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21022 21026])
                            ("key" variable nil (reparse-symbol function_parameters) [21028 21031]))                          )
                        (reparse-symbol indented_block_body) [21006 21119])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21137 21141]))                          )
                        (reparse-symbol indented_block_body) [21124 21176])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21193 21197]))                          )
                        (reparse-symbol indented_block_body) [21181 21231]))                  
                :type "class")
                nil [18841 21231]))          
      :file "spines.py"
      :pointmax 21231
      :fsize 21230
      :lastmodtime '(25218 25732 425269 355000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-157fb5143d24"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Matplotlib includes a framework for arbitrary geometric
transformations that is used determine the final position of all
elements drawn on the canvas.

Transforms are composed into trees of `TransformNode` objects
whose actual value depends on their children.  When the contents of
children change, their parents are automatically invalidated.  The
next time an invalidated transform is accessed, it is recomputed to
reflect those changes.  This invalidation/caching approach prevents
unnecessary recomputations of transforms, and contributes to better
interactive performance.

For example, here is a graph of the transform tree used to plot data
to the graph:

.. image:: ../_static/transforms.png

The framework can be used for both affine and non-affine
transformations.  However, for speed, we want use the backend
renderers to perform affine transformations whenever possible.
Therefore, it is possible to perform just the affine or non-affine
part of a transformation on a set of data.  The affine is always
assumed to occur after the non-affine.  For any transform::

  full transform == non-affine part + affine part

The backends are not expected to handle non-affine transformations
themselves.
\"\"\"" code nil nil [1 1214])
            ("copy" include nil nil [1442 1453])
            ("functools" include nil nil [1454 1470])
            ("textwrap" include nil nil [1471 1486])
            ("weakref" include nil nil [1487 1501])
            ("math" include nil nil [1502 1513])
            ("numpy" include nil nil [1515 1533])
            ("numpy.linalg" include nil nil [1534 1562])
            ("matplotlib" include nil nil [1564 1591])
            ("" code nil nil [1621 1696])
            ("Path" include nil nil [1708 1719])
            ("DEBUG" variable nil nil [1721 1734])
            ("_make_str_method" function
               (:documentation "
    Generate a ``__str__`` method for a `.Transform` subclass.

    After ::

        class T:
            __str__ = _make_str_method(\"attr\", key=\"other\")

    ``str(T(...))`` will be

    .. code-block:: text

        {type(T).__name__}(
            {self.attr},
            key={self.other})
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [1758 1763])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [1765 1773]))                  )
                nil [1737 2528])
            ("TransformNode" type
               (:documentation "
    The base class for anything that participates in the transform tree
    and needs to invalidate its parents or be invalidated.  This includes
    classes that are not really transforms, such as bounding boxes, since some
    transforms depend on bounding boxes to compute their values.
    "
                :members 
                  ( ("INVALID_NON_AFFINE" variable nil (reparse-symbol indented_block_body) [3016 3038])
                    ("INVALID_AFFINE" variable nil (reparse-symbol indented_block_body) [3043 3061])
                    ("INVALID" code nil (reparse-symbol indented_block_body) [3066 3111])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [3221 3238])
                    ("is_bbox" variable nil (reparse-symbol indented_block_body) [3243 3258])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [3264 3284])
                    ("\"\"\"
    If pass_through is True, all ancestors will always be
    invalidated, even if 'self' is already invalid.
    \"\"\"" code nil (reparse-symbol indented_block_body) [3289 3410])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        shorthand_name : str
            A string representing the \"name\" of the transform. The name carries
            no significance other than to improve the readability of
            ``str(transform)`` when DEBUG=True.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3465 3744])
                            ("self" variable nil (reparse-symbol indented_block_body) [3753 3771])
                            ("self" variable nil (reparse-symbol indented_block_body) [3889 3906])
                            ("self" code nil (reparse-symbol indented_block_body) [3915 3958]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3429 3433])
                            ("shorthand_name" variable nil (reparse-symbol function_parameters) [3435 3449]))                          
                        :documentation "
        Parameters
        ----------
        shorthand_name : str
            A string representing the \"name\" of the transform. The name carries
            no significance other than to improve the readability of
            ``str(transform)`` when DEBUG=True.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3416 3959])
                    ("if" code nil (reparse-symbol indented_block_body) [3964 4132])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4154 4158]))                          )
                        (reparse-symbol indented_block_body) [4137 4338])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4360 4364])
                            ("data_dict" variable nil (reparse-symbol function_parameters) [4366 4375]))                          )
                        (reparse-symbol indented_block_body) [4343 4794])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4812 4816]))                          )
                        (reparse-symbol indented_block_body) [4799 5355])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5377 5381])
                            ("memo" variable nil (reparse-symbol function_parameters) [5383 5387]))                          )
                        (reparse-symbol indented_block_body) [5360 6147])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6167 6171]))                          
                        :documentation "
        Invalidate this `TransformNode` and triggers an invalidation of its
        ancestors.  Should be called any time the transform changes.
        ")
                        (reparse-symbol indented_block_body) [6152 6511])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6541 6545])
                            ("value" variable nil (reparse-symbol function_parameters) [6547 6552])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [6554 6571]))                          
                        :documentation "
        Called by :meth:`invalidate` and subsequently ascends the transform
        stack calling each TransformNode's _invalidate_internal method.
        ")
                        (reparse-symbol indented_block_body) [6516 7785])
                    ("set_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7807 7811])
                            ("children" variable nil (reparse-symbol function_parameters) [7813 7822]))                          
                        :documentation "
        Set the children of the transform, to let the invalidation
        system know which transforms can invalidate this transform.
        Should be called from the constructor of any transforms that
        depend on other transforms.
        ")
                        (reparse-symbol indented_block_body) [7790 8652])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8668 8672]))                          
                        :documentation "
        Return a frozen copy of this transform node.  The frozen copy will not
        be updated when its children change.  Useful for storing a previously
        known state of a transform where ``copy.deepcopy()`` might normally be
        used.
        ")
                        (reparse-symbol indented_block_body) [8657 8969]))                  
                :type "class")
                nil [2530 8969])
            ("BboxBase" type
               (:documentation "
    The base class of all bounding boxes.

    This class is immutable; `Bbox` is a mutable subclass.

    The canonical representation is as two points, with no
    restrictions on their ordering.  Convenience properties are
    provided to get the left, bottom, right and top edges and width
    and height, but these are not stored explicitly.
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("is_bbox" variable nil (reparse-symbol indented_block_body) [9370 9384])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [9389 9405])
                    ("if" code nil (reparse-symbol indented_block_body) [9411 9744])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9760 9764]))                          )
                        (reparse-symbol indented_block_body) [9749 9813])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [9817 9855])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9875 9879])
                            ("args" variable nil (reparse-symbol function_parameters) [9881 9886])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9888 9896]))                          )
                        (reparse-symbol indented_block_body) [9861 9932])
                    ("x0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9958 9962]))                          
                        :documentation "
        The first of the pair of *x* coordinates that define the bounding box.

        This is not guaranteed to be less than :attr:`x1` (for that, use
        :attr:`xmin`).
        ")
                        (reparse-symbol indented_block_body) [9937 10204])
                    ("y0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10230 10234]))                          
                        :documentation "
        The first of the pair of *y* coordinates that define the bounding box.

        This is not guaranteed to be less than :attr:`y1` (for that, use
        :attr:`ymin`).
        ")
                        (reparse-symbol indented_block_body) [10209 10476])
                    ("x1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10502 10506]))                          
                        :documentation "
        The second of the pair of *x* coordinates that define the bounding box.

        This is not guaranteed to be greater than :attr:`x0` (for that, use
        :attr:`xmax`).
        ")
                        (reparse-symbol indented_block_body) [10481 10752])
                    ("y1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10778 10782]))                          
                        :documentation "
        The second of the pair of *y* coordinates that define the bounding box.

        This is not guaranteed to be greater than :attr:`y0` (for that, use
        :attr:`ymax`).
        ")
                        (reparse-symbol indented_block_body) [10757 11028])
                    ("p0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11054 11058]))                          
                        :documentation "
        The first pair of (*x*, *y*) coordinates that define the bounding box.

        This is not guaranteed to be the bottom-left corner (for that, use
        :attr:`min`).
        ")
                        (reparse-symbol indented_block_body) [11033 11298])
                    ("p1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11324 11328]))                          
                        :documentation "
        The second pair of (*x*, *y*) coordinates that define the bounding box.

        This is not guaranteed to be the top-right corner (for that, use
        :attr:`max`).
        ")
                        (reparse-symbol indented_block_body) [11303 11567])
                    ("xmin" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11595 11599]))                          
                        :documentation "The left edge of the bounding box.")
                        (reparse-symbol indented_block_body) [11572 11698])
                    ("ymin" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11726 11730]))                          
                        :documentation "The bottom edge of the bounding box.")
                        (reparse-symbol indented_block_body) [11703 11831])
                    ("xmax" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11859 11863]))                          
                        :documentation "The right edge of the bounding box.")
                        (reparse-symbol indented_block_body) [11836 11963])
                    ("ymax" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11991 11995]))                          
                        :documentation "The top edge of the bounding box.")
                        (reparse-symbol indented_block_body) [11968 12093])
                    ("min" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12120 12124]))                          
                        :documentation "The bottom-left corner of the bounding box.")
                        (reparse-symbol indented_block_body) [12098 12234])
                    ("max" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12261 12265]))                          
                        :documentation "The top-right corner of the bounding box.")
                        (reparse-symbol indented_block_body) [12239 12373])
                    ("intervalx" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12406 12410]))                          
                        :documentation "
        The pair of *x* coordinates that define the bounding box.

        This is not guaranteed to be sorted from left to right.
        ")
                        (reparse-symbol indented_block_body) [12378 12607])
                    ("intervaly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12640 12644]))                          
                        :documentation "
        The pair of *y* coordinates that define the bounding box.

        This is not guaranteed to be sorted from bottom to top.
        ")
                        (reparse-symbol indented_block_body) [12612 12841])
                    ("width" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12870 12874]))                          
                        :documentation "The (signed) width of the bounding box.")
                        (reparse-symbol indented_block_body) [12846 13009])
                    ("height" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13039 13043]))                          
                        :documentation "The (signed) height of the bounding box.")
                        (reparse-symbol indented_block_body) [13014 13179])
                    ("size" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13207 13211]))                          
                        :documentation "The (signed) width and height of the bounding box.")
                        (reparse-symbol indented_block_body) [13184 13351])
                    ("bounds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13381 13385]))                          
                        :documentation "Return (:attr:`x0`, :attr:`y0`, :attr:`width`, :attr:`height`).")
                        (reparse-symbol indented_block_body) [13356 13555])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13586 13590]))                          
                        :documentation "Return (:attr:`x0`, :attr:`y0`, :attr:`x1`, :attr:`y1`).")
                        (reparse-symbol indented_block_body) [13560 13734])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13754 13758]))                          )
                        (reparse-symbol indented_block_body) [13739 13795])
                    ("containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13814 13818])
                            ("x" variable nil (reparse-symbol function_parameters) [13820 13821]))                          
                        :documentation "
        Return whether *x* is in the closed (:attr:`x0`, :attr:`x1`) interval.
        ")
                        (reparse-symbol indented_block_body) [13800 14005])
                    ("containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14024 14028])
                            ("y" variable nil (reparse-symbol function_parameters) [14030 14031]))                          
                        :documentation "
        Return whether *y* is in the closed (:attr:`y0`, :attr:`y1`) interval.
        ")
                        (reparse-symbol indented_block_body) [14010 14215])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14233 14237])
                            ("x" variable nil (reparse-symbol function_parameters) [14239 14240])
                            ("y" variable nil (reparse-symbol function_parameters) [14242 14243]))                          
                        :documentation "
        Return whether ``(x, y)`` is in the bounding box or on its edge.
        ")
                        (reparse-symbol indented_block_body) [14220 14398])
                    ("overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14416 14420])
                            ("other" variable nil (reparse-symbol function_parameters) [14422 14427]))                          
                        :documentation "
        Return whether this bounding box overlaps with the other bounding box.

        Parameters
        ----------
        other : `.BboxBase`
        ")
                        (reparse-symbol indented_block_body) [14403 14972])
                    ("fully_containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14997 15001])
                            ("x" variable nil (reparse-symbol function_parameters) [15003 15004]))                          
                        :documentation "
        Return whether *x* is in the open (:attr:`x0`, :attr:`x1`) interval.
        ")
                        (reparse-symbol indented_block_body) [14977 15182])
                    ("fully_containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15207 15211])
                            ("y" variable nil (reparse-symbol function_parameters) [15213 15214]))                          
                        :documentation "
        Return whether *y* is in the open (:attr:`y0`, :attr:`y1`) interval.
        ")
                        (reparse-symbol indented_block_body) [15187 15392])
                    ("fully_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15416 15420])
                            ("x" variable nil (reparse-symbol function_parameters) [15422 15423])
                            ("y" variable nil (reparse-symbol function_parameters) [15425 15426]))                          
                        :documentation "
        Return whether ``x, y`` is in the bounding box, but not on its edge.
        ")
                        (reparse-symbol indented_block_body) [15397 15597])
                    ("fully_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15621 15625])
                            ("other" variable nil (reparse-symbol function_parameters) [15627 15632]))                          
                        :documentation "
        Return whether this bounding box overlaps with the other bounding box,
        not including the edges.

        Parameters
        ----------
        other : `.BboxBase`
        ")
                        (reparse-symbol indented_block_body) [15602 16206])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16227 16231])
                            ("transform" variable nil (reparse-symbol function_parameters) [16233 16242]))                          
                        :documentation "
        Construct a `Bbox` by statically transforming this one by *transform*.
        ")
                        (reparse-symbol indented_block_body) [16211 16544])
                    ("coefs" variable nil (reparse-symbol indented_block_body) [16549 16811])
                    ("anchored" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16830 16834])
                            ("c" variable nil (reparse-symbol function_parameters) [16836 16837])
                            ("container" variable nil (reparse-symbol function_parameters) [16839 16848]))                          
                        :documentation "
        Return a copy of the `Bbox` anchored to *c* within *container*.

        Parameters
        ----------
        c : (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}
            Either an (*x*, *y*) pair of relative coordinates (0 is left or
            bottom, 1 is right or top), 'C' (center), or a cardinal direction
            ('SW', southwest, is bottom left, etc.).
        container : `Bbox`, optional
            The box within which the `Bbox` is positioned; it defaults
            to the initial `Bbox`.

        See Also
        --------
        .Axes.set_anchor
        ")
                        (reparse-symbol indented_block_body) [16817 17829])
                    ("shrunk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17845 17849])
                            ("mx" variable nil (reparse-symbol function_parameters) [17851 17853])
                            ("my" variable nil (reparse-symbol function_parameters) [17855 17857]))                          
                        :documentation "
        Return a copy of the `Bbox`, shrunk by the factor *mx*
        in the *x* direction and the factor *my* in the *y* direction.
        The lower left corner of the box remains unchanged.  Normally
        *mx* and *my* will be less than 1, but this is not enforced.
        ")
                        (reparse-symbol indented_block_body) [17834 18278])
                    ("shrunk_to_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18304 18308])
                            ("box_aspect" variable nil (reparse-symbol function_parameters) [18310 18320])
                            ("container" variable nil (reparse-symbol function_parameters) [18322 18331])
                            ("fig_aspect" variable nil (reparse-symbol function_parameters) [18338 18348]))                          
                        :documentation "
        Return a copy of the `Bbox`, shrunk so that it is as
        large as it can be while having the desired aspect ratio,
        *box_aspect*.  If the box coordinates are relative (i.e.
        fractions of a larger box such as a figure) then the
        physical aspect ratio of that figure is specified with
        *fig_aspect*, so that *box_aspect* can also be given as a
        ratio of the absolute dimensions, not the relative dimensions.
        ")
                        (reparse-symbol indented_block_body) [18283 19286])
                    ("splitx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19302 19306])
                            ("args" variable nil (reparse-symbol function_parameters) [19308 19313]))                          
                        :documentation "
        Return a list of new `Bbox` objects formed by splitting the original
        one with vertical lines at fractional positions given by *args*.
        ")
                        (reparse-symbol indented_block_body) [19291 19692])
                    ("splity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19708 19712])
                            ("args" variable nil (reparse-symbol function_parameters) [19714 19719]))                          
                        :documentation "
        Return a list of new `Bbox` objects formed by splitting the original
        one with horizontal lines at fractional positions given by *args*.
        ")
                        (reparse-symbol indented_block_body) [19697 20100])
                    ("count_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20124 20128])
                            ("vertices" variable nil (reparse-symbol function_parameters) [20130 20138]))                          
                        :documentation "
        Count the number of vertices contained in the `Bbox`.
        Any vertices with a non-finite x or y value are ignored.

        Parameters
        ----------
        vertices : Nx2 Numpy array.
        ")
                        (reparse-symbol indented_block_body) [20105 20611])
                    ("count_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20635 20639])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [20641 20647]))                          
                        :documentation "
        Count the number of bounding boxes that overlap this one.

        Parameters
        ----------
        bboxes : sequence of `.BboxBase`
        ")
                        (reparse-symbol indented_block_body) [20616 20930])
                    ("expanded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20948 20952])
                            ("sw" variable nil (reparse-symbol function_parameters) [20954 20956])
                            ("sh" variable nil (reparse-symbol function_parameters) [20958 20960]))                          
                        :documentation "
        Construct a `Bbox` by expanding this one around its center by the
        factors *sw* and *sh*.
        ")
                        (reparse-symbol indented_block_body) [20935 21337])
                    ("padded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21353 21357])
                            ("p" variable nil (reparse-symbol function_parameters) [21359 21360]))                          
                        :documentation "Construct a `Bbox` by padding this one on all four sides by *p*.")
                        (reparse-symbol indented_block_body) [21342 21526])
                    ("translated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21546 21550])
                            ("tx" variable nil (reparse-symbol function_parameters) [21552 21554])
                            ("ty" variable nil (reparse-symbol function_parameters) [21556 21558]))                          
                        :documentation "Construct a `Bbox` by translating this one by *tx* and *ty*.")
                        (reparse-symbol indented_block_body) [21531 21681])
                    ("corners" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21698 21702]))                          
                        :documentation "
        Return the corners of this rectangle as an array of points.

        Specifically, this returns the array
        ``[[x0, y0], [x0, y1], [x1, y0], [x1, y1]]``.
        ")
                        (reparse-symbol indented_block_body) [21686 22010])
                    ("rotated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22027 22031])
                            ("radians" variable nil (reparse-symbol function_parameters) [22033 22040]))                          
                        :documentation "
        Return the axes-aligned bounding box that bounds the result of rotating
        this `Bbox` by an angle of *radians*.
        ")
                        (reparse-symbol indented_block_body) [22015 22408])
                    ("union" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bboxes" variable nil (reparse-symbol function_parameters) [22441 22447]))                          
                        :documentation "Return a `Bbox` that contains all of the given *bboxes*.")
                        (reparse-symbol indented_block_body) [22413 22856])
                    ("intersection" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bbox1" variable nil (reparse-symbol function_parameters) [22896 22901])
                            ("bbox2" variable nil (reparse-symbol function_parameters) [22903 22908]))                          
                        :documentation "
        Return the intersection of *bbox1* and *bbox2* if they intersect, or
        None if they don't.
        ")
                        (reparse-symbol indented_block_body) [22861 23309]))                  
                :type "class")
                nil [8971 23309])
            ("Bbox" type
               (:documentation "
    A mutable bounding box.

    Examples
    --------
    **Create from known bounds**

    The default constructor takes the boundary \"points\" ``[[xmin, ymin],
    [xmax, ymax]]``.

        >>> Bbox([[1, 1], [3, 7]])
        Bbox([[1.0, 1.0], [3.0, 7.0]])

    Alternatively, a Bbox can be created from the flattened points array, the
    so-called \"extents\" ``(xmin, ymin, xmax, ymax)``

        >>> Bbox.from_extents(1, 1, 3, 7)
        Bbox([[1.0, 1.0], [3.0, 7.0]])

    or from the \"bounds\" ``(xmin, ymin, width, height)``.

        >>> Bbox.from_bounds(1, 1, 2, 6)
        Bbox([[1.0, 1.0], [3.0, 7.0]])

    **Create from collections of points**

    The \"empty\" object for accumulating Bboxs is the null bbox, which is a
    stand-in for the empty set.

        >>> Bbox.null()
        Bbox([[inf, inf], [-inf, -inf]])

    Adding points to the null bbox will give you the bbox of those points.

        >>> box = Bbox.null()
        >>> box.update_from_data_xy([[1, 1]])
        >>> box
        Bbox([[1.0, 1.0], [1.0, 1.0]])
        >>> box.update_from_data_xy([[2, 3], [3, 2]], ignore=False)
        >>> box
        Bbox([[1.0, 1.0], [3.0, 3.0]])

    Setting ``ignore=True`` is equivalent to starting over from a null bbox.

        >>> box.update_from_data_xy([[1, 1]], ignore=True)
        >>> box
        Bbox([[1.0, 1.0], [1.0, 1.0]])

    .. warning::

        It is recommended to always specify ``ignore`` explicitly.  If not, the
        default value of ``ignore`` can be changed at any time by code with
        access to your Bbox, for example using the method `~.Bbox.ignore`.

    **Properties of the ``null`` bbox**

    .. note::

        The current behavior of `Bbox.null()` may be surprising as it does
        not have all of the properties of the \"empty set\", and as such does
        not behave like a \"zero\" object in the mathematical sense. We may
        change that in the future (with a deprecation period).

    The null bbox is the identity for intersections

        >>> Bbox.intersection(Bbox([[1, 1], [3, 7]]), Bbox.null())
        Bbox([[1.0, 1.0], [3.0, 7.0]])

    except with itself, where it returns the full space.

        >>> Bbox.intersection(Bbox.null(), Bbox.null())
        Bbox([[-inf, -inf], [inf, inf]])

    A union containing null will always return the full space (not the other
    set!)

        >>> Bbox.union([Bbox([[0, 0], [0, 0]]), Bbox.null()])
        Bbox([[-inf, -inf], [inf, inf]])
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        points : ndarray
            A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [25856 26002])
                            ("super" code nil (reparse-symbol indented_block_body) [26011 26037])
                            ("points" variable nil (reparse-symbol indented_block_body) [26046 26080])
                            ("if" code nil (reparse-symbol indented_block_body) [26089 26236])
                            ("self" variable nil (reparse-symbol indented_block_body) [26244 26265])
                            ("self" variable nil (reparse-symbol indented_block_body) [26274 26315])
                            ("self" variable nil (reparse-symbol indented_block_body) [26324 26343])
                            ("self" variable nil (reparse-symbol indented_block_body) [26523 26562]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25823 25827])
                            ("points" variable nil (reparse-symbol function_parameters) [25829 25835])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25837 25845]))                          
                        :documentation "
        Parameters
        ----------
        points : ndarray
            A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25810 26563])
                    ("if" code nil (reparse-symbol indented_block_body) [26567 26832])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26848 26852]))                          )
                        (reparse-symbol indented_block_body) [26837 27000])
                    ("unit" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Create a new unit `Bbox` from (0, 0) to (1, 1).")
                        (reparse-symbol indented_block_body) [27005 27135])
                    ("null" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Create a new null `Bbox` from (inf, inf) to (-inf, -inf).")
                        (reparse-symbol indented_block_body) [27140 27302])
                    ("from_bounds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x0" variable nil (reparse-symbol function_parameters) [27341 27343])
                            ("y0" variable nil (reparse-symbol function_parameters) [27345 27347])
                            ("width" variable nil (reparse-symbol function_parameters) [27349 27354])
                            ("height" variable nil (reparse-symbol function_parameters) [27356 27362]))                          
                        :documentation "
        Create a new `Bbox` from *x0*, *y0*, *width* and *height*.

        *width* and *height* may be negative.
        ")
                        (reparse-symbol indented_block_body) [27307 27569])
                    ("from_extents" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [27609 27614])
                            ("minpos" variable nil (reparse-symbol function_parameters) [27616 27622]))                          
                        :documentation "
        Create a new Bbox from *left*, *bottom*, *right* and *top*.

        The *y*-axis increases upwards.

        Parameters
        ----------
        left, bottom, right, top : float
            The four extents of the bounding box.

        minpos : float or None
           If this is supplied, the Bbox will have a minimum positive value
           set. This is useful when dealing with logarithmic scales and other
           scales where negative bounds result in floating point errors.
        ")
                        (reparse-symbol indented_block_body) [27574 28286])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28306 28310])
                            ("fmt" variable nil (reparse-symbol function_parameters) [28312 28315]))                          )
                        (reparse-symbol indented_block_body) [28291 28446])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28463 28467]))                          )
                        (reparse-symbol indented_block_body) [28451 28502])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28520 28524]))                          )
                        (reparse-symbol indented_block_body) [28507 28600])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28616 28620])
                            ("value" variable nil (reparse-symbol function_parameters) [28622 28627]))                          
                        :documentation "
        Set whether the existing bounds of the box should be ignored
        by subsequent calls to :meth:`update_from_data_xy`.

        value : bool
           - When ``True``, subsequent calls to :meth:`update_from_data_xy`
             will ignore the existing bounds of the `Bbox`.

           - When ``False``, subsequent calls to :meth:`update_from_data_xy`
             will include the existing bounds of the `Bbox`.
        ")
                        (reparse-symbol indented_block_body) [28605 29109])
                    ("update_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29135 29139])
                            ("path" variable nil (reparse-symbol function_parameters) [29141 29145])
                            ("ignore" variable nil (reparse-symbol function_parameters) [29147 29153])
                            ("updatex" variable nil (reparse-symbol function_parameters) [29160 29167])
                            ("updatey" variable nil (reparse-symbol function_parameters) [29174 29181]))                          
                        :documentation "
        Update the bounds of the `Bbox` to contain the vertices of the
        provided path. After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        Parameters
        ----------
        path : `~matplotlib.path.Path`

        ignore : bool, optional
           - when ``True``, ignore the existing bounds of the `Bbox`.
           - when ``False``, include the existing bounds of the `Bbox`.
           - when ``None``, use the last value passed to :meth:`ignore`.

        updatex, updatey : bool, default: True
            When ``True``, update the x/y values.
        ")
                        (reparse-symbol indented_block_body) [29114 30369])
                    ("update_from_data_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30397 30401])
                            ("x" variable nil (reparse-symbol function_parameters) [30403 30404])
                            ("ignore" variable nil (reparse-symbol function_parameters) [30406 30412]))                          
                        :documentation "
        Update the x-bounds of the `Bbox` based on the passed in data. After
        updating, the bounds will have positive *width*, and *x0* will be the
        minimal value.

        Parameters
        ----------
        x : ndarray
            Array of x-values.

        ignore : bool, optional
           - When ``True``, ignore the existing bounds of the `Bbox`.
           - When ``False``, include the existing bounds of the `Bbox`.
           - When ``None``, use the last value passed to :meth:`ignore`.
        ")
                        (reparse-symbol indented_block_body) [30374 31119])
                    ("update_from_data_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31147 31151])
                            ("y" variable nil (reparse-symbol function_parameters) [31153 31154])
                            ("ignore" variable nil (reparse-symbol function_parameters) [31156 31162]))                          
                        :documentation "
        Update the y-bounds of the `Bbox` based on the passed in data. After
        updating, the bounds will have positive *height*, and *y0* will be the
        minimal value.

        Parameters
        ----------
        y : ndarray
            Array of y-values.

        ignore : bool, optional
           - When ``True``, ignore the existing bounds of the `Bbox`.
           - When ``False``, include the existing bounds of the `Bbox`.
           - When ``None``, use the last value passed to :meth:`ignore`.
        ")
                        (reparse-symbol indented_block_body) [31124 31878])
                    ("update_from_data_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31907 31911])
                            ("xy" variable nil (reparse-symbol function_parameters) [31913 31915])
                            ("ignore" variable nil (reparse-symbol function_parameters) [31917 31923])
                            ("updatex" variable nil (reparse-symbol function_parameters) [31930 31937])
                            ("updatey" variable nil (reparse-symbol function_parameters) [31944 31951]))                          
                        :documentation "
        Update the bounds of the `Bbox` based on the passed in data. After
        updating, the bounds will have positive *width* and *height*;
        *x0* and *y0* will be the minimal values.

        Parameters
        ----------
        xy : ndarray
            A numpy array of 2D points.

        ignore : bool, optional
           - When ``True``, ignore the existing bounds of the `Bbox`.
           - When ``False``, include the existing bounds of the `Bbox`.
           - When ``None``, use the last value passed to :meth:`ignore`.

        updatex, updatey : bool, default: True
            When ``True``, update the x/y values.
        ")
                        (reparse-symbol indented_block_body) [31883 32808])
                    ("x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32844 32848])
                            ("val" variable nil (reparse-symbol function_parameters) [32850 32853]))                          
                        :decorators 
                          ( ("BboxBase.x0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32813 32915])
                    ("y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32951 32955])
                            ("val" variable nil (reparse-symbol function_parameters) [32957 32960]))                          
                        :decorators 
                          ( ("BboxBase.y0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32920 33022])
                    ("x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33058 33062])
                            ("val" variable nil (reparse-symbol function_parameters) [33064 33067]))                          
                        :decorators 
                          ( ("BboxBase.x1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33027 33129])
                    ("y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33165 33169])
                            ("val" variable nil (reparse-symbol function_parameters) [33171 33174]))                          
                        :decorators 
                          ( ("BboxBase.y1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33134 33236])
                    ("p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33272 33276])
                            ("val" variable nil (reparse-symbol function_parameters) [33278 33281]))                          
                        :decorators 
                          ( ("BboxBase.p0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33241 33340])
                    ("p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33376 33380])
                            ("val" variable nil (reparse-symbol function_parameters) [33382 33385]))                          
                        :decorators 
                          ( ("BboxBase.p1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33345 33444])
                    ("intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33494 33498])
                            ("interval" variable nil (reparse-symbol function_parameters) [33500 33508]))                          
                        :decorators 
                          ( ("BboxBase.intervalx.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33449 33575])
                    ("intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33625 33629])
                            ("interval" variable nil (reparse-symbol function_parameters) [33631 33639]))                          
                        :decorators 
                          ( ("BboxBase.intervaly.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33580 33706])
                    ("bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33750 33754])
                            ("bounds" variable nil (reparse-symbol function_parameters) [33756 33762]))                          
                        :decorators 
                          ( ("BboxBase.bounds.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33711 33959])
                    ("minpos" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33989 33993]))                          
                        :documentation "
        The minimum positive value in both directions within the Bbox.

        This is useful when dealing with logarithmic scales and other scales
        where negative bounds result in floating point errors, and will be used
        as the minimum extent instead of *p0*.
        ")
                        (reparse-symbol indented_block_body) [33964 34324])
                    ("minposx" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34355 34359]))                          
                        :documentation "
        The minimum positive value in the *x*-direction within the Bbox.

        This is useful when dealing with logarithmic scales and other scales
        where negative bounds result in floating point errors, and will be used
        as the minimum *x*-extent instead of *x0*.
        ")
                        (reparse-symbol indented_block_body) [34329 34699])
                    ("minposy" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34730 34734]))                          
                        :documentation "
        The minimum positive value in the *y*-direction within the Bbox.

        This is useful when dealing with logarithmic scales and other scales
        where negative bounds result in floating point errors, and will be used
        as the minimum *y*-extent instead of *y0*.
        ")
                        (reparse-symbol indented_block_body) [34704 35074])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35094 35098]))                          
                        :documentation "
        Get the points of the bounding box directly as a numpy array
        of the form: ``[[x0, y0], [x1, y1]]``.
        ")
                        (reparse-symbol indented_block_body) [35079 35295])
                    ("set_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35315 35319])
                            ("points" variable nil (reparse-symbol function_parameters) [35321 35327]))                          
                        :documentation "
        Set the points of the bounding box directly from a numpy array
        of the form: ``[[x0, y0], [x1, y1]]``.  No error checking is
        performed, as this method is mainly for internal use.
        ")
                        (reparse-symbol indented_block_body) [35300 35663])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35676 35680])
                            ("other" variable nil (reparse-symbol function_parameters) [35682 35687]))                          
                        :documentation "
        Set this bounding box from the \"frozen\" bounds of another `Bbox`.
        ")
                        (reparse-symbol indented_block_body) [35668 35919])
                    ("mutated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35936 35940]))                          
                        :documentation "Return whether the bbox has changed since init.")
                        (reparse-symbol indented_block_body) [35924 36055])
                    ("mutatedx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36073 36077]))                          
                        :documentation "Return whether the x-limits have changed since init.")
                        (reparse-symbol indented_block_body) [36060 36275])
                    ("mutatedy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36293 36297]))                          
                        :documentation "Return whether the y-limits have changed since init.")
                        (reparse-symbol indented_block_body) [36280 36495]))                  
                :type "class")
                nil [23311 36495])
            ("TransformedBbox" type
               (:documentation "
    A `Bbox` that is automatically transformed by a given
    transform.  When either the child bounding box or transform
    changes, the bounds of this bbox will update accordingly.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        bbox : `Bbox`
        transform : `Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [36790 36897])
                            ("if" code nil (reparse-symbol indented_block_body) [36906 36980])
                            ("_api" code nil (reparse-symbol indented_block_body) [36988 37041])
                            ("if" code nil (reparse-symbol indented_block_body) [37050 37216])
                            ("super" code nil (reparse-symbol indented_block_body) [37225 37251])
                            ("self" variable nil (reparse-symbol indented_block_body) [37260 37277])
                            ("self" variable nil (reparse-symbol indented_block_body) [37286 37313])
                            ("self" code nil (reparse-symbol indented_block_body) [37322 37356])
                            ("self" variable nil (reparse-symbol indented_block_body) [37365 37384]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36748 36752])
                            ("bbox" variable nil (reparse-symbol function_parameters) [36754 36758])
                            ("transform" variable nil (reparse-symbol function_parameters) [36760 36769])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36771 36779]))                          
                        :documentation "
        Parameters
        ----------
        bbox : `Bbox`
        transform : `Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36735 37385])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [37390 37439])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37460 37464]))                          )
                        (reparse-symbol indented_block_body) [37445 38382])
                    ("if" code nil (reparse-symbol indented_block_body) [38387 38559]))                  
                :type "class")
                nil [36497 38559])
            ("LockableBbox" type
               (:documentation "
    A `Bbox` where some elements may be locked at certain values.

    When the child bounding box changes, the bounds of this bbox will update
    accordingly with the exception of the locked elements.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        bbox : `Bbox`
            The child bounding box to wrap.

        x0 : float or None
            The locked value for x0, or None to leave unlocked.

        y0 : float or None
            The locked value for y0, or None to leave unlocked.

        x1 : float or None
            The locked value for x1, or None to leave unlocked.

        y1 : float or None
            The locked value for y1, or None to leave unlocked.

        \"\"\"" code nil (reparse-symbol indented_block_body) [38894 39382])
                            ("if" code nil (reparse-symbol indented_block_body) [39391 39465])
                            ("super" code nil (reparse-symbol indented_block_body) [39474 39500])
                            ("self" variable nil (reparse-symbol indented_block_body) [39509 39526])
                            ("self" code nil (reparse-symbol indented_block_body) [39535 39558])
                            ("self" variable nil (reparse-symbol indented_block_body) [39567 39586])
                            ("fp" variable nil (reparse-symbol indented_block_body) [39595 39616])
                            ("mask" variable nil (reparse-symbol indented_block_body) [39625 39659])
                            ("self" variable nil (reparse-symbol indented_block_body) [39668 39739]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38827 38831])
                            ("bbox" variable nil (reparse-symbol function_parameters) [38833 38837])
                            ("x0" variable nil (reparse-symbol function_parameters) [38839 38841])
                            ("y0" variable nil (reparse-symbol function_parameters) [38848 38850])
                            ("x1" variable nil (reparse-symbol function_parameters) [38857 38859])
                            ("y1" variable nil (reparse-symbol function_parameters) [38866 38868])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38875 38883]))                          
                        :documentation "
        Parameters
        ----------
        bbox : `Bbox`
            The child bounding box to wrap.

        x0 : float or None
            The locked value for x0, or None to leave unlocked.

        y0 : float or None
            The locked value for y0, or None to leave unlocked.

        x1 : float or None
            The locked value for x1, or None to leave unlocked.

        y1 : float or None
            The locked value for y1, or None to leave unlocked.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38814 39740])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [39745 39798])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39819 39823]))                          )
                        (reparse-symbol indented_block_body) [39804 40148])
                    ("if" code nil (reparse-symbol indented_block_body) [40153 40325])
                    ("locked_x0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40358 40362]))                          
                        :documentation "
        float or None: The value used for the locked x0.
        ")
                        (reparse-symbol indented_block_body) [40330 40572])
                    ("locked_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40613 40617])
                            ("x0" variable nil (reparse-symbol function_parameters) [40619 40621]))                          
                        :decorators 
                          ( ("locked_x0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40577 40746])
                    ("locked_y0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40779 40783]))                          
                        :documentation "
        float or None: The value used for the locked y0.
        ")
                        (reparse-symbol indented_block_body) [40751 40993])
                    ("locked_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41034 41038])
                            ("y0" variable nil (reparse-symbol function_parameters) [41040 41042]))                          
                        :decorators 
                          ( ("locked_y0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40998 41167])
                    ("locked_x1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41200 41204]))                          
                        :documentation "
        float or None: The value used for the locked x1.
        ")
                        (reparse-symbol indented_block_body) [41172 41414])
                    ("locked_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41455 41459])
                            ("x1" variable nil (reparse-symbol function_parameters) [41461 41463]))                          
                        :decorators 
                          ( ("locked_x1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41419 41588])
                    ("locked_y1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41621 41625]))                          
                        :documentation "
        float or None: The value used for the locked y1.
        ")
                        (reparse-symbol indented_block_body) [41593 41835])
                    ("locked_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41876 41880])
                            ("y1" variable nil (reparse-symbol function_parameters) [41882 41884]))                          
                        :decorators 
                          ( ("locked_y1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41840 42009]))                  
                :type "class")
                nil [38561 42009])
            ("Transform" type
               (:documentation "
    The base class of all `TransformNode` instances that
    actually perform a transformation.

    All non-affine transformations should be subclasses of this class.
    New affine transformations should be subclasses of `Affine2D`.

    Subclasses of this class should override the following members (at
    minimum):

    - :attr:`input_dims`
    - :attr:`output_dims`
    - :meth:`transform`
    - :meth:`inverted` (if an inverse exists)

    The following attributes may be overridden if the default is unsuitable:

    - :attr:`is_separable` (defaults to True for 1D -> 1D transforms, False
      otherwise)
    - :attr:`has_inverse` (defaults to True if :meth:`inverted` is overridden,
      False otherwise)

    If the transform needs to do something non-standard with
    `matplotlib.path.Path` objects, such as adding curves
    where there were once line segments, it should override:

    - :meth:`transform_path`
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [42992 43009])
                    ("\"\"\"
    The number of input dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [43014 43135])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [43141 43159])
                    ("\"\"\"
    The number of output dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [43164 43286])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [43292 43312])
                    ("\"\"\"True if this transform is separable in the x- and y- dimensions.\"\"\"" code nil (reparse-symbol indented_block_body) [43317 43387])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [43393 43412])
                    ("\"\"\"True if this transform has a corresponding inverse transform.\"\"\"" code nil (reparse-symbol indented_block_body) [43417 43484])
                    ("__init_subclass__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [43512 43515]))                      ) (reparse-symbol indented_block_body) [43490 44405])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44422 44426])
                            ("other" variable nil (reparse-symbol function_parameters) [44428 44433]))                          
                        :documentation "
        Compose two transforms together so that *self* is followed by *other*.

        ``A + B`` returns a transform ``C`` so that
        ``C.transform(x) == B.transform(A.transform(x))``.
        ")
                        (reparse-symbol indented_block_body) [44410 44793])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45023 45027]))                          
                        :documentation "
        Return an iterator breaking down this transform stack from left to
        right recursively. If self == ((A, N), A) then the result will be an
        iterator which yields I : ((A, N), A), followed by A : (N, A),
        followed by (A, N) : (A), but not ((A, N), A) : I.

        This is equivalent to flattening the stack then yielding
        ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).
        ")
                        (reparse-symbol indented_block_body) [44988 45503])
                    ("depth" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45532 45536]))                          
                        :documentation "
        Return the number of transforms which have been chained
        together to form this Transform instance.

        .. note::

            For the special case of a Composite transform, the maximum depth
            of the two is returned.

        ")
                        (reparse-symbol indented_block_body) [45508 45828])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45853 45857])
                            ("other" variable nil (reparse-symbol function_parameters) [45859 45864]))                          
                        :documentation "
        Return whether the given transform is a sub-tree of this transform.

        This routine uses transform equality to identify sub-trees, therefore
        in many situations it is object id which will be used.

        For the case where the given transform represents the whole
        of this transform, returns True.
        ")
                        (reparse-symbol indented_block_body) [45833 46501])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46537 46541])
                            ("other_transform" variable nil (reparse-symbol function_parameters) [46543 46558]))                          
                        :documentation "
        Return whether the given branch is a sub-tree of this transform on
        each separate dimension.

        A common use for this method is to identify if a transform is a blended
        transform containing an axes' data transform. e.g.::

            x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)

        ")
                        (reparse-symbol indented_block_body) [46506 47274])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47291 47295])
                            ("other" variable nil (reparse-symbol function_parameters) [47297 47302]))                          
                        :documentation "
        Compose *self* with the inverse of *other*, cancelling identical terms
        if any::

            # In general:
            A - B == A + B.inverted()
            # (but see note regarding frozen transforms below).

            # If A \"ends with\" B (i.e. A == A' + B for some A') we can cancel
            # out B:
            (A' + B) - B == A'

            # Likewise, if B \"starts with\" A (B = A + B'), we can cancel out A:
            A - (A + B') == B'.inverted() == B'^-1

        Cancellation (rather than naively returning ``A + B.inverted()``) is
        important for multiple reasons:

        - It avoids floating-point inaccuracies when computing the inverse of
          B: ``B - B`` is guaranteed to cancel out exactly (resulting in the
          identity transform), whereas ``B + B.inverted()`` may differ by a
          small epsilon.
        - ``B.inverted()`` always returns a frozen transform: if one computes
          ``A + B + B.inverted()`` and later mutates ``B``, then
          ``B.inverted()`` won't be updated and the last two terms won't cancel
          out anymore; on the other hand, ``A + B - B`` will always be equal to
          ``A`` even if ``B`` is mutated.
        ")
                        (reparse-symbol indented_block_body) [47279 49569])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49588 49592])
                            ("args" variable nil (reparse-symbol function_parameters) [49594 49599])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49601 49609]))                          
                        :documentation "Array interface to get at this Transform's affine matrix.")
                        (reparse-symbol indented_block_body) [49574 49730])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49749 49753])
                            ("values" variable nil (reparse-symbol function_parameters) [49755 49761]))                          
                        :documentation "
        Apply this transformation on the given array of *values*.

        Parameters
        ----------
        values : array
            The input values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`input_dims`).

        Returns
        -------
        array
            The output values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`output_dims`), depending on the input.
        ")
                        (reparse-symbol indented_block_body) [49735 51002])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51028 51032])
                            ("values" variable nil (reparse-symbol function_parameters) [51034 51040]))                          
                        :documentation "
        Apply only the affine part of this transformation on the
        given array of values.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally a no-op.  In
        affine transformations, this is equivalent to
        ``transform(values)``.

        Parameters
        ----------
        values : array
            The input values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`input_dims`).

        Returns
        -------
        array
            The output values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`output_dims`), depending on the input.
        ")
                        (reparse-symbol indented_block_body) [51007 51860])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51890 51894])
                            ("values" variable nil (reparse-symbol function_parameters) [51896 51902]))                          
                        :documentation "
        Apply only the non-affine part of this transformation.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally equivalent to
        ``transform(values)``.  In affine transformations, this is
        always a no-op.

        Parameters
        ----------
        values : array
            The input values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`input_dims`).

        Returns
        -------
        array
            The output values as NumPy array of length :attr:`input_dims` or
            shape (N x :attr:`output_dims`), depending on the input.
        ")
                        (reparse-symbol indented_block_body) [51865 52667])
                    ("transform_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52691 52695])
                            ("bbox" variable nil (reparse-symbol function_parameters) [52697 52701]))                          
                        :documentation "
        Transform the given bounding box.

        For smarter transforms including caching (a common requirement in
        Matplotlib), see `TransformedBbox`.
        ")
                        (reparse-symbol indented_block_body) [52672 52944])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52964 52968]))                          
                        :documentation "Get the affine part of this transform.")
                        (reparse-symbol indented_block_body) [52949 53059])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53079 53083]))                          
                        :documentation "Get the matrix for the affine part of this transform.")
                        (reparse-symbol indented_block_body) [53064 53200])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53225 53229])
                            ("point" variable nil (reparse-symbol function_parameters) [53231 53236]))                          
                        :documentation "
        Return a transformed point.

        This function is only kept for backcompatibility; the more general
        `.transform` method is capable of transforming both a list of points
        and a single point.

        The point is given as a sequence of length :attr:`input_dims`.
        The transformed point is returned as a sequence of length
        :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [53205 53806])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53830 53834])
                            ("path" variable nil (reparse-symbol function_parameters) [53836 53840]))                          
                        :documentation "
        Apply the transform to `.Path` *path*, returning a new `.Path`.

        In some cases, this transform may insert curves into the path
        that began as line segments.
        ")
                        (reparse-symbol indented_block_body) [53811 54127])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54158 54162])
                            ("path" variable nil (reparse-symbol function_parameters) [54164 54168]))                          
                        :documentation "
        Apply the affine part of this transform to `.Path` *path*, returning a
        new `.Path`.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [54132 54477])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54512 54516])
                            ("path" variable nil (reparse-symbol function_parameters) [54518 54522]))                          
                        :documentation "
        Apply the non-affine part of this transform to `.Path` *path*,
        returning a new `.Path`.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [54482 54895])
                    ("transform_angles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54921 54925])
                            ("angles" variable nil (reparse-symbol function_parameters) [54927 54933])
                            ("pts" variable nil (reparse-symbol function_parameters) [54935 54938])
                            ("radians" variable nil (reparse-symbol function_parameters) [54940 54947])
                            ("pushoff" variable nil (reparse-symbol function_parameters) [54955 54962]))                          
                        :documentation "
        Transform a set of angles anchored at specific locations.

        Parameters
        ----------
        angles : (N,) array-like
            The angles to transform.
        pts : (N, 2) array-like
            The points where the angles are anchored.
        radians : bool, default: False
            Whether *angles* are radians or degrees.
        pushoff : float
            For each point in *pts* and angle in *angles*, the transformed
            angle is computed by transforming a segment of length *pushoff*
            starting at that point and making that angle relative to the
            horizontal axis, and measuring the angle between the horizontal
            axis and the transformed segment.

        Returns
        -------
        (N,) array
        ")
                        (reparse-symbol indented_block_body) [54900 56882])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56900 56904]))                          
                        :documentation "
        Return the corresponding inverse transformation.

        It holds ``x == self.inverted().transform(self.transform(x))``.

        The return value of this method should be treated as
        temporary.  An update to *self* does not cause a corresponding
        update to its inverted copy.
        ")
                        (reparse-symbol indented_block_body) [56887 57267]))                  
                :type "class")
                nil [42011 57267])
            ("TransformWrapper" type
               (:documentation "
    A helper class that holds a single child transform and acts
    equivalently to it.

    This is useful if a node of the transform tree must be replaced at
    run time with a transform of a different type.  This class allows
    that replacement to correctly trigger invalidation.

    `TransformWrapper` instances must have the same input and output dimensions
    during their entire lifetime, so the child transform may only be replaced
    with another child transform of the same dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [57827 57846])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *child*: A `Transform` instance.  This child may later
        be replaced with :meth:`set`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [57887 58003])
                            ("_api" code nil (reparse-symbol indented_block_body) [58012 58057])
                            ("self" code nil (reparse-symbol indented_block_body) [58066 58083])
                            ("self" code nil (reparse-symbol indented_block_body) [58092 58116]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57865 57869])
                            ("child" variable nil (reparse-symbol function_parameters) [57871 57876]))                          
                        :documentation "
        *child*: A `Transform` instance.  This child may later
        be replaced with :meth:`set`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57852 58117])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58132 58136])
                            ("child" variable nil (reparse-symbol function_parameters) [58138 58143]))                          )
                        (reparse-symbol indented_block_body) [58122 58318])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58334 58338])
                            ("other" variable nil (reparse-symbol function_parameters) [58340 58345]))                          )
                        (reparse-symbol indented_block_body) [58323 58389])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [58394 58430])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58447 58451]))                          )
                        (reparse-symbol indented_block_body) [58436 58520])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58534 58538])
                            ("child" variable nil (reparse-symbol function_parameters) [58540 58545]))                          )
                        (reparse-symbol indented_block_body) [58525 59050])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59275 59279])
                            ("child" variable nil (reparse-symbol function_parameters) [59281 59286]))                          
                        :documentation "
        Replace the current child of this transform with another one.

        The new child must have the same number of input and output
        dimensions as the current child.
        ")
                        (reparse-symbol indented_block_body) [59267 59898])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [59903 59959])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [59964 60026])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [60031 60091]))                  
                :type "class")
                nil [57269 60092])
            ("AffineBase" type
               (:documentation "
    The base class of all affine transformations of any number of dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("is_affine" variable nil (reparse-symbol indented_block_body) [60221 60237])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [60288 60321])
                            ("self" variable nil (reparse-symbol indented_block_body) [60330 60351]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60256 60260])
                            ("args" variable nil (reparse-symbol function_parameters) [60262 60267])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [60269 60277]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60243 60352])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60371 60375])
                            ("args" variable nil (reparse-symbol function_parameters) [60377 60382])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [60384 60392]))                          )
                        (reparse-symbol indented_block_body) [60357 60502])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60518 60522])
                            ("other" variable nil (reparse-symbol function_parameters) [60524 60529]))                          )
                        (reparse-symbol indented_block_body) [60507 60709])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60728 60732])
                            ("values" variable nil (reparse-symbol function_parameters) [60734 60740]))                          )
                        (reparse-symbol indented_block_body) [60714 60818])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60844 60848])
                            ("values" variable nil (reparse-symbol function_parameters) [60850 60856]))                          )
                        (reparse-symbol indented_block_body) [60823 61010])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61040 61044])
                            ("points" variable nil (reparse-symbol function_parameters) [61046 61052]))                          )
                        (reparse-symbol indented_block_body) [61015 61107])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61131 61135])
                            ("path" variable nil (reparse-symbol function_parameters) [61137 61141]))                          )
                        (reparse-symbol indented_block_body) [61112 61222])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61253 61257])
                            ("path" variable nil (reparse-symbol function_parameters) [61259 61263]))                          )
                        (reparse-symbol indented_block_body) [61227 61413])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61448 61452])
                            ("path" variable nil (reparse-symbol function_parameters) [61454 61458]))                          )
                        (reparse-symbol indented_block_body) [61418 61511])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61531 61535]))                          )
                        (reparse-symbol indented_block_body) [61516 61588]))                  
                :type "class")
                nil [60094 61588])
            ("Affine2DBase" type
               (:documentation "
    The base class of all 2D affine transformations.

    2D affine transformations are performed using a 3x3 numpy array::

        a c e
        b d f
        0 0 1

    This class provides the read-only interface.  For a mutable 2D
    affine transformation, use `Affine2D`.

    Subclasses of this class will generally only need to override a
    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
    "
                :superclasses ("AffineBase")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [62064 62078])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [62083 62098])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62115 62119]))                          )
                        (reparse-symbol indented_block_body) [62104 62202])
                    ("is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62238 62242]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62207 62322])
                    ("to_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62341 62345]))                          
                        :documentation "
        Return the values of the matrix as an ``(a, b, c, d, e, f)`` tuple.
        ")
                        (reparse-symbol indented_block_body) [62327 62530])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62556 62560])
                            ("points" variable nil (reparse-symbol function_parameters) [62562 62568]))                          )
                        (reparse-symbol indented_block_body) [62535 62829])
                    ("if" code nil (reparse-symbol indented_block_body) [62834 63477])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63495 63499]))                          )
                        (reparse-symbol indented_block_body) [63482 63895]))                  
                :type "class")
                nil [61590 63895])
            ("Affine2D" type
               (:documentation "
    A mutable 2D affine transformation.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        \"\"\"" code nil (reparse-symbol indented_block_body) [64039 64243])
                            ("super" code nil (reparse-symbol indented_block_body) [64252 64278])
                            ("if" code nil (reparse-symbol indented_block_body) [64287 64405])
                            ("self" variable nil (reparse-symbol indented_block_body) [64413 64438])
                            ("self" variable nil (reparse-symbol indented_block_body) [64447 64464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64001 64005])
                            ("matrix" variable nil (reparse-symbol function_parameters) [64007 64013])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [64020 64028]))                          
                        :documentation "
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [63988 64465])
                    ("_base_str" variable nil (reparse-symbol indented_block_body) [64470 64506])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64524 64528]))                          )
                        (reparse-symbol indented_block_body) [64512 64826])
                    ("from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [64865 64866])
                            ("b" variable nil (reparse-symbol function_parameters) [64868 64869])
                            ("c" variable nil (reparse-symbol function_parameters) [64871 64872])
                            ("d" variable nil (reparse-symbol function_parameters) [64874 64875])
                            ("e" variable nil (reparse-symbol function_parameters) [64877 64878])
                            ("f" variable nil (reparse-symbol function_parameters) [64880 64881]))                          
                        :documentation "
        Create a new Affine2D instance from the given values::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [64831 65136])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65156 65160]))                          
                        :documentation "
        Get the underlying transformation matrix as a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [65141 65434])
                    ("set_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65454 65458])
                            ("mtx" variable nil (reparse-symbol function_parameters) [65460 65463]))                          
                        :documentation "
        Set the underlying transformation matrix from a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [65439 65674])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65687 65691])
                            ("other" variable nil (reparse-symbol function_parameters) [65693 65698]))                          
                        :documentation "
        Set this transformation from the frozen copy of another
        `Affine2DBase` object.
        ")
                        (reparse-symbol indented_block_body) [65679 65942])
                    ("identity" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return a new `Affine2D` object that is the identity transform.

        Unless this transform will be mutated later on, consider using
        the faster `IdentityTransform` class instead.
        ")
                        (reparse-symbol indented_block_body) [65947 66228])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66243 66247]))                          
                        :documentation "
        Reset the underlying matrix to the identity transform.
        ")
                        (reparse-symbol indented_block_body) [66233 66477])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66493 66497])
                            ("theta" variable nil (reparse-symbol function_parameters) [66499 66504]))                          
                        :documentation "
        Add a rotation (in radians) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [66482 67030])
                    ("rotate_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67050 67054])
                            ("degrees" variable nil (reparse-symbol function_parameters) [67056 67063]))                          
                        :documentation "
        Add a rotation (in degrees) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67035 67374])
                    ("rotate_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67397 67401])
                            ("x" variable nil (reparse-symbol function_parameters) [67403 67404])
                            ("y" variable nil (reparse-symbol function_parameters) [67406 67407])
                            ("theta" variable nil (reparse-symbol function_parameters) [67409 67414]))                          
                        :documentation "
        Add a rotation (in radians) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67379 67749])
                    ("rotate_deg_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67776 67780])
                            ("x" variable nil (reparse-symbol function_parameters) [67782 67783])
                            ("y" variable nil (reparse-symbol function_parameters) [67785 67786])
                            ("degrees" variable nil (reparse-symbol function_parameters) [67788 67795]))                          
                        :documentation "
        Add a rotation (in degrees) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67754 68234])
                    ("translate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68253 68257])
                            ("tx" variable nil (reparse-symbol function_parameters) [68259 68261])
                            ("ty" variable nil (reparse-symbol function_parameters) [68263 68265]))                          
                        :documentation "
        Add a translation in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [68239 68604])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68619 68623])
                            ("sx" variable nil (reparse-symbol function_parameters) [68625 68627])
                            ("sy" variable nil (reparse-symbol function_parameters) [68629 68631]))                          
                        :documentation "
        Add a scale in place.

        If *sy* is None, the same scale is applied in both the *x*- and
        *y*-directions.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [68609 69280])
                    ("skew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69294 69298])
                            ("xShear" variable nil (reparse-symbol function_parameters) [69300 69306])
                            ("yShear" variable nil (reparse-symbol function_parameters) [69308 69314]))                          
                        :documentation "
        Add a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in radians.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [69285 69916])
                    ("skew_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69934 69938])
                            ("xShear" variable nil (reparse-symbol function_parameters) [69940 69946])
                            ("yShear" variable nil (reparse-symbol function_parameters) [69948 69954]))                          
                        :documentation "
        Add a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in degrees.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [69921 70364]))                  
                :type "class")
                nil [63897 70364])
            ("IdentityTransform" type
               (:documentation "
    A special class that does one thing, the identity transform, in a
    fast way.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("_mtx" variable nil (reparse-symbol indented_block_body) [70509 70530])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70547 70551]))                          )
                        (reparse-symbol indented_block_body) [70536 70604])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [70609 70637])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70658 70662]))                          )
                        (reparse-symbol indented_block_body) [70643 70720])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70739 70743])
                            ("points" variable nil (reparse-symbol function_parameters) [70745 70751]))                          )
                        (reparse-symbol indented_block_body) [70725 70821])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70847 70851])
                            ("points" variable nil (reparse-symbol function_parameters) [70853 70859]))                          )
                        (reparse-symbol indented_block_body) [70826 70929])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70959 70963])
                            ("points" variable nil (reparse-symbol function_parameters) [70965 70971]))                          )
                        (reparse-symbol indented_block_body) [70934 71041])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71065 71069])
                            ("path" variable nil (reparse-symbol function_parameters) [71071 71075]))                          )
                        (reparse-symbol indented_block_body) [71046 71128])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71159 71163])
                            ("path" variable nil (reparse-symbol function_parameters) [71165 71169]))                          )
                        (reparse-symbol indented_block_body) [71133 71222])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71257 71261])
                            ("path" variable nil (reparse-symbol function_parameters) [71263 71267]))                          )
                        (reparse-symbol indented_block_body) [71227 71320])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71340 71344]))                          )
                        (reparse-symbol indented_block_body) [71325 71397])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71415 71419]))                          )
                        (reparse-symbol indented_block_body) [71402 71472]))                  
                :type "class")
                nil [70366 71472])
            ("_BlendedMixin" type
               (:documentation "Common methods for `BlendedGenericTransform` and `BlendedAffine2D`."
                :members 
                  ( ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71589 71593])
                            ("other" variable nil (reparse-symbol function_parameters) [71595 71600]))                          )
                        (reparse-symbol indented_block_body) [71578 71861])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71897 71901])
                            ("transform" variable nil (reparse-symbol function_parameters) [71903 71912]))                          )
                        (reparse-symbol indented_block_body) [71866 72019])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [72024 72062]))                  
                :type "class")
                nil [71474 72063])
            ("BlendedGenericTransform" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This \"generic\" version can handle any given child transform in the
    *x*- and *y*-directions.
    "
                :superclasses ("_BlendedMixin" "Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [72360 72374])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [72379 72394])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [72399 72418])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [72423 72442])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to transform the
        *x*-axis and *y_transform* to transform the *y*-axis.

        You will generally not call this constructor directly but use the
        `blended_transform_factory` function instead, which can determine
        automatically which kind of blended transform to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [72512 72881])
                            ("Transform" code nil (reparse-symbol indented_block_body) [72890 72924])
                            ("self" variable nil (reparse-symbol indented_block_body) [72933 72954])
                            ("self" variable nil (reparse-symbol indented_block_body) [72963 72984])
                            ("self" code nil (reparse-symbol indented_block_body) [72993 73036])
                            ("self" variable nil (reparse-symbol indented_block_body) [73045 73064]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72461 72465])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [72467 72478])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [72480 72491])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72493 72501]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to transform the
        *x*-axis and *y_transform* to transform the *y*-axis.

        You will generally not call this constructor directly but use the
        `blended_transform_factory` function instead, which can determine
        automatically which kind of blended transform to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72448 73065])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73094 73098]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73070 73150])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73175 73179])
                            ("other" variable nil (reparse-symbol function_parameters) [73181 73186]))                          )
                        (reparse-symbol indented_block_body) [73155 73314])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [73319 73393])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [73398 73487])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73504 73508]))                          )
                        (reparse-symbol indented_block_body) [73493 73618])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73648 73652])
                            ("points" variable nil (reparse-symbol function_parameters) [73654 73660]))                          )
                        (reparse-symbol indented_block_body) [73623 74605])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74623 74627]))                          )
                        (reparse-symbol indented_block_body) [74610 74739])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74759 74763]))                          )
                        (reparse-symbol indented_block_body) [74744 75362]))                  
                :type "class")
                nil [72065 75362])
            ("BlendedAffine2D" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This version is an optimization for the case where both child
    transforms are of type `Affine2DBase`.
    "
                :superclasses ("_BlendedMixin" "Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [75664 75683])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to transform the
        *x*-axis and *y_transform* to transform the *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine transforms.

        You will generally not call this constructor directly but use the
        `blended_transform_factory` function instead, which can determine
        automatically which kind of blended transform to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [75753 76198])
                            ("is_affine" code nil (reparse-symbol indented_block_body) [76207 76266])
                            ("is_separable" code nil (reparse-symbol indented_block_body) [76275 76343])
                            ("is_correct" code nil (reparse-symbol indented_block_body) [76352 76391])
                            ("if" code nil (reparse-symbol indented_block_body) [76400 76549])
                            ("Transform" code nil (reparse-symbol indented_block_body) [76558 76592])
                            ("self" variable nil (reparse-symbol indented_block_body) [76601 76622])
                            ("self" variable nil (reparse-symbol indented_block_body) [76631 76652])
                            ("self" code nil (reparse-symbol indented_block_body) [76661 76704])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [76714 76741])
                            ("self" variable nil (reparse-symbol indented_block_body) [76750 76766]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75702 75706])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [75708 75719])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [75721 75732])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75734 75742]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to transform the
        *x*-axis and *y_transform* to transform the *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine transforms.

        You will generally not call this constructor directly but use the
        `blended_transform_factory` function instead, which can determine
        automatically which kind of blended transform to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75689 76767])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76787 76791]))                          )
                        (reparse-symbol indented_block_body) [76772 77329]))                  
                :type "class")
                nil [75364 77329])
            ("blended_transform_factory" function
               (:documentation "
    Create a new \"blended\" transform using *x_transform* to transform
    the *x*-axis and *y_transform* to transform the *y*-axis.

    A faster version of the blended transform is returned for the case
    where both child transforms are affine.
    "
                :arguments 
                  ( ("x_transform" variable nil (reparse-symbol function_parameters) [77361 77372])
                    ("y_transform" variable nil (reparse-symbol function_parameters) [77374 77385]))                  )
                nil [77331 77872])
            ("CompositeGenericTransform" type
               (:documentation "
    A composite transform formed by applying transform *a* then
    transform *b*.

    This \"generic\" version can handle any two arbitrary
    transformations.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [78099 78118])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but write ``a +
        b`` instead, which will automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [78168 78494])
                            ("if" code nil (reparse-symbol indented_block_body) [78503 78674])
                            ("self" variable nil (reparse-symbol indented_block_body) [78682 78712])
                            ("self" variable nil (reparse-symbol indented_block_body) [78721 78753])
                            ("super" code nil (reparse-symbol indented_block_body) [78763 78789])
                            ("self" variable nil (reparse-symbol indented_block_body) [78798 78809])
                            ("self" variable nil (reparse-symbol indented_block_body) [78818 78829])
                            ("self" code nil (reparse-symbol indented_block_body) [78838 78861]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78137 78141])
                            ("a" variable nil (reparse-symbol function_parameters) [78143 78144])
                            ("b" variable nil (reparse-symbol function_parameters) [78146 78147])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78149 78157]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but write ``a +
        b`` instead, which will automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78124 78862])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78878 78882]))                          )
                        (reparse-symbol indented_block_body) [78867 79154])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79184 79188])
                            ("value" variable nil (reparse-symbol function_parameters) [79190 79195])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [79197 79214]))                          )
                        (reparse-symbol indented_block_body) [79159 79923])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79939 79943])
                            ("other" variable nil (reparse-symbol function_parameters) [79945 79950]))                          )
                        (reparse-symbol indented_block_body) [79928 80189])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80229 80233]))                          )
                        (reparse-symbol indented_block_body) [80194 80454])
                    ("depth" variable nil (reparse-symbol indented_block_body) [80459 80519])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [80524 80598])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [80603 80695])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [80700 80789])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [80795 80833])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80860 80864])
                            ("points" variable nil (reparse-symbol function_parameters) [80866 80872]))                          )
                        (reparse-symbol indented_block_body) [80839 80956])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80986 80990])
                            ("points" variable nil (reparse-symbol function_parameters) [80992 80998]))                          )
                        (reparse-symbol indented_block_body) [80961 81345])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81380 81384])
                            ("path" variable nil (reparse-symbol function_parameters) [81386 81390]))                          )
                        (reparse-symbol indented_block_body) [81350 81750])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81770 81774]))                          )
                        (reparse-symbol indented_block_body) [81755 82036])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82054 82058]))                          )
                        (reparse-symbol indented_block_body) [82041 82185]))                  
                :type "class")
                nil [77874 82185])
            ("CompositeAffine2D" type
               (:documentation "
    A composite transform formed by applying transform *a* then transform *b*.

    This version is an optimization that handles the case where both *a*
    and *b* are 2D affines.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying `Affine2DBase` *a* then `Affine2DBase` *b*.

        You will generally not call this constructor directly but write ``a +
        b`` instead, which will automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [82471 82807])
                            ("if" code nil (reparse-symbol indented_block_body) [82816 82925])
                            ("if" code nil (reparse-symbol indented_block_body) [82933 83104])
                            ("self" variable nil (reparse-symbol indented_block_body) [83112 83142])
                            ("self" variable nil (reparse-symbol indented_block_body) [83151 83183])
                            ("super" code nil (reparse-symbol indented_block_body) [83193 83219])
                            ("self" variable nil (reparse-symbol indented_block_body) [83228 83239])
                            ("self" variable nil (reparse-symbol indented_block_body) [83248 83259])
                            ("self" code nil (reparse-symbol indented_block_body) [83268 83291])
                            ("self" variable nil (reparse-symbol indented_block_body) [83300 83316]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82440 82444])
                            ("a" variable nil (reparse-symbol function_parameters) [82446 82447])
                            ("b" variable nil (reparse-symbol function_parameters) [82449 82450])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [82452 82460]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying `Affine2DBase` *a* then `Affine2DBase` *b*.

        You will generally not call this constructor directly but write ``a +
        b`` instead, which will automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [82427 83317])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83346 83350]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [83322 83398])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83438 83442]))                          )
                        (reparse-symbol indented_block_body) [83403 83663])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [83668 83706])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83727 83731]))                          )
                        (reparse-symbol indented_block_body) [83712 83987]))                  
                :type "class")
                nil [82187 83987])
            ("composite_transform_factory" function
               (:documentation "
    Create a new composite transform that is the result of applying
    transform a then transform b.

    Shortcut versions of the blended transform are provided for the
    case where both child transforms are affine, or one or the other
    is the identity transform.

    Composite transforms may also be created using the '+' operator,
    e.g.::

      c = a + b
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [84021 84022])
                    ("b" variable nil (reparse-symbol function_parameters) [84024 84025]))                  )
                nil [83989 84920])
            ("BboxTransform" type
               (:documentation "
    `BboxTransform` linearly transforms points from one `Bbox` to another.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [85053 85072])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new `BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [85131 85249])
                            ("if" code nil (reparse-symbol indented_block_body) [85258 85368])
                            ("super" code nil (reparse-symbol indented_block_body) [85377 85403])
                            ("self" variable nil (reparse-symbol indented_block_body) [85412 85431])
                            ("self" variable nil (reparse-symbol indented_block_body) [85440 85461])
                            ("self" code nil (reparse-symbol indented_block_body) [85470 85502])
                            ("self" variable nil (reparse-symbol indented_block_body) [85511 85527])
                            ("self" variable nil (reparse-symbol indented_block_body) [85536 85557]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85091 85095])
                            ("boxin" variable nil (reparse-symbol function_parameters) [85097 85102])
                            ("boxout" variable nil (reparse-symbol function_parameters) [85104 85110])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85112 85120]))                          
                        :documentation "
        Create a new `BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85078 85558])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [85563 85610])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85631 85635]))                          )
                        (reparse-symbol indented_block_body) [85616 86378]))                  
                :type "class")
                nil [84922 86378])
            ("BboxTransformTo" type
               (:documentation "
    `BboxTransformTo` is a transformation that linearly transforms points from
    the unit bounding box to a given `Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [86562 86581])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new `BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [86633 86767])
                            ("if" code nil (reparse-symbol indented_block_body) [86776 86853])
                            ("super" code nil (reparse-symbol indented_block_body) [86862 86888])
                            ("self" variable nil (reparse-symbol indented_block_body) [86897 86918])
                            ("self" code nil (reparse-symbol indented_block_body) [86927 86952])
                            ("self" variable nil (reparse-symbol indented_block_body) [86961 86977])
                            ("self" variable nil (reparse-symbol indented_block_body) [86986 87007]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86600 86604])
                            ("boxout" variable nil (reparse-symbol function_parameters) [86606 86612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [86614 86622]))                          
                        :documentation "
        Create a new `BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86587 87008])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [87013 87050])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87071 87075]))                          )
                        (reparse-symbol indented_block_body) [87056 87611]))                  
                :type "class")
                nil [86380 87611])
            ("BboxTransformToMaxOnly" type
               (:documentation "
    `BboxTransformTo` is a transformation that linearly transforms points from
    the unit bounding box to a given `Bbox` with a fixed upper left of (0, 0).
    "
                :superclasses ("BboxTransformTo")
                :members 
                  ( ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87853 87857]))                          )
                        (reparse-symbol indented_block_body) [87838 88375]))                  
                :type "class")
                nil [87613 88375])
            ("BboxTransformFrom" type
               (:documentation "
    `BboxTransformFrom` linearly transforms points from a given `Bbox` to the
    unit bounding box.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [88537 88556])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [88607 88682])
                            ("super" code nil (reparse-symbol indented_block_body) [88691 88717])
                            ("self" variable nil (reparse-symbol indented_block_body) [88726 88745])
                            ("self" code nil (reparse-symbol indented_block_body) [88754 88778])
                            ("self" variable nil (reparse-symbol indented_block_body) [88787 88803])
                            ("self" variable nil (reparse-symbol indented_block_body) [88812 88833]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88575 88579])
                            ("boxin" variable nil (reparse-symbol function_parameters) [88581 88586])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [88588 88596]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [88562 88834])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [88839 88875])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88896 88900]))                          )
                        (reparse-symbol indented_block_body) [88881 89540]))                  
                :type "class")
                nil [88377 89540])
            ("ScaledTranslation" type
               (:documentation "
    A transformation that translates by *xt* and *yt*, after *xt* and *yt*
    have been transformed by *scale_trans*.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [89779 89805])
                            ("self" variable nil (reparse-symbol indented_block_body) [89814 89832])
                            ("self" variable nil (reparse-symbol indented_block_body) [89841 89872])
                            ("self" code nil (reparse-symbol indented_block_body) [89881 89911])
                            ("self" variable nil (reparse-symbol indented_block_body) [89920 89936])
                            ("self" variable nil (reparse-symbol indented_block_body) [89945 89966]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89733 89737])
                            ("xt" variable nil (reparse-symbol function_parameters) [89739 89741])
                            ("yt" variable nil (reparse-symbol function_parameters) [89743 89745])
                            ("scale_trans" variable nil (reparse-symbol function_parameters) [89747 89758])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [89760 89768]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [89720 89967])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [89972 90004])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90025 90029]))                          )
                        (reparse-symbol indented_block_body) [90010 90347]))                  
                :type "class")
                nil [89542 90347])
            ("AffineDeltaTransform" type
               (:superclasses ("Affine2DBase")
                :members 
                  ( ("r\"\"\"
    A transform wrapper for transforming displacements between pairs of points.

    This class is intended to be used to transform displacements (\"position
    deltas\") between pairs of points (e.g., as the ``offset_transform``
    of `.Collection`\\s): given a transform ``t`` such that ``t =
    AffineDeltaTransform(t) + offset``, ``AffineDeltaTransform``
    satisfies ``AffineDeltaTransform(a - b) == AffineDeltaTransform(a) -
    AffineDeltaTransform(b)``.

    This is implemented by forcing the offset components of the transform
    matrix to zero.

    This class is experimental as of 3.3, and the API may change.
    \"\"\"" code nil (reparse-symbol indented_block_body) [90395 91032])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [91087 91113])
                            ("self" variable nil (reparse-symbol indented_block_body) [91122 91154]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91051 91055])
                            ("transform" variable nil (reparse-symbol function_parameters) [91057 91066])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [91068 91076]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91038 91155])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [91160 91205])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91226 91230]))                          )
                        (reparse-symbol indented_block_body) [91211 91383]))                  
                :type "class")
                nil [90349 91383])
            ("TransformedPath" type
               (:documentation "
    A `TransformedPath` caches a non-affine transformed copy of the
    `~.path.Path`.  This cached copy is automatically updated when the
    non-affine part of the transform changes.

    .. note::

        Paths are considered immutable by this class. Any update to the
        path's vertices/codes will not trigger a transform recomputation.

    "
                :superclasses ("TransformNode")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        path : `~.path.Path`
        transform : `Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [91836 91950])
                            ("_api" code nil (reparse-symbol indented_block_body) [91959 92012])
                            ("super" code nil (reparse-symbol indented_block_body) [92021 92039])
                            ("self" variable nil (reparse-symbol indented_block_body) [92048 92065])
                            ("self" variable nil (reparse-symbol indented_block_body) [92074 92101])
                            ("self" code nil (reparse-symbol indented_block_body) [92110 92138])
                            ("self" variable nil (reparse-symbol indented_block_body) [92147 92176])
                            ("self" variable nil (reparse-symbol indented_block_body) [92185 92216]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91804 91808])
                            ("path" variable nil (reparse-symbol function_parameters) [91810 91814])
                            ("transform" variable nil (reparse-symbol function_parameters) [91816 91825]))                          
                        :documentation "
        Parameters
        ----------
        path : `~.path.Path`
        transform : `Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91791 92217])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92238 92242]))                          )
                        (reparse-symbol indented_block_body) [92222 92819])
                    ("get_transformed_points_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92862 92866]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.  Unlike
        :meth:`get_transformed_path_and_affine`, no interpolation will
        be performed.
        ")
                        (reparse-symbol indented_block_body) [92824 93277])
                    ("get_transformed_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93318 93322]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.
        ")
                        (reparse-symbol indented_block_body) [93282 93630])
                    ("get_fully_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93666 93670]))                          
                        :documentation "
        Return a fully-transformed copy of the child path.
        ")
                        (reparse-symbol indented_block_body) [93635 93860])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93880 93884]))                          )
                        (reparse-symbol indented_block_body) [93865 93931]))                  
                :type "class")
                nil [91385 93931])
            ("TransformedPatchPath" type
               (:documentation "
    A `TransformedPatchPath` caches a non-affine transformed copy of the
    `~.patches.Patch`. This cached copy is automatically updated when the
    non-affine part of the transform or the patch changes.
    "
                :superclasses ("TransformedPath")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        patch : `~.patches.Patch`
        \"\"\"" code nil (reparse-symbol indented_block_body) [94239 94326])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [94335 94363])
                            ("transform" variable nil (reparse-symbol indented_block_body) [94373 94406])
                            ("self" variable nil (reparse-symbol indented_block_body) [94415 94434])
                            ("self" variable nil (reparse-symbol indented_block_body) [94443 94470])
                            ("self" code nil (reparse-symbol indented_block_body) [94479 94507])
                            ("self" variable nil (reparse-symbol indented_block_body) [94516 94545])
                            ("self" variable nil (reparse-symbol indented_block_body) [94554 94583])
                            ("self" variable nil (reparse-symbol indented_block_body) [94592 94623]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94217 94221])
                            ("patch" variable nil (reparse-symbol function_parameters) [94223 94228]))                          
                        :documentation "
        Parameters
        ----------
        patch : `~.patches.Patch`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [94204 94624])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94645 94649]))                          )
                        (reparse-symbol indented_block_body) [94629 95390]))                  
                :type "class")
                nil [93933 95390])
            ("nonsingular" function
               (:documentation "
    Modify the endpoints of a range as needed to avoid singularities.

    Parameters
    ----------
    vmin, vmax : float
        The initial endpoints.
    expander : float, default: 0.001
        Fractional amount by which *vmin* and *vmax* are expanded if
        the original interval is too small, based on *tiny*.
    tiny : float, default: 1e-15
        Threshold for the ratio of the interval to the maximum absolute
        value of its endpoints.  If the interval is smaller than
        this, it will be expanded.  This value should be around
        1e-15 or larger; otherwise the interval will be approaching
        the double precision resolution limit.
    increasing : bool, default: True
        If True, swap *vmin*, *vmax* if *vmin* > *vmax*.

    Returns
    -------
    vmin, vmax : float
        Endpoints, expanded and/or swapped if necessary.
        If either input is inf or NaN, or if both inputs are 0 or very
        close to zero, it returns -*expander*, *expander*.
    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [95408 95412])
                    ("vmax" variable nil (reparse-symbol function_parameters) [95414 95418])
                    ("expander" variable nil (reparse-symbol function_parameters) [95420 95428])
                    ("tiny" variable nil (reparse-symbol function_parameters) [95436 95440])
                    ("increasing" variable nil (reparse-symbol function_parameters) [95448 95458]))                  )
                nil [95392 97343])
            ("interval_contains" function
               (:documentation "
    Check, inclusively, whether an interval includes a given value.

    Parameters
    ----------
    interval : (float, float)
        The endpoints of the interval.
    val : float
        Value to check is within interval.

    Returns
    -------
    bool
        Whether *val* is within the *interval*.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [97367 97375])
                    ("val" variable nil (reparse-symbol function_parameters) [97377 97380]))                  )
                nil [97345 97787])
            ("_interval_contains_close" function
               (:documentation "
    Check, inclusively, whether an interval includes a given value, with the
    interval expanded by a small tolerance to admit floating point errors.

    Parameters
    ----------
    interval : (float, float)
        The endpoints of the interval.
    val : float
        Value to check is within interval.
    rtol : float, default: 1e-10
        Relative tolerance slippage allowed outside of the interval.
        For an interval ``[a, b]``, values
        ``a - rtol * (b - a) <= val <= b + rtol * (b - a)`` are considered
        inside the interval.

    Returns
    -------
    bool
        Whether *val* is within the *interval* (with tolerance).
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [97818 97826])
                    ("val" variable nil (reparse-symbol function_parameters) [97828 97831])
                    ("rtol" variable nil (reparse-symbol function_parameters) [97833 97837]))                  )
                nil [97789 98640])
            ("interval_contains_open" function
               (:documentation "
    Check, excluding endpoints, whether an interval includes a given value.

    Parameters
    ----------
    interval : (float, float)
        The endpoints of the interval.
    val : float
        Value to check is within interval.

    Returns
    -------
    bool
        Whether *val* is within the *interval*.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [98669 98677])
                    ("val" variable nil (reparse-symbol function_parameters) [98679 98682]))                  )
                nil [98642 99076])
            ("offset_copy" function
               (:documentation "
    Return a new transform with an added offset.

    Parameters
    ----------
    trans : `Transform` subclass
        Any transform, to which offset will be applied.
    fig : `~matplotlib.figure.Figure`, default: None
        Current figure. It can be None if *units* are 'dots'.
    x, y : float, default: 0.0
        The offset to apply.
    units : {'inches', 'points', 'dots'}, default: 'inches'
        Units of the offset.

    Returns
    -------
    `Transform` subclass
        Transform with applied offset.
    "
                :arguments 
                  ( ("trans" variable nil (reparse-symbol function_parameters) [99094 99099])
                    ("fig" variable nil (reparse-symbol function_parameters) [99101 99104])
                    ("x" variable nil (reparse-symbol function_parameters) [99111 99112])
                    ("y" variable nil (reparse-symbol function_parameters) [99118 99119])
                    ("units" variable nil (reparse-symbol function_parameters) [99125 99130]))                  )
                nil [99078 100101]))          
      :file "transforms.py"
      :pointmax 100101
      :fsize 100100
      :lastmodtime '(25218 25732 425269 355000)
      :unmatched-syntax '((RETURN 23240 . 23246) (IF 23274 . 23276) (ELSE 23299 . 23303) (DEF 2154 . 2157) (IF 2185 . 2187) (ELSE 2207 . 2211) (FROM 1697 . 1701) (PERIOD 1702 . 1703)))
    (semanticdb-table "semanticdb-table-157fb3309f50"
      :file "collections.py"
      :fsize 83349
      :lastmodtime '(25218 25732 345269 286000))
    (semanticdb-table "semanticdb-table-157fb36c43d0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Manage figures for the pyplot interface.
\"\"\"" code nil nil [1 49])
            ("atexit" include nil nil [51 64])
            ("collections" include nil nil [65 100])
            ("gc" include nil nil [101 110])
            ("Gcf" type
               (:documentation "
    Singleton to maintain the relation between figures and their managers, and
    keep track of and \"active\" figure and manager.

    The canvas of a figure created through pyplot is associated with a figure
    manager, which handles the interaction between the figure and the backend.
    pyplot keeps track of figure managers using an identifier, the \"figure
    number\" or \"manager number\" (which can actually be any hashable value);
    this number is available as the :attr:`number` attribute of the manager.

    This class is never instantiated; it consists of an `OrderedDict` mapping
    figure/manager numbers to managers, and a set of class methods that
    manipulate this `OrderedDict`.

    Attributes
    ----------
    figs : OrderedDict
        `OrderedDict` mapping numbers to managers; the active manager is at the
        end.
    "
                :members 
                  ( ("figs" variable nil (reparse-symbol indented_block_body) [994 1014])
                    ("get_fig_manager" function
                       (:documentation "
        If manager number *num* exists, make it the active one and return it;
        otherwise return *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1057 1060])
                            ("num" variable nil (reparse-symbol function_parameters) [1062 1065]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1020 1336])
                    ("destroy" function
                       (:documentation "
        Destroy manager *num* -- either a manager instance or a manager number.

        In the interactive backends, this is bound to the window \"destroy\" and
        \"delete\" events.

        It is recommended to pass a manager instance, to avoid confusion when
        two managers share the same number.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1370 1373])
                            ("num" variable nil (reparse-symbol function_parameters) [1375 1378]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1341 2422])
                    ("destroy_fig" function
                       (:documentation "Destroy figure *fig*."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2460 2463])
                            ("fig" variable nil (reparse-symbol function_parameters) [2465 2468]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2427 2689])
                    ("destroy_all" function
                       (:documentation "Destroy all figures."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2727 2730]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2694 3084])
                    ("has_fignum" function
                       (:documentation "Return whether figure number *num* exists."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3121 3124])
                            ("num" variable nil (reparse-symbol function_parameters) [3126 3129]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3089 3220])
                    ("get_all_fig_managers" function
                       (:documentation "Return a list of figure managers."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3267 3270]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3225 3360])
                    ("get_num_fig_managers" function
                       (:documentation "Return the number of figures being managed."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3407 3410]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3365 3500])
                    ("get_active" function
                       (:documentation "Return the active manager, or *None* if there is no manager."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3537 3540]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3505 3689])
                    ("_set_new_active_manager" function
                       (:documentation "Adopt *manager* into pyplot and make it the active manager."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3739 3742])
                            ("manager" variable nil (reparse-symbol function_parameters) [3744 3751]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3694 4202])
                    ("set_active" function
                       (:documentation "Make *manager* the active manager."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4239 4242])
                            ("manager" variable nil (reparse-symbol function_parameters) [4244 4251]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4207 4385])
                    ("draw_all" function
                       (:documentation "
        Redraw all stale managed figures, or, if *force* is True, all managed
        figures.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4420 4423])
                            ("force" variable nil (reparse-symbol function_parameters) [4425 4430]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4390 4705]))                  
                :type "class")
                nil [113 4705])
            ("atexit" code nil nil [4707 4739]))          
      :file "_pylab_helpers.py"
      :pointmax 4740
      :fsize 4739
      :lastmodtime '(25218 25732 408602 674000)
      :unmatched-syntax '((RETURN 3626 . 3632) (IF 3667 . 3669) (ELSE 3679 . 3683)))
    (semanticdb-table "semanticdb-table-157fb386c914"
      :major-mode python-mode
      :tags 
        '( ("matplotlib" include nil nil [1 44])
            ("matplotlib.backend_tools" include nil nil [45 85])
            ("ToolEvent" type
               (:documentation "Event for tool manipulation (add/remove)."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [220 236])
                            ("self" variable nil (reparse-symbol indented_block_body) [245 265])
                            ("self" variable nil (reparse-symbol indented_block_body) [274 290])
                            ("self" variable nil (reparse-symbol indented_block_body) [299 315]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174 178])
                            ("name" variable nil (reparse-symbol function_parameters) [180 184])
                            ("sender" variable nil (reparse-symbol function_parameters) [186 192])
                            ("tool" variable nil (reparse-symbol function_parameters) [194 198])
                            ("data" variable nil (reparse-symbol function_parameters) [200 204]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [161 316]))                  
                :type "class")
                nil [88 316])
            ("ToolTriggerEvent" type
               (:documentation "Event to inform that a tool has been triggered."
                :superclasses ("ToolEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [492 534])
                            ("self" variable nil (reparse-symbol indented_block_body) [543 573]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [428 432])
                            ("name" variable nil (reparse-symbol function_parameters) [434 438])
                            ("sender" variable nil (reparse-symbol function_parameters) [440 446])
                            ("tool" variable nil (reparse-symbol function_parameters) [448 452])
                            ("canvasevent" variable nil (reparse-symbol function_parameters) [454 465])
                            ("data" variable nil (reparse-symbol function_parameters) [472 476]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [415 574]))                  
                :type "class")
                nil [318 574])
            ("ToolManagerMessageEvent" type
               (:documentation "
    Event carrying messages from toolmanager.

    Messages usually get displayed to the user by the toolbar.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [788 804])
                            ("self" variable nil (reparse-symbol indented_block_body) [813 833])
                            ("self" variable nil (reparse-symbol indented_block_body) [842 864]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [750 754])
                            ("name" variable nil (reparse-symbol function_parameters) [756 760])
                            ("sender" variable nil (reparse-symbol function_parameters) [762 768])
                            ("message" variable nil (reparse-symbol function_parameters) [770 777]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [737 865]))                  
                :type "class")
                nil [576 865])
            ("ToolManager" type
               (:documentation "
    Manager for actions triggered by user interactions (key press, toolbar
    clicks, ...) on a Figure.

    Attributes
    ----------
    figure : `.Figure`
    keypresslock : `~matplotlib.widgets.LockDraw`
        `.LockDraw` object to know if the `canvas` key_press_event is locked.
    messagelock : `~matplotlib.widgets.LockDraw`
        `.LockDraw` object to know if the message is available to write.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1358 1391])
                            ("self" variable nil (reparse-symbol indented_block_body) [1401 1417])
                            ("self" variable nil (reparse-symbol indented_block_body) [1426 1441])
                            ("self" variable nil (reparse-symbol indented_block_body) [1450 1468])
                            ("self" variable nil (reparse-symbol indented_block_body) [1477 1519])
                            ("self" variable nil (reparse-symbol indented_block_body) [1565 1603])
                            ("self" variable nil (reparse-symbol indented_block_body) [1612 1649])
                            ("self" variable nil (reparse-symbol indented_block_body) [1659 1678])
                            ("self" code nil (reparse-symbol indented_block_body) [1687 1710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1329 1333])
                            ("figure" variable nil (reparse-symbol function_parameters) [1335 1341]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1316 1711])
                    ("canvas" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1741 1745]))                          
                        :documentation "Canvas managed by FigureManager.")
                        (reparse-symbol indented_block_body) [1716 1883])
                    ("figure" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1913 1917]))                          
                        :documentation "Figure that holds the canvas.")
                        (reparse-symbol indented_block_body) [1888 1992])
                    ("figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2027 2031])
                            ("figure" variable nil (reparse-symbol function_parameters) [2033 2039]))                          
                        :decorators 
                          ( ("figure.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1997 2074])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2094 2098])
                            ("figure" variable nil (reparse-symbol function_parameters) [2100 2106])
                            ("update_tools" variable nil (reparse-symbol function_parameters) [2108 2120]))                          
                        :documentation "
        Bind the given figure to the tools.

        Parameters
        ----------
        figure : `.Figure`
        update_tools : bool, default: True
            Force tools to update figure.
        ")
                        (reparse-symbol indented_block_body) [2079 2728])
                    ("toolmanager_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2757 2761])
                            ("s" variable nil (reparse-symbol function_parameters) [2763 2764])
                            ("func" variable nil (reparse-symbol function_parameters) [2766 2770]))                          
                        :documentation "
        Connect event with string *s* to *func*.

        Parameters
        ----------
        s : str
            The name of the event. The following events are recognized:

            - 'tool_message_event'
            - 'tool_removed_event'
            - 'tool_added_event'

            For every tool added a new event is created

            - 'tool_trigger_TOOLNAME', where TOOLNAME is the id of the tool.

        func : callable
            Callback function for the toolmanager event with signature::

                def func(event: ToolEvent) -> Any

        Returns
        -------
        cid
            The callback id for the connection. This can be used in
            `.toolmanager_disconnect`.
        ")
                        (reparse-symbol indented_block_body) [2733 3561])
                    ("toolmanager_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3593 3597])
                            ("cid" variable nil (reparse-symbol function_parameters) [3599 3602]))                          
                        :documentation "
        Disconnect callback id *cid*.

        Example usage::

            cid = toolmanager.toolmanager_connect('tool_trigger_zoom', onpress)
            #...later
            toolmanager.toolmanager_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [3566 3894])
                    ("message_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3917 3921])
                            ("message" variable nil (reparse-symbol function_parameters) [3923 3930])
                            ("sender" variable nil (reparse-symbol function_parameters) [3932 3938]))                          
                        :documentation "Emit a `ToolManagerMessageEvent`.")
                        (reparse-symbol indented_block_body) [3899 4183])
                    ("active_toggle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4220 4224]))                          
                        :documentation "Currently toggled tools.")
                        (reparse-symbol indented_block_body) [4188 4295])
                    ("get_tool_keymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4320 4324])
                            ("name" variable nil (reparse-symbol function_parameters) [4326 4330]))                          
                        :documentation "
        Return the keymap associated with the specified tool.

        Parameters
        ----------
        name : str
            Name of the Tool.

        Returns
        -------
        list of str
            List of keys associated with the tool.
        ")
                        (reparse-symbol indented_block_body) [4300 4695])
                    ("_remove_keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4717 4721])
                            ("name" variable nil (reparse-symbol function_parameters) [4723 4727]))                          )
                        (reparse-symbol indented_block_body) [4700 4805])
                    ("update_keymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4828 4832])
                            ("name" variable nil (reparse-symbol function_parameters) [4834 4838])
                            ("key" variable nil (reparse-symbol function_parameters) [4840 4843]))                          
                        :documentation "
        Set the keymap to associate with the specified tool.

        Parameters
        ----------
        name : str
            Name of the Tool.
        key : str or list of str
            Keys to associate with the tool.
        ")
                        (reparse-symbol indented_block_body) [4810 5467])
                    ("remove_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5488 5492])
                            ("name" variable nil (reparse-symbol function_parameters) [5494 5498]))                          
                        :documentation "
        Remove tool named *name*.

        Parameters
        ----------
        name : str
            Name of the tool.
        ")
                        (reparse-symbol indented_block_body) [5472 6037])
                    ("add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6055 6059])
                            ("name" variable nil (reparse-symbol function_parameters) [6061 6065])
                            ("tool" variable nil (reparse-symbol function_parameters) [6067 6071])
                            ("args" variable nil (reparse-symbol function_parameters) [6073 6078])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6080 6088]))                          
                        :documentation "
        Add *tool* to `ToolManager`.

        If successful, adds a new event ``tool_trigger_{name}`` where
        ``{name}`` is the *name* of the tool; the event is fired every time the
        tool is triggered.

        Parameters
        ----------
        name : str
            Name of the tool, treated as the ID, has to be unique.
        tool : class_like, i.e. str or type
            Reference to find the class of the Tool to added.

        Notes
        -----
        args and kwargs get passed directly to the tools constructor.

        See Also
        --------
        matplotlib.backend_tools.ToolBase : The base class for tools.
        ")
                        (reparse-symbol indented_block_body) [6042 8604])
                    ("_tool_added_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8631 8635])
                            ("tool" variable nil (reparse-symbol function_parameters) [8637 8641]))                          )
                        (reparse-symbol indented_block_body) [8609 8758])
                    ("_handle_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8782 8786])
                            ("tool" variable nil (reparse-symbol function_parameters) [8788 8792])
                            ("sender" variable nil (reparse-symbol function_parameters) [8794 8800])
                            ("canvasevent" variable nil (reparse-symbol function_parameters) [8802 8813])
                            ("data" variable nil (reparse-symbol function_parameters) [8815 8819]))                          
                        :documentation "
        Toggle tools, need to untoggle prior to using other Toggle tool.
        Called from trigger_tool.

        Parameters
        ----------
        tool : `.ToolBase`
        sender : object
            Object that wishes to trigger the tool.
        canvasevent : Event
            Original Canvas event or None.
        data : object
            Extra data to pass to the tool when triggering.
        ")
                        (reparse-symbol indented_block_body) [8763 10340])
                    ("_get_cls_to_instantiate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10373 10377])
                            ("callback_class" variable nil (reparse-symbol function_parameters) [10379 10393]))                          )
                        (reparse-symbol indented_block_body) [10345 11027])
                    ("trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11049 11053])
                            ("name" variable nil (reparse-symbol function_parameters) [11055 11059])
                            ("sender" variable nil (reparse-symbol function_parameters) [11061 11067])
                            ("canvasevent" variable nil (reparse-symbol function_parameters) [11074 11085])
                            ("data" variable nil (reparse-symbol function_parameters) [11092 11096]))                          
                        :documentation "
        Trigger a tool and emit the ``tool_trigger_{name}`` event.

        Parameters
        ----------
        name : str
            Name of the tool.
        sender : object
            Object that wishes to trigger the tool.
        canvasevent : Event
            Original Canvas event or None.
        data : object
            Extra data to pass to the tool when triggering.
        ")
                        (reparse-symbol indented_block_body) [11032 11855])
                    ("_trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11878 11882])
                            ("name" variable nil (reparse-symbol function_parameters) [11884 11888])
                            ("sender" variable nil (reparse-symbol function_parameters) [11890 11896])
                            ("canvasevent" variable nil (reparse-symbol function_parameters) [11903 11914])
                            ("data" variable nil (reparse-symbol function_parameters) [11921 11925]))                          
                        :documentation "Actually trigger a tool.")
                        (reparse-symbol indented_block_body) [11860 12251])
                    ("_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12271 12275])
                            ("event" variable nil (reparse-symbol function_parameters) [12277 12282]))                          )
                        (reparse-symbol indented_block_body) [12256 12507])
                    ("tools" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12536 12540]))                          
                        :documentation "A dict mapping tool name -> controlled tool.")
                        (reparse-symbol indented_block_body) [12512 12629])
                    ("get_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12647 12651])
                            ("name" variable nil (reparse-symbol function_parameters) [12653 12657])
                            ("warn" variable nil (reparse-symbol function_parameters) [12659 12663]))                          
                        :documentation "
        Return the tool object with the given name.

        For convenience, this passes tool objects through.

        Parameters
        ----------
        name : str or `.ToolBase`
            Name of the tool, or the tool itself.
        warn : bool, default: True
            Whether a warning should be emitted it no tool with the given name
            exists.

        Returns
        -------
        `.ToolBase` or None
            The tool or None if no tool with the given name exists.
        ")
                        (reparse-symbol indented_block_body) [12634 13485]))                  
                :type "class")
                nil [867 13485]))          
      :file "backend_managers.py"
      :pointmax 13485
      :fsize 13484
      :lastmodtime '(25218 25732 298602 579000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-157fb38c5b90"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Enums representing sets of strings that Matplotlib uses as input parameters.

Matplotlib often uses simple data types like strings or tuples to define a
concept; e.g. the line capstyle can be specified as one of 'butt', 'round',
or 'projecting'. The classes in this module are used internally and serve to
document these concepts formally.

As an end-user you will not use these classes directly, but only the values
they define.
\"\"\"" code nil nil [1 438])
            ("enum" include nil nil [440 467])
            ("matplotlib" include nil nil [468 500])
            ("_AutoStringNameEnum" type
               (:documentation "Automate the ``name = 'name'`` part of making a (str, Enum)."
                :superclasses ("Enum")
                :members 
                  ( ("_generate_next_value_" function (:arguments 
                      ( ("name" variable nil (reparse-symbol function_parameters) [638 642])
                        ("start" variable nil (reparse-symbol function_parameters) [644 649])
                        ("count" variable nil (reparse-symbol function_parameters) [651 656])
                        ("last_values" variable nil (reparse-symbol function_parameters) [658 669]))                      ) (reparse-symbol indented_block_body) [612 692])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [710 714]))                          )
                        (reparse-symbol indented_block_body) [697 753]))                  
                :type "class")
                nil [503 753])
            ("JoinStyle" type
               (:documentation "
    Define how the connection between two line segments is drawn.

    For a visual impression of each *JoinStyle*, `view these docs online
    <JoinStyle>`, or run `JoinStyle.demo`.

    Lines in Matplotlib are typically defined by a 1D `~.path.Path` and a
    finite ``linewidth``, where the underlying 1D `~.path.Path` represents the
    center of the stroked line.

    By default, `~.backend_bases.GraphicsContextBase` defines the boundaries of
    a stroked line to simply be every point within some radius,
    ``linewidth/2``, away from any point of the center line. However, this
    results in corners appearing \"rounded\", which may not be the desired
    behavior if you are drawing, for example, a polygon or pointed star.

    **Supported values:**

    .. rst-class:: value-list

        'miter'
            the \"arrow-tip\" style. Each boundary of the filled-in area will
            extend in a straight line parallel to the tangent vector of the
            centerline at the point it meets the corner, until they meet in a
            sharp point.
        'round'
            stokes every point within a radius of ``linewidth/2`` of the center
            lines.
        'bevel'
            the \"squared-off\" style. It can be thought of as a rounded corner
            where the \"circular\" part of the corner has been cut off.

    .. note::

        Very long miter tips are cut off (to form a *bevel*) after a
        backend-dependent limit called the \"miter limit\", which specifies the
        maximum allowed ratio of miter length to line width. For example, the
        PDF backend uses the default value of 10 specified by the PDF standard,
        while the SVG backend does not even specify the miter limit, resulting
        in a default value of 4 per the SVG specification. Matplotlib does not
        currently allow the user to adjust this parameter.

        A more detailed description of the effect of a miter limit can be found
        in the `Mozilla Developer Docs
        <https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit>`_

    .. plot::
        :alt: Demo of possible JoinStyle's

        from matplotlib._enums import JoinStyle
        JoinStyle.demo()

    "
                :superclasses ("str" "_AutoStringNameEnum")
                :members 
                  ( ("miter" variable nil (reparse-symbol indented_block_body) [3043 3057])
                    ("round" variable nil (reparse-symbol indented_block_body) [3062 3076])
                    ("bevel" variable nil (reparse-symbol indented_block_body) [3081 3095])
                    ("demo" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Demonstrate how each JoinStyle looks for various join angles.")
                        (reparse-symbol indented_block_body) [3101 4156]))                  
                :type "class")
                nil [755 4156])
            ("JoinStyle" code nil nil [4158 4267])
            ("CapStyle" type
               (:superclasses ("str" "_AutoStringNameEnum")
                :members 
                  ( ("r\"\"\"
    Define how the two endpoints (caps) of an unclosed line are drawn.

    How to draw the start and end points of lines that represent a closed curve
    (i.e. that end in a `~.path.Path.CLOSEPOLY`) is controlled by the line's
    `JoinStyle`. For all other lines, how the start and end points are drawn is
    controlled by the *CapStyle*.

    For a visual impression of each *CapStyle*, `view these docs online
    <CapStyle>` or run `CapStyle.demo`.

    By default, `~.backend_bases.GraphicsContextBase` draws a stroked line as
    squared off at its endpoints.

    **Supported values:**

    .. rst-class:: value-list

        'butt'
            the line is squared off at its endpoint.
        'projecting'
            the line is squared off as in *butt*, but the filled in area
            extends beyond the endpoint a distance of ``linewidth/2``.
        'round'
            like *butt*, but a semicircular cap is added to the end of the
            line, of radius ``linewidth/2``.

    .. plot::
        :alt: Demo of possible CapStyle's

        from matplotlib._enums import CapStyle
        CapStyle.demo()

    \"\"\"" code nil (reparse-symbol indented_block_body) [4316 5455])
                    ("butt" variable nil (reparse-symbol indented_block_body) [5460 5473])
                    ("projecting" variable nil (reparse-symbol indented_block_body) [5478 5503])
                    ("round" variable nil (reparse-symbol indented_block_body) [5508 5523])
                    ("demo" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Demonstrate how each CapStyle looks for a thick line segment.")
                        (reparse-symbol indented_block_body) [5529 6234]))                  
                :type "class")
                nil [4270 6234])
            ("CapStyle" code nil nil [6236 6343])
            ("docstring" code nil nil [6345 6479]))          
      :file "_enums.py"
      :pointmax 6480
      :fsize 6479
      :lastmodtime '(25218 25732 341935 950000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-157fb3b47ae4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The legend module defines the Legend class, which is responsible for
drawing legends associated with axes and/or figures.

.. important::

    It is unlikely that you would ever create a Legend instance manually.
    Most users would normally create a legend via the `~.Axes.legend`
    function. For more details on legends there is also a :doc:`legend guide
    </tutorials/intermediate/legend_guide>`.

The `Legend` class is a container of legend handles and legend texts.

The legend handler map specifies how to create legend handles from artists
(lines, patches, etc.) in the axes or figures. Default legend handlers are
defined in the :mod:`~matplotlib.legend_handler` module. While not all artist
types are covered by the default legend handlers, custom legend handlers can be
defined to support arbitrary objects.

See the :doc:`legend guide </tutorials/intermediate/legend_guide>` for more
information.
\"\"\"" code nil nil [1 921])
            ("itertools" include nil nil [923 939])
            ("logging" include nil nil [940 954])
            ("time" include nil nil [955 966])
            ("numpy" include nil nil [968 986])
            ("matplotlib" include nil nil [988 1012])
            ("matplotlib" include nil nil [1013 1070])
            ("matplotlib.artist" include nil nil [1071 1128])
            ("matplotlib.cbook" include nil nil [1129 1169])
            ("matplotlib.font_manager" include nil nil [1170 1220])
            ("matplotlib.lines" include nil nil [1221 1256])
            ("" code nil nil [1288 1373])
            ("" code nil nil [1409 1519])
            ("matplotlib.transforms" include nil nil [1520 1585])
            ("matplotlib.transforms" include nil nil [1586 1654])
            ("" code nil nil [1688 1783])
            ("matplotlib.container" include nil nil [1784 1863])
            ("legend_handler" include nil nil [1871 1892])
            ("DraggableLegend" type
               (:superclasses ("DraggableOffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Wrapper around a `.Legend` to support mouse dragging.

        Parameters
        ----------
        legend : `.Legend`
            The `.Legend` instance to wrap.
        use_blit : bool, optional
            Use blitting for faster image composition. For details see
            :ref:`func-animation`.
        update : {'loc', 'bbox'}, optional
            If \"loc\", update the *loc* parameter of the legend upon finalizing.
            If \"bbox\", update the *bbox_to_anchor* parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2008 2520])
                            ("self" variable nil (reparse-symbol indented_block_body) [2529 2549])
                            ("_api" code nil (reparse-symbol indented_block_body) [2559 2609])
                            ("self" variable nil (reparse-symbol indented_block_body) [2618 2639])
                            ("super" code nil (reparse-symbol indented_block_body) [2649 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1955 1959])
                            ("legend" variable nil (reparse-symbol function_parameters) [1961 1967])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [1969 1977])
                            ("update" variable nil (reparse-symbol function_parameters) [1985 1991]))                          
                        :documentation "
        Wrapper around a `.Legend` to support mouse dragging.

        Parameters
        ----------
        legend : `.Legend`
            The `.Legend` instance to wrap.
        use_blit : bool, optional
            Use blitting for faster image composition. For details see
            :ref:`func-animation`.
        update : {'loc', 'bbox'}, optional
            If \"loc\", update the *loc* parameter of the legend upon finalizing.
            If \"bbox\", update the *bbox_to_anchor* parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1942 2713])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2738 2742]))                          )
                        (reparse-symbol indented_block_body) [2718 2930])
                    ("_update_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2951 2955])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [2957 2970]))                          )
                        (reparse-symbol indented_block_body) [2935 3425])
                    ("_update_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3457 3461])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3463 3476]))                          )
                        (reparse-symbol indented_block_body) [3430 3605]))                  
                :type "class")
                nil [1895 3605])
            ("docstring" code nil nil [3607 11506])
            ("Legend" type
               (:documentation "
    Place a legend on the axes at location loc.
    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [11650 11696])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [11701 11711])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11729 11733]))                          )
                        (reparse-symbol indented_block_body) [11717 11760])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        parent : `~matplotlib.axes.Axes` or `.Figure`
            The artist that contains the legend.

        handles : list of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : list of str
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------
        %(_legend_kw_doc)s

        Notes
        -----
        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.
        See `set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13636 14709])
                            ("matplotlib.axes" include nil (reparse-symbol indented_block_body) [14767 14799])
                            ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [14808 14848])
                            ("super" code nil (reparse-symbol indented_block_body) [14858 14876])
                            ("if" code nil (reparse-symbol indented_block_body) [14886 15317])
                            ("self" variable nil (reparse-symbol indented_block_body) [15326 15373])
                            ("self" variable nil (reparse-symbol indented_block_body) [15383 15398])
                            ("self" variable nil (reparse-symbol indented_block_body) [15407 15430])
                            ("self" variable nil (reparse-symbol indented_block_body) [15439 15468])
                            ("self" variable nil (reparse-symbol indented_block_body) [15571 15609])
                            ("locals_view" variable nil (reparse-symbol indented_block_body) [15619 15641])
                            ("for" code nil (reparse-symbol indented_block_body) [15650 16090])
                            ("del" code nil (reparse-symbol indented_block_body) [16098 16113])
                            ("_lab, _hand" code nil (reparse-symbol indented_block_body) [16176 16196])
                            ("for" code nil (reparse-symbol indented_block_body) [16205 16626])
                            ("labels, handles" code nil (reparse-symbol indented_block_body) [16634 16663])
                            ("handles" variable nil (reparse-symbol indented_block_body) [16673 16696])
                            ("if" code nil (reparse-symbol indented_block_body) [16705 16747])
                            ("self" variable nil (reparse-symbol indented_block_body) [16755 16772])
                            ("if" code nil (reparse-symbol indented_block_body) [16782 16883])
                            ("if" code nil (reparse-symbol indented_block_body) [16953 17134])
                            ("reps" code nil (reparse-symbol indented_block_body) [17142 17201])
                            ("self" variable nil (reparse-symbol indented_block_body) [17210 17331])
                            ("self" variable nil (reparse-symbol indented_block_body) [17492 17515])
                            ("if" code nil (reparse-symbol indented_block_body) [17525 17896])
                            ("self" variable nil (reparse-symbol indented_block_body) [17904 17924])
                            ("self" code nil (reparse-symbol indented_block_body) [17934 17970])
                            ("if" code nil (reparse-symbol indented_block_body) [17979 18131])
                            ("if" code nil (reparse-symbol indented_block_body) [18139 18222])
                            ("if" code nil (reparse-symbol indented_block_body) [18230 18405])
                            ("self" variable nil (reparse-symbol indented_block_body) [18414 18431])
                            ("self" code nil (reparse-symbol indented_block_body) [18440 18495])
                            ("if" code nil (reparse-symbol indented_block_body) [18646 18725])
                            ("if" code nil (reparse-symbol indented_block_body) [18733 18815])
                            ("if" code nil (reparse-symbol indented_block_body) [18824 18903])
                            ("if" code nil (reparse-symbol indented_block_body) [18911 18993])
                            ("if" code nil (reparse-symbol indented_block_body) [19002 19078])
                            ("self" variable nil (reparse-symbol indented_block_body) [19087 19883])
                            ("self" code nil (reparse-symbol indented_block_body) [19892 19932])
                            ("self" code nil (reparse-symbol indented_block_body) [19976 20027])
                            ("tmp" variable nil (reparse-symbol indented_block_body) [20037 20065])
                            ("self" code nil (reparse-symbol indented_block_body) [20074 20092])
                            ("self" variable nil (reparse-symbol indented_block_body) [20101 20129])
                            ("if" code nil (reparse-symbol indented_block_body) [20218 20454])
                            ("title_prop_fp" variable nil (reparse-symbol indented_block_body) [20462 20524])
                            ("if" code nil (reparse-symbol indented_block_body) [20533 21030])
                            ("self" code nil (reparse-symbol indented_block_body) [21039 21080])
                            ("self" variable nil (reparse-symbol indented_block_body) [21089 21111])
                            ("color_getters" variable nil (reparse-symbol indented_block_body) [21151 21587])
                            ("if" code nil (reparse-symbol indented_block_body) [21596 21818])
                            ("if" code nil (reparse-symbol indented_block_body) [21826 22823]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11817 11821])
                            ("parent" variable nil (reparse-symbol function_parameters) [11823 11829])
                            ("handles" variable nil (reparse-symbol function_parameters) [11831 11838])
                            ("labels" variable nil (reparse-symbol function_parameters) [11840 11846])
                            ("loc" variable nil (reparse-symbol function_parameters) [11856 11859])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [11874 11883])
                            ("markerscale" variable nil (reparse-symbol function_parameters) [11941 11952])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [12017 12028])
                            ("scatterpoints" variable nil (reparse-symbol function_parameters) [12095 12108])
                            ("scatteryoffsets" variable nil (reparse-symbol function_parameters) [12151 12166])
                            ("prop" variable nil (reparse-symbol function_parameters) [12181 12185])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [12244 12252])
                            ("labelcolor" variable nil (reparse-symbol function_parameters) [12309 12319])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [12434 12443])
                            ("labelspacing" variable nil (reparse-symbol function_parameters) [12501 12513])
                            ("handlelength" variable nil (reparse-symbol function_parameters) [12574 12586])
                            ("handleheight" variable nil (reparse-symbol function_parameters) [12634 12646])
                            ("handletextpad" variable nil (reparse-symbol function_parameters) [12694 12707])
                            ("borderaxespad" variable nil (reparse-symbol function_parameters) [12764 12777])
                            ("columnspacing" variable nil (reparse-symbol function_parameters) [12834 12847])
                            ("ncol" variable nil (reparse-symbol function_parameters) [12890 12894])
                            ("mode" variable nil (reparse-symbol function_parameters) [12930 12934])
                            ("fancybox" variable nil (reparse-symbol function_parameters) [13006 13014])
                            ("shadow" variable nil (reparse-symbol function_parameters) [13083 13089])
                            ("title" variable nil (reparse-symbol function_parameters) [13104 13109])
                            ("title_fontsize" variable nil (reparse-symbol function_parameters) [13149 13163])
                            ("framealpha" variable nil (reparse-symbol function_parameters) [13204 13214])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [13252 13261])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [13306 13315])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [13361 13375])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [13435 13449])
                            ("frameon" variable nil (reparse-symbol function_parameters) [13490 13497])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [13533 13544])
                            ("title_fontproperties" variable nil (reparse-symbol function_parameters) [13559 13579]))                          
                        :documentation "
        Parameters
        ----------
        parent : `~matplotlib.axes.Axes` or `.Figure`
            The artist that contains the legend.

        handles : list of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : list of str
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------
        %(_legend_kw_doc)s

        Notes
        -----
        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a
        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.
        See `set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11765 22823])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22850 22854])
                            ("a" variable nil (reparse-symbol function_parameters) [22856 22857]))                          
                        :documentation "
        Set the boilerplate props for artists added to axes.
        ")
                        (reparse-symbol indented_block_body) [22828 23117])
                    ("_set_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23135 23139])
                            ("loc" variable nil (reparse-symbol function_parameters) [23141 23144]))                          )
                        (reparse-symbol indented_block_body) [23122 23467])
                    ("_get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23485 23489]))                          )
                        (reparse-symbol indented_block_body) [23472 23522])
                    ("_loc" variable nil (reparse-symbol indented_block_body) [23527 23562])
                    ("_findoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23584 23588])
                            ("width" variable nil (reparse-symbol function_parameters) [23590 23595])
                            ("height" variable nil (reparse-symbol function_parameters) [23597 23603])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [23605 23613])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [23615 23623])
                            ("renderer" variable nil (reparse-symbol function_parameters) [23625 23633]))                          
                        :documentation "Helper function to locate the legend.")
                        (reparse-symbol indented_block_body) [23568 24341])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24380 24384])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24386 24394]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24346 25448])
                    ("_default_handler_map" variable nil (reparse-symbol indented_block_body) [25562 26357])
                    ("get_default_handler_map" function
                       (:documentation "
        A class method that returns the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26516 26519]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26471 26647])
                    ("set_default_handler_map" function
                       (:documentation "
        A class method to set the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26697 26700])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [26702 26713]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26652 26842])
                    ("update_default_handler_map" function
                       (:documentation "
        A class method to update the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26895 26898])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [26900 26911]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26847 27049])
                    ("get_legend_handler_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27081 27085]))                          
                        :documentation "
        Return the handler map.
        ")
                        (reparse-symbol indented_block_body) [27054 27411])
                    ("get_legend_handler" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("legend_handler_map" variable nil (reparse-symbol function_parameters) [27457 27475])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [27477 27488]))                          
                        :documentation "
        Return a legend handler from *legend_handler_map* that
        corresponds to *orig_handler*.

        *legend_handler_map* should be a dictionary object (that is
        returned by the get_legend_handler_map method).

        It first checks if the *orig_handle* itself is a key in the
        *legend_handler_map* and return the associated value.
        Otherwise, it checks for each of the classes in its
        method-resolution-order. If no matching key is found, it
        returns ``None``.
        ")
                        (reparse-symbol indented_block_body) [27416 28365])
                    ("_init_legend_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28391 28395])
                            ("handles" variable nil (reparse-symbol function_parameters) [28397 28404])
                            ("labels" variable nil (reparse-symbol function_parameters) [28406 28412])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [28414 28425]))                          
                        :documentation "
        Initialize the legend_box. The legend_box is an instance of
        the OffsetBox, which is packed with legend handles and
        texts. Once packed, their location is calculated during the
        drawing time.
        ")
                        (reparse-symbol indented_block_body) [28370 34040])
                    ("_auto_legend_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34067 34071]))                          
                        :documentation "
        Return display coordinates for hit testing for \"best\" positioning.

        Returns
        -------
        bboxes
            List of bounding boxes of all patches.
        lines
            List of `.Path` corresponding to each line.
        offsets
            List of (x, y) offsets of all collection.
        ")
                        (reparse-symbol indented_block_body) [34045 35319])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35341 35345]))                          )
                        (reparse-symbol indented_block_body) [35324 35430])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35449 35453]))                          
                        :documentation "Return the `~.patches.Rectangle` used to frame the legend.")
                        (reparse-symbol indented_block_body) [35435 35561])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35580 35584]))                          )
                        (reparse-symbol indented_block_body) [35566 35727])
                    ("get_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35748 35752]))                          )
                        (reparse-symbol indented_block_body) [35732 35972])
                    ("get_texts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35991 35995]))                          )
                        (reparse-symbol indented_block_body) [35977 36110])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36129 36133])
                            ("title" variable nil (reparse-symbol function_parameters) [36135 36140])
                            ("prop" variable nil (reparse-symbol function_parameters) [36142 36146]))                          
                        :documentation "
        Set the legend title. Fontproperties can be optionally set
        with *prop* parameter.
        ")
                        (reparse-symbol indented_block_body) [36115 36710])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36729 36733]))                          
                        :documentation "Return the `.Text` instance for the legend title.")
                        (reparse-symbol indented_block_body) [36715 36844])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36871 36875])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36877 36885]))                          )
                        (reparse-symbol indented_block_body) [36849 37072])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37095 37099])
                            ("renderer" variable nil (reparse-symbol function_parameters) [37101 37109]))                          )
                        (reparse-symbol indented_block_body) [37077 37202])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37224 37228]))                          
                        :documentation "Get whether the legend box patch is drawn.")
                        (reparse-symbol indented_block_body) [37207 37334])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37356 37360])
                            ("b" variable nil (reparse-symbol function_parameters) [37362 37363]))                          
                        :documentation "
        Set whether the legend box patch is drawn.

        Parameters
        ----------
        b : bool
        ")
                        (reparse-symbol indented_block_body) [37339 37563])
                    ("draw_frame" variable nil (reparse-symbol indented_block_body) [37568 37593])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37643 37647]))                          
                        :documentation "Return the bbox that the legend will be anchored to.")
                        (reparse-symbol indented_block_body) [37620 37848])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37876 37880])
                            ("bbox" variable nil (reparse-symbol function_parameters) [37882 37886])
                            ("transform" variable nil (reparse-symbol function_parameters) [37888 37897]))                          
                        :documentation "
        Set the bbox that the legend will be anchored to.

        Parameters
        ----------
        bbox : `~matplotlib.transforms.BboxBase` or tuple
            The bounding box can be specified in the following ways:

            - A `.BboxBase` instance
            - A tuple of ``(left, bottom, width, height)`` in the given
              transform (normalized axes coordinate if None)
            - A tuple of ``(left, bottom)`` where the width and height will be
              assumed to be zero.
            - *None*, to remove the bbox anchoring, and use the parent bbox.

        transform : `~matplotlib.transforms.Transform`, optional
            A transform to apply to the bounding box. If not specified, this
            will use a transform to the bounding box of the parent.
        ")
                        (reparse-symbol indented_block_body) [37853 39484])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39512 39516])
                            ("loc" variable nil (reparse-symbol function_parameters) [39518 39521])
                            ("bbox" variable nil (reparse-symbol function_parameters) [39523 39527])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [39529 39539])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39541 39549]))                          
                        :documentation "
        Place the *bbox* inside the *parentbbox* according to a given
        location code. Return the (x, y) coordinate of the bbox.

        Parameters
        ----------
        loc : int
            A location code in range(1, 11). This corresponds to the possible
            values for ``self._loc``, excluding \"best\".
        bbox : `~matplotlib.transforms.Bbox`
            bbox to be placed, in display coordinates.
        parentbbox : `~matplotlib.transforms.Bbox`
            A parent box which will contain the bbox, in display coordinates.
        ")
                        (reparse-symbol indented_block_body) [39489 40287])
                    ("_find_best_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40316 40320])
                            ("width" variable nil (reparse-symbol function_parameters) [40322 40327])
                            ("height" variable nil (reparse-symbol function_parameters) [40329 40335])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40337 40345])
                            ("consider" variable nil (reparse-symbol function_parameters) [40347 40355]))                          
                        :documentation "
        Determine the best location to place the legend.

        *consider* is a list of ``(x, y)`` pairs to consider as a potential
        lower-left corner of the legend. All are display coords.
        ")
                        (reparse-symbol indented_block_body) [40292 42226])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42244 42248])
                            ("event" variable nil (reparse-symbol function_parameters) [42250 42255]))                          )
                        (reparse-symbol indented_block_body) [42231 42422])
                    ("set_draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42445 42449])
                            ("state" variable nil (reparse-symbol function_parameters) [42451 42456])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [42458 42466])
                            ("update" variable nil (reparse-symbol function_parameters) [42474 42480]))                          
                        :documentation "
        Enable or disable mouse dragging support of the legend.

        Parameters
        ----------
        state : bool
            Whether mouse dragging is enabled.
        use_blit : bool, optional
            Use blitting for faster image composition. For details see
            :ref:`func-animation`.
        update : {'loc', 'bbox'}, optional
            The legend parameter to be changed when dragged:

            - 'loc': update the *loc* parameter of the legend
            - 'bbox': update the *bbox_to_anchor* parameter of the legend

        Returns
        -------
        `.DraggableLegend` or *None*
            If *state* is ``True`` this returns the `.DraggableLegend` helper
            instance. Otherwise this returns *None*.
        ")
                        (reparse-symbol indented_block_body) [42427 43674])
                    ("get_draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43697 43701]))                          
                        :documentation "Return ``True`` if the legend is draggable, ``False`` otherwise.")
                        (reparse-symbol indented_block_body) [43679 43826]))                  
                :type "class")
                nil [11509 43826])
            ("_get_legend_handles" function
               (:documentation "
    Return a generator of artists that can be used as handles in
    a legend.

    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [43943 43946])
                    ("legend_handler_map" variable nil (reparse-symbol function_parameters) [43948 43966]))                  )
                nil [43919 44965])
            ("_get_legend_handles_labels" function
               (:documentation "
    Return handles and labels for legend, internal method.

    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [44998 45001])
                    ("legend_handler_map" variable nil (reparse-symbol function_parameters) [45003 45021]))                  )
                nil [44967 45381])
            ("_parse_legend_args" function
               (:documentation "
    Get the handles and labels from the calls to either ``figure.legend``
    or ``axes.legend``.

    The parser is a bit involved because we support::

        legend()
        legend(labels)
        legend(handles, labels)
        legend(labels=labels)
        legend(handles=handles)
        legend(handles=handles, labels=labels)

    The behavior for a mixture of positional and keyword handles and labels
    is undefined and issues a warning.

    Parameters
    ----------
    axs : list of `.Axes`
        If handles are not given explicitly, the artists in these Axes are
        used as handles.
    *args : tuple
        Positional parameters passed to ``legend()``.
    handles
        The value of the keyword argument ``legend(handles=...)``, or *None*
        if that keyword argument was not used.
    labels
        The value of the keyword argument ``legend(labels=...)``, or *None*
        if that keyword argument was not used.
    **kwargs
        All other keyword arguments passed to ``legend()``.

    Returns
    -------
    handles : list of `.Artist`
        The legend handles.
    labels : list of str
        The legend labels.
    extra_args : tuple
        *args* with positional handles and labels removed.
    kwargs : dict
        *kwargs* with keywords handles and labels removed.

    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [45406 45409])
                    ("args" variable nil (reparse-symbol function_parameters) [45411 45416])
                    ("handles" variable nil (reparse-symbol function_parameters) [45418 45425])
                    ("labels" variable nil (reparse-symbol function_parameters) [45432 45438])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45445 45453]))                  )
                nil [45383 48758]))          
      :file "legend.py"
      :pointmax 48758
      :fsize 48757
      :lastmodtime '(25218 25732 348602 622000)
      :unmatched-syntax '((INDENT_BLOCK 38988 . 39109) (NEWLINE 38987 . 38988) (COLON 38986 . 38987) (TRY 38916 . 38919) (AS 38980 . 38982) (NAME 33173 . 33177) (IF 33189 . 33191) (ELSE 33215 . 33219) (NAME 32886 . 32895) (IF 32909 . 32911) (ELSE 32924 . 32928) (FROM 1864 . 1868) (PERIOD 1869 . 1870)))
    (semanticdb-table "semanticdb-table-157fb36999c8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for parsing and generating `fontconfig patterns`_.

.. _fontconfig patterns:
   https://www.freedesktop.org/software/fontconfig/fontconfig-user.html
\"\"\"" code nil nil [1 166])
            ("functools" include nil nil [402 433])
            ("re" include nil nil [434 443])
            ("numpy" include nil nil [444 462])
            ("" code nil nil [485 583])
            ("family_punc" variable nil nil [585 608])
            ("family_unescape" variable nil nil [609 668])
            ("family_escape" variable nil nil [669 724])
            ("value_punc" variable nil nil [726 748])
            ("value_unescape" variable nil nil [749 806])
            ("value_escape" variable nil nil [807 860])
            ("FontconfigPatternParser" type
               (:documentation "
    A simple pyparsing-based parser for `fontconfig patterns`_.

    .. _fontconfig patterns:
       https://www.freedesktop.org/software/fontconfig/fontconfig-user.html
    "
                :members 
                  ( ("_constants" variable nil (reparse-symbol indented_block_body) [1085 2297])
                    ("__init__" function
                       (:suite 
                          ( ("family" variable nil (reparse-symbol indented_block_body) [2332 2448])
                            ("size" variable nil (reparse-symbol indented_block_body) [2458 2550])
                            ("name" variable nil (reparse-symbol indented_block_body) [2560 2632])
                            ("value" variable nil (reparse-symbol indented_block_body) [2642 2754])
                            ("families" variable nil (reparse-symbol indented_block_body) [2764 2917])
                            ("point_sizes" variable nil (reparse-symbol indented_block_body) [2927 3082])
                            ("property" variable nil (reparse-symbol indented_block_body) [3092 3335])
                            ("pattern" variable nil (reparse-symbol indented_block_body) [3345 3607])
                            ("self" variable nil (reparse-symbol indented_block_body) [3617 3639])
                            ("self" variable nil (reparse-symbol indented_block_body) [3648 3684]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2316 2320]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2303 3685])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3700 3704])
                            ("pattern" variable nil (reparse-symbol function_parameters) [3706 3713]))                          
                        :documentation "
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        `.font_manager.FontProperties` object.
        ")
                        (reparse-symbol indented_block_body) [3690 4246])
                    ("_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4263 4267])
                            ("s" variable nil (reparse-symbol function_parameters) [4269 4270])
                            ("loc" variable nil (reparse-symbol function_parameters) [4272 4275])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4277 4283]))                          )
                        (reparse-symbol indented_block_body) [4251 4342])
                    ("_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4357 4361])
                            ("s" variable nil (reparse-symbol function_parameters) [4363 4364])
                            ("loc" variable nil (reparse-symbol function_parameters) [4366 4369])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4371 4377]))                          )
                        (reparse-symbol indented_block_body) [4347 4414])
                    ("_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4429 4433])
                            ("s" variable nil (reparse-symbol function_parameters) [4435 4436])
                            ("loc" variable nil (reparse-symbol function_parameters) [4438 4441])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4443 4449]))                          )
                        (reparse-symbol indented_block_body) [4419 4484])
                    ("_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4500 4504])
                            ("s" variable nil (reparse-symbol function_parameters) [4506 4507])
                            ("loc" variable nil (reparse-symbol function_parameters) [4509 4512])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4514 4520]))                          )
                        (reparse-symbol indented_block_body) [4489 4578])
                    ("_families" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4597 4601])
                            ("s" variable nil (reparse-symbol function_parameters) [4603 4604])
                            ("loc" variable nil (reparse-symbol function_parameters) [4606 4609])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4611 4617]))                          )
                        (reparse-symbol indented_block_body) [4583 4700])
                    ("_point_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4722 4726])
                            ("s" variable nil (reparse-symbol function_parameters) [4728 4729])
                            ("loc" variable nil (reparse-symbol function_parameters) [4731 4734])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4736 4742]))                          )
                        (reparse-symbol indented_block_body) [4705 4823])
                    ("_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4842 4846])
                            ("s" variable nil (reparse-symbol function_parameters) [4848 4849])
                            ("loc" variable nil (reparse-symbol function_parameters) [4851 4854])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4856 4862]))                          )
                        (reparse-symbol indented_block_body) [4828 5208]))                  
                :type "class")
                nil [863 5208])
            ("parse_fontconfig_pattern" variable nil nil [5463 5534])
            ("_escape_val" function
               (:documentation "
    Given a string value or a list of string values, run each value through
    the input escape function to make the values into legal font config
    strings.  The result is returned as a string.
    "
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [5553 5556])
                    ("escape_func" variable nil (reparse-symbol function_parameters) [5558 5569]))                  )
                nil [5537 5960])
            ("generate_fontconfig_pattern" function
               (:documentation "
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [5994 5995]))                  )
                nil [5962 6652]))          
      :file "fontconfig_pattern.py"
      :pointmax 6652
      :fsize 6651
      :lastmodtime '(25218 25732 425269 355000)
      :unmatched-syntax '((INDENT_BLOCK 4047 . 4156) (NEWLINE 4046 . 4047) (COLON 4045 . 4046) (TRY 3955 . 3958) (AS 4041 . 4043)))
    (semanticdb-table "semanticdb-table-157fb34169d8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Nothing here but dictionaries for generating LinearSegmentedColormaps,
and a dictionary of these dictionaries.

Documentation for each is in pyplot.colormaps().  Please update this
with the purpose and type of your colormap if you add data for one here.
\"\"\"" code nil nil [1 262])
            ("functools" include nil nil [264 293])
            ("numpy" include nil nil [295 313])
            ("_binary_data" variable nil nil [315 468])
            ("_autumn_data" variable nil nil [470 643])
            ("_bone_data" variable nil nil [645 1108])
            ("_cool_data" variable nil nil [1110 1275])
            ("_copper_data" variable nil nil [1277 1598])
            ("_flag_red" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1614 1615]))              ) nil [1600 1672])
            ("_flag_green" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1688 1689]))              ) nil [1672 1724])
            ("_flag_blue" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1739 1740]))              ) nil [1724 1797])
            ("_flag_data" variable nil nil [1797 1870])
            ("_prism_red" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1887 1888]))              ) nil [1872 1946])
            ("_prism_green" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1963 1964]))              ) nil [1946 2022])
            ("_prism_blue" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2038 2039]))              ) nil [2022 2083])
            ("_prism_data" variable nil nil [2083 2160])
            ("_ch_helper" function
               (:documentation "Helper function for generating picklable cubehelix colormaps."
                :arguments 
                  ( ("gamma" variable nil (reparse-symbol function_parameters) [2177 2182])
                    ("s" variable nil (reparse-symbol function_parameters) [2184 2185])
                    ("r" variable nil (reparse-symbol function_parameters) [2187 2188])
                    ("h" variable nil (reparse-symbol function_parameters) [2190 2191])
                    ("p0" variable nil (reparse-symbol function_parameters) [2193 2195])
                    ("p1" variable nil (reparse-symbol function_parameters) [2197 2199])
                    ("x" variable nil (reparse-symbol function_parameters) [2201 2202]))                  )
                nil [2162 2624])
            ("cubehelix" function
               (:documentation "
    Return custom data dictionary of (r, g, b) conversion functions, which can
    be used with :func:`register_cmap`, for the cubehelix color scheme.

    Unlike most other color schemes cubehelix was designed by D.A. Green to
    be monotonically increasing in terms of perceived brightness.
    Also, when printed on a black and white postscript printer, the scheme
    results in a greyscale with monotonically increasing brightness.
    This color scheme is named cubehelix because the (r, g, b) values produced
    can be visualised as a squashed helix around the diagonal in the
    (r, g, b) color cube.

    For a unit color cube (i.e. 3D coordinates for (r, g, b) each in the
    range 0 to 1) the color scheme starts at (r, g, b) = (0, 0, 0), i.e. black,
    and finishes at (r, g, b) = (1, 1, 1), i.e. white. For some fraction *x*,
    between 0 and 1, the color is the corresponding grey value at that
    fraction along the black to white diagonal (x, x, x) plus a color
    element. This color element is calculated in a plane of constant
    perceived intensity and controlled by the following parameters.

    Parameters
    ----------
    gamma : float, default: 1
        Gamma factor emphasizing either low intensity values (gamma < 1), or
        high intensity values (gamma > 1).
    s : float, default: 0.5 (purple)
        The starting color.
    r : float, default: -1.5
        The number of r, g, b rotations in color that are made from the start
        to the end of the color scheme.  The default of -1.5 corresponds to ->
        B -> G -> R -> B.
    h : float, default: 1
        The hue, i.e. how saturated the colors are. If this parameter is zero
        then the color scheme is purely a greyscale.
    "
                :arguments 
                  ( ("gamma" variable nil (reparse-symbol function_parameters) [2639 2644])
                    ("s" variable nil (reparse-symbol function_parameters) [2650 2651])
                    ("r" variable nil (reparse-symbol function_parameters) [2657 2658])
                    ("h" variable nil (reparse-symbol function_parameters) [2665 2666]))                  )
                nil [2625 4650])
            ("_cubehelix_data" variable nil nil [4651 4680])
            ("_bwr_data" variable nil nil [4682 4745])
            ("_brg_data" variable nil nil [4746 4809])
            ("_g0" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4847 4848]))              ) nil [4839 4860])
            ("_g1" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4868 4869]))              ) nil [4860 4883])
            ("_g2" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4891 4892]))              ) nil [4883 4904])
            ("_g3" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4912 4913]))              ) nil [4904 4925])
            ("_g4" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4933 4934]))              ) nil [4925 4951])
            ("_g5" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4959 4960]))              ) nil [4951 4977])
            ("_g6" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4985 4986]))              ) nil [4977 5003])
            ("_g7" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5011 5012]))              ) nil [5003 5033])
            ("_g8" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5041 5042]))              ) nil [5033 5072])
            ("_g9" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5080 5081]))              ) nil [5072 5113])
            ("_g10" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5122 5123]))              ) nil [5113 5155])
            ("_g11" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5164 5165]))              ) nil [5155 5191])
            ("_g12" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5200 5201]))              ) nil [5191 5228])
            ("_g13" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5237 5238]))              ) nil [5228 5266])
            ("_g14" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5275 5276]))              ) nil [5266 5312])
            ("_g15" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5321 5322]))              ) nil [5312 5354])
            ("_g16" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5363 5364]))              ) nil [5354 5396])
            ("_g17" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5405 5406]))              ) nil [5396 5446])
            ("_g18" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5455 5456]))              ) nil [5446 5496])
            ("_g19" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5505 5506]))              ) nil [5496 5546])
            ("_g20" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5555 5556]))              ) nil [5546 5596])
            ("_g21" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5605 5606]))              ) nil [5596 5622])
            ("_g22" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5631 5632]))              ) nil [5622 5652])
            ("_g23" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5661 5662]))              ) nil [5652 5682])
            ("_g24" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5691 5692]))              ) nil [5682 5720])
            ("_g25" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5729 5730]))              ) nil [5720 5758])
            ("_g26" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5767 5768]))              ) nil [5758 5794])
            ("_g27" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5803 5804]))              ) nil [5794 5830])
            ("_g28" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5839 5840]))              ) nil [5830 5874])
            ("_g29" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5883 5884]))              ) nil [5874 5918])
            ("_g30" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5927 5928]))              ) nil [5918 5957])
            ("_g31" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5966 5967]))              ) nil [5957 5990])
            ("_g32" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5999 6000]))              ) nil [5990 6201])
            ("_g33" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6210 6211]))              ) nil [6201 6241])
            ("_g34" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6250 6251]))              ) nil [6241 6267])
            ("_g35" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6276 6277]))              ) nil [6267 6299])
            ("_g36" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6308 6309]))              ) nil [6299 6329])
            ("gfunc" variable nil nil [6330 6389])
            ("_gnuplot_data" variable nil nil [6391 6489])
            ("_gnuplot2_data" variable nil nil [6491 6592])
            ("_ocean_data" variable nil nil [6594 6691])
            ("_afmhot_data" variable nil nil [6693 6792])
            ("_rainbow_data" variable nil nil [6794 6894])
            ("_seismic_data" variable nil nil [6896 7022])
            ("_terrain_data" variable nil nil [7024 7241])
            ("_gray_data" variable nil nil [7243 7389])
            ("_hot_data" variable nil nil [7391 7852])
            ("_hsv_data" variable nil nil [7854 9083])
            ("_jet_data" variable nil nil [9085 9693])
            ("_pink_data" variable nil nil [9695 20214])
            ("_spring_data" variable nil nil [20216 20389])
            ("_summer_data" variable nil nil [20392 20569])
            ("_winter_data" variable nil nil [20572 20745])
            ("_nipy_spectral_data" variable nil nil [20747 22372])
            ("_Blues_data" variable nil nil [22761 23420])
            ("_BrBG_data" variable nil nil [23422 24222])
            ("_BuGn_data" variable nil nil [24224 24882])
            ("_BuPu_data" variable nil nil [24884 25542])
            ("_GnBu_data" variable nil nil [25544 26202])
            ("_Greens_data" variable nil nil [26204 26864])
            ("_Greys_data" variable nil nil [26866 27525])
            ("_Oranges_data" variable nil nil [27527 28188])
            ("_OrRd_data" variable nil nil [28190 28848])
            ("_PiYG_data" variable nil nil [28850 29650])
            ("_PRGn_data" variable nil nil [29652 30452])
            ("_PuBu_data" variable nil nil [30454 31112])
            ("_PuBuGn_data" variable nil nil [31114 31774])
            ("_PuOr_data" variable nil nil [31776 32576])
            ("_PuRd_data" variable nil nil [32578 33236])
            ("_Purples_data" variable nil nil [33238 33899])
            ("_RdBu_data" variable nil nil [33901 34701])
            ("_RdGy_data" variable nil nil [34703 35503])
            ("_RdPu_data" variable nil nil [35505 36163])
            ("_RdYlBu_data" variable nil nil [36165 36956])
            ("_RdYlGn_data" variable nil nil [36958 37749])
            ("_Reds_data" variable nil nil [37751 38400])
            ("_Spectral_data" variable nil nil [38402 39195])
            ("_YlGn_data" variable nil nil [39197 39846])
            ("_YlGnBu_data" variable nil nil [39848 40499])
            ("_YlOrBr_data" variable nil nil [40501 41152])
            ("_YlOrRd_data" variable nil nil [41154 41805])
            ("_Accent_data" variable nil nil [41909 42483])
            ("_Dark2_data" variable nil nil [42485 43058])
            ("_Paired_data" variable nil nil [43060 43910])
            ("_Pastel1_data" variable nil nil [43912 44556])
            ("_Pastel2_data" variable nil nil [44558 45133])
            ("_Set1_data" variable nil nil [45135 45760])
            ("_Set2_data" variable nil nil [45762 46334])
            ("_Set3_data" variable nil nil [46336 47184])
            ("_gist_earth_data" variable nil nil [47698 48806])
            ("_gist_gray_data" variable nil nil [48808 48907])
            ("_gist_heat_red" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [48928 48929]))              ) nil [48909 48947])
            ("_gist_heat_green" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [48968 48969]))              ) nil [48947 48989])
            ("_gist_heat_blue" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [49009 49010]))              ) nil [48989 49030])
            ("_gist_heat_data" variable nil nil [49030 49128])
            ("_gist_ncar_data" variable nil nil [49130 50396])
            ("_gist_rainbow_data" variable nil nil [50398 50717])
            ("_gist_stern_data" variable nil nil [50719 51090])
            ("_gist_yarg" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [51107 51108]))              ) nil [51092 51124])
            ("_gist_yarg_data" variable nil nil [51124 51202])
            ("_coolwarm_data" variable nil nil [51392 55783])
            ("_CMRmap_data" variable nil nil [56003 57301])
            ("_wistia_data" variable nil nil [57720 58441])
            ("_tab10_data" variable nil nil [58543 59360])
            ("_tab20_data" variable nil nil [59362 60979])
            ("_tab20b_data" variable nil nil [60981 62579])
            ("_tab20c_data" variable nil nil [62581 64199])
            ("datad" variable nil nil [64202 66439]))          
      :file "_cm.py"
      :pointmax 66440
      :fsize 66439
      :lastmodtime '(25218 25732 408602 674000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-157fb2f546d0"
      :major-mode python-mode
      :tags 
        '( ("ListedColormap" include nil nil [14 35])
            ("_magma_data" variable nil nil [37 12068])
            ("_inferno_data" variable nil nil [12070 24613])
            ("_plasma_data" variable nil nil [24615 36902])
            ("_viridis_data" variable nil nil [36904 49447])
            ("_cividis_data" variable nil nil [49449 61992])
            ("_twilight_data" variable nil nil [61994 97650])
            ("_twilight_shifted_data" variable nil nil [97652 97786])
            ("_twilight_shifted_data" code nil nil [97787 97819])
            ("_turbo_data" variable nil nil [97820 109083])
            ("cmaps" variable nil nil [109086 109462]))          
      :file "_cm_listed.py"
      :pointmax 109463
      :fsize 109462
      :lastmodtime '(25218 25732 298602 579000)
      :unmatched-syntax '((PERIOD 6 . 7)))
    (semanticdb-table "semanticdb-table-157fb4918b08"
      :major-mode python-mode
      :tags 
        '( ("inspect" include nil nil [1 15])
            ("Substitution" type
               (:documentation "
    A decorator that performs %-substitution on an object's docstring.

    This decorator should be robust even if ``obj.__doc__`` is None (for
    example, if -OO was passed to the interpreter).

    Usage: construct a docstring.Substitution with a sequence or dictionary
    suitable for performing substitution; then decorate a suitable function
    with the constructed object, e.g.::

        sub_author_name = Substitution(author='Jason')

        @sub_author_name
        def some_function(x):
            \"%(author)s wrote this function\"

        # note that some_function.__doc__ is now \"Jason wrote this function\"

    One can also use positional arguments::

        sub_first_last_names = Substitution('Edgar Allen', 'Poe')

        @sub_first_last_names
        def some_function(x):
            \"%s %s wrote the Raven\"
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [937 1032])
                            ("self" code nil (reparse-symbol indented_block_body) [1040 1077]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [905 909])
                            ("args" variable nil (reparse-symbol function_parameters) [911 916])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [918 926]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [892 1078])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1096 1100])
                            ("func" variable nil (reparse-symbol function_parameters) [1102 1106]))                          )
                        (reparse-symbol indented_block_body) [1083 1226])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1242 1246])
                            ("args" variable nil (reparse-symbol function_parameters) [1248 1253])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1255 1263]))                          
                        :documentation "
        Update ``self.params`` (which must be a dict) with the supplied args.
        ")
                        (reparse-symbol indented_block_body) [1231 1412]))                  
                :type "class")
                nil [18 1412])
            ("_recursive_subclasses" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1440 1443]))              ) nil [1414 1549])
            ("_ArtistKwdocLoader" type
               (:superclasses ("dict")
                :members 
                  ( ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1603 1607])
                            ("key" variable nil (reparse-symbol function_parameters) [1609 1612]))                          )
                        (reparse-symbol indented_block_body) [1587 2016]))                  
                :type "class")
                nil [1551 2016])
            ("_ArtistPropertiesSubstitution" type
               (:documentation "
    A `.Substitution` with two additional features:

    - Substitutions of the form ``%(classname:kwdoc)s`` (ending with the
      literal \":kwdoc\" suffix) trigger lookup of an Artist subclass with the
      given *classname*, and are substituted with the `.kwdoc` of that class.
    - Decorating a class triggers substitution both on the class docstring and
      on the class' ``__init__`` docstring (which is a commonly required
      pattern for Artist subclasses).
    "
                :superclasses ("Substitution")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2589 2623]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2574 2578]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2561 2624])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2642 2646])
                            ("obj" variable nil (reparse-symbol function_parameters) [2648 2651]))                          )
                        (reparse-symbol indented_block_body) [2629 2804]))                  
                :type "class")
                nil [2018 2804])
            ("copy" function
               (:documentation "Copy a docstring from another source function (if present)."
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [2815 2821]))                  )
                nil [2806 3031])
            ("dedent_interpd" variable nil nil [3133 3191]))          
      :file "docstring.py"
      :pointmax 3192
      :fsize 3191
      :lastmodtime '(25218 25732 428602 691000)
      :unmatched-syntax '((INDENT_BLOCK 1929 . 1968) (NEWLINE 1928 . 1929) (COLON 1927 . 1928) (TRY 1782 . 1785) (AS 1923 . 1925)))
    (semanticdb-table "semanticdb-table-157fb42474f0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tick locating and formatting
============================

This module contains classes for configuring tick locating and formatting.
Generic tick locators and formatters are provided, as well as domain specific
custom ones.

Although the locators know nothing about major or minor ticks, they are used
by the Axis class to support major and minor tick locating and formatting.

Tick locating
-------------

The Locator class is the base class for all tick locators. The locators
handle autoscaling of the view limits based on the data limits, and the
choosing of tick locations. A useful semi-automatic tick locator is
`MultipleLocator`. It is initialized with a base, e.g., 10, and it picks
axis limits and ticks that are multiples of that base.

The Locator subclasses defined here are:

======================= =======================================================
`AutoLocator`           `MaxNLocator` with simple defaults. This is the default
                        tick locator for most plotting.
`MaxNLocator`           Finds up to a max number of intervals with ticks at
                        nice locations.
`LinearLocator`         Space ticks evenly from min to max.
`LogLocator`            Space ticks logarithmically from min to max.
`MultipleLocator`       Ticks and range are a multiple of base; either integer
                        or float.
`FixedLocator`          Tick locations are fixed.
`IndexLocator`          Locator for index plots (e.g., where
                        ``x = range(len(y))``).
`NullLocator`           No ticks.
`SymmetricalLogLocator` Locator for use with with the symlog norm; works like
                        `LogLocator` for the part outside of the threshold and
                        adds 0 if inside the limits.
`LogitLocator`          Locator for logit scaling.
`AutoMinorLocator`      Locator for minor ticks when the axis is linear and the
                        major ticks are uniformly spaced. Subdivides the major
                        tick interval into a specified number of minor
                        intervals, defaulting to 4 or 5 depending on the major
                        interval.
======================= =======================================================

There are a number of locators specialized for date locations - see
the :mod:`.dates` module.

You can define your own locator by deriving from Locator. You must
override the ``__call__`` method, which returns a sequence of locations,
and you will probably want to override the autoscale method to set the
view limits from the data limits.

If you want to override the default locator, use one of the above or a custom
locator and pass it to the x or y axis instance. The relevant methods are::

  ax.xaxis.set_major_locator(xmajor_locator)
  ax.xaxis.set_minor_locator(xminor_locator)
  ax.yaxis.set_major_locator(ymajor_locator)
  ax.yaxis.set_minor_locator(yminor_locator)

The default minor locator is `NullLocator`, i.e., no minor ticks on by default.

.. note::
    `Locator` instances should not be used with more than one
    `~matplotlib.axis.Axis` or `~matplotlib.axes.Axes`. So instead of::

        locator = MultipleLocator(5)
        ax.xaxis.set_major_locator(locator)
        ax2.xaxis.set_major_locator(locator)

    do the following instead::

        ax.xaxis.set_major_locator(MultipleLocator(5))
        ax2.xaxis.set_major_locator(MultipleLocator(5))

Tick formatting
---------------

Tick formatting is controlled by classes derived from Formatter. The formatter
operates on a single tick value and returns a string to the axis.

========================= =====================================================
`NullFormatter`           No labels on the ticks.
`FixedFormatter`          Set the strings manually for the labels.
`FuncFormatter`           User defined function sets the labels.
`StrMethodFormatter`      Use string `format` method.
`FormatStrFormatter`      Use an old-style sprintf format string.
`ScalarFormatter`         Default formatter for scalars: autopick the format
                          string.
`LogFormatter`            Formatter for log axes.
`LogFormatterExponent`    Format values for log axis using
                          ``exponent = log_base(value)``.
`LogFormatterMathtext`    Format values for log axis using
                          ``exponent = log_base(value)`` using Math text.
`LogFormatterSciNotation` Format values for log axis using scientific notation.
`LogitFormatter`          Probability formatter.
`EngFormatter`            Format labels in engineering notation.
`PercentFormatter`        Format labels as a percentage.
========================= =====================================================

You can derive your own formatter from the Formatter base class by
simply overriding the ``__call__`` method. The formatter class has
access to the axis view and data limits.

To control the major and minor tick label formats, use one of the
following methods::

  ax.xaxis.set_major_formatter(xmajor_formatter)
  ax.xaxis.set_minor_formatter(xminor_formatter)
  ax.yaxis.set_major_formatter(ymajor_formatter)
  ax.yaxis.set_minor_formatter(yminor_formatter)

In addition to a `.Formatter` instance, `~.Axis.set_major_formatter` and
`~.Axis.set_minor_formatter` also accept a ``str`` or function.  ``str`` input
will be internally replaced with an autogenerated `.StrMethodFormatter` with
the input ``str``. For function input, a `.FuncFormatter` with the input
function will be generated and used.

See :doc:`/gallery/ticks/major_minor_demo` for an example of setting major
and minor ticks. See the :mod:`matplotlib.dates` module for more information
and examples of using date locators and formatters.
\"\"\"" code nil nil [1 5733])
            ("itertools" include nil nil [5735 5751])
            ("logging" include nil nil [5752 5766])
            ("locale" include nil nil [5767 5780])
            ("math" include nil nil [5781 5792])
            ("numbers" include nil nil [5793 5821])
            ("numpy" include nil nil [5823 5841])
            ("matplotlib" include nil nil [5843 5867])
            ("matplotlib" include nil nil [5868 5902])
            ("matplotlib" include nil nil [5903 5951])
            ("_log" variable nil nil [5953 5987])
            ("__all__" variable nil nil [5989 6584])
            ("_DummyAxis" type
               (:members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [6609 6627])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6671 6709])
                            ("self" variable nil (reparse-symbol indented_block_body) [6718 6756])
                            ("self" variable nil (reparse-symbol indented_block_body) [6765 6786]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6646 6650])
                            ("minpos" variable nil (reparse-symbol function_parameters) [6652 6658]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6633 6787])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6814 6818]))                          )
                        (reparse-symbol indented_block_body) [6792 6859])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6886 6890])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6892 6896])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6898 6902]))                          )
                        (reparse-symbol indented_block_body) [6864 6949])
                    ("get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6969 6973]))                          )
                        (reparse-symbol indented_block_body) [6954 7004])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7031 7035]))                          )
                        (reparse-symbol indented_block_body) [7009 7076])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7103 7107])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7109 7113])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7115 7119]))                          )
                        (reparse-symbol indented_block_body) [7081 7166])
                    ("get_tick_space" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7190 7194]))                          )
                        (reparse-symbol indented_block_body) [7171 7271]))                  
                :type "class")
                nil [6587 7271])
            ("TickHelper" type
               (:members 
                  ( ("axis" variable nil (reparse-symbol indented_block_body) [7295 7306])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7325 7329])
                            ("axis" variable nil (reparse-symbol function_parameters) [7331 7335]))                          )
                        (reparse-symbol indented_block_body) [7312 7363])
                    ("create_dummy_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7390 7394])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7396 7404]))                          )
                        (reparse-symbol indented_block_body) [7368 7482])
                    ("" code nil (reparse-symbol indented_block_body) [7503 7551])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7578 7582])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7584 7588])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7590 7594]))                          )
                        (reparse-symbol indented_block_body) [7556 7645])
                    ("" code nil (reparse-symbol indented_block_body) [7666 7714])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7741 7745])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7747 7751])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7753 7757]))                          )
                        (reparse-symbol indented_block_body) [7719 7808])
                    ("" code nil (reparse-symbol indented_block_body) [7829 7924])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7944 7948])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7950 7954])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7956 7960]))                          )
                        (reparse-symbol indented_block_body) [7929 8049]))                  
                :type "class")
                nil [7273 8049])
            ("Formatter" type
               (:documentation "
    Create a string based on a tick value and location.
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("locs" variable nil (reparse-symbol indented_block_body) [8237 8246])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8265 8269])
                            ("x" variable nil (reparse-symbol function_parameters) [8271 8272])
                            ("pos" variable nil (reparse-symbol function_parameters) [8274 8277]))                          
                        :documentation "
        Return the format for tick value *x* at position pos.
        ``pos=None`` indicates an unspecified location.
        ")
                        (reparse-symbol indented_block_body) [8252 8486])
                    ("format_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8508 8512])
                            ("values" variable nil (reparse-symbol function_parameters) [8514 8520]))                          
                        :documentation "Return the tick labels for all the ticks at once.")
                        (reparse-symbol indented_block_body) [8491 8683])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8704 8708])
                            ("value" variable nil (reparse-symbol function_parameters) [8710 8715]))                          
                        :documentation "
        Return the full string representation of the value with the
        position unspecified.
        ")
                        (reparse-symbol indented_block_body) [8688 8876])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8903 8907])
                            ("value" variable nil (reparse-symbol function_parameters) [8909 8914]))                          
                        :documentation "
        Return a short string version of the tick value.

        Defaults to the position-independent long value.
        ")
                        (reparse-symbol indented_block_body) [8881 9095])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9115 9119]))                          )
                        (reparse-symbol indented_block_body) [9100 9140])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9158 9162])
                            ("locs" variable nil (reparse-symbol function_parameters) [9164 9168]))                          
                        :documentation "
        Set the locations of the ticks.

        This method is called before computing the tick labels because some
        formatters need to know all tick locations to do so.
        ")
                        (reparse-symbol indented_block_body) [9145 9398])
                    ("fix_minus" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [9435 9436]))                          
                        :documentation "
        Some classes may want to replace a hyphen for minus with the proper
        unicode symbol (U+2212) for typographical correctness.  This is a
        helper method to perform such a replacement when it is enabled via
        :rc:`axes.unicode_minus`.
        ")
                        (reparse-symbol indented_block_body) [9403 9849])
                    ("_set_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9871 9875])
                            ("locator" variable nil (reparse-symbol function_parameters) [9877 9884]))                          
                        :documentation "Subclasses may want to override this to set a locator.")
                        (reparse-symbol indented_block_body) [9854 9969]))                  
                :type "class")
                nil [8051 9969])
            ("NullFormatter" type
               (:documentation "Always return the empty string."
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10063 10067])
                            ("x" variable nil (reparse-symbol function_parameters) [10069 10070])
                            ("pos" variable nil (reparse-symbol function_parameters) [10072 10075]))                          )
                        (reparse-symbol indented_block_body) [10050 10131]))                  
                :type "class")
                nil [9971 10131])
            ("FixedFormatter" type
               (:documentation "
    Return fixed strings for tick labels based only on position, not value.

    .. note::
        `.FixedFormatter` should only be used together with `.FixedLocator`.
        Otherwise, the labels may end up in unexpected positions.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Set the sequence *seq* of strings that will be used for labels.\"\"\"" code nil (reparse-symbol indented_block_body) [10454 10523])
                            ("self" variable nil (reparse-symbol indented_block_body) [10532 10546])
                            ("self" variable nil (reparse-symbol indented_block_body) [10555 10578]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10434 10438])
                            ("seq" variable nil (reparse-symbol function_parameters) [10440 10443]))                          
                        :documentation "Set the sequence *seq* of strings that will be used for labels."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10421 10579])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10597 10601])
                            ("x" variable nil (reparse-symbol function_parameters) [10603 10604])
                            ("pos" variable nil (reparse-symbol function_parameters) [10606 10609]))                          
                        :documentation "
        Return the label that matches the position, regardless of the value.

        For positions ``pos < len(seq)``, return ``seq[i]`` regardless of
        *x*. Otherwise return empty string. ``seq`` is the sequence of
        strings that this object was initialized with.
        ")
                        (reparse-symbol indented_block_body) [10584 11036])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11056 11060]))                          )
                        (reparse-symbol indented_block_body) [11041 11097])
                    ("set_offset_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11124 11128])
                            ("ofs" variable nil (reparse-symbol function_parameters) [11130 11133]))                          )
                        (reparse-symbol indented_block_body) [11102 11169]))                  
                :type "class")
                nil [10133 11169])
            ("FuncFormatter" type
               (:documentation "
    Use a user-defined function for formatting.

    The function should take in two inputs (a tick value ``x`` and a
    position ``pos``), and return a string containing the corresponding
    tick label.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11464 11480])
                            ("self" variable nil (reparse-symbol indented_block_body) [11489 11512]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11443 11447])
                            ("func" variable nil (reparse-symbol function_parameters) [11449 11453]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11430 11513])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11531 11535])
                            ("x" variable nil (reparse-symbol function_parameters) [11537 11538])
                            ("pos" variable nil (reparse-symbol function_parameters) [11540 11543]))                          
                        :documentation "
        Return the value of the user defined function.

        *x* and *pos* are passed through as-is.
        ")
                        (reparse-symbol indented_block_body) [11518 11712])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11732 11736]))                          )
                        (reparse-symbol indented_block_body) [11717 11773])
                    ("set_offset_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11800 11804])
                            ("ofs" variable nil (reparse-symbol function_parameters) [11806 11809]))                          )
                        (reparse-symbol indented_block_body) [11778 11845]))                  
                :type "class")
                nil [11171 11845])
            ("FormatStrFormatter" type
               (:documentation "
    Use an old-style ('%' operator) format string to format the tick.

    The format string should have a single variable format (%) in it.
    It will be applied to the value (not the position) of the tick.

    Negative numeric values will use a dash not a unicode minus,
    use mathtext to get a unicode minus by wrappping the format specifier
    with $ (e.g. \"$%g$\").
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12312 12326]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12292 12296])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12298 12301]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12279 12327])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12345 12349])
                            ("x" variable nil (reparse-symbol function_parameters) [12351 12352])
                            ("pos" variable nil (reparse-symbol function_parameters) [12354 12357]))                          
                        :documentation "
        Return the formatted label string.

        Only the value *x* is formatted. The position is ignored.
        ")
                        (reparse-symbol indented_block_body) [12332 12527]))                  
                :type "class")
                nil [11847 12527])
            ("StrMethodFormatter" type
               (:documentation "
    Use a new-style format string (as used by `str.format`) to format the tick.

    The field used for the tick value must be labeled *x* and the field used
    for the tick position must be labeled *pos*.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12826 12840]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12806 12810])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12812 12815]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12793 12841])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12859 12863])
                            ("x" variable nil (reparse-symbol function_parameters) [12865 12866])
                            ("pos" variable nil (reparse-symbol function_parameters) [12868 12871]))                          
                        :documentation "
        Return the formatted label string.

        *x* and *pos* are passed to `str.format` as keyword arguments
        with those exact names.
        ")
                        (reparse-symbol indented_block_body) [12846 13094]))                  
                :type "class")
                nil [12529 13094])
            ("ScalarFormatter" type
               (:documentation "
    Format tick values as a number.

    Parameters
    ----------
    useOffset : bool or float, default: :rc:`axes.formatter.useoffset`
        Whether to use offset notation. See `.set_useOffset`.
    useMathText : bool, default: :rc:`axes.formatter.use_mathtext`
        Whether to use fancy math formatting. See `.set_useMathText`.
    useLocale : bool, default: :rc:`axes.formatter.use_locale`.
        Whether to use locale settings for decimal sign and positive sign.
        See `.set_useLocale`.

    Notes
    -----
    In addition to the parameters above, the formatting of scientific vs.
    floating point representation can be configured via `.set_scientific`
    and `.set_powerlimits`).

    **Offset notation and scientific notation**

    Offset notation and scientific notation look quite similar at first sight.
    Both split some information from the formatted tick values and display it
    at the end of the axis.

    - The scientific notation splits up the order of magnitude, i.e. a
      multiplicative scaling factor, e.g. ``1e6``.

    - The offset notation separates an additive constant, e.g. ``+1e6``. The
      offset notation label is always prefixed with a ``+`` or ``-`` sign
      and is thus distinguishable from the order of magnitude label.

    The following plot with x limits ``1_000_000`` to ``1_000_010`` illustrates
    the different formatting. Note the labels at the right edge of the x axis.

    .. plot::

        lim = (1_000_000, 1_000_010)

        fig, (ax1, ax2, ax3) = plt.subplots(3, 1, gridspec_kw={'hspace': 2})
        ax1.set(title='offset_notation', xlim=lim)
        ax2.set(title='scientific notation', xlim=lim)
        ax2.xaxis.get_major_formatter().set_useOffset(False)
        ax3.set(title='floating point notation', xlim=lim)
        ax3.xaxis.get_major_formatter().set_useOffset(False)
        ax3.xaxis.get_major_formatter().set_scientific(False)

    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15153 15240])
                            ("self" variable nil (reparse-symbol indented_block_body) [15248 15334])
                            ("self" code nil (reparse-symbol indented_block_body) [15343 15372])
                            ("self" variable nil (reparse-symbol indented_block_body) [15381 15423])
                            ("if" code nil (reparse-symbol indented_block_body) [15432 16251])
                            ("self" code nil (reparse-symbol indented_block_body) [16259 16292])
                            ("self" variable nil (reparse-symbol indented_block_body) [16301 16326])
                            ("self" variable nil (reparse-symbol indented_block_body) [16335 16351])
                            ("self" variable nil (reparse-symbol indented_block_body) [16360 16383])
                            ("self" variable nil (reparse-symbol indented_block_body) [16392 16449])
                            ("if" code nil (reparse-symbol indented_block_body) [16458 16546])
                            ("self" variable nil (reparse-symbol indented_block_body) [16554 16581]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15088 15092])
                            ("useOffset" variable nil (reparse-symbol function_parameters) [15094 15103])
                            ("useMathText" variable nil (reparse-symbol function_parameters) [15110 15121])
                            ("useLocale" variable nil (reparse-symbol function_parameters) [15128 15137]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15075 16582])
                    ("get_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16605 16609]))                          
                        :documentation "
        Return whether automatic mode for offset notation is active.

        This returns True if ``set_useOffset(True)``; it returns False if an
        explicit offset was set, e.g. ``set_useOffset(1000)``.

        See Also
        --------
        ScalarFormatter.set_useOffset
        ")
                        (reparse-symbol indented_block_body) [16587 16950])
                    ("set_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16973 16977])
                            ("val" variable nil (reparse-symbol function_parameters) [16979 16982]))                          
                        :documentation "
        Set whether to use offset notation.

        When formatting a set numbers whose value is large compared to their
        range, the formatter can separate an additive constant. This can
        shorten the formatted numbers so that they are less likely to overlap
        when drawn on an axis.

        Parameters
        ----------
        val : bool or float
            - If False, do not use offset notation.
            - If True (=automatic mode), use offset notation if it can make
              the residual numbers significantly shorter. The exact behavior
              is controlled by :rc:`axes.formatter.offset_threshold`.
            - If a number, force an offset of the given value.

        Examples
        --------
        With active offset notation, the values

        ``100_000, 100_002, 100_004, 100_006, 100_008``

        will be formatted as ``0, 2, 4, 6, 8`` plus an offset ``+1e5``, which
        is written to the edge of the axis.
        ")
                        (reparse-symbol indented_block_body) [16955 18156])
                    ("useOffset" variable nil (reparse-symbol indented_block_body) [18161 18221])
                    ("get_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18245 18249]))                          
                        :documentation "
        Return whether locale settings are used for formatting.

        See Also
        --------
        ScalarFormatter.set_useLocale
        ")
                        (reparse-symbol indented_block_body) [18227 18444])
                    ("set_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18467 18471])
                            ("val" variable nil (reparse-symbol function_parameters) [18473 18476]))                          
                        :documentation "
        Set whether to use locale settings for decimal sign and positive sign.

        Parameters
        ----------
        val : bool or None
            *None* resets to :rc:`axes.formatter.use_locale`.
        ")
                        (reparse-symbol indented_block_body) [18449 18854])
                    ("useLocale" variable nil (reparse-symbol indented_block_body) [18859 18919])
                    ("_format_maybe_minus_and_locale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18960 18964])
                            ("fmt" variable nil (reparse-symbol function_parameters) [18966 18969])
                            ("arg" variable nil (reparse-symbol function_parameters) [18971 18974]))                          
                        :documentation "
        Format *arg* with *fmt*, applying unicode minus and locale if desired.
        ")
                        (reparse-symbol indented_block_body) [18925 19215])
                    ("get_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19240 19244]))                          
                        :documentation "
        Return whether to use fancy math formatting.

        See Also
        --------
        ScalarFormatter.set_useMathText
        ")
                        (reparse-symbol indented_block_body) [19220 19432])
                    ("set_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19457 19461])
                            ("val" variable nil (reparse-symbol function_parameters) [19463 19466]))                          )
                        (reparse-symbol indented_block_body) [19437 19905])
                    ("useMathText" variable nil (reparse-symbol indented_block_body) [19910 19976])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19995 19999])
                            ("x" variable nil (reparse-symbol function_parameters) [20001 20002])
                            ("pos" variable nil (reparse-symbol function_parameters) [20004 20007]))                          
                        :documentation "
        Return the format for tick value *x* at position *pos*.
        ")
                        (reparse-symbol indented_block_body) [19982 20365])
                    ("set_scientific" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20389 20393])
                            ("b" variable nil (reparse-symbol function_parameters) [20395 20396]))                          
                        :documentation "
        Turn scientific notation on or off.

        See Also
        --------
        ScalarFormatter.set_powerlimits
        ")
                        (reparse-symbol indented_block_body) [20370 20577])
                    ("set_powerlimits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20602 20606])
                            ("lims" variable nil (reparse-symbol function_parameters) [20608 20612]))                          )
                        (reparse-symbol indented_block_body) [20582 21802])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21829 21833])
                            ("value" variable nil (reparse-symbol function_parameters) [21835 21840]))                          )
                        (reparse-symbol indented_block_body) [21807 23179])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23200 23204])
                            ("value" variable nil (reparse-symbol function_parameters) [23206 23211]))                          )
                        (reparse-symbol indented_block_body) [23184 23831])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23851 23855]))                          
                        :documentation "
        Return scientific notation, plus offset.
        ")
                        (reparse-symbol indented_block_body) [23836 24857])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24875 24879])
                            ("locs" variable nil (reparse-symbol function_parameters) [24881 24885]))                          )
                        (reparse-symbol indented_block_body) [24862 25119])
                    ("_compute_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25144 25148]))                          )
                        (reparse-symbol indented_block_body) [25124 27034])
                    ("_set_order_of_magnitude" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27067 27071]))                          )
                        (reparse-symbol indented_block_body) [27039 28348])
                    ("_set_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28369 28373]))                          )
                        (reparse-symbol indented_block_body) [28353 29686]))                  
                :type "class")
                nil [13096 29686])
            ("LogFormatter" type
               (:documentation "
    Base class for formatting ticks on a log or symlog scale.

    It may be instantiated directly, or subclassed.

    Parameters
    ----------
    base : float, default: 10.
        Base of the logarithm used in all calculations.

    labelOnlyBase : bool, default: False
        If True, label ticks only at integer powers of base.
        This is normally True for major ticks and False for
        minor ticks.

    minor_thresholds : (subset, all), default: (1, 0.4)
        If labelOnlyBase is False, these two numbers control
        the labeling of ticks that are not at integer powers of
        base; normally these are the minor ticks. The controlling
        parameter is the log of the axis data range.  In the typical
        case where base is 10 it is the number of decades spanned
        by the axis, so we can call it 'numdec'. If ``numdec <= all``,
        all minor ticks will be labeled.  If ``all < numdec <= subset``,
        then only a subset of minor ticks will be labeled, so as to
        avoid crowding. If ``numdec > subset`` then no minor ticks will
        be labeled.

    linthresh : None or float, default: None
        If a symmetric log scale is in use, its ``linthresh``
        parameter must be supplied here.

    Notes
    -----
    The `set_locs` method must be called to enable the subsetting
    logic controlled by the ``minor_thresholds`` parameter.

    In some cases such as the colorbar, there is no distinction between
    major and minor ticks; the tick locations might be set manually,
    or by a locator that puts ticks at integer powers of base and
    at intermediate locations.  For this situation, disable the
    minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,
    so that all ticks will be labeled.

    To disable labeling of minor ticks when 'labelOnlyBase' is False,
    use ``minor_thresholds=(0, 0)``.  This is the default for the
    \"classic\" style.

    Examples
    --------
    To label a subset of minor ticks when the view limits span up
    to 2 decades, and all of the ticks when zoomed in to 0.5 decades
    or less, use ``minor_thresholds=(2, 0.5)``.

    To label all minor ticks when the view limits span up to 1.5
    decades, use ``minor_thresholds=(1.5, 1.5)``.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32144 32168])
                            ("self" variable nil (reparse-symbol indented_block_body) [32177 32211])
                            ("if" code nil (reparse-symbol indented_block_body) [32220 32408])
                            ("self" variable nil (reparse-symbol indented_block_body) [32416 32456])
                            ("self" variable nil (reparse-symbol indented_block_body) [32465 32487])
                            ("self" variable nil (reparse-symbol indented_block_body) [32496 32523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32023 32027])
                            ("base" variable nil (reparse-symbol function_parameters) [32029 32033])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [32040 32053])
                            ("minor_thresholds" variable nil (reparse-symbol function_parameters) [32078 32094])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [32118 32127]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32010 32524])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32538 32542])
                            ("base" variable nil (reparse-symbol function_parameters) [32544 32548]))                          
                        :documentation "
        Change the *base* for labeling.

        .. warning::
           Should always match the base used for :class:`LogLocator`
        ")
                        (reparse-symbol indented_block_body) [32529 32732])
                    ("label_minor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32753 32757])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [32759 32772]))                          
                        :documentation "
        Switch minor tick labeling on or off.

        Parameters
        ----------
        labelOnlyBase : bool
            If True, label ticks only at integer powers of base.
        ")
                        (reparse-symbol indented_block_body) [32737 33021])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33039 33043])
                            ("locs" variable nil (reparse-symbol function_parameters) [33045 33049]))                          
                        :documentation "
        Use axis view limits to control which ticks are labeled.

        The *locs* parameter is ignored in the present algorithm.
        ")
                        (reparse-symbol indented_block_body) [33026 35200])
                    ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35224 35228])
                            ("x" variable nil (reparse-symbol function_parameters) [35230 35231])
                            ("vmin" variable nil (reparse-symbol function_parameters) [35233 35237])
                            ("vmax" variable nil (reparse-symbol function_parameters) [35239 35243]))                          )
                        (reparse-symbol indented_block_body) [35205 35424])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35442 35446])
                            ("x" variable nil (reparse-symbol function_parameters) [35448 35449])
                            ("pos" variable nil (reparse-symbol function_parameters) [35451 35454]))                          )
                        (reparse-symbol indented_block_body) [35429 36166])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36187 36191])
                            ("value" variable nil (reparse-symbol function_parameters) [36193 36198]))                          )
                        (reparse-symbol indented_block_body) [36171 36318])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36345 36349])
                            ("value" variable nil (reparse-symbol function_parameters) [36351 36356]))                          )
                        (reparse-symbol indented_block_body) [36323 36420])
                    ("_pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36441 36445])
                            ("x" variable nil (reparse-symbol function_parameters) [36447 36448])
                            ("d" variable nil (reparse-symbol function_parameters) [36450 36451]))                          )
                        (reparse-symbol indented_block_body) [36425 37139]))                  
                :type "class")
                nil [29688 37139])
            ("LogFormatterExponent" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37291 37295])
                            ("x" variable nil (reparse-symbol function_parameters) [37297 37298])
                            ("vmin" variable nil (reparse-symbol function_parameters) [37300 37304])
                            ("vmax" variable nil (reparse-symbol function_parameters) [37306 37310]))                          )
                        (reparse-symbol indented_block_body) [37272 37607]))                  
                :type "class")
                nil [37141 37607])
            ("LogFormatterMathtext" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37764 37768])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [37770 37781])
                            ("base" variable nil (reparse-symbol function_parameters) [37783 37787])
                            ("fx" variable nil (reparse-symbol function_parameters) [37789 37791])
                            ("usetex" variable nil (reparse-symbol function_parameters) [37793 37799]))                          
                        :documentation "Return string for non-decade locations.")
                        (reparse-symbol indented_block_body) [37741 37928])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37946 37950])
                            ("x" variable nil (reparse-symbol function_parameters) [37952 37953])
                            ("pos" variable nil (reparse-symbol function_parameters) [37955 37958]))                          )
                        (reparse-symbol indented_block_body) [37933 39149]))                  
                :type "class")
                nil [37609 39149])
            ("LogFormatterSciNotation" type
               (:documentation "
    Format values following scientific notation in a logarithmic axis.
    "
                :superclasses ("LogFormatterMathtext")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39319 39323])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [39325 39336])
                            ("base" variable nil (reparse-symbol function_parameters) [39338 39342])
                            ("fx" variable nil (reparse-symbol function_parameters) [39344 39346])
                            ("usetex" variable nil (reparse-symbol function_parameters) [39348 39354]))                          
                        :documentation "Return string for non-decade locations.")
                        (reparse-symbol indented_block_body) [39296 39679]))                  
                :type "class")
                nil [39151 39679])
            ("LogitFormatter" type
               (:documentation "
    Probability formatter (using Math text).
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"
        Parameters
        ----------
        use_overline : bool, default: False
            If x > 1/2, with x = 1-v, indicate if x should be displayed as
            $\\overline{v}$. The default is to display $1-v$.

        one_half : str, default: r\"\\frac{1}{2}\"
            The string used to represent 1/2.

        minor : bool, default: False
            Indicate if the formatter is formatting minor ticks or not.
            Basically minor ticks are not labelled, except when only few ticks
            are provided, ticks with most space with neighbor ticks are
            labelled. See other parameters to change the default behavior.

        minor_threshold : int, default: 25
            Maximum number of locs for labelling some minor ticks. This
            parameter have no effect if minor is False.

        minor_number : int, default: 6
            Number of ticks which are labelled when the number of ticks is
            below the threshold.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39968 40953])
                            ("self" variable nil (reparse-symbol indented_block_body) [40962 40995])
                            ("self" variable nil (reparse-symbol indented_block_body) [41004 41029])
                            ("self" variable nil (reparse-symbol indented_block_body) [41038 41057])
                            ("self" variable nil (reparse-symbol indented_block_body) [41066 41088])
                            ("self" variable nil (reparse-symbol indented_block_body) [41097 41136])
                            ("self" variable nil (reparse-symbol indented_block_body) [41145 41178]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39802 39806])
                            ("use_overline" variable nil (reparse-symbol function_parameters) [39827 39839])
                            ("one_half" variable nil (reparse-symbol function_parameters) [39855 39863])
                            ("minor" variable nil (reparse-symbol function_parameters) [39888 39893])
                            ("minor_threshold" variable nil (reparse-symbol function_parameters) [39909 39924])
                            ("minor_number" variable nil (reparse-symbol function_parameters) [39937 39949]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39780 41179])
                    ("use_overline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41201 41205])
                            ("use_overline" variable nil (reparse-symbol function_parameters) [41207 41219]))                          )
                        (reparse-symbol indented_block_body) [41184 41571])
                    ("set_one_half" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41593 41597])
                            ("one_half" variable nil (reparse-symbol function_parameters) [41599 41607]))                          )
                        (reparse-symbol indented_block_body) [41576 41807])
                    ("set_minor_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41836 41840])
                            ("minor_threshold" variable nil (reparse-symbol function_parameters) [41842 41857]))                          
                        :documentation "
        Set the threshold for labelling minors ticks.

        Parameters
        ----------
        minor_threshold : int
            Maximum number of locations for labelling some minor ticks. This
            parameter have no effect if minor is False.
        ")
                        (reparse-symbol indented_block_body) [41812 42188])
                    ("set_minor_number" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42214 42218])
                            ("minor_number" variable nil (reparse-symbol function_parameters) [42220 42232]))                          
                        :documentation "
        Set the number of minor ticks to label when some minor ticks are
        labelled.

        Parameters
        ----------
        minor_number : int
            Number of ticks which are labelled when the number of ticks is
            below the threshold.
        ")
                        (reparse-symbol indented_block_body) [42193 42566])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42584 42588])
                            ("locs" variable nil (reparse-symbol function_parameters) [42590 42594]))                          )
                        (reparse-symbol indented_block_body) [42571 44369])
                    ("_format_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44392 44396])
                            ("x" variable nil (reparse-symbol function_parameters) [44398 44399])
                            ("locs" variable nil (reparse-symbol function_parameters) [44401 44405])
                            ("sci_notation" variable nil (reparse-symbol function_parameters) [44407 44419]))                          )
                        (reparse-symbol indented_block_body) [44374 45241])
                    ("_one_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45261 45265])
                            ("s" variable nil (reparse-symbol function_parameters) [45267 45268]))                          )
                        (reparse-symbol indented_block_body) [45246 45392])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45410 45414])
                            ("x" variable nil (reparse-symbol function_parameters) [45416 45417])
                            ("pos" variable nil (reparse-symbol function_parameters) [45419 45422]))                          )
                        (reparse-symbol indented_block_body) [45397 46213])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46240 46244])
                            ("value" variable nil (reparse-symbol function_parameters) [46246 46251]))                          )
                        (reparse-symbol indented_block_body) [46218 46529]))                  
                :type "class")
                nil [39681 46529])
            ("EngFormatter" type
               (:documentation "
    Format axis values using engineering prefixes to represent powers
    of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("ENG_PREFIXES" variable nil (reparse-symbol indented_block_body) [46752 47091])
                    ("__init__" function
                       (:suite 
                          ( ("r\"\"\"
        Parameters
        ----------
        unit : str, default: \"\"
            Unit symbol to use, suitable for use with single-letter
            representations of powers of 1000. For example, 'Hz' or 'm'.

        places : int, default: None
            Precision with which to display the number, specified in
            digits after the decimal point (there will be between one
            and three digits before the decimal point). If it is None,
            the formatting falls back to the floating point format '%g',
            which displays up to 6 *significant* digits, i.e. the equivalent
            value for *places* varies between 0 and 5 (inclusive).

        sep : str, default: \" \"
            Separator used between the value and the prefix/unit. For
            example, one get '3.14 mV' if ``sep`` is \" \" (default) and
            '3.14mV' if ``sep`` is \"\". Besides the default behavior, some
            other useful options may be:

            * ``sep=\"\"`` to append directly the prefix/unit to the value;
            * ``sep=\"\\N{THIN SPACE}\"`` (``U+2009``);
            * ``sep=\"\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);
            * ``sep=\"\\N{NO-BREAK SPACE}\"`` (``U+00A0``).

        usetex : bool, default: :rc:`text.usetex`
            To enable/disable the use of TeX's math mode for rendering the
            numbers in the formatter.

        useMathText : bool, default: :rc:`axes.formatter.use_mathtext`
            To enable/disable the use mathtext for rendering the numbers in
            the formatter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [47207 48775])
                            ("self" variable nil (reparse-symbol indented_block_body) [48784 48800])
                            ("self" variable nil (reparse-symbol indented_block_body) [48809 48829])
                            ("self" variable nil (reparse-symbol indented_block_body) [48838 48852])
                            ("self" code nil (reparse-symbol indented_block_body) [48861 48884])
                            ("self" code nil (reparse-symbol indented_block_body) [48893 48926]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47110 47114])
                            ("unit" variable nil (reparse-symbol function_parameters) [47116 47120])
                            ("places" variable nil (reparse-symbol function_parameters) [47125 47131])
                            ("sep" variable nil (reparse-symbol function_parameters) [47138 47141])
                            ("usetex" variable nil (reparse-symbol function_parameters) [47150 47156])
                            ("useMathText" variable nil (reparse-symbol function_parameters) [47180 47191]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47097 48927])
                    ("get_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48947 48951]))                          )
                        (reparse-symbol indented_block_body) [48932 48982])
                    ("set_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49002 49006])
                            ("val" variable nil (reparse-symbol function_parameters) [49008 49011]))                          )
                        (reparse-symbol indented_block_body) [48987 49138])
                    ("usetex" variable nil (reparse-symbol indented_block_body) [49143 49194])
                    ("get_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49220 49224]))                          )
                        (reparse-symbol indented_block_body) [49200 49260])
                    ("set_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49285 49289])
                            ("val" variable nil (reparse-symbol function_parameters) [49291 49294]))                          )
                        (reparse-symbol indented_block_body) [49265 49447])
                    ("useMathText" variable nil (reparse-symbol indented_block_body) [49452 49518])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49537 49541])
                            ("x" variable nil (reparse-symbol function_parameters) [49543 49544])
                            ("pos" variable nil (reparse-symbol function_parameters) [49546 49549]))                          )
                        (reparse-symbol indented_block_body) [49524 49802])
                    ("format_eng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49822 49826])
                            ("num" variable nil (reparse-symbol function_parameters) [49828 49831]))                          
                        :documentation "
        Format a number in engineering notation, appending a letter
        representing the power of 1000 of the original number.
        Some examples:

        >>> format_eng(0)       # for self.places = 0
        '0'

        >>> format_eng(1000000) # for self.places = 1
        '1.0 M'

        >>> format_eng(\"-1e-6\") # for self.places = 2
        '-1.00 \\N{MICRO SIGN}'
        ")
                        (reparse-symbol indented_block_body) [49807 51572]))                  
                :type "class")
                nil [46531 51572])
            ("PercentFormatter" type
               (:documentation "
    Format numbers as a percentage.

    Parameters
    ----------
    xmax : float
        Determines how the number is converted into a percentage.
        *xmax* is the data value that corresponds to 100%.
        Percentages are computed as ``x / xmax * 100``. So if the data is
        already scaled to be percentages, *xmax* will be 100. Another common
        situation is where *xmax* is 1.0.

    decimals : None or int
        The number of decimal places to place after the point.
        If *None* (the default), the number will be computed automatically.

    symbol : str or None
        A string that will be appended to the label. It may be
        *None* or empty to indicate that no symbol should be used. LaTeX
        special characters are escaped in *symbol* whenever latex mode is
        enabled, unless *is_latex* is *True*.

    is_latex : bool
        If *False*, reserved LaTeX characters in *symbol* will be escaped.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [52657 52679])
                            ("self" variable nil (reparse-symbol indented_block_body) [52688 52712])
                            ("self" variable nil (reparse-symbol indented_block_body) [52721 52742])
                            ("self" variable nil (reparse-symbol indented_block_body) [52751 52776]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52589 52593])
                            ("xmax" variable nil (reparse-symbol function_parameters) [52595 52599])
                            ("decimals" variable nil (reparse-symbol function_parameters) [52605 52613])
                            ("symbol" variable nil (reparse-symbol function_parameters) [52620 52626])
                            ("is_latex" variable nil (reparse-symbol function_parameters) [52632 52640]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52576 52777])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52795 52799])
                            ("x" variable nil (reparse-symbol function_parameters) [52801 52802])
                            ("pos" variable nil (reparse-symbol function_parameters) [52804 52807]))                          
                        :documentation "Format the tick as a percentage with the appropriate scaling.")
                        (reparse-symbol indented_block_body) [52782 53056])
                    ("format_pct" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53076 53080])
                            ("x" variable nil (reparse-symbol function_parameters) [53082 53083])
                            ("display_range" variable nil (reparse-symbol function_parameters) [53085 53098]))                          
                        :documentation "
        Format the number as a percentage number with the correct
        number of decimals and adds the percent symbol, if any.

        If ``self.decimals`` is `None`, the number of digits after the
        decimal point is set based on the *display_range* of the axis
        as follows:

        +---------------+----------+------------------------+
        | display_range | decimals |          sample        |
        +---------------+----------+------------------------+
        | >50           |     0    | ``x = 34.5`` => 35%    |
        +---------------+----------+------------------------+
        | >5            |     1    | ``x = 34.5`` => 34.5%  |
        +---------------+----------+------------------------+
        | >0.5          |     2    | ``x = 34.5`` => 34.50% |
        +---------------+----------+------------------------+
        |      ...      |    ...   |          ...           |
        +---------------+----------+------------------------+

        This method will not be very good for tiny axis ranges or
        extremely large ones. It assumes that the values on the chart
        are percentages displayed on a reasonable scale.
        ")
                        (reparse-symbol indented_block_body) [53061 55244])
                    ("convert_to_pct" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55268 55272])
                            ("x" variable nil (reparse-symbol function_parameters) [55274 55275]))                          )
                        (reparse-symbol indented_block_body) [55249 55317])
                    ("symbol" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55347 55351]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55322 99631]))                  
                :type "class")
                nil [51574 99631]))          
      :file "ticker.py"
      :pointmax 99631
      :fsize 99630
      :lastmodtime '(25218 25732 305269 252000)
      :unmatched-syntax '((NEWLINE 97636 . 97637) (COLON 97635 . 97636) (RPAREN 97634 . 97635) (DEDENT 97604 . 97604) (CLASS 97604 . 97609) (LPAREN 97626 . 97627) (NEWLINE 96979 . 96980) (COLON 96978 . 96979) (RPAREN 96977 . 96978) (DEDENT 96948 . 96948) (CLASS 96948 . 96953) (LPAREN 96965 . 96966) (IF 93186 . 93188) (ELSE 93195 . 93199) (RETURN 93140 . 93146) (IF 93155 . 93157) (ELSE 93164 . 93168) (MULT 91647 . 91648) (COMMA 91648 . 91649) (NEWLINE 91545 . 91546) (COLON 91544 . 91545) (RPAREN 91543 . 91544) (DEDENT 91513 . 91513) (CLASS 91513 . 91518) (LPAREN 91531 . 91532) (NEWLINE 86087 . 86088) (COLON 86086 . 86087) (RPAREN 86085 . 86086) (DEDENT 86050 . 86050) (CLASS 86050 . 86055) (LPAREN 86077 . 86078) (NAME 82270 . 82276) (IF 82283 . 82285) (ELSE 82307 . 82311) (INDENT_BLOCK 80433 . 80627) (NEWLINE 80432 . 80433) (COLON 80431 . 80432) (TRY 80333 . 80336) (AS 80427 . 80429) (NEWLINE 77699 . 77700) (COLON 77698 . 77699) (RPAREN 77697 . 77698) (DEDENT 77673 . 77673) (CLASS 77673 . 77678) (LPAREN 77689 . 77690) (NEWLINE 77631 . 77632) (COLON 77630 . 77631) (RPAREN 77629 . 77630) (COMMA 77617 . 77618) (MULT 77616 . 77617) (DEDENT 77593 . 77593) (DEF 77593 . 77596) (LPAREN 77612 . 77613) (NEWLINE 77282 . 77283) (COLON 77281 . 77282) (RPAREN 77280 . 77281) (DEDENT 77253 . 77253) (DEF 77253 . 77256) (LPAREN 77272 . 77273) (NEWLINE 76958 . 76959) (COLON 76957 . 76958) (RPAREN 76956 . 76957) (DEDENT 76932 . 76932) (DEF 76932 . 76935) (LPAREN 76948 . 76949) (NEWLINE 76636 . 76637) (COLON 76635 . 76636) (RPAREN 76634 . 76635) (DEDENT 76601 . 76601) (DEF 76601 . 76604) (LPAREN 76626 . 76627) (NEWLINE 76305 . 76306) (COLON 76304 . 76305) (RPAREN 76303 . 76304) (DEDENT 76273 . 76273) (DEF 76273 . 76276) (LPAREN 76295 . 76296) (NEWLINE 76104 . 76105) (COLON 76103 . 76104) (RPAREN 76102 . 76103) (COMMA 76090 . 76091) (MULT 76089 . 76090) (DEDENT 76063 . 76063) (DEF 76063 . 76066) (LPAREN 76076 . 76077) (NEWLINE 67570 . 67571) (COLON 67569 . 67570) (RPAREN 67568 . 67569) (DEDENT 67543 . 67543) (CLASS 67543 . 67548) (LPAREN 67560 . 67561) (NEWLINE 65906 . 65907) (COLON 65905 . 65906) (RPAREN 65904 . 65905) (DEDENT 65858 . 65858) (DEF 65858 . 65861) (LPAREN 65873 . 65874) (NEWLINE 64505 . 64506) (COLON 64504 . 64505) (RPAREN 64503 . 64504) (DEDENT 64474 . 64474) (CLASS 64474 . 64479) (LPAREN 64495 . 64496) (RETURN 62813 . 62819) (IF 62835 . 62837) (ELSE 62865 . 62869) (NEWLINE 62166 . 62167) (COLON 62165 . 62166) (RPAREN 62164 . 62165) (DEDENT 62137 . 62137) (CLASS 62137 . 62142) (LPAREN 62156 . 62157) (NEWLINE 61795 . 61796) (COLON 61794 . 61795) (RPAREN 61793 . 61794) (DEDENT 61768 . 61768) (CLASS 61768 . 61773) (LPAREN 61785 . 61786) (NAME 60898 . 60902) (IF 60925 . 60927) (ELSE 60946 . 60950) (NEWLINE 60432 . 60433) (COLON 60431 . 60432) (RPAREN 60430 . 60431) (DEDENT 60404 . 60404) (CLASS 60404 . 60409) (LPAREN 60422 . 60423) (NEWLINE 59455 . 59456) (COLON 59454 . 59455) (RPAREN 59453 . 59454) (DEDENT 59427 . 59427) (CLASS 59427 . 59432) (LPAREN 59445 . 59446) (NEWLINE 56164 . 56165) (COLON 56163 . 56164) (RPAREN 56162 . 56163) (DEDENT 56138 . 56138) (CLASS 56138 . 56143) (LPAREN 56151 . 56152) (NAME 50261 . 50264) (IF 50271 . 50273) (ELSE 50294 . 50298) (MULT 47147 . 47148) (COMMA 47148 . 47149) (MULT 39816 . 39817) (COMMA 39817 . 39818) (NAME 38382 . 38390) (IF 38403 . 38405) (ELSE 38418 . 38422) (NAME 38182 . 38193) (IF 38200 . 38202) (ELSE 38209 . 38213) (NAME 35711 . 35719) (IF 35732 . 35734) (ELSE 35747 . 35751)))
    (semanticdb-table "semanticdb-table-157fb41e7a90"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives for Tools.
These tools are used by `matplotlib.backend_managers.ToolManager`

:class:`ToolBase`
    Simple stateless tool

:class:`ToolToggleBase`
    Tool that has two states, only one Toggle tool can be
    active at any given time for the same
    `matplotlib.backend_managers.ToolManager`
\"\"\"" code nil nil [1 345])
            ("enum" include nil nil [347 358])
            ("re" include nil nil [359 368])
            ("time" include nil nil [369 380])
            ("types" include nil nil [381 414])
            ("uuid" include nil nil [415 426])
            ("weakref" include nil nil [427 464])
            ("numpy" include nil nil [466 484])
            ("matplotlib" include nil nil [486 510])
            ("matplotlib._pylab_helpers" include nil nil [511 552])
            ("matplotlib" include nil nil [553 587])
            ("Cursors" type
               (:documentation "Backend-independent cursor types."
                :superclasses ("enum.IntEnum")
                :members 
                  ( ("POINTER" variable nil (reparse-symbol indented_block_body) [711 732])
                    ("HAND" variable nil (reparse-symbol indented_block_body) [737 755])
                    ("SELECT_REGION" variable nil (reparse-symbol indented_block_body) [760 787])
                    ("MOVE" variable nil (reparse-symbol indented_block_body) [792 810])
                    ("WAIT" variable nil (reparse-symbol indented_block_body) [815 833])
                    ("RESIZE_HORIZONTAL" variable nil (reparse-symbol indented_block_body) [838 869])
                    ("RESIZE_VERTICAL" variable nil (reparse-symbol indented_block_body) [874 903]))                  
                :type "class")
                nil [590 904])
            ("cursors" variable nil nil [904 921])
            ("_views_positions" variable nil nil [961 989])
            ("ToolBase" type
               (:documentation "
    Base tool class.

    A base tool, only implements `trigger` method or no method at all.
    The tool is instantiated by `matplotlib.backend_managers.ToolManager`.
    "
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [1197 1218])
                    ("\"\"\"
    Keymap to associate with this tool.

    ``list[str]``: List of keys that will trigger this tool when a keypress
    event is emitted on ``self.figure.canvas``.
    \"\"\"" code nil (reparse-symbol indented_block_body) [1223 1399])
                    ("description" variable nil (reparse-symbol indented_block_body) [1405 1423])
                    ("\"\"\"
    Description of the Tool.

    `str`: Tooltip used if the Tool is included in a Toolbar.
    \"\"\"" code nil (reparse-symbol indented_block_body) [1428 1531])
                    ("image" variable nil (reparse-symbol indented_block_body) [1537 1549])
                    ("\"\"\"
    Filename of the image.

    `str`: Filename of the image to use in a Toolbar.  If None, the *name* is
    used as a label in the toolbar button.
    \"\"\"" code nil (reparse-symbol indented_block_body) [1554 1714])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1767 1784])
                            ("self" variable nil (reparse-symbol indented_block_body) [1793 1824])
                            ("self" variable nil (reparse-symbol indented_block_body) [1833 1852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1733 1737])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [1739 1750])
                            ("name" variable nil (reparse-symbol function_parameters) [1752 1756]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1720 1853])
                    ("name" variable nil (reparse-symbol indented_block_body) [1858 1987])
                    ("toolmanager" variable nil (reparse-symbol indented_block_body) [1992 2114])
                    ("canvas" variable nil (reparse-symbol indented_block_body) [2119 2289])
                    ("figure" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2320 2324]))                          
                        :documentation "The Figure affected by this tool, or None.")
                        (reparse-symbol indented_block_body) [2295 2412])
                    ("figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2447 2451])
                            ("figure" variable nil (reparse-symbol function_parameters) [2453 2459]))                          
                        :decorators 
                          ( ("figure.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2417 2492])
                    ("set_figure" variable nil (reparse-symbol indented_block_body) [2497 2521])
                    ("_make_classic_style_pseudo_toolbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2566 2570]))                          
                        :documentation "
        Return a placeholder object with a single `canvas` attribute.

        This is useful to reuse the implementations of tools already provided
        by the classic Toolbars.
        ")
                        (reparse-symbol indented_block_body) [2527 2830])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2847 2851])
                            ("sender" variable nil (reparse-symbol function_parameters) [2853 2859])
                            ("event" variable nil (reparse-symbol function_parameters) [2861 2866])
                            ("data" variable nil (reparse-symbol function_parameters) [2868 2872]))                          
                        :documentation "
        Called when this tool gets used.

        This method is called by `.ToolManager.trigger_tool`.

        Parameters
        ----------
        event : `.Event`
            The canvas event that caused this tool to be called.
        sender : object
            Object that requested the tool to be triggered.
        data : object
            Extra data.
        ")
                        (reparse-symbol indented_block_body) [2835 3280])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301]))                          
                        :documentation "
        Destroy the tool.

        This method is called by `.ToolManager.remove_tool`.
        ")
                        (reparse-symbol indented_block_body) [3285 3429]))                  
                :type "class")
                nil [992 3429])
            ("ToolToggleBase" type
               (:documentation "
    Toggleable tool.

    Every time it is triggered, it switches between enable and disable.

    Parameters
    ----------
    ``*args``
        Variable length argument to be used by the Tool.
    ``**kwargs``
        `toggled` if present and True, sets the initial state of the Tool
        Arbitrary keyword arguments to be consumed by the Tool
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("radio_group" variable nil (reparse-symbol indented_block_body) [3834 3852])
                    ("\"\"\"
    Attribute to group 'radio' like tools (mutually exclusive).

    `str` that identifies the group or **None** if not belonging to a group.
    \"\"\"" code nil (reparse-symbol indented_block_body) [3857 4010])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [4016 4029])
                    ("\"\"\"Cursor to use when the tool is active.\"\"\"" code nil (reparse-symbol indented_block_body) [4034 4078])
                    ("default_toggled" variable nil (reparse-symbol indented_block_body) [4084 4107])
                    ("\"\"\"Default of toggled state.\"\"\"" code nil (reparse-symbol indented_block_body) [4112 4143])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4194 4253])
                            ("super" code nil (reparse-symbol indented_block_body) [4262 4295]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4162 4166])
                            ("args" variable nil (reparse-symbol function_parameters) [4168 4173])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4175 4183]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4149 4296])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4313 4317])
                            ("sender" variable nil (reparse-symbol function_parameters) [4319 4325])
                            ("event" variable nil (reparse-symbol function_parameters) [4327 4332])
                            ("data" variable nil (reparse-symbol function_parameters) [4334 4338]))                          
                        :documentation "Calls `enable` or `disable` based on `toggled` value.")
                        (reparse-symbol indented_block_body) [4301 4559])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4575 4579])
                            ("event" variable nil (reparse-symbol function_parameters) [4581 4586]))                          
                        :documentation "
        Enable the toggle tool.

        `trigger` calls this method when `toggled` is False.
        ")
                        (reparse-symbol indented_block_body) [4564 4725])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4742 4746])
                            ("event" variable nil (reparse-symbol function_parameters) [4748 4753]))                          
                        :documentation "
        Disable the toggle tool.

        `trigger` call this method when `toggled` is True.

        This can happen in different circumstances.

        * Click on the toolbar tool button.
        * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`.
        * Another `ToolToggleBase` derived tool is triggered
          (from the same `.ToolManager`).
        ")
                        (reparse-symbol indented_block_body) [4730 5166])
                    ("toggled" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5197 5201]))                          
                        :documentation "State of the toggled tool.")
                        (reparse-symbol indented_block_body) [5171 5274])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5294 5298])
                            ("figure" variable nil (reparse-symbol function_parameters) [5300 5306]))                          )
                        (reparse-symbol indented_block_body) [5279 5921]))                  
                :type "class")
                nil [3431 5921])
            ("SetCursorBase" type
               (:documentation "
    Change to the current cursor while inaxes.

    This tool, keeps track of all `ToolToggleBase` derived tools, and calls
    `set_cursor` when a tool gets triggered.
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6188 6221])
                            ("self" variable nil (reparse-symbol indented_block_body) [6230 6250])
                            ("self" variable nil (reparse-symbol indented_block_body) [6259 6284])
                            ("self" variable nil (reparse-symbol indented_block_body) [6293 6331])
                            ("self" variable nil (reparse-symbol indented_block_body) [6340 6380])
                            ("self" code nil (reparse-symbol indented_block_body) [6389 6510])
                            ("for" code nil (reparse-symbol indented_block_body) [6551 6629]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6156 6160])
                            ("args" variable nil (reparse-symbol function_parameters) [6162 6167])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6169 6177]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6143 6629])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6649 6653])
                            ("figure" variable nil (reparse-symbol function_parameters) [6655 6661]))                          )
                        (reparse-symbol indented_block_body) [6634 6912])
                    ("_tool_trigger_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6939 6943])
                            ("event" variable nil (reparse-symbol function_parameters) [6945 6950]))                          )
                        (reparse-symbol indented_block_body) [6917 7128])
                    ("_add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7147 7151])
                            ("tool" variable nil (reparse-symbol function_parameters) [7153 7157]))                          
                        :documentation "Set the cursor when the tool is triggered.")
                        (reparse-symbol indented_block_body) [7133 7424])
                    ("_add_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7447 7451])
                            ("event" variable nil (reparse-symbol function_parameters) [7453 7458]))                          
                        :documentation "Process every newly added tool.")
                        (reparse-symbol indented_block_body) [7429 7592])
                    ("_set_cursor_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7617 7621])
                            ("event" variable nil (reparse-symbol function_parameters) [7623 7628]))                          )
                        (reparse-symbol indented_block_body) [7597 8164])
                    ("" code nil (reparse-symbol indented_block_body) [8185 8238])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8258 8262])
                            ("cursor" variable nil (reparse-symbol function_parameters) [8264 8270]))                          
                        :documentation "
        Set the cursor.
        ")
                        (reparse-symbol indented_block_body) [8243 8360]))                  
                :type "class")
                nil [5923 8360])
            ("ToolSetCursor" variable nil nil [8449 8478])
            ("ToolCursorPosition" type
               (:documentation "
    Send message with the current pointer position.

    This tool runs in the background reporting the position of the cursor.
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8710 8730])
                            ("super" code nil (reparse-symbol indented_block_body) [8739 8772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8678 8682])
                            ("args" variable nil (reparse-symbol function_parameters) [8684 8689])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8691 8699]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8665 8773])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("figure" variable nil (reparse-symbol function_parameters) [8799 8805]))                          )
                        (reparse-symbol indented_block_body) [8778 9053])
                    ("send_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9075 9079])
                            ("event" variable nil (reparse-symbol function_parameters) [9081 9086]))                          
                        :documentation "Call `matplotlib.backend_managers.ToolManager.message_event`.")
                        (reparse-symbol indented_block_body) [9058 9475]))                  
                :type "class")
                nil [8481 9475])
            ("RubberbandBase" type
               (:documentation "Draw and remove a rubberband."
                :superclasses ("ToolBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9565 9569])
                            ("sender" variable nil (reparse-symbol function_parameters) [9571 9577])
                            ("event" variable nil (reparse-symbol function_parameters) [9579 9584])
                            ("data" variable nil (reparse-symbol function_parameters) [9586 9590]))                          
                        :documentation "Call `draw_rubberband` or `remove_rubberband` based on data.")
                        (reparse-symbol indented_block_body) [9553 9871])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9896 9900])
                            ("data" variable nil (reparse-symbol function_parameters) [9902 9907]))                          
                        :documentation "
        Draw rubberband.

        This method must get implemented per backend.
        ")
                        (reparse-symbol indented_block_body) [9876 10048])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10075 10079]))                          
                        :documentation "
        Remove rubberband.

        This method should get implemented per backend.
        ")
                        (reparse-symbol indented_block_body) [10053 10203]))                  
                :type "class")
                nil [9477 10203])
            ("ToolQuit" type
               (:documentation "Tool to call the figure manager destroy method."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10294 10325])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10330 10374])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10392 10396])
                            ("sender" variable nil (reparse-symbol function_parameters) [10398 10404])
                            ("event" variable nil (reparse-symbol function_parameters) [10406 10411])
                            ("data" variable nil (reparse-symbol function_parameters) [10413 10417]))                          )
                        (reparse-symbol indented_block_body) [10380 10462]))                  
                :type "class")
                nil [10205 10462])
            ("ToolQuitAll" type
               (:documentation "Tool to call the figure manager destroy method."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10556 10588])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10593 10641])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10659 10663])
                            ("sender" variable nil (reparse-symbol function_parameters) [10665 10671])
                            ("event" variable nil (reparse-symbol function_parameters) [10673 10678])
                            ("data" variable nil (reparse-symbol function_parameters) [10680 10684]))                          )
                        (reparse-symbol indented_block_body) [10647 10718]))                  
                :type "class")
                nil [10464 10718])
            ("ToolGrid" type
               (:documentation "Tool to toggle the major grids of the figure."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10807 10841])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10846 10890])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10908 10912])
                            ("sender" variable nil (reparse-symbol function_parameters) [10914 10920])
                            ("event" variable nil (reparse-symbol function_parameters) [10922 10927])
                            ("data" variable nil (reparse-symbol function_parameters) [10929 10933]))                          )
                        (reparse-symbol indented_block_body) [10896 11298]))                  
                :type "class")
                nil [10720 11298])
            ("ToolMinorGrid" type
               (:documentation "Tool to toggle the major and minor grids of the figure."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [11402 11446])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [11451 11501])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11519 11523])
                            ("sender" variable nil (reparse-symbol function_parameters) [11525 11531])
                            ("event" variable nil (reparse-symbol function_parameters) [11533 11538])
                            ("data" variable nil (reparse-symbol function_parameters) [11540 11544]))                          )
                        (reparse-symbol indented_block_body) [11507 11921]))                  
                :type "class")
                nil [11300 11921])
            ("ToolFullScreen" type
               (:documentation "Tool to toggle full screen."
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [12004 12042])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [12047 12097])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12114 12118])
                            ("event" variable nil (reparse-symbol function_parameters) [12120 12125]))                          )
                        (reparse-symbol indented_block_body) [12103 12184])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12201 12205])
                            ("event" variable nil (reparse-symbol function_parameters) [12207 12212]))                          )
                        (reparse-symbol indented_block_body) [12189 12271]))                  
                :type "class")
                nil [11923 12271])
            ("AxisScaleBase" type
               (:documentation "Base Tool to toggle between linear and logarithmic."
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12389 12393])
                            ("sender" variable nil (reparse-symbol function_parameters) [12395 12401])
                            ("event" variable nil (reparse-symbol function_parameters) [12403 12408])
                            ("data" variable nil (reparse-symbol function_parameters) [12410 12414]))                          )
                        (reparse-symbol indented_block_body) [12377 12519])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12535 12539])
                            ("event" variable nil (reparse-symbol function_parameters) [12541 12546]))                          )
                        (reparse-symbol indented_block_body) [12524 12632])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12649 12653])
                            ("event" variable nil (reparse-symbol function_parameters) [12655 12660]))                          )
                        (reparse-symbol indented_block_body) [12637 12749]))                  
                :type "class")
                nil [12273 12749])
            ("ToolYScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the Y axis."
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [12867 12902])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [12907 12953])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12973 12977])
                            ("ax" variable nil (reparse-symbol function_parameters) [12979 12981])
                            ("scale" variable nil (reparse-symbol function_parameters) [12983 12988]))                          )
                        (reparse-symbol indented_block_body) [12959 13020]))                  
                :type "class")
                nil [12751 13020])
            ("ToolXScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the X axis."
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [13138 13173])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [13178 13224])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13244 13248])
                            ("ax" variable nil (reparse-symbol function_parameters) [13250 13252])
                            ("scale" variable nil (reparse-symbol function_parameters) [13254 13259]))                          )
                        (reparse-symbol indented_block_body) [13230 13291]))                  
                :type "class")
                nil [13022 13291])
            ("ToolViewsPositions" type
               (:documentation "
    Auxiliary Tool to handle changes in views and positions.

    Runs in the background and should get used by all the tools that
    need to access the figure's history of views and positions, e.g.

    * `ToolZoom`
    * `ToolPan`
    * `ToolHome`
    * `ToolBack`
    * `ToolForward`
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13683 13715])
                            ("self" variable nil (reparse-symbol indented_block_body) [13724 13760])
                            ("self" variable nil (reparse-symbol indented_block_body) [13769 13806])
                            ("super" code nil (reparse-symbol indented_block_body) [13815 13848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13651 13655])
                            ("args" variable nil (reparse-symbol function_parameters) [13657 13662])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13664 13672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13638 13849])
                    ("add_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13869 13873])
                            ("figure" variable nil (reparse-symbol function_parameters) [13875 13881]))                          
                        :documentation "Add the current figure to the stack of views and positions.")
                        (reparse-symbol indented_block_body) [13854 14364])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14379 14383])
                            ("figure" variable nil (reparse-symbol function_parameters) [14385 14391]))                          
                        :documentation "Reset the axes stack.")
                        (reparse-symbol indented_block_body) [14369 14626])
                    ("update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14647 14651]))                          
                        :documentation "
        Update the view limits and position for each axes from the current
        stack position. If any axes are present in the figure that aren't in
        the current stack position, use the home view limits for those axes and
        don't update *any* positions.
        ")
                        (reparse-symbol indented_block_body) [14631 15685])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15707 15711])
                            ("figure" variable nil (reparse-symbol function_parameters) [15713 15719]))                          
                        :documentation "
        Push the current view limits and position onto their respective stacks.
        ")
                        (reparse-symbol indented_block_body) [15690 16149])
                    ("_axes_pos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16168 16172])
                            ("ax" variable nil (reparse-symbol function_parameters) [16174 16176]))                          
                        :documentation "
        Return the original and modified positions for the specified axes.

        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The `.Axes` to get the positions for.

        Returns
        -------
        original_position, modified_position
            A tuple of the original and modified positions.
        ")
                        (reparse-symbol indented_block_body) [16154 16632])
                    ("update_home_views" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16659 16663])
                            ("figure" variable nil (reparse-symbol function_parameters) [16665 16671]))                          
                        :documentation "
        Make sure that ``self.home_views`` has an entry for all axes present
        in the figure.
        ")
                        (reparse-symbol indented_block_body) [16637 17004])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17018 17022]))                          
                        :documentation "Recall the first view and position from the stack.")
                        (reparse-symbol indented_block_body) [17009 17172])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17186 17190]))                          
                        :documentation "Back one step in the stack of views and positions.")
                        (reparse-symbol indented_block_body) [17177 17340])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17357 17361]))                          
                        :documentation "Forward one step in the stack of views and positions.")
                        (reparse-symbol indented_block_body) [17345 17520]))                  
                :type "class")
                nil [13293 17520])
            ("ViewsPositionsBase" type
               (:documentation "Base class for `ToolHome`, `ToolBack` and `ToolForward`."
                :superclasses ("ToolBase")
                :members 
                  ( ("_on_trigger" variable nil (reparse-symbol indented_block_body) [17630 17648])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17666 17670])
                            ("sender" variable nil (reparse-symbol function_parameters) [17672 17678])
                            ("event" variable nil (reparse-symbol function_parameters) [17680 17685])
                            ("data" variable nil (reparse-symbol function_parameters) [17687 17691]))                          )
                        (reparse-symbol indented_block_body) [17654 17938]))                  
                :type "class")
                nil [17522 17938])
            ("ToolHome" type
               (:documentation "Restore the original view limits."
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [18025 18060])
                    ("image" variable nil (reparse-symbol indented_block_body) [18065 18079])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [18084 18128])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [18133 18153]))                  
                :type "class")
                nil [17940 18154])
            ("ToolBack" type
               (:documentation "Move back up the view limits stack."
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [18243 18280])
                    ("image" variable nil (reparse-symbol indented_block_body) [18285 18299])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [18304 18348])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [18353 18373]))                  
                :type "class")
                nil [18156 18374])
            ("ToolForward" type
               (:documentation "Move forward in the view lim stack."
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [18466 18502])
                    ("image" variable nil (reparse-symbol indented_block_body) [18507 18524])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [18529 18576])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [18581 18604]))                  
                :type "class")
                nil [18376 18605])
            ("ConfigureSubplotsBase" type
               (:documentation "Base tool for the configuration of subplots."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [18706 18740])
                    ("image" variable nil (reparse-symbol indented_block_body) [18745 18763]))                  
                :type "class")
                nil [18607 18764])
            ("SaveFigureBase" type
               (:documentation "Base tool for figure saving."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [18842 18873])
                    ("image" variable nil (reparse-symbol indented_block_body) [18878 18896])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [18901 18945]))                  
                :type "class")
                nil [18766 18946])
            ("ZoomPanBase" type
               (:documentation "Base class for `ToolZoom` and `ToolPan`."
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [19073 19096])
                            ("self" variable nil (reparse-symbol indented_block_body) [19105 19132])
                            ("self" variable nil (reparse-symbol indented_block_body) [19141 19161])
                            ("self" variable nil (reparse-symbol indented_block_body) [19170 19190])
                            ("self" variable nil (reparse-symbol indented_block_body) [19199 19221])
                            ("self" variable nil (reparse-symbol indented_block_body) [19230 19251])
                            ("self" variable nil (reparse-symbol indented_block_body) [19260 19280])
                            ("self" variable nil (reparse-symbol indented_block_body) [19289 19311])
                            ("self" code nil (reparse-symbol indented_block_body) [19350 19397]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19051 19055])
                            ("args" variable nil (reparse-symbol function_parameters) [19057 19062]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19038 19398])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19414 19418])
                            ("event" variable nil (reparse-symbol function_parameters) [19420 19425]))                          
                        :documentation "Connect press/release events and lock the canvas.")
                        (reparse-symbol indented_block_body) [19403 19851])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19868 19872])
                            ("event" variable nil (reparse-symbol function_parameters) [19874 19879]))                          
                        :documentation "Release the canvas and disconnect press/release events.")
                        (reparse-symbol indented_block_body) [19856 20208])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20225 20229])
                            ("sender" variable nil (reparse-symbol function_parameters) [20231 20237])
                            ("event" variable nil (reparse-symbol function_parameters) [20239 20244])
                            ("data" variable nil (reparse-symbol function_parameters) [20246 20250]))                          )
                        (reparse-symbol indented_block_body) [20213 20539])
                    ("scroll_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20560 20564])
                            ("event" variable nil (reparse-symbol function_parameters) [20566 20571]))                          )
                        (reparse-symbol indented_block_body) [20544 21447]))                  
                :type "class")
                nil [18948 21447])
            ("ToolZoom" type
               (:documentation "A Tool for zooming using a rectangle selector."
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [21540 21573])
                    ("image" variable nil (reparse-symbol indented_block_body) [21578 21600])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [21605 21649])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [21654 21684])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [21689 21712])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [21753 21776])
                            ("self" variable nil (reparse-symbol indented_block_body) [21785 21804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21731 21735])
                            ("args" variable nil (reparse-symbol function_parameters) [21737 21742]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21718 21805])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21829 21833]))                          )
                        (reparse-symbol indented_block_body) [21810 22135])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22151 22155])
                            ("event" variable nil (reparse-symbol function_parameters) [22157 22162]))                          
                        :documentation "Callback for mouse button presses in zoom-to-rectangle mode.")
                        (reparse-symbol indented_block_body) [22140 23308])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23338 23342])
                            ("event" variable nil (reparse-symbol function_parameters) [23344 23349]))                          )
                        (reparse-symbol indented_block_body) [23313 23420])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23451 23455])
                            ("event" variable nil (reparse-symbol function_parameters) [23457 23462]))                          )
                        (reparse-symbol indented_block_body) [23425 23528])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23549 23553])
                            ("event" variable nil (reparse-symbol function_parameters) [23555 23560]))                          
                        :documentation "Callback for mouse moves in zoom-to-rectangle mode.")
                        (reparse-symbol indented_block_body) [23533 24124])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24142 24146])
                            ("event" variable nil (reparse-symbol function_parameters) [24148 24153]))                          
                        :documentation "Callback for mouse button releases in zoom-to-rectangle mode.")
                        (reparse-symbol indented_block_body) [24129 25618]))                  
                :type "class")
                nil [21449 25618])
            ("ToolPan" type
               (:documentation "Pan axes with left mouse, zoom with right."
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [25706 25749])
                    ("description" variable nil (reparse-symbol indented_block_body) [25754 25811])
                    ("image" variable nil (reparse-symbol indented_block_body) [25816 25830])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [25835 25856])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [25861 25884])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [25925 25948])
                            ("self" variable nil (reparse-symbol indented_block_body) [25957 25977]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25903 25907])
                            ("args" variable nil (reparse-symbol function_parameters) [25909 25914]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25890 25978])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26002 26006]))                          )
                        (reparse-symbol indented_block_body) [25983 26219])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26235 26239])
                            ("event" variable nil (reparse-symbol function_parameters) [26241 26246]))                          )
                        (reparse-symbol indented_block_body) [26224 26965])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26983 26987])
                            ("event" variable nil (reparse-symbol function_parameters) [26989 26994]))                          )
                        (reparse-symbol indented_block_body) [26970 27444])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27465 27469])
                            ("event" variable nil (reparse-symbol function_parameters) [27471 27476]))                          )
                        (reparse-symbol indented_block_body) [27449 27782]))                  
                :type "class")
                nil [25620 27782])
            ("ToolHelpBase" type
               (:superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [27818 27876])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [27881 27925])
                    ("image" variable nil (reparse-symbol indented_block_body) [27930 27944])
                    ("format_shortcut" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("key_sequence" variable nil (reparse-symbol function_parameters) [27988 28000]))                          
                        :documentation "
        Convert a shortcut string from the notation used in rc config to the
        standard notation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.
        ")
                        (reparse-symbol indented_block_body) [27950 28317])
                    ("_format_tool_keymap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28346 28350])
                            ("name" variable nil (reparse-symbol function_parameters) [28352 28356]))                          )
                        (reparse-symbol indented_block_body) [28322 28493])
                    ("_get_help_entries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28520 28524]))                          )
                        (reparse-symbol indented_block_body) [28498 28710])
                    ("_get_help_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28734 28738]))                          )
                        (reparse-symbol indented_block_body) [28715 28889])
                    ("_get_help_html" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28913 28917]))                          )
                        (reparse-symbol indented_block_body) [28894 29324]))                  
                :type "class")
                nil [27784 29324])
            ("ToolCopyToClipboardBase" type
               (:documentation "Tool to copy the figure to the clipboard."
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [29424 29475])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [29480 29524])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29542 29546])
                            ("args" variable nil (reparse-symbol function_parameters) [29548 29553])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29555 29563]))                          )
                        (reparse-symbol indented_block_body) [29530 29667]))                  
                :type "class")
                nil [29326 29667])
            ("default_tools" variable nil nil [29669 30477])
            ("\"\"\"Default tools\"\"\"" code nil nil [30478 30497])
            ("default_toolbar_tools" variable nil nil [30499 30686])
            ("\"\"\"Default tools in the toolbar\"\"\"" code nil nil [30687 30721])
            ("add_tools_to_manager" function
               (:documentation "
    Add multiple tools to a `.ToolManager`.

    Parameters
    ----------
    toolmanager : `.backend_managers.ToolManager`
        Manager to which the tools are added.
    tools : {str: class_like}, optional
        The tools to add in a {name: tool} dict, see `add_tool` for more
        info.
    "
                :arguments 
                  ( ("toolmanager" variable nil (reparse-symbol function_parameters) [30749 30760])
                    ("tools" variable nil (reparse-symbol function_parameters) [30762 30767]))                  )
                nil [30724 31177])
            ("add_tools_to_container" function
               (:documentation "
    Add multiple tools to the container.

    Parameters
    ----------
    container : Container
        `backend_bases.ToolContainerBase` object that will get the tools added.
    tools : list, optional
        List in the form ``[[group1, [tool1, tool2 ...]], [group2, [...]]]``
        where the tools ``[tool1, tool2, ...]`` will display in group1.
        See `add_tool` for details.
    "
                :arguments 
                  ( ("container" variable nil (reparse-symbol function_parameters) [31206 31215])
                    ("tools" variable nil (reparse-symbol function_parameters) [31217 31222]))                  )
                nil [31179 31797]))          
      :file "backend_tools.py"
      :pointmax 31797
      :fsize 31796
      :lastmodtime '(25218 25732 341935 950000)
      :unmatched-syntax '((NAME 20387 . 20404) (IF 20425 . 20427) (ELSE 20441 . 20445) (INDENT_BLOCK 11846 . 11921) (NEWLINE 11845 . 11846) (COLON 11844 . 11845) (WITH 11737 . 11741) (COMMA 11780 . 11781) (INDENT_BLOCK 11223 . 11298) (NEWLINE 11222 . 11223) (COLON 11221 . 11222) (WITH 11120 . 11124) (COMMA 11163 . 11164)))
    (semanticdb-table "semanticdb-table-157fb5486940"
      :file "font_manager.py"
      :fsize 50146
      :lastmodtime '(25218 25732 425269 355000))
    (semanticdb-table "semanticdb-table-157fb4c0f1fc"
      :file "container.py"
      :fsize 4582
      :lastmodtime '(25218 25732 428602 691000))
    (semanticdb-table "semanticdb-table-157fb5386500"
      :file "legend_handler.py"
      :fsize 30564
      :lastmodtime '(25218 25732 425269 355000)))
  :file "!home!mattia!.local!lib!python3.10!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

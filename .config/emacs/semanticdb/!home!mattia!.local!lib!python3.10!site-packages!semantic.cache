;; Object semanticdb-project-database-file-157fb4c77e00
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-157fb4c77e00"
  :tables
  (list
    (semanticdb-table "semanticdb-table-157fb4c77e1c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Cycler
======

Cycling through combinations of values, producing dictionaries.

You can add cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) +
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


You can multiply cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) *
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'r', 'linestyle': '--'}
    {'color': 'r', 'linestyle': '-.'}
    {'color': 'g', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'g', 'linestyle': '-.'}
    {'color': 'b', 'linestyle': '-'}
    {'color': 'b', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}
\"\"\"" code nil nil [1 921])
            ("copy" include nil nil [924 935])
            ("functools" include nil nil [936 964])
            ("itertools" include nil nil [965 1001])
            ("operator" include nil nil [1002 1031])
            ("__version__" variable nil nil [1033 1055])
            ("_process_keys" function
               (:documentation "
    Helper function to compose cycler keys.

    Parameters
    ----------
    left, right : iterable of dictionaries or None
        The cyclers to be composed.

    Returns
    -------
    keys : set
        The keys in the composition of the two cyclers.
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [1076 1080])
                    ("right" variable nil (reparse-symbol function_parameters) [1082 1087]))                  )
                nil [1058 1654])
            ("concat" function (:arguments 
              ( ("left" variable nil (reparse-symbol function_parameters) [1667 1671])
                ("right" variable nil (reparse-symbol function_parameters) [1673 1678]))              ) nil [1656 2465])
            ("Cycler" type
               (:documentation "
    Composable cycles.

    This class has compositions methods:

    ``+``
      for 'inner' products (zip)

    ``+=``
      in-place ``+``

    ``*``
      for outer products (`itertools.product`) and integer multiplication

    ``*=``
      in-place ``*``

    and supports basic slicing via ``[]``.

    Parameters
    ----------
    left, right : Cycler or None
        The 'left' and 'right' cyclers.
    op : func or None
        Function which composes the 'left' and 'right' cyclers.
    "
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3009 3013]))                          )
                        (reparse-symbol indented_block_body) [2996 3043])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Semi-private init.

        Do not use this directly, use `cycler` function instead.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3103 3211])
                            ("if" code nil (reparse-symbol indented_block_body) [3220 3575])
                            ("if" code nil (reparse-symbol indented_block_body) [3584 3948])
                            ("self" variable nil (reparse-symbol indented_block_body) [3957 4008])
                            ("self" variable nil (reparse-symbol indented_block_body) [4017 4030]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3061 3065])
                            ("left" variable nil (reparse-symbol function_parameters) [3067 3071])
                            ("right" variable nil (reparse-symbol function_parameters) [3073 3078])
                            ("op" variable nil (reparse-symbol function_parameters) [3085 3087]))                          
                        :documentation "
        Semi-private init.

        Do not use this directly, use `cycler` function instead.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3048 4031])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("k" variable nil (reparse-symbol function_parameters) [4059 4060]))                          )
                        (reparse-symbol indented_block_body) [4036 4094])
                    ("keys" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4122 4126]))                          
                        :documentation "The keys this Cycler knows about.")
                        (reparse-symbol indented_block_body) [4099 4208])
                    ("change_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4228 4232])
                            ("old" variable nil (reparse-symbol function_parameters) [4234 4237])
                            ("new" variable nil (reparse-symbol function_parameters) [4239 4242]))                          
                        :documentation "
        Change a key in this cycler to a new name.
        Modification is performed in-place.

        Does nothing if the old key is the same as the new key.
        Raises a ValueError if the new key is already a key.
        Raises a KeyError if the old key isn't a key.
        ")
                        (reparse-symbol indented_block_body) [4213 5515])
                    ("_from_iter" function
                       (:documentation "
        Class method to create 'base' Cycler objects
        that do not have a 'right' or 'op' and for which
        the 'left' object is not another Cycler.

        Parameters
        ----------
        label : str
            The property key.

        itr : iterable
            Finite length iterable of the property values.

        Returns
        -------
        `Cycler`
            New 'base' cycler.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5552 5555])
                            ("label" variable nil (reparse-symbol function_parameters) [5557 5562])
                            ("itr" variable nil (reparse-symbol function_parameters) [5564 5567]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5520 6127])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6148 6152])
                            ("key" variable nil (reparse-symbol function_parameters) [6154 6157]))                          )
                        (reparse-symbol indented_block_body) [6132 6451])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6469 6473]))                          )
                        (reparse-symbol indented_block_body) [6456 6761])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6778 6782])
                            ("other" variable nil (reparse-symbol function_parameters) [6784 6789]))                          
                        :documentation "
        Pair-wise combine two equal length cyclers (zip).

        Parameters
        ----------
        other : Cycler
        ")
                        (reparse-symbol indented_block_body) [6766 7144])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7161 7165])
                            ("other" variable nil (reparse-symbol function_parameters) [7167 7172]))                          
                        :documentation "
        Outer product of two cyclers (`itertools.product`) or integer
        multiplication.

        Parameters
        ----------
        other : Cycler or int
        ")
                        (reparse-symbol indented_block_body) [7149 7647])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7665 7669])
                            ("other" variable nil (reparse-symbol function_parameters) [7671 7676]))                          )
                        (reparse-symbol indented_block_body) [7652 7707])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7724 7728]))                          )
                        (reparse-symbol indented_block_body) [7712 7953])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7971 7975])
                            ("other" variable nil (reparse-symbol function_parameters) [7977 7982]))                          
                        :documentation "
        In-place pair-wise combine two equal length cyclers (zip).

        Parameters
        ----------
        other : Cycler
        ")
                        (reparse-symbol indented_block_body) [7958 8540])
                    ("__imul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8558 8562])
                            ("other" variable nil (reparse-symbol function_parameters) [8564 8569]))                          
                        :documentation "
        In-place outer product of two cyclers (`itertools.product`).

        Parameters
        ----------
        other : Cycler
        ")
                        (reparse-symbol indented_block_body) [8545 9133])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9149 9153])
                            ("other" variable nil (reparse-symbol function_parameters) [9155 9160]))                          )
                        (reparse-symbol indented_block_body) [9138 9340])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9356 9360])
                            ("other" variable nil (reparse-symbol function_parameters) [9362 9367]))                          )
                        (reparse-symbol indented_block_body) [9345 9405])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9410 9425])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9444 9448]))                          )
                        (reparse-symbol indented_block_body) [9431 9827])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9848 9852]))                          )
                        (reparse-symbol indented_block_body) [9832 10296])
                    ("by_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10312 10316]))                          
                        :documentation "
        Values by key.

        This returns the transposed values of the cycler.  Iterating
        over a `Cycler` yields dicts with a single value for each key,
        this method returns a `dict` of `list` which are the values
        for the given key.

        The returned value can be used to create an equivalent `Cycler`
        using only `+`.

        Returns
        -------
        transpose : dict
            dict of lists of the values for each key.
        ")
                        (reparse-symbol indented_block_body) [10301 11087])
                    ("_transpose" variable nil (reparse-symbol indented_block_body) [11121 11140])
                    ("simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11159 11163]))                          
                        :documentation "
        Simplify the cycler into a sum (but no products) of cyclers.

        Returns
        -------
        simple : Cycler
        ")
                        (reparse-symbol indented_block_body) [11146 11661])
                    ("concat" variable nil (reparse-symbol indented_block_body) [11666 11681]))                  
                :type "class")
                nil [2467 11682])
            ("cycler" function
               (:documentation "
    Create a new `Cycler` object from a single positional argument,
    a pair of positional arguments, or the combination of keyword arguments.

    cycler(arg)
    cycler(label1=itr1[, label2=iter2[, ...]])
    cycler(label, itr)

    Form 1 simply copies a given `Cycler` object.

    Form 2 composes a `Cycler` as an inner product of the
    pairs of keyword arguments. In other words, all of the
    iterables are cycled simultaneously, as if through zip().

    Form 3 creates a `Cycler` from a label and an iterable.
    This is useful for when the label cannot be a keyword argument
    (e.g., an integer or a name that has a space in it).

    Parameters
    ----------
    arg : Cycler
        Copy constructor for Cycler (does a shallow copy of iterables).
    label : name
        The property key. In the 2-arg form of the function,
        the label can be any hashable object. In the keyword argument
        form of the function, it must be a valid python identifier.
    itr : iterable
        Finite length iterable of the property values.
        Can be a single-property `Cycler` that would
        be like a key change, but as a shallow copy.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [11695 11700])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11702 11710]))                  )
                nil [11684 13756])
            ("_cycler" function
               (:documentation "
    Create a new `Cycler` object from a property name and iterable of values.

    Parameters
    ----------
    label : hashable
        The property key.
    itr : iterable
        Finite length iterable of the property values.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property
    "
                :arguments 
                  ( ("label" variable nil (reparse-symbol function_parameters) [13770 13775])
                    ("itr" variable nil (reparse-symbol function_parameters) [13777 13780]))                  )
                nil [13758 14520]))          
      :file "cycler.py"
      :pointmax 14520
      :fsize 14519
      :lastmodtime '(25218 25732 265269 217000)
      :unmatched-syntax '((NAME 1426 . 1432) (IF 1453 . 1455) (ELSE 1474 . 1478) (NAME 1368 . 1374) (IF 1394 . 1396) (ELSE 1414 . 1418))))
  :file "!home!mattia!.local!lib!python3.10!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

;; Object semanticdb-project-database-file-1574109687bc
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1574109687bc"
  :tables
  (list
    (semanticdb-table "semanticdb-table-157410991f98"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).\"\"\"" code nil nil [1 299])
            ("sys" include nil nil [301 311])
            ("datetime" include nil nil [312 327])
            ("locale" include nil nil [328 352])
            ("itertools" include nil nil [353 381])
            ("__all__" variable nil nil [383 896])
            ("error" variable nil nil [967 985])
            ("IllegalMonthError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1097 1115]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1075 1079])
                            ("month" variable nil (reparse-symbol function_parameters) [1081 1086]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1062 1116])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1132 1136]))                          )
                        (reparse-symbol indented_block_body) [1120 1203]))                  
                :type "class")
                nil [1021 1203])
            ("IllegalWeekdayError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1285 1307]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1261 1265])
                            ("weekday" variable nil (reparse-symbol function_parameters) [1267 1274]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1248 1308])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1324 1328]))                          )
                        (reparse-symbol indented_block_body) [1312 1419]))                  
                :type "class")
                nil [1205 1419])
            ("January" variable nil nil [1461 1472])
            ("February" variable nil nil [1473 1485])
            ("mdays" variable nil nil [1550 1609])
            ("_localized_month" type
               (:members 
                  ( ("_months" variable nil (reparse-symbol indented_block_body) [1925 1992])
                    ("_months" code nil (reparse-symbol indented_block_body) [1997 2028])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2070 2090]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2047 2051])
                            ("format" variable nil (reparse-symbol function_parameters) [2053 2059]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2034 2091])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2112 2116])
                            ("i" variable nil (reparse-symbol function_parameters) [2118 2119]))                          )
                        (reparse-symbol indented_block_body) [2096 2290])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2307 2311]))                          )
                        (reparse-symbol indented_block_body) [2295 2332]))                  
                :type "class")
                nil [1896 2332])
            ("_localized_day" type
               (:members 
                  ( ("_days" variable nil (reparse-symbol indented_block_body) [2398 2462])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2504 2524]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2481 2485])
                            ("format" variable nil (reparse-symbol function_parameters) [2487 2493]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2468 2525])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2546 2550])
                            ("i" variable nil (reparse-symbol function_parameters) [2552 2553]))                          )
                        (reparse-symbol indented_block_body) [2530 2722])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2739 2743]))                          )
                        (reparse-symbol indented_block_body) [2727 2763]))                  
                :type "class")
                nil [2334 2763])
            ("day_name" variable nil nil [2806 2837])
            ("day_abbr" variable nil nil [2838 2869])
            ("month_name" variable nil nil [2930 2965])
            ("month_abbr" variable nil nil [2966 3001])
            ("" code nil nil [3028 3103])
            ("isleap" function
               (:documentation "Return True for leap years, False for non-leap years."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3117 3121]))                  )
                nil [3106 3254])
            ("leapdays" function
               (:documentation "Return number of leap years in range [y1, y2).
       Assume y1 <= y2."
                :arguments 
                  ( ("y1" variable nil (reparse-symbol function_parameters) [3269 3271])
                    ("y2" variable nil (reparse-symbol function_parameters) [3273 3275]))                  )
                nil [3256 3454])
            ("weekday" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31)."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3468 3472])
                    ("month" variable nil (reparse-symbol function_parameters) [3474 3479])
                    ("day" variable nil (reparse-symbol function_parameters) [3481 3484]))                  )
                nil [3456 3707])
            ("monthrange" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3724 3728])
                    ("month" variable nil (reparse-symbol function_parameters) [3730 3735]))                  )
                nil [3709 4020])
            ("_monthlen" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [4036 4040])
                ("month" variable nil (reparse-symbol function_parameters) [4042 4047]))              ) nil [4022 4113])
            ("_prevmonth" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [4130 4134])
                ("month" variable nil (reparse-symbol function_parameters) [4136 4141]))              ) nil [4115 4228])
            ("_nextmonth" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [4245 4249])
                ("month" variable nil (reparse-symbol function_parameters) [4251 4256]))              ) nil [4230 4343])
            ("Calendar" type
               (:documentation "
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4540 4572]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4509 4513])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [4515 4527]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4496 4598])
                    ("getfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4623 4627]))                          )
                        (reparse-symbol indented_block_body) [4603 4668])
                    ("setfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4693 4697])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [4699 4711]))                          )
                        (reparse-symbol indented_block_body) [4673 4756])
                    ("firstweekday" variable nil (reparse-symbol indented_block_body) [4761 4818])
                    ("iterweekdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4841 4845]))                          
                        :documentation "
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        ")
                        (reparse-symbol indented_block_body) [4824 5067])
                    ("itermonthdates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5091 5095])
                            ("year" variable nil (reparse-symbol function_parameters) [5097 5101])
                            ("month" variable nil (reparse-symbol function_parameters) [5103 5108]))                          
                        :documentation "
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        ")
                        (reparse-symbol indented_block_body) [5072 5436])
                    ("itermonthdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5459 5463])
                            ("year" variable nil (reparse-symbol function_parameters) [5465 5469])
                            ("month" variable nil (reparse-symbol function_parameters) [5471 5476]))                          
                        :documentation "
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5441 5909])
                    ("itermonthdays2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5933 5937])
                            ("year" variable nil (reparse-symbol function_parameters) [5939 5943])
                            ("month" variable nil (reparse-symbol function_parameters) [5945 5950]))                          
                        :documentation "
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5914 6236])
                    ("itermonthdays3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6260 6264])
                            ("year" variable nil (reparse-symbol function_parameters) [6266 6270])
                            ("month" variable nil (reparse-symbol function_parameters) [6272 6277]))                          
                        :documentation "
        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
        used for dates outside of datetime.date range.
        ")
                        (reparse-symbol indented_block_body) [6241 6923])
                    ("itermonthdays4" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6947 6951])
                            ("year" variable nil (reparse-symbol function_parameters) [6953 6957])
                            ("month" variable nil (reparse-symbol function_parameters) [6959 6964]))                          
                        :documentation "
        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
        Can be used for dates outside of datetime.date range.
        ")
                        (reparse-symbol indented_block_body) [6928 7267])
                    ("monthdatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7295 7299])
                            ("year" variable nil (reparse-symbol function_parameters) [7301 7305])
                            ("month" variable nil (reparse-symbol function_parameters) [7307 7312]))                          
                        :documentation "
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        ")
                        (reparse-symbol indented_block_body) [7272 7607])
                    ("monthdays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7635 7639])
                            ("year" variable nil (reparse-symbol function_parameters) [7641 7645])
                            ("month" variable nil (reparse-symbol function_parameters) [7647 7652]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        ")
                        (reparse-symbol indented_block_body) [7612 8000])
                    ("monthdayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8027 8031])
                            ("year" variable nil (reparse-symbol function_parameters) [8033 8037])
                            ("month" variable nil (reparse-symbol function_parameters) [8039 8044]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [8005 8314])
                    ("yeardatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8341 8345])
                            ("year" variable nil (reparse-symbol function_parameters) [8347 8351])
                            ("width" variable nil (reparse-symbol function_parameters) [8353 8358]))                          
                        :documentation "
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        ")
                        (reparse-symbol indented_block_body) [8319 8869])
                    ("yeardays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8896 8900])
                            ("year" variable nil (reparse-symbol function_parameters) [8902 8906])
                            ("width" variable nil (reparse-symbol function_parameters) [8908 8913]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        ")
                        (reparse-symbol indented_block_body) [8874 9372])
                    ("yeardayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9398 9402])
                            ("year" variable nil (reparse-symbol function_parameters) [9404 9408])
                            ("width" variable nil (reparse-symbol function_parameters) [9410 9415]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [9377 9841]))                  
                :type "class")
                nil [4345 9841])
            ("TextCalendar" type
               (:documentation "
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("prweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10014 10018])
                            ("theweek" variable nil (reparse-symbol function_parameters) [10020 10027])
                            ("width" variable nil (reparse-symbol function_parameters) [10029 10034]))                          
                        :documentation "
        Print a single week (no newline).
        ")
                        (reparse-symbol indented_block_body) [10003 10158])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10177 10181])
                            ("day" variable nil (reparse-symbol function_parameters) [10183 10186])
                            ("weekday" variable nil (reparse-symbol function_parameters) [10188 10195])
                            ("width" variable nil (reparse-symbol function_parameters) [10197 10202]))                          
                        :documentation "
        Returns a formatted day.
        ")
                        (reparse-symbol indented_block_body) [10163 10419])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10439 10443])
                            ("theweek" variable nil (reparse-symbol function_parameters) [10445 10452])
                            ("width" variable nil (reparse-symbol function_parameters) [10454 10459]))                          
                        :documentation "
        Returns a single week in a string (no newline).
        ")
                        (reparse-symbol indented_block_body) [10424 10619])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10642 10646])
                            ("day" variable nil (reparse-symbol function_parameters) [10648 10651])
                            ("width" variable nil (reparse-symbol function_parameters) [10653 10658]))                          
                        :documentation "
        Returns a formatted week day name.
        ")
                        (reparse-symbol indented_block_body) [10624 10871])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10897 10901])
                            ("width" variable nil (reparse-symbol function_parameters) [10903 10908]))                          
                        :documentation "
        Return a header for a week.
        ")
                        (reparse-symbol indented_block_body) [10876 11054])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11079 11083])
                            ("theyear" variable nil (reparse-symbol function_parameters) [11085 11092])
                            ("themonth" variable nil (reparse-symbol function_parameters) [11094 11102])
                            ("width" variable nil (reparse-symbol function_parameters) [11104 11109])
                            ("withyear" variable nil (reparse-symbol function_parameters) [11111 11119]))                          
                        :documentation "
        Return a formatted month name.
        ")
                        (reparse-symbol indented_block_body) [11059 11314])
                    ("prmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11331 11335])
                            ("theyear" variable nil (reparse-symbol function_parameters) [11337 11344])
                            ("themonth" variable nil (reparse-symbol function_parameters) [11346 11354])
                            ("w" variable nil (reparse-symbol function_parameters) [11356 11357])
                            ("l" variable nil (reparse-symbol function_parameters) [11361 11362]))                          
                        :documentation "
        Print a month's calendar.
        ")
                        (reparse-symbol indented_block_body) [11319 11490])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11511 11515])
                            ("theyear" variable nil (reparse-symbol function_parameters) [11517 11524])
                            ("themonth" variable nil (reparse-symbol function_parameters) [11526 11534])
                            ("w" variable nil (reparse-symbol function_parameters) [11536 11537])
                            ("l" variable nil (reparse-symbol function_parameters) [11541 11542]))                          
                        :documentation "
        Return a month's calendar string (multi-line).
        ")
                        (reparse-symbol indented_block_body) [11495 12011])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12031 12035])
                            ("theyear" variable nil (reparse-symbol function_parameters) [12037 12044])
                            ("w" variable nil (reparse-symbol function_parameters) [12046 12047])
                            ("l" variable nil (reparse-symbol function_parameters) [12051 12052])
                            ("c" variable nil (reparse-symbol function_parameters) [12056 12057])
                            ("m" variable nil (reparse-symbol function_parameters) [12061 12062]))                          
                        :documentation "
        Returns a year's calendar as a multi-line string.
        ")
                        (reparse-symbol indented_block_body) [12016 13380])
                    ("pryear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13396 13400])
                            ("theyear" variable nil (reparse-symbol function_parameters) [13402 13409])
                            ("w" variable nil (reparse-symbol function_parameters) [13411 13412])
                            ("l" variable nil (reparse-symbol function_parameters) [13416 13417])
                            ("c" variable nil (reparse-symbol function_parameters) [13421 13422])
                            ("m" variable nil (reparse-symbol function_parameters) [13426 13427]))                          
                        :documentation "Print a year's calendar.")
                        (reparse-symbol indented_block_body) [13385 13531]))                  
                :type "class")
                nil [9843 13531])
            ("HTMLCalendar" type
               (:documentation "
    This calendar returns complete HTML pages.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("cssclasses" variable nil (reparse-symbol indented_block_body) [13667 13729])
                    ("cssclasses_weekday_head" variable nil (reparse-symbol indented_block_body) [13771 13807])
                    ("cssclass_noday" variable nil (reparse-symbol indented_block_body) [13873 13897])
                    ("cssclass_month_head" variable nil (reparse-symbol indented_block_body) [13940 13969])
                    ("cssclass_month" variable nil (reparse-symbol indented_block_body) [14005 14029])
                    ("cssclass_year_head" variable nil (reparse-symbol indented_block_body) [14077 14104])
                    ("cssclass_year" variable nil (reparse-symbol indented_block_body) [14151 14173])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14193 14197])
                            ("day" variable nil (reparse-symbol function_parameters) [14199 14202])
                            ("weekday" variable nil (reparse-symbol function_parameters) [14204 14211]))                          
                        :documentation "
        Return a day as a table cell.
        ")
                        (reparse-symbol indented_block_body) [14179 14491])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14511 14515])
                            ("theweek" variable nil (reparse-symbol function_parameters) [14517 14524]))                          
                        :documentation "
        Return a complete week as a table row.
        ")
                        (reparse-symbol indented_block_body) [14496 14697])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14720 14724])
                            ("day" variable nil (reparse-symbol function_parameters) [14726 14729]))                          
                        :documentation "
        Return a weekday name as a table header.
        ")
                        (reparse-symbol indented_block_body) [14702 14911])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14937 14941]))                          
                        :documentation "
        Return a header for a week as a table row.
        ")
                        (reparse-symbol indented_block_body) [14916 15124])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15149 15153])
                            ("theyear" variable nil (reparse-symbol function_parameters) [15155 15162])
                            ("themonth" variable nil (reparse-symbol function_parameters) [15164 15172])
                            ("withyear" variable nil (reparse-symbol function_parameters) [15174 15182]))                          
                        :documentation "
        Return a month name as a table row.
        ")
                        (reparse-symbol indented_block_body) [15129 15501])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15522 15526])
                            ("theyear" variable nil (reparse-symbol function_parameters) [15528 15535])
                            ("themonth" variable nil (reparse-symbol function_parameters) [15537 15545])
                            ("withyear" variable nil (reparse-symbol function_parameters) [15547 15555]))                          
                        :documentation "
        Return a formatted month as a table.
        ")
                        (reparse-symbol indented_block_body) [15506 16118])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16138 16142])
                            ("theyear" variable nil (reparse-symbol function_parameters) [16144 16151])
                            ("width" variable nil (reparse-symbol function_parameters) [16153 16158]))                          
                        :documentation "
        Return a formatted year as a table of tables.
        ")
                        (reparse-symbol indented_block_body) [16123 16916])
                    ("formatyearpage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16940 16944])
                            ("theyear" variable nil (reparse-symbol function_parameters) [16946 16953])
                            ("width" variable nil (reparse-symbol function_parameters) [16955 16960])
                            ("css" variable nil (reparse-symbol function_parameters) [16964 16967])
                            ("encoding" variable nil (reparse-symbol function_parameters) [16984 16992]))                          
                        :documentation "
        Return a formatted year as a complete HTML page.
        ")
                        (reparse-symbol indented_block_body) [16921 17877]))                  
                :type "class")
                nil [13533 17877])
            ("different_locale" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17943 17963]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17920 17924])
                            ("locale" variable nil (reparse-symbol function_parameters) [17926 17932]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17907 17964])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17983 17987]))                          )
                        (reparse-symbol indented_block_body) [17969 18106])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18124 18128])
                            ("args" variable nil (reparse-symbol function_parameters) [18130 18135]))                          )
                        (reparse-symbol indented_block_body) [18111 18197]))                  
                :type "class")
                nil [17879 18197])
            ("LocaleTextCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("TextCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("TextCalendar" code nil (reparse-symbol indented_block_body) [18568 18609])
                            ("if" code nil (reparse-symbol indented_block_body) [18618 18685])
                            ("self" variable nil (reparse-symbol indented_block_body) [18693 18713]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18524 18528])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [18530 18542])
                            ("locale" variable nil (reparse-symbol function_parameters) [18546 18552]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18511 18714])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18737 18741])
                            ("day" variable nil (reparse-symbol function_parameters) [18743 18746])
                            ("width" variable nil (reparse-symbol function_parameters) [18748 18753]))                          )
                        (reparse-symbol indented_block_body) [18719 18853])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18878 18882])
                            ("theyear" variable nil (reparse-symbol function_parameters) [18884 18891])
                            ("themonth" variable nil (reparse-symbol function_parameters) [18893 18901])
                            ("width" variable nil (reparse-symbol function_parameters) [18903 18908])
                            ("withyear" variable nil (reparse-symbol function_parameters) [18910 18918]))                          )
                        (reparse-symbol indented_block_body) [18858 19049]))                  
                :type "class")
                nil [18199 19049])
            ("LocaleHTMLCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("HTMLCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTMLCalendar" code nil (reparse-symbol indented_block_body) [19419 19460])
                            ("if" code nil (reparse-symbol indented_block_body) [19469 19536])
                            ("self" variable nil (reparse-symbol indented_block_body) [19544 19564]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19375 19379])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [19381 19393])
                            ("locale" variable nil (reparse-symbol function_parameters) [19397 19403]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19362 19565])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19588 19592])
                            ("day" variable nil (reparse-symbol function_parameters) [19594 19597]))                          )
                        (reparse-symbol indented_block_body) [19570 19690])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19715 19719])
                            ("theyear" variable nil (reparse-symbol function_parameters) [19721 19728])
                            ("themonth" variable nil (reparse-symbol function_parameters) [19730 19738])
                            ("withyear" variable nil (reparse-symbol function_parameters) [19740 19748]))                          )
                        (reparse-symbol indented_block_body) [19695 19872]))                  
                :type "class")
                nil [19051 19872])
            ("c" variable nil nil [19914 19932])
            ("firstweekday" variable nil nil [19934 19966])
            ("setfirstweekday" function (:arguments 
              ( ("firstweekday" variable nil (reparse-symbol function_parameters) [19988 20000]))              ) nil [19968 20130])
            ("monthcalendar" variable nil nil [20131 20166])
            ("prweek" variable nil nil [20167 20184])
            ("week" variable nil nil [20185 20204])
            ("weekheader" variable nil nil [20205 20236])
            ("prmonth" variable nil nil [20237 20256])
            ("month" variable nil nil [20257 20278])
            ("calendar" variable nil nil [20279 20302])
            ("prcal" variable nil nil [20303 20319])
            ("_colwidth" code nil nil [20380 20399])
            ("_spacing" variable nil nil [20437 20449])
            ("format" function
               (:documentation "Prints multi-column formatting for year calendars"
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [20513 20517])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [20519 20527])
                    ("spacing" variable nil (reparse-symbol function_parameters) [20539 20546]))                  )
                nil [20502 20667])
            ("formatstring" function
               (:documentation "Returns a string formatted from n strings, centered within n columns."
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [20686 20690])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [20692 20700])
                    ("spacing" variable nil (reparse-symbol function_parameters) [20712 20719]))                  )
                nil [20669 20888])
            ("EPOCH" variable nil nil [20890 20902])
            ("_EPOCH_ORD" variable nil nil [20903 20954])
            ("timegm" function
               (:documentation "Unrelated but handy function to calculate Unix timestamp from GMT."
                :arguments 
                  ( ("tuple" variable nil (reparse-symbol function_parameters) [20968 20973]))                  )
                nil [20957 21296])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [21307 21311]))              ) nil [21298 24528])
            ("if" code nil nil [24530 24576]))          
      :file "calendar.py"
      :pointmax 24576
      :fsize 24575
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1574109cd99c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
\"\"\"" code nil nil [1 141])
            ("__all__" variable nil nil [143 249])
            ("time" include nil nil [252 272])
            ("math" include nil nil [273 293])
            ("sys" include nil nil [294 304])
            ("operator" include nil nil [305 341])
            ("_cmp" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [352 353])
                ("y" variable nil (reparse-symbol function_parameters) [355 356]))              ) nil [343 406])
            ("MINYEAR" variable nil nil [407 418])
            ("MAXYEAR" variable nil nil [419 433])
            ("_MAXORDINAL" variable nil nil [434 455])
            ("_DAYS_IN_MONTH" variable nil nil [1110 1179])
            ("_DAYS_BEFORE_MONTH" variable nil nil [1181 1206])
            ("dbm" variable nil nil [1253 1260])
            ("for" code nil nil [1261 1342])
            ("del" code nil nil [1342 1354])
            ("_is_leap" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1369 1373]))              ) nil [1356 1480])
            ("_days_before_year" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1503 1507]))              ) nil [1481 1626])
            ("_days_in_month" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1646 1650])
                ("month" variable nil (reparse-symbol function_parameters) [1652 1657]))              ) nil [1627 1848])
            ("_days_before_month" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1872 1876])
                ("month" variable nil (reparse-symbol function_parameters) [1878 1883]))              ) nil [1849 2084])
            ("_ymd2ord" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [2098 2102])
                ("month" variable nil (reparse-symbol function_parameters) [2104 2109])
                ("day" variable nil (reparse-symbol function_parameters) [2111 2114]))              ) nil [2085 2438])
            ("_DI400Y" variable nil nil [2439 2471])
            ("_DI100Y" variable nil nil [2505 2537])
            ("_DI4Y" variable nil nil [2569 2599])
            ("assert" code nil nil [2732 2759])
            ("assert" code nil nil [2875 2908])
            ("assert" code nil nil [3014 3046])
            ("_ord2ymd" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [3061 3062]))              ) nil [3048 5753])
            ("_MONTHNAMES" variable nil nil [5827 5952])
            ("_DAYNAMES" variable nil nil [5953 6020])
            ("_build_struct_time" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [6046 6047])
                ("m" variable nil (reparse-symbol function_parameters) [6049 6050])
                ("d" variable nil (reparse-symbol function_parameters) [6052 6053])
                ("hh" variable nil (reparse-symbol function_parameters) [6055 6057])
                ("mm" variable nil (reparse-symbol function_parameters) [6059 6061])
                ("ss" variable nil (reparse-symbol function_parameters) [6063 6065])
                ("dstflag" variable nil (reparse-symbol function_parameters) [6067 6074]))              ) nil [6023 6229])
            ("_format_time" function (:arguments 
              ( ("hh" variable nil (reparse-symbol function_parameters) [6247 6249])
                ("mm" variable nil (reparse-symbol function_parameters) [6251 6253])
                ("ss" variable nil (reparse-symbol function_parameters) [6255 6257])
                ("us" variable nil (reparse-symbol function_parameters) [6259 6261])
                ("timespec" variable nil (reparse-symbol function_parameters) [6263 6271]))              ) nil [6230 6868])
            ("_format_offset" function (:arguments 
              ( ("off" variable nil (reparse-symbol function_parameters) [6888 6891]))              ) nil [6869 7345])
            ("_wrap_strftime" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [7431 7437])
                ("format" variable nil (reparse-symbol function_parameters) [7439 7445])
                ("timetuple" variable nil (reparse-symbol function_parameters) [7447 7456]))              ) nil [7412 10082])
            ("_parse_isoformat_date" function (:arguments 
              ( ("dtstr" variable nil (reparse-symbol function_parameters) [10157 10162]))              ) nil [10131 10588])
            ("_parse_hh_mm_ss_ff" function (:arguments 
              ( ("tstr" variable nil (reparse-symbol function_parameters) [10612 10616]))              ) nil [10589 11584])
            ("_parse_isoformat_time" function (:arguments 
              ( ("tstr" variable nil (reparse-symbol function_parameters) [11611 11615]))              ) nil [11585 12751])
            ("_check_tzname" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [12829 12833]))              ) nil [12811 13011])
            ("_check_utc_offset" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [13331 13335])
                ("offset" variable nil (reparse-symbol function_parameters) [13337 13343]))              ) nil [13309 13822])
            ("_check_date_fields" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [13846 13850])
                ("month" variable nil (reparse-symbol function_parameters) [13852 13857])
                ("day" variable nil (reparse-symbol function_parameters) [13859 13862]))              ) nil [13823 14295])
            ("_check_time_fields" function (:arguments 
              ( ("hour" variable nil (reparse-symbol function_parameters) [14319 14323])
                ("minute" variable nil (reparse-symbol function_parameters) [14325 14331])
                ("second" variable nil (reparse-symbol function_parameters) [14333 14339])
                ("microsecond" variable nil (reparse-symbol function_parameters) [14341 14352])
                ("fold" variable nil (reparse-symbol function_parameters) [14354 14358]))              ) nil [14296 14995])
            ("_check_tzinfo_arg" function (:arguments 
              ( ("tz" variable nil (reparse-symbol function_parameters) [15018 15020]))              ) nil [14996 15157])
            ("_cmperror" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [15172 15173])
                ("y" variable nil (reparse-symbol function_parameters) [15175 15176]))              ) nil [15158 15289])
            ("_divide_and_round" function
               (:documentation "divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [15312 15313])
                    ("b" variable nil (reparse-symbol function_parameters) [15315 15316]))                  )
                nil [15290 15917])
            ("timedelta" type
               (:documentation "Represent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16420 16481])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [16499 16502])
                        ("days" variable nil (reparse-symbol function_parameters) [16504 16508])
                        ("seconds" variable nil (reparse-symbol function_parameters) [16512 16519])
                        ("microseconds" variable nil (reparse-symbol function_parameters) [16523 16535])
                        ("milliseconds" variable nil (reparse-symbol function_parameters) [16555 16567])
                        ("minutes" variable nil (reparse-symbol function_parameters) [16571 16578])
                        ("hours" variable nil (reparse-symbol function_parameters) [16582 16587])
                        ("weeks" variable nil (reparse-symbol function_parameters) [16591 16596]))                      ) (reparse-symbol indented_block_body) [16487 20423])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20441 20445]))                          )
                        (reparse-symbol indented_block_body) [20428 20925])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20942 20946]))                          )
                        (reparse-symbol indented_block_body) [20930 21321])
                    ("total_seconds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21344 21348]))                          
                        :documentation "Total seconds in the duration.")
                        (reparse-symbol indented_block_body) [21326 21500])
                    ("days" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21560 21564]))                          
                        :documentation "days")
                        (reparse-symbol indented_block_body) [21537 21612])
                    ("seconds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21643 21647]))                          
                        :documentation "seconds")
                        (reparse-symbol indented_block_body) [21617 21701])
                    ("microseconds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21737 21741]))                          
                        :documentation "microseconds")
                        (reparse-symbol indented_block_body) [21706 21805])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21822 21826])
                            ("other" variable nil (reparse-symbol function_parameters) [21828 21833]))                          )
                        (reparse-symbol indented_block_body) [21810 22209])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [22214 22232])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22250 22254])
                            ("other" variable nil (reparse-symbol function_parameters) [22256 22261]))                          )
                        (reparse-symbol indented_block_body) [22238 22637])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22655 22659])
                            ("other" variable nil (reparse-symbol function_parameters) [22661 22666]))                          )
                        (reparse-symbol indented_block_body) [22642 22773])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22790 22794]))                          )
                        (reparse-symbol indented_block_body) [22778 23029])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23046 23050]))                          )
                        (reparse-symbol indented_block_body) [23034 23073])
                    ("__abs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23090 23094]))                          )
                        (reparse-symbol indented_block_body) [23078 23187])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23204 23208])
                            ("other" variable nil (reparse-symbol function_parameters) [23210 23215]))                          )
                        (reparse-symbol indented_block_body) [23192 23747])
                    ("__rmul__" variable nil (reparse-symbol indented_block_body) [23752 23770])
                    ("_to_microseconds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23797 23801]))                          )
                        (reparse-symbol indented_block_body) [23776 23909])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23931 23935])
                            ("other" variable nil (reparse-symbol function_parameters) [23937 23942]))                          )
                        (reparse-symbol indented_block_body) [23914 24248])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24269 24273])
                            ("other" variable nil (reparse-symbol function_parameters) [24275 24280]))                          )
                        (reparse-symbol indented_block_body) [24253 24757])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24774 24778])
                            ("other" variable nil (reparse-symbol function_parameters) [24780 24785]))                          )
                        (reparse-symbol indented_block_body) [24762 24964])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24984 24988])
                            ("other" variable nil (reparse-symbol function_parameters) [24990 24995]))                          )
                        (reparse-symbol indented_block_body) [24969 25213])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25281 25285])
                            ("other" variable nil (reparse-symbol function_parameters) [25287 25292]))                          )
                        (reparse-symbol indented_block_body) [25270 25425])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25441 25445])
                            ("other" variable nil (reparse-symbol function_parameters) [25447 25452]))                          )
                        (reparse-symbol indented_block_body) [25430 25585])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25601 25605])
                            ("other" variable nil (reparse-symbol function_parameters) [25607 25612]))                          )
                        (reparse-symbol indented_block_body) [25590 25744])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25760 25764])
                            ("other" variable nil (reparse-symbol function_parameters) [25766 25771]))                          )
                        (reparse-symbol indented_block_body) [25749 25904])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25920 25924])
                            ("other" variable nil (reparse-symbol function_parameters) [25926 25931]))                          )
                        (reparse-symbol indented_block_body) [25909 26063])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26077 26081])
                            ("other" variable nil (reparse-symbol function_parameters) [26083 26088]))                          )
                        (reparse-symbol indented_block_body) [26068 26192])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26210 26214]))                          )
                        (reparse-symbol indented_block_body) [26197 26332])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26350 26354]))                          )
                        (reparse-symbol indented_block_body) [26337 26471])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26513 26517]))                          )
                        (reparse-symbol indented_block_body) [26499 26583])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26603 26607]))                          )
                        (reparse-symbol indented_block_body) [26588 26660]))                  
                :type "class")
                nil [15919 26660])
            ("timedelta" variable nil nil [26661 26698])
            ("timedelta" variable nil nil [26699 26821])
            ("timedelta" variable nil nil [26822 26870])
            ("date" type
               (:documentation "Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [27347 27397])
                    ("__new__" function
                       (:documentation "Constructor.

        Arguments:

        year, month, day (required, base 1)
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [27415 27418])
                            ("year" variable nil (reparse-symbol function_parameters) [27420 27424])
                            ("month" variable nil (reparse-symbol function_parameters) [27426 27431])
                            ("day" variable nil (reparse-symbol function_parameters) [27438 27441]))                          )
                        (reparse-symbol indented_block_body) [27403 28504])
                    ("fromtimestamp" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28575 28578])
                            ("t" variable nil (reparse-symbol function_parameters) [28580 28581]))                          )
                        (reparse-symbol indented_block_body) [28540 28751])
                    ("today" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28783 28786]))                          )
                        (reparse-symbol indented_block_body) [28756 28895])
                    ("fromordinal" function
                       (:documentation "Construct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28933 28936])
                            ("n" variable nil (reparse-symbol function_parameters) [28938 28939]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28900 29181])
                    ("fromisoformat" function
                       (:documentation "Construct a date from the output of date.isoformat()."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29221 29224])
                            ("date_string" variable nil (reparse-symbol function_parameters) [29226 29237]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29186 29637])
                    ("fromisocalendar" function
                       (:documentation "Construct a date from the ISO year, week number and weekday.

        This is the inverse of the date.isocalendar() function"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29679 29682])
                            ("year" variable nil (reparse-symbol function_parameters) [29684 29688])
                            ("week" variable nil (reparse-symbol function_parameters) [29690 29694])
                            ("day" variable nil (reparse-symbol function_parameters) [29696 29699]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29642 30942])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30989 30993]))                          
                        :documentation "Convert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        ")
                        (reparse-symbol indented_block_body) [30976 31602])
                    ("ctime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31872 31876]))                          )
                        (reparse-symbol indented_block_body) [31862 32112])
                    ("strftime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32130 32134])
                            ("fmt" variable nil (reparse-symbol function_parameters) [32136 32139]))                          )
                        (reparse-symbol indented_block_body) [32117 32236])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32256 32260])
                            ("fmt" variable nil (reparse-symbol function_parameters) [32262 32265]))                          )
                        (reparse-symbol indented_block_body) [32241 32466])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32485 32489]))                          
                        :documentation "Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        ")
                        (reparse-symbol indented_block_body) [32471 32782])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [32787 32806])
                    ("year" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32867 32871]))                          
                        :documentation "year (1-9999)")
                        (reparse-symbol indented_block_body) [32844 32928])
                    ("month" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32957 32961]))                          
                        :documentation "month (1-12)")
                        (reparse-symbol indented_block_body) [32933 33018])
                    ("day" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33045 33049]))                          
                        :documentation "day (1-31)")
                        (reparse-symbol indented_block_body) [33023 33102])
                    ("timetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33219 33223]))                          )
                        (reparse-symbol indented_block_body) [33205 33411])
                    ("toordinal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33430 33434]))                          
                        :documentation "Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        ")
                        (reparse-symbol indented_block_body) [33416 33694])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33711 33715])
                            ("year" variable nil (reparse-symbol function_parameters) [33717 33721])
                            ("month" variable nil (reparse-symbol function_parameters) [33728 33733])
                            ("day" variable nil (reparse-symbol function_parameters) [33740 33743]))                          
                        :documentation "Return a new date with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [33699 34034])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34097 34101])
                            ("other" variable nil (reparse-symbol function_parameters) [34103 34108]))                          )
                        (reparse-symbol indented_block_body) [34086 34218])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34234 34238])
                            ("other" variable nil (reparse-symbol function_parameters) [34240 34245]))                          )
                        (reparse-symbol indented_block_body) [34223 34355])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34371 34375])
                            ("other" variable nil (reparse-symbol function_parameters) [34377 34382]))                          )
                        (reparse-symbol indented_block_body) [34360 34491])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34507 34511])
                            ("other" variable nil (reparse-symbol function_parameters) [34513 34518]))                          )
                        (reparse-symbol indented_block_body) [34496 34628])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34644 34648])
                            ("other" variable nil (reparse-symbol function_parameters) [34650 34655]))                          )
                        (reparse-symbol indented_block_body) [34633 34764])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34778 34782])
                            ("other" variable nil (reparse-symbol function_parameters) [34784 34789]))                          )
                        (reparse-symbol indented_block_body) [34769 34988])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35006 35010]))                          )
                        (reparse-symbol indented_block_body) [34993 35144])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35181 35185])
                            ("other" variable nil (reparse-symbol function_parameters) [35187 35192]))                          )
                        (reparse-symbol indented_block_body) [35169 35490])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [35495 35513])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35531 35535])
                            ("other" variable nil (reparse-symbol function_parameters) [35537 35542]))                          
                        :documentation "Subtract two dates, or a date and a timedelta.")
                        (reparse-symbol indented_block_body) [35519 35881])
                    ("weekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35898 35902]))                          )
                        (reparse-symbol indented_block_body) [35886 36016])
                    ("isoweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36098 36102]))                          )
                        (reparse-symbol indented_block_body) [36083 36248])
                    ("isocalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36269 36273]))                          
                        :documentation "Return a named tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        ")
                        (reparse-symbol indented_block_body) [36253 37268])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37310 37314]))                          )
                        (reparse-symbol indented_block_body) [37296 37418])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37438 37442])
                            ("string" variable nil (reparse-symbol function_parameters) [37444 37450]))                          )
                        (reparse-symbol indented_block_body) [37423 37540])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37560 37564]))                          )
                        (reparse-symbol indented_block_body) [37545 37617]))                  
                :type "class")
                nil [26872 37617])
            ("_date_class" variable nil nil [37618 37636])
            ("date" variable nil nil [37696 37720])
            ("date" variable nil nil [37721 37750])
            ("date" variable nil nil [37751 37786])
            ("tzinfo" type
               (:documentation "Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [37943 37957])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37974 37978])
                            ("dt" variable nil (reparse-symbol function_parameters) [37980 37982]))                          )
                        (reparse-symbol indented_block_body) [37963 38109])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38128 38132])
                            ("dt" variable nil (reparse-symbol function_parameters) [38134 38136]))                          )
                        (reparse-symbol indented_block_body) [38114 38302])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38315 38319])
                            ("dt" variable nil (reparse-symbol function_parameters) [38321 38323]))                          
                        :documentation "datetime -> DST offset as timedelta, positive for east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        ")
                        (reparse-symbol indented_block_body) [38307 38575])
                    ("fromutc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38592 38596])
                            ("dt" variable nil (reparse-symbol function_parameters) [38598 38600]))                          )
                        (reparse-symbol indented_block_body) [38580 39552])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39595 39599]))                          )
                        (reparse-symbol indented_block_body) [39580 40068]))                  
                :type "class")
                nil [37789 40068])
            ("IsoCalendarDate" type
               (:superclasses ("tuple")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [40117 40120])
                        ("year" variable nil (reparse-symbol function_parameters) [40122 40126])
                        ("week" variable nil (reparse-symbol function_parameters) [40128 40132])
                        ("weekday" variable nil (reparse-symbol function_parameters) [40134 40141]))                      ) (reparse-symbol indented_block_body) [40105 40206])
                    ("year" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40234 40238]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40211 40264])
                    ("week" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40292 40296]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40269 40322])
                    ("weekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40353 40357]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40327 40383])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40403 40407]))                          )
                        (reparse-symbol indented_block_body) [40388 40583])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40601 40605]))                          )
                        (reparse-symbol indented_block_body) [40588 40725]))                  
                :type "class")
                nil [40070 40725])
            ("_IsoCalendarDate" variable nil nil [40727 40761])
            ("del" code nil nil [40762 40781])
            ("_tzinfo_class" variable nil nil [40782 40804])
            ("time" type
               (:documentation "Time with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [41149 41239])
                    ("__new__" function
                       (:documentation "Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [41257 41260])
                            ("hour" variable nil (reparse-symbol function_parameters) [41262 41266])
                            ("minute" variable nil (reparse-symbol function_parameters) [41270 41276])
                            ("second" variable nil (reparse-symbol function_parameters) [41280 41286])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [41290 41301])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [41305 41311])
                            ("fold" variable nil (reparse-symbol function_parameters) [41321 41325]))                          )
                        (reparse-symbol indented_block_body) [41245 42679])
                    ("hour" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42739 42743]))                          
                        :documentation "hour (0-23)")
                        (reparse-symbol indented_block_body) [42716 42798])
                    ("minute" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42828 42832]))                          
                        :documentation "minute (0-59)")
                        (reparse-symbol indented_block_body) [42803 42891])
                    ("second" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42921 42925]))                          
                        :documentation "second (0-59)")
                        (reparse-symbol indented_block_body) [42896 42984])
                    ("microsecond" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43019 43023]))                          
                        :documentation "microsecond (0-999999)")
                        (reparse-symbol indented_block_body) [42989 43096])
                    ("tzinfo" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43126 43130]))                          
                        :documentation "timezone info object")
                        (reparse-symbol indented_block_body) [43101 43196])
                    ("fold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43224 43228]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43201 43257])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43372 43376])
                            ("other" variable nil (reparse-symbol function_parameters) [43378 43383]))                          )
                        (reparse-symbol indented_block_body) [43361 43529])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43545 43549])
                            ("other" variable nil (reparse-symbol function_parameters) [43551 43556]))                          )
                        (reparse-symbol indented_block_body) [43534 43684])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43700 43704])
                            ("other" variable nil (reparse-symbol function_parameters) [43706 43711]))                          )
                        (reparse-symbol indented_block_body) [43689 43838])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43854 43858])
                            ("other" variable nil (reparse-symbol function_parameters) [43860 43865]))                          )
                        (reparse-symbol indented_block_body) [43843 43993])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44009 44013])
                            ("other" variable nil (reparse-symbol function_parameters) [44015 44020]))                          )
                        (reparse-symbol indented_block_body) [43998 44147])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44161 44165])
                            ("other" variable nil (reparse-symbol function_parameters) [44167 44172])
                            ("allow_mixed" variable nil (reparse-symbol function_parameters) [44174 44185]))                          )
                        (reparse-symbol indented_block_body) [44152 45257])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45275 45279]))                          
                        :documentation "Hash.")
                        (reparse-symbol indented_block_body) [45262 46093])
                    ("_tzstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46137 46141]))                          
                        :documentation "Return formatted timezone offset (+xx:xx) or an empty string.")
                        (reparse-symbol indented_block_body) [46126 46286])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46304 46308]))                          
                        :documentation "Convert to formal string, for repr().")
                        (reparse-symbol indented_block_body) [46291 46985])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47004 47008])
                            ("timespec" variable nil (reparse-symbol function_parameters) [47010 47018]))                          
                        :documentation "Return the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        ")
                        (reparse-symbol indented_block_body) [46990 47637])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [47642 47661])
                    ("fromisoformat" function
                       (:documentation "Construct a time from the output of isoformat()."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [47702 47705])
                            ("time_string" variable nil (reparse-symbol function_parameters) [47707 47718]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47667 48071])
                    ("strftime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48090 48094])
                            ("fmt" variable nil (reparse-symbol function_parameters) [48096 48099]))                          
                        :documentation "Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        ")
                        (reparse-symbol indented_block_body) [48077 48529])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48549 48553])
                            ("fmt" variable nil (reparse-symbol function_parameters) [48555 48558]))                          )
                        (reparse-symbol indented_block_body) [48534 48759])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48804 48808]))                          
                        :documentation "Return the timezone offset as timedelta, positive east of UTC
         (negative west of UTC).")
                        (reparse-symbol indented_block_body) [48790 49092])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49108 49112]))                          
                        :documentation "Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",
        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.
        ")
                        (reparse-symbol indented_block_body) [49097 49546])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49559 49563]))                          
                        :documentation "Return 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        ")
                        (reparse-symbol indented_block_body) [49551 50110])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50127 50131])
                            ("hour" variable nil (reparse-symbol function_parameters) [50133 50137])
                            ("minute" variable nil (reparse-symbol function_parameters) [50144 50150])
                            ("second" variable nil (reparse-symbol function_parameters) [50157 50163])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [50170 50181])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [50204 50210])
                            ("fold" variable nil (reparse-symbol function_parameters) [50220 50224]))                          
                        :documentation "Return a new time with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [50115 50750])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50792 50796])
                            ("protocol" variable nil (reparse-symbol function_parameters) [50798 50806]))                          )
                        (reparse-symbol indented_block_body) [50778 51206])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51226 51230])
                            ("string" variable nil (reparse-symbol function_parameters) [51232 51238])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [51240 51246]))                          )
                        (reparse-symbol indented_block_body) [51211 51674])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51697 51701])
                            ("protocol" variable nil (reparse-symbol function_parameters) [51703 51711]))                          )
                        (reparse-symbol indented_block_body) [51679 51772])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51792 51796]))                          )
                        (reparse-symbol indented_block_body) [51777 51836]))                  
                :type "class")
                nil [40806 51836])
            ("_time_class" variable nil nil [51837 51855])
            ("time" variable nil nil [51915 51939])
            ("time" variable nil nil [51940 51975])
            ("time" variable nil nil [51976 52019])
            ("datetime" type
               (:documentation "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    "
                :superclasses ("date")
                :members 
                  ( ("__slots__" code nil (reparse-symbol indented_block_body) [52293 52336])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [52354 52357])
                        ("year" variable nil (reparse-symbol function_parameters) [52359 52363])
                        ("month" variable nil (reparse-symbol function_parameters) [52365 52370])
                        ("day" variable nil (reparse-symbol function_parameters) [52377 52380])
                        ("hour" variable nil (reparse-symbol function_parameters) [52387 52391])
                        ("minute" variable nil (reparse-symbol function_parameters) [52395 52401])
                        ("second" variable nil (reparse-symbol function_parameters) [52405 52411])
                        ("microsecond" variable nil (reparse-symbol function_parameters) [52431 52442])
                        ("tzinfo" variable nil (reparse-symbol function_parameters) [52446 52452])
                        ("fold" variable nil (reparse-symbol function_parameters) [52462 52466]))                      ) (reparse-symbol indented_block_body) [52342 53751])
                    ("hour" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53811 53815]))                          
                        :documentation "hour (0-23)")
                        (reparse-symbol indented_block_body) [53788 53870])
                    ("minute" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53900 53904]))                          
                        :documentation "minute (0-59)")
                        (reparse-symbol indented_block_body) [53875 53963])
                    ("second" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53993 53997]))                          
                        :documentation "second (0-59)")
                        (reparse-symbol indented_block_body) [53968 54056])
                    ("microsecond" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54091 54095]))                          
                        :documentation "microsecond (0-999999)")
                        (reparse-symbol indented_block_body) [54061 54168])
                    ("tzinfo" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54198 54202]))                          
                        :documentation "timezone info object")
                        (reparse-symbol indented_block_body) [54173 54268])
                    ("fold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54296 54300]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [54273 54329])
                    ("_fromtimestamp" function
                       (:documentation "Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [54370 54373])
                            ("t" variable nil (reparse-symbol function_parameters) [54375 54376])
                            ("utc" variable nil (reparse-symbol function_parameters) [54378 54381])
                            ("tz" variable nil (reparse-symbol function_parameters) [54383 54385]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [54334 56140])
                    ("fromtimestamp" function
                       (:documentation "Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [56180 56183])
                            ("t" variable nil (reparse-symbol function_parameters) [56185 56186])
                            ("tz" variable nil (reparse-symbol function_parameters) [56188 56190]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [56145 56431])
                    ("utcfromtimestamp" function
                       (:documentation "Construct a naive UTC datetime from a POSIX timestamp."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [56474 56477])
                            ("t" variable nil (reparse-symbol function_parameters) [56479 56480]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [56436 56601])
                    ("now" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [56631 56634])
                            ("tz" variable nil (reparse-symbol function_parameters) [56636 56638]))                          )
                        (reparse-symbol indented_block_body) [56606 56788])
                    ("utcnow" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [56821 56824]))                          )
                        (reparse-symbol indented_block_body) [56793 56944])
                    ("combine" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [56978 56981])
                            ("date" variable nil (reparse-symbol function_parameters) [56983 56987])
                            ("time" variable nil (reparse-symbol function_parameters) [56989 56993])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [56995 57001]))                          )
                        (reparse-symbol indented_block_body) [56949 57535])
                    ("fromisoformat" function
                       (:documentation "Construct a datetime from the output of datetime.isoformat()."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [57575 57578])
                            ("date_string" variable nil (reparse-symbol function_parameters) [57580 57591]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57540 58388])
                    ("timetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58407 58411]))                          )
                        (reparse-symbol indented_block_body) [58393 58801])
                    ("_mktime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58818 58822]))                          
                        :documentation "Return integer POSIX timestamp.")
                        (reparse-symbol indented_block_body) [58806 59981])
                    ("timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60001 60005]))                          )
                        (reparse-symbol indented_block_body) [59987 60225])
                    ("utctimetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60247 60251]))                          )
                        (reparse-symbol indented_block_body) [60230 60562])
                    ("date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60576 60580]))                          )
                        (reparse-symbol indented_block_body) [60567 60671])
                    ("time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60685 60689]))                          )
                        (reparse-symbol indented_block_body) [60676 60833])
                    ("timetz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60849 60853]))                          )
                        (reparse-symbol indented_block_body) [60838 61031])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61048 61052])
                            ("year" variable nil (reparse-symbol function_parameters) [61054 61058])
                            ("month" variable nil (reparse-symbol function_parameters) [61065 61070])
                            ("day" variable nil (reparse-symbol function_parameters) [61077 61080])
                            ("hour" variable nil (reparse-symbol function_parameters) [61087 61091])
                            ("minute" variable nil (reparse-symbol function_parameters) [61114 61120])
                            ("second" variable nil (reparse-symbol function_parameters) [61127 61133])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [61140 61151])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [61158 61164])
                            ("fold" variable nil (reparse-symbol function_parameters) [61190 61194]))                          
                        :documentation "Return a new datetime with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [61036 61929])
                    ("_local_timezone" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61954 61958]))                          )
                        (reparse-symbol indented_block_body) [61934 62322])
                    ("astimezone" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62342 62346])
                            ("tz" variable nil (reparse-symbol function_parameters) [62348 62350]))                          )
                        (reparse-symbol indented_block_body) [62327 63127])
                    ("ctime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63175 63179]))                          )
                        (reparse-symbol indented_block_body) [63165 63485])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63504 63508])
                            ("sep" variable nil (reparse-symbol function_parameters) [63510 63513])
                            ("timespec" variable nil (reparse-symbol function_parameters) [63519 63527]))                          
                        :documentation "Return the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        ")
                        (reparse-symbol indented_block_body) [63490 64522])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64540 64544]))                          
                        :documentation "Convert to formal string, for repr().")
                        (reparse-symbol indented_block_body) [64527 65235])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65252 65256]))                          )
                        (reparse-symbol indented_block_body) [65240 65338])
                    ("strptime" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [65373 65376])
                            ("date_string" variable nil (reparse-symbol function_parameters) [65378 65389])
                            ("format" variable nil (reparse-symbol function_parameters) [65391 65397]))                          )
                        (reparse-symbol indented_block_body) [65343 65581])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65600 65604]))                          
                        :documentation "Return the timezone offset as timedelta positive east of UTC (negative west of
        UTC).")
                        (reparse-symbol indented_block_body) [65586 65886])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65902 65906]))                          
                        :documentation "Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",
        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.
        ")
                        (reparse-symbol indented_block_body) [65891 66340])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66353 66357]))                          
                        :documentation "Return 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        ")
                        (reparse-symbol indented_block_body) [66345 66904])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66971 66975])
                            ("other" variable nil (reparse-symbol function_parameters) [66977 66982]))                          )
                        (reparse-symbol indented_block_body) [66960 67199])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67215 67219])
                            ("other" variable nil (reparse-symbol function_parameters) [67221 67226]))                          )
                        (reparse-symbol indented_block_body) [67204 67435])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67451 67455])
                            ("other" variable nil (reparse-symbol function_parameters) [67457 67462]))                          )
                        (reparse-symbol indented_block_body) [67440 67670])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67686 67690])
                            ("other" variable nil (reparse-symbol function_parameters) [67692 67697]))                          )
                        (reparse-symbol indented_block_body) [67675 67906])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67922 67926])
                            ("other" variable nil (reparse-symbol function_parameters) [67928 67933]))                          )
                        (reparse-symbol indented_block_body) [67911 68141])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68155 68159])
                            ("other" variable nil (reparse-symbol function_parameters) [68161 68166])
                            ("allow_mixed" variable nil (reparse-symbol function_parameters) [68168 68179]))                          )
                        (reparse-symbol indented_block_body) [68146 69619])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69636 69640])
                            ("other" variable nil (reparse-symbol function_parameters) [69642 69647]))                          )
                        (reparse-symbol indented_block_body) [69624 70479])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [70484 70502])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70520 70524])
                            ("other" variable nil (reparse-symbol function_parameters) [70526 70531]))                          )
                        (reparse-symbol indented_block_body) [70508 71448])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71466 71470]))                          )
                        (reparse-symbol indented_block_body) [71453 72015])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72057 72061])
                            ("protocol" variable nil (reparse-symbol function_parameters) [72063 72071]))                          )
                        (reparse-symbol indented_block_body) [72043 72575])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72595 72599])
                            ("string" variable nil (reparse-symbol function_parameters) [72601 72607])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [72609 72615]))                          )
                        (reparse-symbol indented_block_body) [72580 73126])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73149 73153])
                            ("protocol" variable nil (reparse-symbol function_parameters) [73155 73163]))                          )
                        (reparse-symbol indented_block_body) [73131 73224])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73244 73248]))                          )
                        (reparse-symbol indented_block_body) [73229 73288]))                  
                :type "class")
                nil [52022 73288])
            ("datetime" variable nil nil [73290 73322])
            ("datetime" variable nil nil [73323 73380])
            ("datetime" variable nil nil [73381 73428])
            ("_isoweek1monday" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [73451 73455]))              ) nil [73431 73811])
            ("timezone" type
               (:superclasses ("tzinfo")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [73841 73871])
                    ("_Omitted" variable nil (reparse-symbol indented_block_body) [73915 73934])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [73951 73954])
                        ("offset" variable nil (reparse-symbol function_parameters) [73956 73962])
                        ("name" variable nil (reparse-symbol function_parameters) [73964 73968]))                      ) (reparse-symbol indented_block_body) [73939 74578])
                    ("_create" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [74612 74615])
                            ("offset" variable nil (reparse-symbol function_parameters) [74617 74623])
                            ("name" variable nil (reparse-symbol function_parameters) [74625 74629]))                          )
                        (reparse-symbol indented_block_body) [74583 74748])
                    ("__getinitargs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74773 74777]))                          
                        :documentation "pickle support")
                        (reparse-symbol indented_block_body) [74753 74917])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74933 74937])
                            ("other" variable nil (reparse-symbol function_parameters) [74939 74944]))                          )
                        (reparse-symbol indented_block_body) [74922 75066])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75084 75088]))                          )
                        (reparse-symbol indented_block_body) [75071 75125])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75143 75147]))                          
                        :documentation "Convert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        \"datetime.timezone(datetime.timedelta(-1, 68400), 'EST')\"
        ")
                        (reparse-symbol indented_block_body) [75130 75895])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75912 75916]))                          )
                        (reparse-symbol indented_block_body) [75900 75952])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75971 75975])
                            ("dt" variable nil (reparse-symbol function_parameters) [75977 75979]))                          )
                        (reparse-symbol indented_block_body) [75957 76176])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76192 76196])
                            ("dt" variable nil (reparse-symbol function_parameters) [76198 76200]))                          )
                        (reparse-symbol indented_block_body) [76181 76487])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76500 76504])
                            ("dt" variable nil (reparse-symbol function_parameters) [76506 76508]))                          )
                        (reparse-symbol indented_block_body) [76492 76691])
                    ("fromutc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76708 76712])
                            ("dt" variable nil (reparse-symbol function_parameters) [76714 76716]))                          )
                        (reparse-symbol indented_block_body) [76696 77043])
                    ("_maxoffset" variable nil (reparse-symbol indented_block_body) [77048 77097])
                    ("_minoffset" code nil (reparse-symbol indented_block_body) [77102 77126])
                    ("_name_from_offset" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("delta" variable nil (reparse-symbol function_parameters) [77172 77177]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [77132 77819]))                  
                :type "class")
                nil [73813 77819])
            ("timezone" variable nil nil [77820 77865])
            ("timezone" variable nil nil [78059 78124])
            ("timezone" variable nil nil [78125 78189])
            ("_EPOCH" variable nil nil [78190 78240])
            ("try" code nil nil [87068 88060]))          
      :file "datetime.py"
      :pointmax 88060
      :fsize 88059
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((MULT 61187 . 61188) (COMMA 61188 . 61189) (NAME 54742 . 54751) (IF 54767 . 54769) (ELSE 54774 . 54778) (MULT 52459 . 52460) (COMMA 52460 . 52461) (MULT 50217 . 50218) (COMMA 50218 . 50219) (MULT 41318 . 41319) (COMMA 41319 . 41320) (DIV 40143 . 40144) (NAME 15791 . 15808) (IF 15817 . 15819) (ELSE 15826 . 15830) (NAME 12471 . 12477) (IF 12483 . 12485) (ELSE 12510 . 12514) (NAME 11912 . 11919) (IF 11938 . 11940) (ELSE 11952 . 11956) (NAME 6601 . 6609) (IF 6627 . 6629) (ELSE 6633 . 6637) (IF 389 . 391) (ELSE 398 . 402) (RETURN 363 . 369) (IF 372 . 374) (ELSE 382 . 386)))
    (semanticdb-table "semanticdb-table-157410d8a6c8"
      :file "random.py"
      :fsize 33221
      :lastmodtime '(25147 42948 0 0))
    (semanticdb-table "semanticdb-table-157410d8a72c"
      :file "pathlib.py"
      :fsize 49526
      :lastmodtime '(25147 42948 0 0))
    (semanticdb-table "semanticdb-table-15741028c1c8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.

\"\"\"" code nil nil [1 419])
            ("sys" include nil nil [421 431])
            ("encodings" include nil nil [432 448])
            ("encodings.aliases" include nil nil [449 473])
            ("re" include nil nil [474 483])
            ("_collections_abc" include nil nil [484 507])
            ("builtins" include nil nil [508 548])
            ("functools" include nil nil [549 565])
            ("__all__" variable nil nil [814 1161])
            ("_strcoll" function
               (:documentation " strcoll(string,string) -> int.
        Compares two strings according to the locale.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1176 1177])
                    ("b" variable nil (reparse-symbol function_parameters) [1178 1179]))                  )
                nil [1163 1312])
            ("_strxfrm" function
               (:documentation " strxfrm(string) -> string.
        Returns a string that behaves for cmp locale-aware.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1326 1327]))                  )
                nil [1313 1446])
            ("try" code nil nil [1447 2836])
            ("if" code nil nil [2902 2956])
            ("if" code nil nil [2956 3010])
            ("_localeconv" variable nil nil [3012 3036])
            ("_override_localeconv" variable nil nil [3153 3178])
            ("" code nil nil [3196 3209])
            ("localeconv" function nil nil [3210 3331])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3475 3483]))              ) nil [3451 3911])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3964 3965])
                ("monetary" variable nil (reparse-symbol function_parameters) [3967 3975]))              ) nil [3953 4853])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4936 4937])
                ("amount" variable nil (reparse-symbol function_parameters) [4939 4945]))              ) nil [4917 5159])
            ("_percent_re" variable nil nil [5160 5289])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [5303 5310])
                ("value" variable nil (reparse-symbol function_parameters) [5312 5317])
                ("grouping" variable nil (reparse-symbol function_parameters) [5319 5327])
                ("monetary" variable nil (reparse-symbol function_parameters) [5335 5343])
                ("additional" variable nil (reparse-symbol function_parameters) [5351 5362]))              ) nil [5291 5601])
            ("_localize" function (:arguments 
              ( ("formatted" variable nil (reparse-symbol function_parameters) [5688 5697])
                ("grouping" variable nil (reparse-symbol function_parameters) [5699 5707])
                ("monetary" variable nil (reparse-symbol function_parameters) [5715 5723]))              ) nil [5674 6412])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.

    Grouping is applied if the third parameter is true.
    Conversion uses monetary thousands separator and grouping strings if
    forth parameter monetary is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6431 6432])
                    ("val" variable nil (reparse-symbol function_parameters) [6434 6437])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6439 6447])
                    ("monetary" variable nil (reparse-symbol function_parameters) [6455 6463]))                  )
                nil [6413 7757])
            ("format" function
               (:documentation "Deprecated, use format_string instead."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [7769 7776])
                    ("value" variable nil (reparse-symbol function_parameters) [7778 7783])
                    ("grouping" variable nil (reparse-symbol function_parameters) [7785 7793])
                    ("monetary" variable nil (reparse-symbol function_parameters) [7801 7809])
                    ("additional" variable nil (reparse-symbol function_parameters) [7817 7828]))                  )
                nil [7758 8395])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8409 8412])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8414 8420])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8427 8435])
                    ("international" variable nil (reparse-symbol function_parameters) [8443 8456]))                  )
                nil [8396 10002])
            ("str" function
               (:documentation "Convert float to string, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [10011 10014]))                  )
                nil [10003 10117])
            ("delocalize" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10133 10139]))              ) nil [10118 10515])
            ("localize" function
               (:documentation "Parses a string as locale number according to the locale settings."
                :arguments 
                  ( ("string" variable nil (reparse-symbol function_parameters) [10529 10535])
                    ("grouping" variable nil (reparse-symbol function_parameters) [10537 10545])
                    ("monetary" variable nil (reparse-symbol function_parameters) [10553 10561]))                  )
                nil [10516 10696])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10706 10712])
                ("func" variable nil (reparse-symbol function_parameters) [10714 10718]))              ) nil [10697 10830])
            ("atoi" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10840 10846]))              ) nil [10831 10956])
            ("_test" function nil nil [10957 11159])
            ("_setlocale" variable nil nil [11373 11395])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11419 11423])
                ("encoding" variable nil (reparse-symbol function_parameters) [11425 11433]))              ) nil [11397 12378])
            ("_append_modifier" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [12400 12404])
                ("modifier" variable nil (reparse-symbol function_parameters) [12406 12414]))              ) nil [12379 12755])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [12770 12780]))                  )
                nil [12756 15648])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [15671 15681]))                  )
                nil [15649 16889])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [16912 16923]))                  )
                nil [16890 17482])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [17504 17511]))                  )
                nil [17483 19468])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19484 19492]))                  )
                nil [19470 20072])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [20087 20095])
                    ("locale" variable nil (reparse-symbol function_parameters) [20097 20103]))                  )
                nil [20073 20651])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [20668 20676]))                  )
                nil [20652 20932])
            ("try" code nil nil [20934 21484])
            ("try" code nil nil [21485 22274])
            ("locale_encoding_alias" variable nil nil [22835 25179])
            ("for" code nil nil [25181 25302])
            ("locale_alias" variable nil nil [31338 67518])
            ("windows_locale" variable nil nil [67992 76151])
            ("_print_locale" function (:documentation " Test function.
    ") nil [76153 77875])
            ("try" code nil nil [77881 77969])
            ("if" code nil nil [77970 78125]))          
      :file "locale.py"
      :pointmax 78125
      :fsize 78124
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((RAISE 17337 . 17342) (FROM 17472 . 17476) (NEWLINE 17481 . 17482)))
    (semanticdb-table "semanticdb-table-15741093ea10"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Operator Interface

This module exports a set of functions corresponding to the intrinsic
operators of Python.  For example, operator.add(x, y) is equivalent
to the expression x+y.  The function names are those used for special
methods; variants without leading and trailing '__' are also provided
for convenience.

This is the pure Python implementation of the module.
\"\"\"" code nil nil [1 378])
            ("__all__" variable nil nil [380 962])
            ("builtins" include nil nil [964 996])
            ("lt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1088 1089])
                ("b" variable nil (reparse-symbol function_parameters) [1091 1092]))              ) nil [1081 1133])
            ("le" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1141 1142])
                ("b" variable nil (reparse-symbol function_parameters) [1144 1145]))              ) nil [1134 1188])
            ("eq" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1196 1197])
                ("b" variable nil (reparse-symbol function_parameters) [1199 1200]))              ) nil [1189 1243])
            ("ne" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1251 1252])
                ("b" variable nil (reparse-symbol function_parameters) [1254 1255]))              ) nil [1244 1298])
            ("ge" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1306 1307])
                ("b" variable nil (reparse-symbol function_parameters) [1309 1310]))              ) nil [1299 1353])
            ("gt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1361 1362])
                ("b" variable nil (reparse-symbol function_parameters) [1364 1365]))              ) nil [1354 1406])
            ("not_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1498 1499]))              ) nil [1489 1540])
            ("truth" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1551 1552]))              ) nil [1541 1636])
            ("is_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1645 1646])
                ("b" variable nil (reparse-symbol function_parameters) [1648 1649]))              ) nil [1637 1692])
            ("is_not" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1704 1705])
                ("b" variable nil (reparse-symbol function_parameters) [1707 1708]))              ) nil [1693 1759])
            ("abs" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1850 1851]))              ) nil [1842 1895])
            ("add" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1904 1905])
                ("b" variable nil (reparse-symbol function_parameters) [1907 1908]))              ) nil [1896 1949])
            ("and_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1959 1960])
                ("b" variable nil (reparse-symbol function_parameters) [1962 1963]))              ) nil [1950 2004])
            ("floordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2018 2019])
                ("b" variable nil (reparse-symbol function_parameters) [2021 2022]))              ) nil [2005 2065])
            ("index" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2076 2077]))              ) nil [2066 2134])
            ("inv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2143 2144]))              ) nil [2135 2179])
            ("invert" variable nil nil [2179 2191])
            ("lshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2204 2205])
                ("b" variable nil (reparse-symbol function_parameters) [2207 2208]))              ) nil [2193 2251])
            ("mod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2260 2261])
                ("b" variable nil (reparse-symbol function_parameters) [2263 2264]))              ) nil [2252 2305])
            ("mul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2314 2315])
                ("b" variable nil (reparse-symbol function_parameters) [2317 2318]))              ) nil [2306 2359])
            ("matmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2371 2372])
                ("b" variable nil (reparse-symbol function_parameters) [2374 2375]))              ) nil [2360 2416])
            ("neg" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2425 2426]))              ) nil [2417 2461])
            ("or_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2470 2471])
                ("b" variable nil (reparse-symbol function_parameters) [2473 2474]))              ) nil [2462 2515])
            ("pos" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2524 2525]))              ) nil [2516 2560])
            ("pow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2569 2570])
                ("b" variable nil (reparse-symbol function_parameters) [2572 2573]))              ) nil [2561 2616])
            ("rshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2628 2629])
                ("b" variable nil (reparse-symbol function_parameters) [2631 2632]))              ) nil [2617 2675])
            ("sub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2684 2685])
                ("b" variable nil (reparse-symbol function_parameters) [2687 2688]))              ) nil [2676 2729])
            ("truediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2742 2743])
                ("b" variable nil (reparse-symbol function_parameters) [2745 2746]))              ) nil [2730 2787])
            ("xor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2796 2797])
                ("b" variable nil (reparse-symbol function_parameters) [2799 2800]))              ) nil [2788 2841])
            ("concat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2935 2936])
                ("b" variable nil (reparse-symbol function_parameters) [2938 2939]))              ) nil [2924 3139])
            ("contains" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3153 3154])
                ("b" variable nil (reparse-symbol function_parameters) [3156 3157]))              ) nil [3140 3225])
            ("countOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3238 3239])
                ("b" variable nil (reparse-symbol function_parameters) [3241 3242]))              ) nil [3226 3412])
            ("delitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3425 3426])
                ("b" variable nil (reparse-symbol function_parameters) [3428 3429]))              ) nil [3413 3469])
            ("getitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3482 3483])
                ("b" variable nil (reparse-symbol function_parameters) [3485 3486]))              ) nil [3470 3525])
            ("indexOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3538 3539])
                ("b" variable nil (reparse-symbol function_parameters) [3541 3542]))              ) nil [3526 3740])
            ("setitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3753 3754])
                ("b" variable nil (reparse-symbol function_parameters) [3756 3757])
                ("c" variable nil (reparse-symbol function_parameters) [3759 3760]))              ) nil [3741 3800])
            ("length_hint" function
               (:documentation "
    Return an estimate of the number of items in obj.
    This is useful for presizing containers when building from an iterable.

    If the object supports len(), the result will be exact. Otherwise, it may
    over- or under-estimate by an arbitrary amount. The result will be an
    integer >= 0.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [3817 3820])
                    ("default" variable nil (reparse-symbol function_parameters) [3822 3829]))                  )
                nil [3801 4895])
            ("attrgetter" type
               (:documentation "
    Return a callable object that fetches the given attribute(s) from its operand.
    After f = attrgetter('name'), the call f(r) returns r.name.
    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
    After h = attrgetter('name.first', 'name.last'), the call h(r) returns
    (r.name.first, r.name.last).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5353 5384])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5432 6024]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5403 5407])
                            ("attr" variable nil (reparse-symbol function_parameters) [5409 5413])
                            ("attrs" variable nil (reparse-symbol function_parameters) [5415 5421]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5390 6024])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6042 6046])
                            ("obj" variable nil (reparse-symbol function_parameters) [6048 6051]))                          )
                        (reparse-symbol indented_block_body) [6029 6085])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6103 6107]))                          )
                        (reparse-symbol indented_block_body) [6090 6291])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6311 6315]))                          )
                        (reparse-symbol indented_block_body) [6296 6361]))                  
                :type "class")
                nil [4978 6361])
            ("itemgetter" type
               (:documentation "
    Return a callable object that fetches the given item(s) from its operand.
    After f = itemgetter(2), the call f(r) returns r[2].
    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6611 6642])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6690 7001]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6661 6665])
                            ("item" variable nil (reparse-symbol function_parameters) [6667 6671])
                            ("items" variable nil (reparse-symbol function_parameters) [6673 6679]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6648 7001])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7019 7023])
                            ("obj" variable nil (reparse-symbol function_parameters) [7025 7028]))                          )
                        (reparse-symbol indented_block_body) [7006 7062])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7080 7084]))                          )
                        (reparse-symbol indented_block_body) [7067 7264])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7284 7288]))                          )
                        (reparse-symbol indented_block_body) [7269 7334]))                  
                :type "class")
                nil [6362 7334])
            ("methodcaller" type
               (:documentation "
    Return a callable object that calls the given method on its operand.
    After f = methodcaller('name'), the call f(r) returns r.name().
    After g = methodcaller('name', 'date', foo=1), the call g(r) returns
    r.name('date', foo=1).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7616 7657])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7717 7734])
                            ("if" code nil (reparse-symbol indented_block_body) [7743 7839])
                            ("self" variable nil (reparse-symbol indented_block_body) [7847 7864])
                            ("self" variable nil (reparse-symbol indented_block_body) [7873 7894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7676 7680])
                            ("name" variable nil (reparse-symbol function_parameters) [7682 7686])
                            ("args" variable nil (reparse-symbol function_parameters) [7691 7696])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7698 7706]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7663 7895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7913 7917])
                            ("obj" variable nil (reparse-symbol function_parameters) [7919 7922]))                          )
                        (reparse-symbol indented_block_body) [7900 7994])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8012 8016]))                          )
                        (reparse-symbol indented_block_body) [7999 8326])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8346 8350]))                          )
                        (reparse-symbol indented_block_body) [8331 8583]))                  
                :type "class")
                nil [7335 8583])
            ("iadd" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8676 8677])
                ("b" variable nil (reparse-symbol function_parameters) [8679 8680]))              ) nil [8667 8729])
            ("iand" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8739 8740])
                ("b" variable nil (reparse-symbol function_parameters) [8742 8743]))              ) nil [8730 8792])
            ("iconcat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8805 8806])
                ("b" variable nil (reparse-symbol function_parameters) [8808 8809]))              ) nil [8793 9017])
            ("ifloordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9032 9033])
                ("b" variable nil (reparse-symbol function_parameters) [9035 9036]))              ) nil [9018 9087])
            ("ilshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9100 9101])
                ("b" variable nil (reparse-symbol function_parameters) [9103 9104]))              ) nil [9088 9155])
            ("imod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9165 9166])
                ("b" variable nil (reparse-symbol function_parameters) [9168 9169]))              ) nil [9156 9218])
            ("imul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9228 9229])
                ("b" variable nil (reparse-symbol function_parameters) [9231 9232]))              ) nil [9219 9281])
            ("imatmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9294 9295])
                ("b" variable nil (reparse-symbol function_parameters) [9297 9298]))              ) nil [9282 9347])
            ("ior" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9356 9357])
                ("b" variable nil (reparse-symbol function_parameters) [9359 9360]))              ) nil [9348 9409])
            ("ipow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9419 9420])
                ("b" variable nil (reparse-symbol function_parameters) [9422 9423]))              ) nil [9410 9473])
            ("irshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9486 9487])
                ("b" variable nil (reparse-symbol function_parameters) [9489 9490]))              ) nil [9474 9541])
            ("isub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9551 9552])
                ("b" variable nil (reparse-symbol function_parameters) [9554 9555]))              ) nil [9542 9604])
            ("itruediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9618 9619])
                ("b" variable nil (reparse-symbol function_parameters) [9621 9622]))              ) nil [9605 9671])
            ("ixor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9681 9682])
                ("b" variable nil (reparse-symbol function_parameters) [9684 9685]))              ) nil [9672 9734])
            ("try" code nil nil [9736 9838])
            ("__lt__" variable nil nil [9979 9990])
            ("__le__" variable nil nil [9991 10002])
            ("__eq__" variable nil nil [10003 10014])
            ("__ne__" variable nil nil [10015 10026])
            ("__ge__" variable nil nil [10027 10038])
            ("__gt__" variable nil nil [10039 10050])
            ("__not__" variable nil nil [10051 10065])
            ("__abs__" variable nil nil [10066 10079])
            ("__add__" variable nil nil [10080 10093])
            ("__and__" variable nil nil [10094 10108])
            ("__floordiv__" variable nil nil [10109 10132])
            ("__index__" variable nil nil [10133 10150])
            ("__inv__" variable nil nil [10151 10164])
            ("__invert__" variable nil nil [10165 10184])
            ("__lshift__" variable nil nil [10185 10204])
            ("__mod__" variable nil nil [10205 10218])
            ("__mul__" variable nil nil [10219 10232])
            ("__matmul__" variable nil nil [10233 10252])
            ("__neg__" variable nil nil [10253 10266])
            ("__or__" variable nil nil [10267 10279])
            ("__pos__" variable nil nil [10280 10293])
            ("__pow__" variable nil nil [10294 10307])
            ("__rshift__" variable nil nil [10308 10327])
            ("__sub__" variable nil nil [10328 10341])
            ("__truediv__" variable nil nil [10342 10363])
            ("__xor__" variable nil nil [10364 10377])
            ("__concat__" variable nil nil [10378 10397])
            ("__contains__" variable nil nil [10398 10421])
            ("__delitem__" variable nil nil [10422 10443])
            ("__getitem__" variable nil nil [10444 10465])
            ("__setitem__" variable nil nil [10466 10487])
            ("__iadd__" variable nil nil [10488 10503])
            ("__iand__" variable nil nil [10504 10519])
            ("__iconcat__" variable nil nil [10520 10541])
            ("__ifloordiv__" variable nil nil [10542 10567])
            ("__ilshift__" variable nil nil [10568 10589])
            ("__imod__" variable nil nil [10590 10605])
            ("__imul__" variable nil nil [10606 10621])
            ("__imatmul__" variable nil nil [10622 10643])
            ("__ior__" variable nil nil [10644 10657])
            ("__ipow__" variable nil nil [10658 10673])
            ("__irshift__" variable nil nil [10674 10695])
            ("__isub__" variable nil nil [10696 10711])
            ("__itruediv__" variable nil nil [10712 10735])
            ("__ixor__" variable nil nil [10736 10751]))          
      :file "operator.py"
      :pointmax 10752
      :fsize 10751
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((NAME 9327 . 9328) (AT 9329 . 9330) (ASSIGN 9330 . 9331) (COMMA 7689 . 7690) (DIV 7688 . 7689) (RETURN 1608 . 1614) (IF 1620 . 1622) (ELSE 1625 . 1629)))
    (semanticdb-table "semanticdb-table-15740fb2e518"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) The letters set the corresponding flags defined below.
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \\D       Matches any non-digit character; equivalent to [^\\d].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \\S       Matches any non-whitespace character; equivalent to [^\\s].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a Match object for each match.
    compile   Compile a pattern into a Pattern object.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Each function other than purge and escape can take an optional 'flags' argument
consisting of one or more of the following module constants, joined by \"|\".
A, L, and U are mutually exclusive.
    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 6609])
            ("enum" include nil nil [6611 6622])
            ("sre_compile" include nil nil [6623 6641])
            ("sre_parse" include nil nil [6642 6658])
            ("functools" include nil nil [6659 6675])
            ("try" code nil nil [6676 6739])
            ("__all__" variable nil nil [6758 7054])
            ("__version__" variable nil nil [7056 7077])
            ("RegexFlag" type
               (:superclasses ("enum.IntFlag")
                :members 
                  ( ("ASCII" variable nil (reparse-symbol indented_block_body) [7114 7152])
                    ("IGNORECASE" variable nil (reparse-symbol indented_block_body) [7181 7229])
                    ("LOCALE" variable nil (reparse-symbol indented_block_body) [7248 7288])
                    ("UNICODE" variable nil (reparse-symbol indented_block_body) [7323 7365])
                    ("MULTILINE" variable nil (reparse-symbol indented_block_body) [7396 7442])
                    ("DOTALL" variable nil (reparse-symbol indented_block_body) [7479 7519])
                    ("VERBOSE" variable nil (reparse-symbol indented_block_body) [7549 7591])
                    ("TEMPLATE" variable nil (reparse-symbol indented_block_body) [7686 7730])
                    ("DEBUG" variable nil (reparse-symbol indented_block_body) [7758 7792])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7844 7848]))                          )
                        (reparse-symbol indented_block_body) [7831 8451])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [8455 8479]))                  
                :type "class")
                nil [7079 8480])
            ("globals" code nil nil [8480 8519])
            ("error" variable nil nil [8537 8562])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a Match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8665 8672])
                    ("string" variable nil (reparse-symbol function_parameters) [8674 8680])
                    ("flags" variable nil (reparse-symbol function_parameters) [8682 8687]))                  )
                nil [8655 8866])
            ("fullmatch" function
               (:documentation "Try to apply the pattern to all of the string, returning
    a Match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8881 8888])
                    ("string" variable nil (reparse-symbol function_parameters) [8890 8896])
                    ("flags" variable nil (reparse-symbol function_parameters) [8898 8903]))                  )
                nil [8867 9080])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a Match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9092 9099])
                    ("string" variable nil (reparse-symbol function_parameters) [9101 9107])
                    ("flags" variable nil (reparse-symbol function_parameters) [9109 9114]))                  )
                nil [9081 9297])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the Match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9306 9313])
                    ("repl" variable nil (reparse-symbol function_parameters) [9315 9319])
                    ("string" variable nil (reparse-symbol function_parameters) [9321 9327])
                    ("count" variable nil (reparse-symbol function_parameters) [9329 9334])
                    ("flags" variable nil (reparse-symbol function_parameters) [9338 9343]))                  )
                nil [9298 9766])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the Match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9776 9783])
                    ("repl" variable nil (reparse-symbol function_parameters) [9785 9789])
                    ("string" variable nil (reparse-symbol function_parameters) [9791 9797])
                    ("count" variable nil (reparse-symbol function_parameters) [9799 9804])
                    ("flags" variable nil (reparse-symbol function_parameters) [9808 9813]))                  )
                nil [9767 10366])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10377 10384])
                    ("string" variable nil (reparse-symbol function_parameters) [10386 10392])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [10394 10402])
                    ("flags" variable nil (reparse-symbol function_parameters) [10406 10411]))                  )
                nil [10367 10896])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10909 10916])
                    ("string" variable nil (reparse-symbol function_parameters) [10918 10924])
                    ("flags" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10897 11273])
            ("finditer" function
               (:documentation "Return an iterator over all non-overlapping matches in the
    string.  For each match, the iterator returns a Match object.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [11287 11294])
                    ("string" variable nil (reparse-symbol function_parameters) [11296 11302])
                    ("flags" variable nil (reparse-symbol function_parameters) [11304 11309]))                  )
                nil [11274 11549])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [11562 11569])
                ("flags" variable nil (reparse-symbol function_parameters) [11571 11576]))              ) nil [11550 11689])
            ("purge" function nil nil [11690 11796])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [11810 11817])
                ("flags" variable nil (reparse-symbol function_parameters) [11819 11824]))              ) nil [11797 11928])
            ("_special_chars_map" variable nil nil [12110 12192])
            ("escape" function
               (:documentation "
    Escape special characters in a string.
    "
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [12205 12212]))                  )
                nil [12194 12481])
            ("Pattern" variable nil nil [12482 12524])
            ("Match" variable nil nil [12525 12575])
            ("_cache" variable nil nil [12661 12672])
            ("_MAXCACHE" variable nil nil [12686 12701])
            ("_compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [12715 12722])
                ("flags" variable nil (reparse-symbol function_parameters) [12724 12729]))              ) nil [12702 13577])
            ("" code nil nil [13598 13609])
            ("_compile_repl" function (:arguments 
              ( ("repl" variable nil (reparse-symbol function_parameters) [13628 13632])
                ("pattern" variable nil (reparse-symbol function_parameters) [13634 13641]))              ) nil [13610 13739])
            ("_expand" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13752 13759])
                ("match" variable nil (reparse-symbol function_parameters) [13761 13766])
                ("template" variable nil (reparse-symbol function_parameters) [13768 13776]))              ) nil [13740 13941])
            ("_subx" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13952 13959])
                ("template" variable nil (reparse-symbol function_parameters) [13961 13969]))              ) nil [13942 14303])
            ("copyreg" include nil nil [14336 14350])
            ("_pickle" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [14364 14365]))              ) nil [14352 14410])
            ("copyreg" code nil nil [14411 14453])
            ("Scanner" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("sre_constants" include nil (reparse-symbol indented_block_body) [14654 14698])
                            ("if" code nil (reparse-symbol indented_block_body) [14707 14772])
                            ("self" variable nil (reparse-symbol indented_block_body) [14780 14802])
                            ("p" variable nil (reparse-symbol indented_block_body) [14861 14867])
                            ("s" variable nil (reparse-symbol indented_block_body) [14876 14897])
                            ("s" variable nil (reparse-symbol indented_block_body) [14906 14921])
                            ("for" code nil (reparse-symbol indented_block_body) [14930 15172])
                            ("p" variable nil (reparse-symbol indented_block_body) [15180 15230])
                            ("self" variable nil (reparse-symbol indented_block_body) [15239 15276]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14621 14625])
                            ("lexicon" variable nil (reparse-symbol function_parameters) [14627 14634])
                            ("flags" variable nil (reparse-symbol function_parameters) [14636 14641]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14608 15277])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15290 15294])
                            ("string" variable nil (reparse-symbol function_parameters) [15296 15302]))                          )
                        (reparse-symbol indented_block_body) [15281 15861]))                  
                :type "class")
                nil [14589 15861]))          
      :file "re.py"
      :pointmax 15861
      :fsize 15860
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15740fbd3f00"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
\"\"\"" code nil nil [102 214])
            ("abc" include nil nil [216 255])
            ("sys" include nil nil [256 266])
            ("GenericAlias" variable nil nil [268 298])
            ("EllipsisType" variable nil nil [299 323])
            ("_f" function nil nil [324 339])
            ("FunctionType" variable nil nil [339 362])
            ("del" code nil nil [363 369])
            ("__all__" variable nil nil [371 820])
            ("__name__" variable nil nil [1065 1093])
            ("bytes_iterator" variable nil nil [1443 1475])
            ("bytearray_iterator" variable nil nil [1476 1520])
            ("dict_keyiterator" variable nil nil [1546 1586])
            ("dict_valueiterator" variable nil nil [1587 1631])
            ("dict_itemiterator" variable nil nil [1632 1674])
            ("list_iterator" variable nil nil [1675 1705])
            ("list_reverseiterator" variable nil nil [1706 1753])
            ("range_iterator" variable nil nil [1754 1791])
            ("longrange_iterator" variable nil nil [1792 1841])
            ("set_iterator" variable nil nil [1842 1874])
            ("str_iterator" variable nil nil [1875 1904])
            ("tuple_iterator" variable nil nil [1905 1936])
            ("zip_iterator" variable nil nil [1937 1969])
            ("dict_keys" variable nil nil [1982 2009])
            ("dict_values" variable nil nil [2010 2041])
            ("dict_items" variable nil nil [2042 2071])
            ("mappingproxy" variable nil nil [2083 2117])
            ("generator" variable nil nil [2118 2155])
            ("_coro" function nil nil [2178 2196])
            ("_coro" variable nil nil [2196 2211])
            ("coroutine" variable nil nil [2212 2235])
            ("_coro" code nil nil [2236 2249])
            ("del" code nil nil [2277 2286])
            ("_ag" function nil nil [2322 2339])
            ("_ag" variable nil nil [2339 2350])
            ("async_generator" variable nil nil [2351 2378])
            ("del" code nil nil [2379 2386])
            ("_check_methods" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [2434 2435])
                ("methods" variable nil (reparse-symbol function_parameters) [2437 2445]))              ) nil [2415 2729])
            ("Hashable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2770 2784])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2823 2827]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2790 2847])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2890 2893])
                            ("C" variable nil (reparse-symbol function_parameters) [2895 2896]))                          )
                        (reparse-symbol indented_block_body) [2852 3006]))                  
                :type "class")
                nil [2730 3006])
            ("Awaitable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3049 3063])
                    ("__await__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3103 3107]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3069 3124])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3167 3170])
                            ("C" variable nil (reparse-symbol function_parameters) [3172 3173]))                          )
                        (reparse-symbol indented_block_body) [3129 3285])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [3290 3335]))                  
                :type "class")
                nil [3008 3336])
            ("Coroutine" type
               (:superclasses ("Awaitable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3371 3385])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3420 3424])
                            ("value" variable nil (reparse-symbol function_parameters) [3426 3431]))                          
                        :documentation "Send a value into the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3391 3576])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3611 3615])
                            ("typ" variable nil (reparse-symbol function_parameters) [3617 3620])
                            ("val" variable nil (reparse-symbol function_parameters) [3622 3625])
                            ("tb" variable nil (reparse-symbol function_parameters) [3632 3634]))                          
                        :documentation "Raise an exception in the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3581 3947])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3962 3966]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [3952 4225])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4268 4271])
                            ("C" variable nil (reparse-symbol function_parameters) [4273 4274]))                          )
                        (reparse-symbol indented_block_body) [4230 4412]))                  
                :type "class")
                nil [3338 4412])
            ("Coroutine" code nil nil [4414 4443])
            ("AsyncIterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4491 4505])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4545 4549]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4511 4583])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4626 4629])
                            ("C" variable nil (reparse-symbol function_parameters) [4631 4632]))                          )
                        (reparse-symbol indented_block_body) [4588 4748])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [4753 4798]))                  
                :type "class")
                nil [4446 4799])
            ("AsyncIterator" type
               (:superclasses ("AsyncIterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4842 4856])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4902 4906]))                          
                        :documentation "Return the next item or raise StopAsyncIteration when exhausted.")
                        (reparse-symbol indented_block_body) [4888 5021])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5040 5044]))                          )
                        (reparse-symbol indented_block_body) [5026 5067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5110 5113])
                            ("C" variable nil (reparse-symbol function_parameters) [5115 5116]))                          )
                        (reparse-symbol indented_block_body) [5072 5245]))                  
                :type "class")
                nil [4801 5245])
            ("AsyncGenerator" type
               (:superclasses ("AsyncIterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5289 5303])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5329 5333]))                          
                        :documentation "Return the next item from the asynchronous generator.
        When exhausted, raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5315 5501])
                    ("asend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5542 5546])
                            ("value" variable nil (reparse-symbol function_parameters) [5548 5553]))                          
                        :documentation "Send a value into the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5532 5721])
                    ("athrow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5763 5767])
                            ("typ" variable nil (reparse-symbol function_parameters) [5769 5772])
                            ("val" variable nil (reparse-symbol function_parameters) [5774 5777])
                            ("tb" variable nil (reparse-symbol function_parameters) [5784 5786]))                          
                        :documentation "Raise an exception in the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5752 6117])
                    ("aclose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6139 6143]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [6128 6427])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6470 6473])
                            ("C" variable nil (reparse-symbol function_parameters) [6475 6476]))                          )
                        (reparse-symbol indented_block_body) [6432 6669]))                  
                :type "class")
                nil [5247 6669])
            ("AsyncGenerator" code nil nil [6671 6711])
            ("Iterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6754 6768])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6807 6811]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6774 6858])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6901 6904])
                            ("C" variable nil (reparse-symbol function_parameters) [6906 6907]))                          )
                        (reparse-symbol indented_block_body) [6863 7017])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [7022 7067]))                  
                :type "class")
                nil [6714 7068])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7101 7115])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7154 7158]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7121 7275])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7293 7297]))                          )
                        (reparse-symbol indented_block_body) [7280 7320])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7363 7366])
                            ("C" variable nil (reparse-symbol function_parameters) [7368 7369]))                          )
                        (reparse-symbol indented_block_body) [7325 7491]))                  
                :type "class")
                nil [7070 7491])
            ("Iterator" code nil nil [7493 7526])
            ("Iterator" code nil nil [7527 7564])
            ("Iterator" code nil nil [7603 7638])
            ("Iterator" code nil nil [7639 7676])
            ("Iterator" code nil nil [7677 7713])
            ("Iterator" code nil nil [7714 7746])
            ("Iterator" code nil nil [7747 7786])
            ("Iterator" code nil nil [7787 7820])
            ("Iterator" code nil nil [7821 7858])
            ("Iterator" code nil nil [7859 7890])
            ("Iterator" code nil nil [7891 7922])
            ("Iterator" code nil nil [7923 7956])
            ("Iterator" code nil nil [7957 7988])
            ("Reversible" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8024 8038])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8081 8085]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8044 8132])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8175 8178])
                            ("C" variable nil (reparse-symbol function_parameters) [8180 8181]))                          )
                        (reparse-symbol indented_block_body) [8137 8309]))                  
                :type "class")
                nil [7991 8309])
            ("Generator" type
               (:superclasses ("Iterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8343 8357])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8376 8380]))                          
                        :documentation "Return the next item from the generator.
        When exhausted, raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8363 8523])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8557 8561])
                            ("value" variable nil (reparse-symbol function_parameters) [8563 8568]))                          
                        :documentation "Send a value into the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8528 8713])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8748 8752])
                            ("typ" variable nil (reparse-symbol function_parameters) [8754 8757])
                            ("val" variable nil (reparse-symbol function_parameters) [8759 8762])
                            ("tb" variable nil (reparse-symbol function_parameters) [8769 8771]))                          
                        :documentation "Raise an exception in the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8718 9084])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9099 9103]))                          
                        :documentation "Raise GeneratorExit inside generator.
        ")
                        (reparse-symbol indented_block_body) [9089 9362])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9405 9408])
                            ("C" variable nil (reparse-symbol function_parameters) [9410 9411]))                          )
                        (reparse-symbol indented_block_body) [9367 9594]))                  
                :type "class")
                nil [8311 9594])
            ("Generator" code nil nil [9596 9625])
            ("Sized" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9665 9679])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9717 9721]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9685 9741])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9784 9787])
                            ("C" variable nil (reparse-symbol function_parameters) [9789 9790]))                          )
                        (reparse-symbol indented_block_body) [9746 9896]))                  
                :type "class")
                nil [9628 9896])
            ("Container" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9939 9953])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9996 10000])
                            ("x" variable nil (reparse-symbol function_parameters) [10002 10003]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9959 10027])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10070 10073])
                            ("C" variable nil (reparse-symbol function_parameters) [10075 10076]))                          )
                        (reparse-symbol indented_block_body) [10032 10191])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [10196 10241]))                  
                :type "class")
                nil [9898 10242])
            ("Collection" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10295 10309])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10353 10356])
                            ("C" variable nil (reparse-symbol function_parameters) [10358 10359]))                          )
                        (reparse-symbol indented_block_body) [10315 10499]))                  
                :type "class")
                nil [10244 10499])
            ("_CallableGenericAlias" type
               (:documentation " Represent `Callable[argtypes, resulttype]`.

    This sets ``__args__`` to a tuple containing the flattened ``argtypes``
    followed by ``resulttype``.

    Example: ``Callable[[int, str], float]`` sets ``__args__`` to
    ``(int, str, float)``.
    "
                :superclasses ("GenericAlias")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10812 10826])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [10844 10847])
                        ("origin" variable nil (reparse-symbol function_parameters) [10849 10855])
                        ("args" variable nil (reparse-symbol function_parameters) [10857 10861]))                      ) (reparse-symbol indented_block_body) [10832 11370])
                    ("__parameters__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11408 11412]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11375 11790])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11808 11812]))                          )
                        (reparse-symbol indented_block_body) [11795 12104])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12124 12128]))                          )
                        (reparse-symbol indented_block_body) [12109 12321])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12342 12346])
                            ("item" variable nil (reparse-symbol function_parameters) [12348 12352]))                          )
                        (reparse-symbol indented_block_body) [12326 14585]))                  
                :type "class")
                nil [10501 14585])
            ("_is_typevarlike" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [14607 14610]))              ) nil [14587 14767])
            ("_is_param_expr" function
               (:documentation "Checks if obj matches either a list of types, ``...``, ``ParamSpec`` or
    ``_ConcatenateGenericAlias`` from typing.py
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [14787 14790]))                  )
                nil [14768 15182])
            ("_type_repr" function
               (:documentation "Return the repr() of an object, special-casing types (internal helper).

    Copied from :mod:`typing` since collections.abc
    shouldn't depend on that module.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [15198 15201]))                  )
                nil [15183 15737])
            ("Callable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15779 15793])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15832 15836])
                            ("args" variable nil (reparse-symbol function_parameters) [15838 15843])
                            ("kwds" variable nil (reparse-symbol function_parameters) [15845 15851]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15799 15875])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15918 15921])
                            ("C" variable nil (reparse-symbol function_parameters) [15923 15924]))                          )
                        (reparse-symbol indented_block_body) [15880 16034])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [16039 16093]))                  
                :type "class")
                nil [15739 16094])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16496 16510])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16527 16531])
                            ("other" variable nil (reparse-symbol function_parameters) [16533 16538]))                          )
                        (reparse-symbol indented_block_body) [16516 16783])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16799 16803])
                            ("other" variable nil (reparse-symbol function_parameters) [16805 16810]))                          )
                        (reparse-symbol indented_block_body) [16788 16947])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16963 16967])
                            ("other" variable nil (reparse-symbol function_parameters) [16969 16974]))                          )
                        (reparse-symbol indented_block_body) [16952 17111])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17127 17131])
                            ("other" variable nil (reparse-symbol function_parameters) [17133 17138]))                          )
                        (reparse-symbol indented_block_body) [17116 17383])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17399 17403])
                            ("other" variable nil (reparse-symbol function_parameters) [17405 17410]))                          )
                        (reparse-symbol indented_block_body) [17388 17548])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17589 17592])
                            ("it" variable nil (reparse-symbol function_parameters) [17594 17596]))                          )
                        (reparse-symbol indented_block_body) [17553 17825])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17842 17846])
                            ("other" variable nil (reparse-symbol function_parameters) [17848 17853]))                          )
                        (reparse-symbol indented_block_body) [17830 18012])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [18017 18035])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18056 18060])
                            ("other" variable nil (reparse-symbol function_parameters) [18062 18067]))                          )
                        (reparse-symbol indented_block_body) [18041 18237])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18253 18257])
                            ("other" variable nil (reparse-symbol function_parameters) [18259 18264]))                          )
                        (reparse-symbol indented_block_body) [18242 18441])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [18446 18462])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18480 18484])
                            ("other" variable nil (reparse-symbol function_parameters) [18486 18491]))                          )
                        (reparse-symbol indented_block_body) [18468 18783])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18801 18805])
                            ("other" variable nil (reparse-symbol function_parameters) [18807 18812]))                          )
                        (reparse-symbol indented_block_body) [18788 19104])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19121 19125])
                            ("other" variable nil (reparse-symbol function_parameters) [19127 19132]))                          )
                        (reparse-symbol indented_block_body) [19109 19354])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [19359 19377])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19393 19397]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [19383 20422]))                  
                :type "class")
                nil [16111 20422])
            ("Set" code nil nil [20424 20447])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [20880 20894])
                    ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20928 20932])
                            ("value" variable nil (reparse-symbol function_parameters) [20934 20939]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [20900 21006])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21043 21047])
                            ("value" variable nil (reparse-symbol function_parameters) [21049 21054]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [21011 21162])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21178 21182])
                            ("value" variable nil (reparse-symbol function_parameters) [21184 21189]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [21167 21352])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21365 21369]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [21357 21619])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21634 21638]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [21624 21816])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21833 21837])
                            ("it" variable nil (reparse-symbol function_parameters) [21839 21841]))                          )
                        (reparse-symbol indented_block_body) [21821 21917])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21935 21939])
                            ("it" variable nil (reparse-symbol function_parameters) [21941 21943]))                          )
                        (reparse-symbol indented_block_body) [21922 22032])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22050 22054])
                            ("it" variable nil (reparse-symbol function_parameters) [22056 22058]))                          )
                        (reparse-symbol indented_block_body) [22037 22389])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22407 22411])
                            ("it" variable nil (reparse-symbol function_parameters) [22413 22415]))                          )
                        (reparse-symbol indented_block_body) [22394 22565]))                  
                :type "class")
                nil [20450 22565])
            ("MutableSet" code nil nil [22567 22591])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22853 22867])
                    ("__abc_tpflags__" code nil (reparse-symbol indented_block_body) [22949 22973])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23036 23040])
                            ("key" variable nil (reparse-symbol function_parameters) [23042 23045]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23000 23071])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23084 23088])
                            ("key" variable nil (reparse-symbol function_parameters) [23090 23093])
                            ("default" variable nil (reparse-symbol function_parameters) [23095 23102]))                          )
                        (reparse-symbol indented_block_body) [23076 23275])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23297 23301])
                            ("key" variable nil (reparse-symbol function_parameters) [23303 23306]))                          )
                        (reparse-symbol indented_block_body) [23280 23432])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23446 23450]))                          )
                        (reparse-symbol indented_block_body) [23437 23552])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23567 23571]))                          )
                        (reparse-symbol indented_block_body) [23557 23676])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23692 23696]))                          )
                        (reparse-symbol indented_block_body) [23681 23796])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23812 23816])
                            ("other" variable nil (reparse-symbol function_parameters) [23818 23823]))                          )
                        (reparse-symbol indented_block_body) [23801 23960])
                    ("__reversed__" variable nil (reparse-symbol indented_block_body) [23965 23984]))                  
                :type "class")
                nil [22612 23985])
            ("Mapping" code nil nil [23986 24016])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24050 24073])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24116 24139]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24092 24096])
                            ("mapping" variable nil (reparse-symbol function_parameters) [24098 24105]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24079 24140])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24157 24161]))                          )
                        (reparse-symbol indented_block_body) [24145 24198])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24216 24220]))                          )
                        (reparse-symbol indented_block_body) [24203 24292])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [24297 24342]))                  
                :type "class")
                nil [24019 24343])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24384 24398])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24440 24443])
                            ("it" variable nil (reparse-symbol function_parameters) [24445 24447]))                          )
                        (reparse-symbol indented_block_body) [24404 24473])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24495 24499])
                            ("key" variable nil (reparse-symbol function_parameters) [24501 24504]))                          )
                        (reparse-symbol indented_block_body) [24478 24543])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24561 24565]))                          )
                        (reparse-symbol indented_block_body) [24548 24601]))                  
                :type "class")
                nil [24345 24601])
            ("KeysView" code nil nil [24603 24631])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24674 24688])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24730 24733])
                            ("it" variable nil (reparse-symbol function_parameters) [24735 24737]))                          )
                        (reparse-symbol indented_block_body) [24694 24763])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24785 24789])
                            ("item" variable nil (reparse-symbol function_parameters) [24791 24795]))                          )
                        (reparse-symbol indented_block_body) [24768 24980])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24998 25002]))                          )
                        (reparse-symbol indented_block_body) [24985 25083]))                  
                :type "class")
                nil [24634 25083])
            ("ItemsView" code nil nil [25085 25115])
            ("ValuesView" type
               (:superclasses ("MappingView" "Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [25166 25180])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25203 25207])
                            ("value" variable nil (reparse-symbol function_parameters) [25209 25214]))                          )
                        (reparse-symbol indented_block_body) [25186 25376])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25394 25398]))                          )
                        (reparse-symbol indented_block_body) [25381 25472]))                  
                :type "class")
                nil [25118 25472])
            ("ValuesView" code nil nil [25474 25506])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.
    "
                :superclasses ("Mapping")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [25791 25805])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25847 25851])
                            ("key" variable nil (reparse-symbol function_parameters) [25853 25856])
                            ("value" variable nil (reparse-symbol function_parameters) [25858 25863]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25811 25889])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25930 25934])
                            ("key" variable nil (reparse-symbol function_parameters) [25936 25939]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25894 25965])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [25970 25989])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26003 26007])
                            ("key" variable nil (reparse-symbol function_parameters) [26009 26012])
                            ("default" variable nil (reparse-symbol function_parameters) [26014 26021]))                          )
                        (reparse-symbol indented_block_body) [25995 26440])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26457 26461]))                          )
                        (reparse-symbol indented_block_body) [26445 26799])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26814 26818]))                          )
                        (reparse-symbol indented_block_body) [26804 26986])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27002 27006])
                            ("other" variable nil (reparse-symbol function_parameters) [27008 27013])
                            ("kwds" variable nil (reparse-symbol function_parameters) [27021 27027]))                          )
                        (reparse-symbol indented_block_body) [26991 27752])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27772 27776])
                            ("key" variable nil (reparse-symbol function_parameters) [27778 27781])
                            ("default" variable nil (reparse-symbol function_parameters) [27783 27790]))                          )
                        (reparse-symbol indented_block_body) [27757 27995]))                  
                :type "class")
                nil [25509 27995])
            ("MutableMapping" code nil nil [27997 28026])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Reversible" "Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [28242 28256])
                    ("__abc_tpflags__" code nil (reparse-symbol indented_block_body) [28339 28363])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28427 28431])
                            ("index" variable nil (reparse-symbol function_parameters) [28433 28438]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28391 28466])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28484 28488]))                          )
                        (reparse-symbol indented_block_body) [28471 28663])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28685 28689])
                            ("value" variable nil (reparse-symbol function_parameters) [28691 28696]))                          )
                        (reparse-symbol indented_block_body) [28668 28812])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28834 28838]))                          )
                        (reparse-symbol indented_block_body) [28817 28912])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28927 28931])
                            ("value" variable nil (reparse-symbol function_parameters) [28933 28938])
                            ("start" variable nil (reparse-symbol function_parameters) [28940 28945])
                            ("stop" variable nil (reparse-symbol function_parameters) [28949 28953]))                          )
                        (reparse-symbol indented_block_body) [28917 29643])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29658 29662])
                            ("value" variable nil (reparse-symbol function_parameters) [29664 29669]))                          )
                        (reparse-symbol indented_block_body) [29648 29813]))                  
                :type "class")
                nil [28048 29813])
            ("Sequence" code nil nil [29814 29838])
            ("Sequence" code nil nil [29839 29861])
            ("Sequence" code nil nil [29862 29886])
            ("Sequence" code nil nil [29887 29916])
            ("ByteString" type
               (:documentation "This unifies bytes and bytearray.

    XXX Should add all their methods.
    "
                :superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [30040 30054]))                  
                :type "class")
                nil [29919 30055])
            ("ByteString" code nil nil [30056 30082])
            ("ByteString" code nil nil [30083 30113])
            ("MutableSequence" type
               (:documentation "All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().
    "
                :superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [30339 30353])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30395 30399])
                            ("index" variable nil (reparse-symbol function_parameters) [30401 30406])
                            ("value" variable nil (reparse-symbol function_parameters) [30408 30413]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30359 30441])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30482 30486])
                            ("index" variable nil (reparse-symbol function_parameters) [30488 30493]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30446 30521])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30557 30561])
                            ("index" variable nil (reparse-symbol function_parameters) [30563 30568])
                            ("value" variable nil (reparse-symbol function_parameters) [30570 30575]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30526 30665])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30681 30685])
                            ("value" variable nil (reparse-symbol function_parameters) [30687 30692]))                          )
                        (reparse-symbol indented_block_body) [30670 30802])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30817 30821]))                          )
                        (reparse-symbol indented_block_body) [30807 30987])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31004 31008]))                          )
                        (reparse-symbol indented_block_body) [30992 31163])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31179 31183])
                            ("values" variable nil (reparse-symbol function_parameters) [31185 31191]))                          )
                        (reparse-symbol indented_block_body) [31168 31395])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31408 31412])
                            ("index" variable nil (reparse-symbol function_parameters) [31414 31419]))                          )
                        (reparse-symbol indented_block_body) [31400 31658])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31674 31678])
                            ("value" variable nil (reparse-symbol function_parameters) [31680 31685]))                          )
                        (reparse-symbol indented_block_body) [31663 31857])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31875 31879])
                            ("values" variable nil (reparse-symbol function_parameters) [31881 31887]))                          )
                        (reparse-symbol indented_block_body) [31862 31938]))                  
                :type "class")
                nil [30116 31938])
            ("MutableSequence" code nil nil [31940 31970])
            ("MutableSequence" code nil nil [31971 32006]))          
      :file "_collections_abc.py"
      :pointmax 32046
      :fsize 32045
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((COMMA 27019 . 27020) (DIV 27018 . 27019) (RAISE 26700 . 26705) (FROM 26715 . 26719) (NEWLINE 26724 . 26725) (YIELD 24576 . 24581) (FROM 24582 . 24586) (NEWLINE 24600 . 24601) (RAISE 21545 . 21550) (FROM 21560 . 21564) (NEWLINE 21569 . 21570) (NAME 15754 . 15763) (ASSIGN 15763 . 15764) (NAME 9914 . 9923) (ASSIGN 9923 . 9924) (NAME 9640 . 9649) (ASSIGN 9649 . 9650) (NAME 6729 . 6738) (ASSIGN 6738 . 6739) (NAME 4466 . 4475) (ASSIGN 4475 . 4476) (NAME 3024 . 3033) (ASSIGN 3033 . 3034) (NAME 2745 . 2754) (ASSIGN 2754 . 2755)))
    (semanticdb-table "semanticdb-table-15740fbd8a10"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("__all__" variable nil nil [446 711])
            ("abc" include nil nil [713 744])
            ("collections" include nil nil [745 779])
            ("reprlib" include nil nil [837 871])
            ("_thread" include nil nil [872 897])
            ("types" include nil nil [898 928])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [1249 1366])
            ("WRAPPER_UPDATES" variable nil nil [1367 1398])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [1418 1425])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [1446 1453])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1474 1482])
                    ("updated" variable nil (reparse-symbol function_parameters) [1525 1532]))                  )
                nil [1399 2616])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [2627 2634])
                    ("assigned" variable nil (reparse-symbol function_parameters) [2646 2654])
                    ("updated" variable nil (reparse-symbol function_parameters) [2688 2695]))                  )
                nil [2617 3229])
            ("_gt_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [3729 3733])
                    ("other" variable nil (reparse-symbol function_parameters) [3735 3740])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [3742 3756]))                  )
                nil [3713 4005])
            ("_le_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4022 4026])
                    ("other" variable nil (reparse-symbol function_parameters) [4028 4033])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4035 4049]))                  )
                nil [4006 4289])
            ("_ge_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4306 4310])
                    ("other" variable nil (reparse-symbol function_parameters) [4312 4317])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4319 4333]))                  )
                nil [4290 4552])
            ("_ge_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4569 4573])
                    ("other" variable nil (reparse-symbol function_parameters) [4575 4580])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4582 4596]))                  )
                nil [4553 4845])
            ("_lt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4862 4866])
                    ("other" variable nil (reparse-symbol function_parameters) [4868 4873])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4875 4889]))                  )
                nil [4846 5131])
            ("_gt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5148 5152])
                    ("other" variable nil (reparse-symbol function_parameters) [5154 5159])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5161 5175]))                  )
                nil [5132 5394])
            ("_lt_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5411 5415])
                    ("other" variable nil (reparse-symbol function_parameters) [5417 5422])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5424 5438]))                  )
                nil [5395 5687])
            ("_ge_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5704 5708])
                    ("other" variable nil (reparse-symbol function_parameters) [5710 5715])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5717 5731]))                  )
                nil [5688 5971])
            ("_le_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5988 5992])
                    ("other" variable nil (reparse-symbol function_parameters) [5994 5999])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6001 6015]))                  )
                nil [5972 6234])
            ("_le_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6251 6255])
                    ("other" variable nil (reparse-symbol function_parameters) [6257 6262])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6264 6278]))                  )
                nil [6235 6527])
            ("_gt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6544 6548])
                    ("other" variable nil (reparse-symbol function_parameters) [6550 6555])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6557 6571]))                  )
                nil [6528 6813])
            ("_lt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6830 6834])
                    ("other" variable nil (reparse-symbol function_parameters) [6836 6841])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6843 6857]))                  )
                nil [6814 7076])
            ("_convert" variable nil nil [7077 7574])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [7595 7598]))                  )
                nil [7576 8174])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [8390 8395]))                  )
                nil [8375 9017])
            ("try" code nil nil [9018 9090])
            ("_initial_missing" variable nil nil [9294 9321])
            ("reduce" function
               (:documentation "
    reduce(function, iterable[, initial]) -> value

    Apply a function of two arguments cumulatively to the items of a sequence
    or iterable, from left to right, so as to reduce the iterable to a single
    value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
    of the iterable in the calculation, and serves as a default when the
    iterable is empty.
    "
                :arguments 
                  ( ("function" variable nil (reparse-symbol function_parameters) [9334 9342])
                    ("sequence" variable nil (reparse-symbol function_parameters) [9344 9352])
                    ("initial" variable nil (reparse-symbol function_parameters) [9354 9361]))                  )
                nil [9323 10214])
            ("try" code nil nil [10215 10283])
            ("partial" type
               (:documentation "New function with partial application of the given arguments
    and keywords.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10642 10707])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [10725 10728])
                        ("func" variable nil (reparse-symbol function_parameters) [10730 10734])
                        ("args" variable nil (reparse-symbol function_parameters) [10739 10744])
                        ("keywords" variable nil (reparse-symbol function_parameters) [10746 10756]))                      ) (reparse-symbol indented_block_body) [10713 11163])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11181 11185])
                            ("args" variable nil (reparse-symbol function_parameters) [11190 11195])
                            ("keywords" variable nil (reparse-symbol function_parameters) [11197 11207]))                          )
                        (reparse-symbol indented_block_body) [11168 11315])
                    ("" code nil (reparse-symbol indented_block_body) [11335 11337])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11355 11359]))                          )
                        (reparse-symbol indented_block_body) [11342 11715])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11735 11739]))                          )
                        (reparse-symbol indented_block_body) [11720 11867])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11889 11893])
                            ("state" variable nil (reparse-symbol function_parameters) [11895 11900]))                          )
                        (reparse-symbol indented_block_body) [11872 12804]))                  
                :type "class")
                nil [10528 12804])
            ("try" code nil nil [12805 12874])
            ("partialmethod" type
               (:documentation "Method descriptor with partial application of the given arguments
    and keywords.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [13191 13362])
                            ("if" code nil (reparse-symbol indented_block_body) [13521 13983]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13148 13152])
                            ("func" variable nil (reparse-symbol function_parameters) [13154 13158])
                            ("args" variable nil (reparse-symbol function_parameters) [13163 13168])
                            ("keywords" variable nil (reparse-symbol function_parameters) [13170 13180]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13135 13983])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14001 14005]))                          )
                        (reparse-symbol indented_block_body) [13988 14537])
                    ("_make_unbound_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14567 14571]))                          )
                        (reparse-symbol indented_block_body) [14542 14882])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14899 14903])
                            ("obj" variable nil (reparse-symbol function_parameters) [14905 14908])
                            ("cls" variable nil (reparse-symbol function_parameters) [14910 14913]))                          )
                        (reparse-symbol indented_block_body) [14887 15666])
                    ("__isabstractmethod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15710 15714]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15671 15782])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [15787 15832]))                  
                :type "class")
                nil [12896 15833])
            ("_unwrap_partial" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [15875 15879]))              ) nil [15855 15960])
            ("_CacheInfo" variable nil nil [16157 16236])
            ("_HashedSeq" type
               (:documentation " This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    "
                :superclasses ("list")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16473 16496])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16546 16559])
                            ("self" variable nil (reparse-symbol indented_block_body) [16568 16594]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16515 16519])
                            ("tup" variable nil (reparse-symbol function_parameters) [16521 16524])
                            ("hash" variable nil (reparse-symbol function_parameters) [16526 16530]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16502 16595])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16613 16617]))                          )
                        (reparse-symbol indented_block_body) [16600 16650]))                  
                :type "class")
                nil [16238 16650])
            ("_make_key" function
               (:documentation "Make a cache key from optionally typed positional and keyword arguments

    The key is constructed in a way that is flat as possible rather than
    as a nested structure that would take more memory.

    If there is only a single argument and its data type is known to cache
    its hash value, then that argument is returned without a wrapper.  This
    saves space and improves lookup speed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [16665 16669])
                    ("kwds" variable nil (reparse-symbol function_parameters) [16671 16675])
                    ("typed" variable nil (reparse-symbol function_parameters) [16677 16682])
                    ("kwd_mark" variable nil (reparse-symbol function_parameters) [16697 16705])
                    ("fasttypes" variable nil (reparse-symbol function_parameters) [16734 16743])
                    ("tuple" variable nil (reparse-symbol function_parameters) [16771 16776])
                    ("type" variable nil (reparse-symbol function_parameters) [16784 16788])
                    ("len" variable nil (reparse-symbol function_parameters) [16795 16798]))                  )
                nil [16651 17861])
            ("lru_cache" function
               (:documentation "Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)

    "
                :arguments 
                  ( ("maxsize" variable nil (reparse-symbol function_parameters) [17876 17883])
                    ("typed" variable nil (reparse-symbol function_parameters) [17889 17894]))                  )
                nil [17862 19819])
            ("_lru_cache_wrapper" function (:arguments 
              ( ("user_function" variable nil (reparse-symbol function_parameters) [19843 19856])
                ("maxsize" variable nil (reparse-symbol function_parameters) [19858 19865])
                ("typed" variable nil (reparse-symbol function_parameters) [19867 19872])
                ("_CacheInfo" variable nil (reparse-symbol function_parameters) [19874 19884]))              ) nil [19820 24645])
            ("try" code nil nil [24646 24726])
            ("cache" function (:arguments 
              ( ("user_function" variable nil (reparse-symbol function_parameters) [24954 24967]))              ) nil [24944 25094])
            ("_c3_merge" function
               (:documentation "Merges MROs in *sequences* to a single MRO using the C3 algorithm.

    Adapted from https://www.python.org/download/releases/2.3/mro/.

    "
                :arguments 
                  ( ("sequences" variable nil (reparse-symbol function_parameters) [25339 25348]))                  )
                nil [25325 26238])
            ("_c3_mro" function
               (:documentation "Computes the method resolution order using extended C3 linearization.

    If no *abcs* are given, the algorithm works exactly like the built-in C3
    linearization used for method resolution.

    If given, *abcs* is a list of abstract base classes that should be inserted
    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the
    result. The algorithm inserts ABCs where their functionality is introduced,
    i.e. issubclass(cls, abc) returns True for the class itself but returns
    False for all its direct base classes. Implicit ABCs for a given class
    (either registered or inferred from the presence of a special method like
    __len__) are inserted directly after the last ABC explicitly listed in the
    MRO of said class. If two implicit ABCs end up next to each other in the
    resulting MRO, their ordering depends on the order of types in *abcs*.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [26251 26254])
                    ("abcs" variable nil (reparse-symbol function_parameters) [26256 26260]))                  )
                nil [26239 28365])
            ("_compose_mro" function
               (:documentation "Calculates the method resolution order for a given class *cls*.

    Includes relevant abstract base classes (with their respective bases) from
    the *types* iterable. Uses a modified C3 linearization algorithm.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [28383 28386])
                    ("types" variable nil (reparse-symbol function_parameters) [28388 28393]))                  )
                nil [28366 30035])
            ("_find_impl" function
               (:documentation "Returns the best matching implementation from *registry* for type *cls*.

    Where there is no registered implementation for a specific type, its method
    resolution order is used to find a more generic implementation.

    Note: if *registry* does not contain an implementation for the base
    *object* type, this function may return None.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [30051 30054])
                    ("registry" variable nil (reparse-symbol function_parameters) [30056 30064]))                  )
                nil [30036 31068])
            ("singledispatch" function
               (:documentation "Single-dispatch generic function decorator.

    Transforms a function into a generic function, which can have different
    behaviours depending upon the type of its first argument. The decorated
    function acts as the default implementation, and additional
    implementations can be registered using the register() attribute of the
    generic function.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [31088 31092]))                  )
                nil [31069 34685])
            ("singledispatchmethod" type
               (:documentation "Single-dispatch generic method descriptor.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [34939 35068])
                            ("self" variable nil (reparse-symbol indented_block_body) [35077 35115])
                            ("self" variable nil (reparse-symbol indented_block_body) [35124 35140]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34918 34922])
                            ("func" variable nil (reparse-symbol function_parameters) [34924 34928]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34905 35141])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35159 35163])
                            ("cls" variable nil (reparse-symbol function_parameters) [35165 35168])
                            ("method" variable nil (reparse-symbol function_parameters) [35170 35176]))                          
                        :documentation "generic_method.register(cls, func) -> func

        Registers a new implementation for the given *cls* on a *generic_method*.
        ")
                        (reparse-symbol indented_block_body) [35146 35391])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35408 35412])
                            ("obj" variable nil (reparse-symbol function_parameters) [35414 35417])
                            ("cls" variable nil (reparse-symbol function_parameters) [35419 35422]))                          )
                        (reparse-symbol indented_block_body) [35396 35767])
                    ("__isabstractmethod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35811 35815]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35772 35883]))                  
                :type "class")
                nil [34708 35883])
            ("_NOT_FOUND" variable nil nil [36120 36141])
            ("cached_property" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36205 36221])
                            ("self" variable nil (reparse-symbol indented_block_body) [36230 36250])
                            ("self" variable nil (reparse-symbol indented_block_body) [36259 36286])
                            ("self" variable nil (reparse-symbol indented_block_body) [36295 36314]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36184 36188])
                            ("func" variable nil (reparse-symbol function_parameters) [36190 36194]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36171 36315])
                    ("__set_name__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36337 36341])
                            ("owner" variable nil (reparse-symbol function_parameters) [36343 36348])
                            ("name" variable nil (reparse-symbol function_parameters) [36350 36354]))                          )
                        (reparse-symbol indented_block_body) [36320 36637])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36654 36658])
                            ("instance" variable nil (reparse-symbol function_parameters) [36660 36668])
                            ("owner" variable nil (reparse-symbol function_parameters) [36670 36675]))                          )
                        (reparse-symbol indented_block_body) [36642 38025])
                    ("__class_getitem__" variable nil (reparse-symbol indented_block_body) [38030 38075]))                  
                :type "class")
                nil [36144 38076]))          
      :file "functools.py"
      :pointmax 38076
      :fsize 38076
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((RAISE 37975 . 37980) (FROM 37996 . 38000) (NEWLINE 38005 . 38006) (RAISE 37218 . 37223) (FROM 37239 . 37243) (NEWLINE 37248 . 37249) (NAME 27441 . 27445) (IF 27459 . 27461) (ELSE 27467 . 27471) (DIV 24969 . 24970) (COMMA 14608 . 14609) (DIV 14607 . 14608) (COMMA 13161 . 13162) (DIV 13160 . 13161) (COMMA 11188 . 11189) (DIV 11187 . 11188) (COMMA 10737 . 10738) (DIV 10736 . 10737) (RAISE 10002 . 10007) (FROM 10087 . 10091) (NEWLINE 10096 . 10097)))
    (semanticdb-table "semanticdb-table-15740fdd68b8"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("types" include nil nil [12 69])
            ("__all__" variable nil nil [72 185])
            ("_is_descriptor" function
               (:documentation "
    Returns True if obj is a descriptor, False otherwise.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [207 210]))                  )
                nil [188 431])
            ("_is_dunder" function
               (:documentation "
    Returns True if a __dunder__ name, False otherwise.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [447 451]))                  )
                nil [432 688])
            ("_is_sunder" function
               (:documentation "
    Returns True if a _sunder_ name, False otherwise.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [704 708]))                  )
                nil [689 945])
            ("_is_private" function (:arguments 
              ( ("cls_name" variable nil (reparse-symbol function_parameters) [962 970])
                ("name" variable nil (reparse-symbol function_parameters) [972 976]))              ) nil [946 1334])
            ("_make_class_unpicklable" function
               (:documentation "
    Make the given class un-picklable.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [1363 1366]))                  )
                nil [1335 1602])
            ("_auto_null" variable nil nil [1603 1624])
            ("auto" type
               (:documentation "
    Instances are replaced with an appropriate value in Enum class suites.
    "
                :members 
                  ( ("value" variable nil (reparse-symbol indented_block_body) [1732 1750]))                  
                :type "class")
                nil [1625 1751])
            ("_EnumDict" type
               (:documentation "
    Track enum member order and ensure member names are not reused.

    EnumMeta will use the names found in self._member_names as the
    enumeration member names.
    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1990 2008])
                            ("self" variable nil (reparse-symbol indented_block_body) [2017 2040])
                            ("self" variable nil (reparse-symbol indented_block_body) [2049 2071])
                            ("self" variable nil (reparse-symbol indented_block_body) [2080 2097])
                            ("self" variable nil (reparse-symbol indented_block_body) [2106 2131]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1975 1979]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1962 2132])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2153 2157])
                            ("key" variable nil (reparse-symbol function_parameters) [2159 2162])
                            ("value" variable nil (reparse-symbol function_parameters) [2164 2169]))                          
                        :documentation "
        Changes anything not dundered or not a descriptor.

        If an enum member name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.
        ")
                        (reparse-symbol indented_block_body) [2137 4885]))                  
                :type "class")
                nil [1753 4885])
            ("Enum" variable nil nil [5116 5127])
            ("EnumMeta" type
               (:documentation "
    Metaclass for Enum
    "
                :superclasses ("type")
                :members 
                  ( ("__prepare__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("metacls" variable nil (reparse-symbol function_parameters) [5227 5234])
                            ("cls" variable nil (reparse-symbol function_parameters) [5236 5239])
                            ("bases" variable nil (reparse-symbol function_parameters) [5241 5246])
                            ("kwds" variable nil (reparse-symbol function_parameters) [5248 5254]))                          )
                        (reparse-symbol indented_block_body) [5194 5809])
                    ("__new__" function (:arguments 
                      ( ("metacls" variable nil (reparse-symbol function_parameters) [5826 5833])
                        ("cls" variable nil (reparse-symbol function_parameters) [5835 5838])
                        ("bases" variable nil (reparse-symbol function_parameters) [5840 5845])
                        ("classdict" variable nil (reparse-symbol function_parameters) [5847 5856])
                        ("kwds" variable nil (reparse-symbol function_parameters) [5858 5864]))                      ) (reparse-symbol indented_block_body) [5814 14177])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14195 14199]))                          
                        :documentation "
        classes/types should always be True.
        ")
                        (reparse-symbol indented_block_body) [14182 14291])
                    ("__call__" function
                       (:documentation "
        Either returns an existing member, or creates a new enum class.

        This method is used both when an enum class is given a value to match
        to an enumeration member (i.e. Color(3)) and for the functional API
        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).

        When used for the functional API:

        `value` will be the name of the new class.

        `names` should be either a string of white-space/comma delimited names
        (values will start at `start`), or an iterator/mapping of name, value pairs.

        `module` should be set to the module this class is being created in;
        if it is not set, an attempt to find that module will be made, but if
        it fails the class will not be picklable.

        `qualname` should be set to the actual location this class can be found
        at in its module; by default it is set to the global scope.  If this is
        not correct, unpickling will fail in some circumstances.

        `type`, if set, will be mixed in as the first base class.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14309 14312])
                            ("value" variable nil (reparse-symbol function_parameters) [14314 14319])
                            ("names" variable nil (reparse-symbol function_parameters) [14321 14326])
                            ("module" variable nil (reparse-symbol function_parameters) [14336 14342])
                            ("qualname" variable nil (reparse-symbol function_parameters) [14349 14357])
                            ("type" variable nil (reparse-symbol function_parameters) [14364 14368])
                            ("start" variable nil (reparse-symbol function_parameters) [14375 14380]))                          )
                        (reparse-symbol indented_block_body) [14296 15832])
                    ("__contains__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [15854 15857])
                        ("obj" variable nil (reparse-symbol function_parameters) [15859 15862]))                      ) (reparse-symbol indented_block_body) [15837 16461])
                    ("__delattr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [16482 16485])
                        ("attr" variable nil (reparse-symbol function_parameters) [16487 16491]))                      ) (reparse-symbol indented_block_body) [16466 16747])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16764 16768]))                          )
                        (reparse-symbol indented_block_body) [16752 16914])
                    ("__getattr__" function
                       (:documentation "
        Return the enum member matching `name`

        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16935 16938])
                            ("name" variable nil (reparse-symbol function_parameters) [16940 16944]))                          )
                        (reparse-symbol indented_block_body) [16919 17476])
                    ("__getitem__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [17497 17500])
                        ("name" variable nil (reparse-symbol function_parameters) [17502 17506]))                      ) (reparse-symbol indented_block_body) [17481 17547])
                    ("__iter__" function
                       (:documentation "
        Returns members in definition order.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17565 17568]))                          )
                        (reparse-symbol indented_block_body) [17552 17711])
                    ("__len__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [17728 17731]))                      ) (reparse-symbol indented_block_body) [17716 17773])
                    ("__members__" function
                       (:documentation "
        Returns a mapping of member name->value.

        This mapping lists all enum members, including aliases. Note that this
        is a read-only view of the internal mapping.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17808 17811]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17778 18070])
                    ("__repr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [18088 18091]))                      ) (reparse-symbol indented_block_body) [18075 18136])
                    ("__reversed__" function
                       (:documentation "
        Returns members in reverse definition order.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18158 18161]))                          )
                        (reparse-symbol indented_block_body) [18141 18322])
                    ("__setattr__" function
                       (:documentation "
        Block attempts to reassign Enum members.

        A simple assignment to the class namespace only changes one of the
        several possible ways to get an Enum member from the Enum class,
        resulting in an inconsistent Enumeration.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18343 18346])
                            ("name" variable nil (reparse-symbol function_parameters) [18348 18352])
                            ("value" variable nil (reparse-symbol function_parameters) [18354 18359]))                          )
                        (reparse-symbol indented_block_body) [18327 18825])
                    ("_create_" function
                       (:documentation "
        Convenience method to create a new Enum class.

        `names` can be:

        * A string containing member names, separated either with spaces or
          commas.  Values are incremented by 1 from `start`.
        * An iterable of member names.  Values are incremented by 1 from `start`.
        * An iterable of (member name, value) pairs.
        * A mapping of member name -> value pairs.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18843 18846])
                            ("class_name" variable nil (reparse-symbol function_parameters) [18848 18858])
                            ("names" variable nil (reparse-symbol function_parameters) [18860 18865])
                            ("module" variable nil (reparse-symbol function_parameters) [18870 18876])
                            ("qualname" variable nil (reparse-symbol function_parameters) [18883 18891])
                            ("type" variable nil (reparse-symbol function_parameters) [18898 18902])
                            ("start" variable nil (reparse-symbol function_parameters) [18909 18914]))                          )
                        (reparse-symbol indented_block_body) [18830 21015])
                    ("_convert_" function
                       (:documentation "
        Create a new Enum subclass that replaces a collection of global constants
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21034 21037])
                            ("name" variable nil (reparse-symbol function_parameters) [21039 21043])
                            ("module" variable nil (reparse-symbol function_parameters) [21045 21051])
                            ("filter" variable nil (reparse-symbol function_parameters) [21053 21059])
                            ("source" variable nil (reparse-symbol function_parameters) [21061 21067]))                          )
                        (reparse-symbol indented_block_body) [21020 22382])
                    ("_check_for_existing_members" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("class_name" variable nil (reparse-symbol function_parameters) [22437 22447])
                            ("bases" variable nil (reparse-symbol function_parameters) [22449 22454]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22387 22779])
                    ("_get_mixins_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("class_name" variable nil (reparse-symbol function_parameters) [22819 22829])
                            ("bases" variable nil (reparse-symbol function_parameters) [22831 22836]))                          
                        :documentation "
        Returns the type for creating enum members, and the first inherited
        enum class.

        bases: the tuple of bases that was given to __new__
        ")
                        (reparse-symbol indented_block_body) [22784 24624])
                    ("_find_new_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("classdict" variable nil (reparse-symbol function_parameters) [24662 24671])
                            ("member_type" variable nil (reparse-symbol function_parameters) [24673 24684])
                            ("first_enum" variable nil (reparse-symbol function_parameters) [24686 24696]))                          
                        :documentation "
        Returns the __new__ to be used for creating the enum members.

        classdict: the class dictionary given to __new__
        member_type: the data type whose __new__ will be used by default
        first_enum: enumeration to check for an overriding __new__
        ")
                        (reparse-symbol indented_block_body) [24629 26399]))                  
                :type "class")
                nil [5129 26399])
            ("Enum" type
               (:documentation "
    Generic enumeration.

    Derive from this class to define new enumerations.
    "
                :superclasses ("EnumMeta")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [26546 26549])
                        ("value" variable nil (reparse-symbol function_parameters) [26551 26556]))                      ) (reparse-symbol indented_block_body) [26534 28363])
                    ("_generate_next_value_" function
                       (:documentation "
        Generate the next value when not given.

        name: the name of the member
        start: the initial start value or None
        count: the number of existing members
        last_value: the last value assigned or None
        "
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [28394 28398])
                            ("start" variable nil (reparse-symbol function_parameters) [28400 28405])
                            ("count" variable nil (reparse-symbol function_parameters) [28407 28412])
                            ("last_values" variable nil (reparse-symbol function_parameters) [28414 28425]))                          )
                        (reparse-symbol indented_block_body) [28368 28877])
                    ("_missing_" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28913 28916])
                            ("value" variable nil (reparse-symbol function_parameters) [28918 28923]))                          )
                        (reparse-symbol indented_block_body) [28882 28946])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28964 28968]))                          )
                        (reparse-symbol indented_block_body) [28951 29072])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29089 29093]))                          )
                        (reparse-symbol indented_block_body) [29077 29160])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29177 29181]))                          
                        :documentation "
        Returns all members and all public methods
        ")
                        (reparse-symbol indented_block_body) [29165 29587])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29607 29611])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [29613 29624]))                          
                        :documentation "
        Returns format using actual value type unless __str__ has been overridden.
        ")
                        (reparse-symbol indented_block_body) [29592 30327])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30345 30349]))                          )
                        (reparse-symbol indented_block_body) [30332 30385])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30408 30412])
                            ("proto" variable nil (reparse-symbol function_parameters) [30414 30419]))                          )
                        (reparse-symbol indented_block_body) [30390 30470])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30910 30914]))                          
                        :documentation "The name of the Enum member.")
                        (reparse-symbol indented_block_body) [30874 30987])
                    ("value" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31029 31033]))                          
                        :documentation "The value of the Enum member.")
                        (reparse-symbol indented_block_body) [30992 31108]))                  
                :type "class")
                nil [26401 31108])
            ("IntEnum" type
               (:documentation "Enum where members are also (and must be) ints"
                :superclasses ("int" "Enum")
                :type "class")
                nil [31110 31193])
            ("_reduce_ex_by_name" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [31218 31222])
                    ("proto" variable nil (reparse-symbol function_parameters) [31224 31229]))                  )
                nil [31195 31253])
            ("Flag" type
               (:documentation "
    Support for flags
    "
                :superclasses ("Enum")
                :members 
                  ( ("_generate_next_value_" function
                       (:documentation "
        Generate the next value when not given.

        name: the name of the member
        start: the initial start value or None
        count: the number of existing members
        last_value: the last value assigned or None
        "
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [31341 31345])
                            ("start" variable nil (reparse-symbol function_parameters) [31347 31352])
                            ("count" variable nil (reparse-symbol function_parameters) [31354 31359])
                            ("last_values" variable nil (reparse-symbol function_parameters) [31361 31372]))                          )
                        (reparse-symbol indented_block_body) [31315 31986])
                    ("_missing_" function
                       (:documentation "
        Returns member (possibly creating it) if one can be found for value.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32022 32025])
                            ("value" variable nil (reparse-symbol function_parameters) [32027 32032]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31991 32385])
                    ("_create_pseudo_member_" function
                       (:documentation "
        Create a composite member iff value contains only members.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32434 32437])
                            ("value" variable nil (reparse-symbol function_parameters) [32439 32444]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32390 33257])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33279 33283])
                            ("other" variable nil (reparse-symbol function_parameters) [33285 33290]))                          
                        :documentation "
        Returns True if self has at least the same flags set as other.
        ")
                        (reparse-symbol indented_block_body) [33262 33678])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33696 33700]))                          )
                        (reparse-symbol indented_block_body) [33683 34088])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34105 34109]))                          )
                        (reparse-symbol indented_block_body) [34093 34595])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34613 34617]))                          )
                        (reparse-symbol indented_block_body) [34600 34654])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34670 34674])
                            ("other" variable nil (reparse-symbol function_parameters) [34676 34681]))                          )
                        (reparse-symbol indented_block_body) [34659 34828])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34845 34849])
                            ("other" variable nil (reparse-symbol function_parameters) [34851 34856]))                          )
                        (reparse-symbol indented_block_body) [34833 35003])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35020 35024])
                            ("other" variable nil (reparse-symbol function_parameters) [35026 35031]))                          )
                        (reparse-symbol indented_block_body) [35008 35178])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35198 35202]))                          )
                        (reparse-symbol indented_block_body) [35183 35493]))                  
                :type "class")
                nil [31254 35493])
            ("IntFlag" type
               (:documentation "
    Support for integer-based Flags
    "
                :superclasses ("int" "Flag")
                :members 
                  ( ("_missing_" function
                       (:documentation "
        Returns member (possibly creating it) if one can be found for value.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35609 35612])
                            ("value" variable nil (reparse-symbol function_parameters) [35614 35619]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35578 35924])
                    ("_create_pseudo_member_" function
                       (:documentation "
        Create a composite member iff value contains only members.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35973 35976])
                            ("value" variable nil (reparse-symbol function_parameters) [35978 35983]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35929 37310])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37326 37330])
                            ("other" variable nil (reparse-symbol function_parameters) [37332 37337]))                          )
                        (reparse-symbol indented_block_body) [37315 37531])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37548 37552])
                            ("other" variable nil (reparse-symbol function_parameters) [37554 37559]))                          )
                        (reparse-symbol indented_block_body) [37536 37729])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37746 37750])
                            ("other" variable nil (reparse-symbol function_parameters) [37752 37757]))                          )
                        (reparse-symbol indented_block_body) [37734 37927])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [37932 37948])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [37953 37971])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [37976 37994])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38015 38019]))                          )
                        (reparse-symbol indented_block_body) [38000 38091]))                  
                :type "class")
                nil [35495 38091])
            ("_high_bit" function
               (:documentation "
    returns index of highest bit, or -1 if value is zero or negative
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [38107 38112]))                  )
                nil [38093 38234])
            ("unique" function
               (:documentation "
    Class decorator for enumerations ensuring unique member values.
    "
                :arguments 
                  ( ("enumeration" variable nil (reparse-symbol function_parameters) [38246 38257]))                  )
                nil [38235 38767])
            ("_decompose" function
               (:documentation "
    Extract all members from the value.
    "
                :arguments 
                  ( ("flag" variable nil (reparse-symbol function_parameters) [38783 38787])
                    ("value" variable nil (reparse-symbol function_parameters) [38789 38794]))                  )
                nil [38768 39832]))          
      :file "enum.py"
      :pointmax 39832
      :fsize 39831
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((RAISE 31888 . 31893) (FROM 31943 . 31947) (NEWLINE 31952 . 31953) (RETURN 31664 . 31670) (IF 31677 . 31679) (ELSE 31698 . 31702) (INDENT_BLOCK 27524 . 27570) (NEWLINE 27523 . 27524) (COLON 27522 . 27523) (TRY 27423 . 27426) (AS 27518 . 27520) (NAME 26412 . 26421) (ASSIGN 26421 . 26422) (NAME 19387 . 19392) (IF 19403 . 19405) (ELSE 19419 . 19423) (MULT 18867 . 18868) (COMMA 18868 . 18869) (RAISE 17439 . 17444) (FROM 17466 . 17470) (NEWLINE 17475 . 17476) (MULT 14333 . 14334) (COMMA 14334 . 14335)))
    (semanticdb-table "semanticdb-table-15740fddcea0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 275])
            ("sre_parse" include nil nil [276 292])
            ("sre_constants" include nil nil [293 320])
            ("assert" code nil nil [322 371])
            ("_LITERAL_CODES" variable nil nil [373 412])
            ("_REPEATING_CODES" variable nil nil [413 464])
            ("_SUCCESS_CODES" variable nil nil [465 500])
            ("_ASSERT_CODES" variable nil nil [501 537])
            ("_UNIT_CODES" code nil nil [538 578])
            ("_equivalences" variable nil nil [642 2086])
            ("_ignorecase_fixes" variable nil nil [2164 2273])
            ("_combine_flags" function (:arguments 
              ( ("flags" variable nil (reparse-symbol function_parameters) [2294 2299])
                ("add_flags" variable nil (reparse-symbol function_parameters) [2301 2310])
                ("del_flags" variable nil (reparse-symbol function_parameters) [2312 2321])
                ("TYPE_FLAGS" variable nil (reparse-symbol function_parameters) [2342 2352]))              ) nil [2275 2480])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2494 2498])
                ("pattern" variable nil (reparse-symbol function_parameters) [2500 2507])
                ("flags" variable nil (reparse-symbol function_parameters) [2509 2514]))              ) nil [2481 8811])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8833 8840])
                ("flags" variable nil (reparse-symbol function_parameters) [8842 8847])
                ("code" variable nil (reparse-symbol function_parameters) [8849 8853]))              ) nil [8812 9595])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [9618 9625])
                ("iscased" variable nil (reparse-symbol function_parameters) [9627 9634])
                ("fixup" variable nil (reparse-symbol function_parameters) [9641 9646])
                ("fixes" variable nil (reparse-symbol function_parameters) [9653 9658]))              ) nil [9596 14528])
            ("_CODEBITS" code nil nil [14529 14558])
            ("MAXCODE" code nil nil [14559 14589])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [14637 14641])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [14643 14652])
                ("_int" variable nil (reparse-symbol function_parameters) [14664 14668]))              ) nil [14622 14809])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [14830 14831]))              ) nil [14810 15010])
            ("_simple" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15023 15024]))              ) nil [15011 15243])
            ("_generate_overlap_table" function
               (:documentation "
    Generate an overlap table for the following prefix.
    An overlap table is a table of the same size as the prefix which
    informs about the potential self-overlap for each index in the prefix:
    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]
    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with
      prefix[0:k]
    "
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [15272 15278]))                  )
                nil [15244 15958])
            ("_get_iscased" function (:arguments 
              ( ("flags" variable nil (reparse-symbol function_parameters) [15976 15981]))              ) nil [15959 16159])
            ("_get_literal_prefix" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [16184 16191])
                ("flags" variable nil (reparse-symbol function_parameters) [16193 16198]))              ) nil [16160 17236])
            ("_get_charset_prefix" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [17261 17268])
                ("flags" variable nil (reparse-symbol function_parameters) [17270 17275]))              ) nil [17237 18582])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [18601 18605])
                ("pattern" variable nil (reparse-symbol function_parameters) [18607 18614])
                ("flags" variable nil (reparse-symbol function_parameters) [18616 18621]))              ) nil [18583 20424])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [20438 20441]))              ) nil [20425 20485])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [20496 20497])
                ("flags" variable nil (reparse-symbol function_parameters) [20499 20504]))              ) nil [20486 20720])
            ("_hex_code" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [20735 20739]))              ) nil [20721 20820])
            ("dis" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [20829 20833]))              ) nil [20821 26055])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [26069 26070])
                ("flags" variable nil (reparse-symbol function_parameters) [26072 26077]))              ) nil [26057 26659]))          
      :file "sre_compile.py"
      :pointmax 26659
      :fsize 26695
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15740fe0b590"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sre_constants" include nil nil [345 372])
            ("SPECIAL_CHARS" variable nil nil [374 405])
            ("REPEAT_CHARS" variable nil nil [406 427])
            ("DIGITS" variable nil nil [429 461])
            ("OCTDIGITS" variable nil nil [463 496])
            ("HEXDIGITS" variable nil nil [497 544])
            ("ASCIILETTERS" variable nil nil [545 625])
            ("WHITESPACE" variable nil nil [627 664])
            ("_REPEATCODES" variable nil nil [666 716])
            ("_UNITCODES" variable nil nil [717 789])
            ("ESCAPES" variable nil nil [791 1067])
            ("CATEGORIES" variable nil nil [1069 1545])
            ("FLAGS" variable nil nil [1547 1814])
            ("TYPE_FLAGS" code nil nil [1816 1880])
            ("GLOBAL_FLAGS" code nil nil [1881 1930])
            ("Verbose" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1962 1966]))                  
                :type "class")
                nil [1932 1967])
            ("State" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2052 2066])
                            ("self" variable nil (reparse-symbol indented_block_body) [2075 2094])
                            ("self" variable nil (reparse-symbol indented_block_body) [2103 2128])
                            ("self" variable nil (reparse-symbol indented_block_body) [2148 2176]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2037 2041]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2024 2177])
                    ("groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2206 2210]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2181 2250])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2268 2272])
                            ("name" variable nil (reparse-symbol function_parameters) [2274 2278]))                          )
                        (reparse-symbol indented_block_body) [2254 2738])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2757 2761])
                            ("gid" variable nil (reparse-symbol function_parameters) [2763 2766])
                            ("p" variable nil (reparse-symbol function_parameters) [2768 2769]))                          )
                        (reparse-symbol indented_block_body) [2742 2817])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2836 2840])
                            ("gid" variable nil (reparse-symbol function_parameters) [2842 2845]))                          )
                        (reparse-symbol indented_block_body) [2821 2919])
                    ("checklookbehindgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2949 2953])
                            ("gid" variable nil (reparse-symbol function_parameters) [2955 2958])
                            ("source" variable nil (reparse-symbol function_parameters) [2960 2966]))                          )
                        (reparse-symbol indented_block_body) [2924 3309]))                  
                :type "class")
                nil [1968 3309])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3419 3437])
                            ("if" code nil (reparse-symbol indented_block_body) [3446 3485])
                            ("self" variable nil (reparse-symbol indented_block_body) [3493 3509])
                            ("self" variable nil (reparse-symbol indented_block_body) [3518 3535]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3386 3390])
                            ("state" variable nil (reparse-symbol function_parameters) [3392 3397])
                            ("data" variable nil (reparse-symbol function_parameters) [3399 3403]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3373 3536])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3550 3554])
                            ("level" variable nil (reparse-symbol function_parameters) [3556 3561]))                          )
                        (reparse-symbol indented_block_body) [3541 4948])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4965 4969]))                          )
                        (reparse-symbol indented_block_body) [4952 5003])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5019 5023]))                          )
                        (reparse-symbol indented_block_body) [5007 5056])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5076 5080])
                            ("index" variable nil (reparse-symbol function_parameters) [5082 5087]))                          )
                        (reparse-symbol indented_block_body) [5060 5119])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143])
                            ("index" variable nil (reparse-symbol function_parameters) [5145 5150]))                          )
                        (reparse-symbol indented_block_body) [5123 5282])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5302 5306])
                            ("index" variable nil (reparse-symbol function_parameters) [5308 5313])
                            ("code" variable nil (reparse-symbol function_parameters) [5315 5319]))                          )
                        (reparse-symbol indented_block_body) [5286 5354])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5369 5373])
                            ("index" variable nil (reparse-symbol function_parameters) [5375 5380])
                            ("code" variable nil (reparse-symbol function_parameters) [5382 5386]))                          )
                        (reparse-symbol indented_block_body) [5358 5427])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5442 5446])
                            ("code" variable nil (reparse-symbol function_parameters) [5448 5452]))                          )
                        (reparse-symbol indented_block_body) [5431 5486])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5503 5507]))                          )
                        (reparse-symbol indented_block_body) [5490 7083]))                  
                :type "class")
                nil [3310 7083])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7141 7178])
                            ("self" variable nil (reparse-symbol indented_block_body) [7187 7207])
                            ("if" code nil (reparse-symbol indented_block_body) [7216 7279])
                            ("self" variable nil (reparse-symbol indented_block_body) [7287 7315])
                            ("self" variable nil (reparse-symbol indented_block_body) [7324 7338])
                            ("self" variable nil (reparse-symbol indented_block_body) [7347 7363])
                            ("self" code nil (reparse-symbol indented_block_body) [7372 7385]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7118 7122])
                            ("string" variable nil (reparse-symbol function_parameters) [7124 7130]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7105 7386])
                    ("__next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7401 7405]))                          )
                        (reparse-symbol indented_block_body) [7390 40328]))                  
                :type "class")
                nil [7084 40328]))          
      :file "sre_parse.py"
      :pointmax 40328
      :fsize 40327
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15740fe1a8c0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 171])
            ("__all__" variable nil nil [173 281])
            ("dispatch_table" variable nil nil [283 302])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [315 322])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [324 339])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [341 355]))              ) nil [304 714])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [731 737]))              ) nil [715 826])
            ("try" code nil nil [885 1050])
            ("pickle_union" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1068 1071]))              ) nil [1051 1163])
            ("pickle" code nil nil [1164 1201])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1264 1267])
                ("base" variable nil (reparse-symbol function_parameters) [1269 1273])
                ("state" variable nil (reparse-symbol function_parameters) [1275 1280]))              ) nil [1245 1487])
            ("_HEAPTYPE" code nil nil [1488 1504])
            ("_new_type" variable nil nil [1505 1534])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1613 1617])
                    ("proto" variable nil (reparse-symbol function_parameters) [1619 1624]))                  )
                nil [1598 2797])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2852 2855])
                ("args" variable nil (reparse-symbol function_parameters) [2857 2862]))              ) nil [2837 2900])
            ("__newobj_ex__" function
               (:documentation "Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2919 2922])
                    ("args" variable nil (reparse-symbol function_parameters) [2924 2928])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2930 2936]))                  )
                nil [2901 3122])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [3138 3141]))                  )
                nil [3123 4971])
            ("_extension_registry" variable nil nil [5453 5477])
            ("_inverted_registry" variable nil nil [5507 5530])
            ("_extension_cache" variable nil nil [5561 5582])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5758 5764])
                    ("name" variable nil (reparse-symbol function_parameters) [5766 5770])
                    ("code" variable nil (reparse-symbol function_parameters) [5772 5776]))                  )
                nil [5740 6487])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [6509 6515])
                    ("name" variable nil (reparse-symbol function_parameters) [6517 6521])
                    ("code" variable nil (reparse-symbol function_parameters) [6523 6527]))                  )
                nil [6488 6947])
            ("clear_extension_cache" function nil nil [6948 7006]))          
      :file "copyreg.py"
      :pointmax 7427
      :fsize 7426
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((RAISE 2293 . 2298) (FROM 2549 . 2553) (NEWLINE 2558 . 2559)))
    (semanticdb-table "semanticdb-table-15741100421c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [181 188]))                  )
                nil [162 833])
            ("abstractclassmethod" type
               (:documentation "A decorator indicating abstract classmethods.

    Deprecated, use 'classmethod' with 'abstractmethod' instead:

        class C(ABC):
            @classmethod
            @abstractmethod
            def my_abstract_classmethod(cls, ...):
                ...

    "
                :superclasses ("classmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1155 1182])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1226 1262])
                            ("super" code nil (reparse-symbol indented_block_body) [1271 1297]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1201 1205])
                            ("callable" variable nil (reparse-symbol function_parameters) [1207 1215]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1188 1298]))                  
                :type "class")
                nil [835 1298])
            ("abstractstaticmethod" type
               (:documentation "A decorator indicating abstract staticmethods.

    Deprecated, use 'staticmethod' with 'abstractmethod' instead:

        class C(ABC):
            @staticmethod
            @abstractmethod
            def my_abstract_staticmethod(...):
                ...

    "
                :superclasses ("staticmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1621 1648])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1692 1728])
                            ("super" code nil (reparse-symbol indented_block_body) [1737 1763]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1667 1671])
                            ("callable" variable nil (reparse-symbol function_parameters) [1673 1681]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1654 1764]))                  
                :type "class")
                nil [1300 1764])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Deprecated, use 'property' with 'abstractmethod' instead:

        class C(ABC):
            @property
            @abstractmethod
            def my_abstract_property(self):
                ...

    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [2065 2092]))                  
                :type "class")
                nil [1766 2093])
            ("try" code nil nil [2095 4773])
            ("update_abstractmethods" function
               (:documentation "Recalculate the set of abstract methods of an abstract class.

    If a class has had one of its abstract methods implemented after the
    class was created, the method will not be considered implemented until
    this function is called. Alternatively, if a new abstract method has been
    added to the class, it will only be considered an abstract method of the
    class after this function is called.

    This function should be called before any use is made of the class,
    usually in class decorators that add methods to the subject class.

    Returns cls, to allow usage as a class decorator.

    If cls is not an instance of ABCMeta, does nothing.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [4802 4805]))                  )
                nil [4775 6375])
            ("ABC" type
               (:documentation "Helper class that provides a standard way to create an ABC using
    inheritance.
    "
                :superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6508 6522]))                  
                :type "class")
                nil [6377 6523]))          
      :file "abc.py"
      :pointmax 6523
      :fsize 6522
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((NAME 6387 . 6396) (ASSIGN 6396 . 6397)))
    (semanticdb-table "semanticdb-table-15740fbd3dc0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Redo the builtin repr() (representation) but with limits on most sizes.\"\"\"" code nil nil [1 78])
            ("__all__" variable nil nil [80 124])
            ("builtins" include nil nil [126 141])
            ("itertools" include nil nil [142 170])
            ("_thread" include nil nil [171 200])
            ("recursive_repr" function (:arguments 
              ( ("fillvalue" variable nil (reparse-symbol function_parameters) [221 230]))              ) nil [202 1178])
            ("Repr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1224 1241])
                            ("self" variable nil (reparse-symbol indented_block_body) [1250 1267])
                            ("self" variable nil (reparse-symbol indented_block_body) [1276 1292])
                            ("self" variable nil (reparse-symbol indented_block_body) [1301 1318])
                            ("self" variable nil (reparse-symbol indented_block_body) [1327 1343])
                            ("self" variable nil (reparse-symbol indented_block_body) [1352 1367])
                            ("self" variable nil (reparse-symbol indented_block_body) [1376 1397])
                            ("self" variable nil (reparse-symbol indented_block_body) [1406 1423])
                            ("self" variable nil (reparse-symbol indented_block_body) [1432 1451])
                            ("self" variable nil (reparse-symbol indented_block_body) [1460 1477])
                            ("self" variable nil (reparse-symbol indented_block_body) [1486 1504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1209 1213]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1196 1505])
                    ("repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1519 1523])
                            ("x" variable nil (reparse-symbol function_parameters) [1525 1526]))                          )
                        (reparse-symbol indented_block_body) [1510 1573])
                    ("repr1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1588 1592])
                            ("x" variable nil (reparse-symbol function_parameters) [1594 1595])
                            ("level" variable nil (reparse-symbol function_parameters) [1597 1602]))                          )
                        (reparse-symbol indented_block_body) [1578 1916])
                    ("_repr_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1940 1944])
                            ("x" variable nil (reparse-symbol function_parameters) [1946 1947])
                            ("level" variable nil (reparse-symbol function_parameters) [1949 1954])
                            ("left" variable nil (reparse-symbol function_parameters) [1956 1960])
                            ("right" variable nil (reparse-symbol function_parameters) [1962 1967])
                            ("maxiter" variable nil (reparse-symbol function_parameters) [1969 1976])
                            ("trail" variable nil (reparse-symbol function_parameters) [1978 1983]))                          )
                        (reparse-symbol indented_block_body) [1921 2396])
                    ("repr_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2416 2420])
                            ("x" variable nil (reparse-symbol function_parameters) [2422 2423])
                            ("level" variable nil (reparse-symbol function_parameters) [2425 2430]))                          )
                        (reparse-symbol indented_block_body) [2401 2508])
                    ("repr_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2527 2531])
                            ("x" variable nil (reparse-symbol function_parameters) [2533 2534])
                            ("level" variable nil (reparse-symbol function_parameters) [2536 2541]))                          )
                        (reparse-symbol indented_block_body) [2513 2613])
                    ("repr_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2633 2637])
                            ("x" variable nil (reparse-symbol function_parameters) [2639 2640])
                            ("level" variable nil (reparse-symbol function_parameters) [2642 2647]))                          )
                        (reparse-symbol indented_block_body) [2618 2834])
                    ("repr_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2852 2856])
                            ("x" variable nil (reparse-symbol function_parameters) [2858 2859])
                            ("level" variable nil (reparse-symbol function_parameters) [2861 2866]))                          )
                        (reparse-symbol indented_block_body) [2839 3014])
                    ("repr_frozenset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3038 3042])
                            ("x" variable nil (reparse-symbol function_parameters) [3044 3045])
                            ("level" variable nil (reparse-symbol function_parameters) [3047 3052]))                          )
                        (reparse-symbol indented_block_body) [3019 3258])
                    ("repr_deque" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3278 3282])
                            ("x" variable nil (reparse-symbol function_parameters) [3284 3285])
                            ("level" variable nil (reparse-symbol function_parameters) [3287 3292]))                          )
                        (reparse-symbol indented_block_body) [3263 3372])
                    ("repr_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3391 3395])
                            ("x" variable nil (reparse-symbol function_parameters) [3397 3398])
                            ("level" variable nil (reparse-symbol function_parameters) [3400 3405]))                          )
                        (reparse-symbol indented_block_body) [3377 3889])
                    ("repr_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3907 3911])
                            ("x" variable nil (reparse-symbol function_parameters) [3913 3914])
                            ("level" variable nil (reparse-symbol function_parameters) [3916 3921]))                          )
                        (reparse-symbol indented_block_body) [3894 4209])
                    ("repr_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4227 4231])
                            ("x" variable nil (reparse-symbol function_parameters) [4233 4234])
                            ("level" variable nil (reparse-symbol function_parameters) [4236 4241]))                          )
                        (reparse-symbol indented_block_body) [4214 4488])
                    ("repr_instance" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4511 4515])
                            ("x" variable nil (reparse-symbol function_parameters) [4517 4518])
                            ("level" variable nil (reparse-symbol function_parameters) [4520 4525]))                          )
                        (reparse-symbol indented_block_body) [4493 4964]))                  
                :type "class")
                nil [1179 4964])
            ("_possibly_sorted" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4987 4988]))              ) nil [4966 5234])
            ("aRepr" variable nil nil [5235 5249])
            ("repr" variable nil nil [5250 5267]))          
      :file "reprlib.py"
      :pointmax 5268
      :fsize 5267
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-157410440d40"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Define names for built-in types that aren't directly accessible as a builtin.
\"\"\"" code nil nil [1 86])
            ("sys" include nil nil [87 97])
            ("_f" function nil nil [352 367])
            ("FunctionType" variable nil nil [367 390])
            ("LambdaType" variable nil nil [391 422])
            ("CodeType" variable nil nil [454 482])
            ("MappingProxyType" variable nil nil [483 521])
            ("SimpleNamespace" variable nil nil [522 564])
            ("_cell_factory" function nil nil [566 657])
            ("CellType" variable nil nil [657 689])
            ("_g" function nil nil [691 713])
            ("GeneratorType" variable nil nil [713 739])
            ("_c" function nil nil [747 762])
            ("_c" variable nil nil [762 771])
            ("CoroutineType" variable nil nil [772 796])
            ("_c" code nil nil [797 807])
            ("_ag" function nil nil [842 863])
            ("_ag" variable nil nil [863 874])
            ("AsyncGeneratorType" variable nil nil [875 905])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [928 932]))                          )
                        (reparse-symbol indented_block_body) [921 940]))                  
                :type "class")
                nil [907 940])
            ("MethodType" variable nil nil [940 966])
            ("BuiltinFunctionType" variable nil nil [968 999])
            ("BuiltinMethodType" variable nil nil [1000 1035])
            ("WrapperDescriptorType" variable nil nil [1071 1116])
            ("MethodWrapperType" variable nil nil [1117 1159])
            ("MethodDescriptorType" variable nil nil [1160 1197])
            ("ClassMethodDescriptorType" variable nil nil [1198 1257])
            ("ModuleType" variable nil nil [1259 1281])
            ("try" code nil nil [1283 1438])
            ("GetSetDescriptorType" variable nil nil [1491 1541])
            ("MemberDescriptorType" variable nil nil [1542 1595])
            ("del" code nil nil [1597 1625])
            ("new_class" function
               (:documentation "Create a class object dynamically using the appropriate metaclass."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1720 1724])
                    ("bases" variable nil (reparse-symbol function_parameters) [1726 1731])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1736 1740])
                    ("exec_body" variable nil (reparse-symbol function_parameters) [1747 1756]))                  )
                nil [1706 2121])
            ("resolve_bases" function
               (:documentation "Resolve MRO entries dynamically as specified by PEP 560."
                :arguments 
                  ( ("bases" variable nil (reparse-symbol function_parameters) [2140 2145]))                  )
                nil [2122 2834])
            ("prepare_class" function
               (:documentation "Call the __prepare__ method of the appropriate metaclass.

    Returns (metaclass, namespace, kwds) as a 3-tuple

    *metaclass* is the appropriate metaclass
    *namespace* is the prepared class namespace
    *kwds* is an updated copy of the passed in kwds argument with any
    'metaclass' entry removed. If no kwds argument is passed in, this will
    be an empty dict.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2853 2857])
                    ("bases" variable nil (reparse-symbol function_parameters) [2859 2864])
                    ("kwds" variable nil (reparse-symbol function_parameters) [2869 2873]))                  )
                nil [2835 3898])
            ("_calculate_meta" function
               (:documentation "Calculate the most derived metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [3919 3923])
                    ("bases" variable nil (reparse-symbol function_parameters) [3925 3930]))                  )
                nil [3899 4473])
            ("DynamicClassAttribute" type
               (:documentation "Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    This allows one to have properties active on an instance, and have virtual
    attributes on the class with the same name.  (Enum used this between Python
    versions 3.4 - 3.9 .)

    Subclass from this to use a different method of accessing virtual atributes
    and still be treated properly by the inspect module. (Enum uses this since
    Python 3.10 .)

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5316 5332])
                            ("self" variable nil (reparse-symbol indented_block_body) [5341 5357])
                            ("self" variable nil (reparse-symbol indented_block_body) [5366 5382])
                            ("self" code nil (reparse-symbol indented_block_body) [5468 5502])
                            ("self" code nil (reparse-symbol indented_block_body) [5511 5543])
                            ("self" variable nil (reparse-symbol indented_block_body) [5591 5669]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5258 5262])
                            ("fget" variable nil (reparse-symbol function_parameters) [5264 5268])
                            ("fset" variable nil (reparse-symbol function_parameters) [5275 5279])
                            ("fdel" variable nil (reparse-symbol function_parameters) [5286 5290])
                            ("doc" variable nil (reparse-symbol function_parameters) [5297 5300]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5245 5670])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5687 5691])
                            ("instance" variable nil (reparse-symbol function_parameters) [5693 5701])
                            ("ownerclass" variable nil (reparse-symbol function_parameters) [5703 5713]))                          )
                        (reparse-symbol indented_block_body) [5675 5979])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5996 6000])
                            ("instance" variable nil (reparse-symbol function_parameters) [6002 6010])
                            ("value" variable nil (reparse-symbol function_parameters) [6012 6017]))                          )
                        (reparse-symbol indented_block_body) [5984 6141])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6161 6165])
                            ("instance" variable nil (reparse-symbol function_parameters) [6167 6175]))                          )
                        (reparse-symbol indented_block_body) [6146 6295])
                    ("getter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6311 6315])
                            ("fget" variable nil (reparse-symbol function_parameters) [6317 6321]))                          )
                        (reparse-symbol indented_block_body) [6300 6534])
                    ("setter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6550 6554])
                            ("fset" variable nil (reparse-symbol function_parameters) [6556 6560]))                          )
                        (reparse-symbol indented_block_body) [6539 6705])
                    ("deleter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6722 6726])
                            ("fdel" variable nil (reparse-symbol function_parameters) [6728 6732]))                          )
                        (reparse-symbol indented_block_body) [6710 6877]))                  
                :type "class")
                nil [4474 6877])
            ("_GeneratorWrapper" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6974 6994])
                            ("self" code nil (reparse-symbol indented_block_body) [7003 7048])
                            ("self" variable nil (reparse-symbol indented_block_body) [7057 7103])
                            ("self" variable nil (reparse-symbol indented_block_body) [7112 7166]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6954 6958])
                            ("gen" variable nil (reparse-symbol function_parameters) [6960 6963]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6941 7167])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7180 7184])
                            ("val" variable nil (reparse-symbol function_parameters) [7186 7189]))                          )
                        (reparse-symbol indented_block_body) [7171 7232])
                    ("throw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7246 7250])
                            ("tp" variable nil (reparse-symbol function_parameters) [7252 7254])
                            ("rest" variable nil (reparse-symbol function_parameters) [7256 7261]))                          )
                        (reparse-symbol indented_block_body) [7236 7311])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7325 7329]))                          )
                        (reparse-symbol indented_block_body) [7315 7370])
                    ("gi_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7400 7404]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7374 7445])
                    ("gi_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7476 7480]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7449 7522])
                    ("gi_running" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7555 7559]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7526 7603])
                    ("gi_yieldfrom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7638 7642]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7607 7688])
                    ("cr_code" variable nil (reparse-symbol indented_block_body) [7692 7709])
                    ("cr_frame" variable nil (reparse-symbol indented_block_body) [7714 7733])
                    ("cr_running" variable nil (reparse-symbol indented_block_body) [7738 7761])
                    ("cr_await" variable nil (reparse-symbol indented_block_body) [7766 7789])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7807 7811]))                          )
                        (reparse-symbol indented_block_body) [7794 7850])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7867 7871]))                          )
                        (reparse-symbol indented_block_body) [7854 7953])
                    ("__await__" variable nil (reparse-symbol indented_block_body) [7957 7977]))                  
                :type "class")
                nil [6879 7978])
            ("coroutine" function
               (:documentation "Convert regular generator function to a coroutine."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [7993 7997]))                  )
                nil [7979 9913])
            ("GenericAlias" variable nil nil [9914 9944])
            ("UnionType" variable nil nil [9945 9972])
            ("EllipsisType" variable nil nil [9974 10003])
            ("NoneType" variable nil nil [10004 10025])
            ("NotImplementedType" variable nil nil [10026 10067])
            ("__all__" variable nil nil [10069 10117]))          
      :file "types.py"
      :pointmax 10118
      :fsize 10117
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax '((NAME 6332 . 6336) (IF 6352 . 6354) (ELSE 6374 . 6378)))
    (semanticdb-table "semanticdb-table-157410203a40"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("_sre" include nil nil [399 436])
            ("error" type
               (:documentation "Exception raised for invalid regular expressions.

    Attributes:

        msg: The unformatted error message
        pattern: The regular expression pattern
        pos: The index in the pattern where compilation failed (may be None)
        lineno: The line corresponding to pos (may be None)
        colno: The column corresponding to pos (may be None)
    "
                :superclasses ("Exception")
                :members 
                  ( ("__module__" variable nil (reparse-symbol indented_block_body) [917 934])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [997 1011])
                            ("self" variable nil (reparse-symbol indented_block_body) [1020 1042])
                            ("self" variable nil (reparse-symbol indented_block_body) [1051 1065])
                            ("if" code nil (reparse-symbol indented_block_body) [1074 1588])
                            ("super" code nil (reparse-symbol indented_block_body) [1596 1617]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [953 957])
                            ("msg" variable nil (reparse-symbol function_parameters) [959 962])
                            ("pattern" variable nil (reparse-symbol function_parameters) [964 971])
                            ("pos" variable nil (reparse-symbol function_parameters) [978 981]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [940 1618]))                  
                :type "class")
                nil [516 1618])
            ("_NamedIntConstant" type
               (:superclasses ("int")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1666 1669])
                        ("value" variable nil (reparse-symbol function_parameters) [1671 1676])
                        ("name" variable nil (reparse-symbol function_parameters) [1678 1682]))                      ) (reparse-symbol indented_block_body) [1654 1795])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817]))                          )
                        (reparse-symbol indented_block_body) [1800 1845]))                  
                :type "class")
                nil [1620 1845])
            ("MAXREPEAT" variable nil nil [1846 1899])
            ("_makecodes" function (:arguments 
              ( ("names" variable nil (reparse-symbol function_parameters) [1916 1921]))              ) nil [1901 2106])
            ("OPCODES" variable nil nil [2184 2846])
            ("del" code nil nil [2847 2863])
            ("ATCODES" variable nil nil [2912 3147])
            ("CHCODES" variable nil nil [3162 3585])
            ("OP_IGNORE" variable nil nil [3636 3717])
            ("OP_LOCALE_IGNORE" variable nil nil [3719 3815])
            ("OP_UNICODE_IGNORE" variable nil nil [3817 3914])
            ("AT_MULTILINE" variable nil nil [3916 3995])
            ("AT_LOCALE" variable nil nil [3997 4087])
            ("AT_UNICODE" variable nil nil [4089 4180])
            ("CH_LOCALE" variable nil nil [4182 4536])
            ("CH_UNICODE" variable nil nil [4538 4917])
            ("SRE_FLAG_TEMPLATE" variable nil nil [4927 4948])
            ("SRE_FLAG_IGNORECASE" variable nil nil [4988 5011])
            ("SRE_FLAG_LOCALE" variable nil nil [5031 5050])
            ("SRE_FLAG_MULTILINE" variable nil nil [5074 5096])
            ("SRE_FLAG_DOTALL" variable nil nil [5132 5152])
            ("SRE_FLAG_UNICODE" variable nil nil [5187 5208])
            ("SRE_FLAG_VERBOSE" variable nil nil [5232 5253])
            ("SRE_FLAG_DEBUG" variable nil nil [5287 5307])
            ("SRE_FLAG_ASCII" variable nil nil [5320 5340])
            ("SRE_INFO_PREFIX" variable nil nil [5390 5409])
            ("SRE_INFO_LITERAL" variable nil nil [5423 5443])
            ("SRE_INFO_CHARSET" variable nil nil [5490 5510])
            ("if" code nil nil [5559 7155]))          
      :file "sre_constants.py"
      :pointmax 7155
      :fsize 7154
      :lastmodtime '(25147 42948 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python3.10!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

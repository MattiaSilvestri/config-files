(undo-tree-save-format-version . 1)
"d94c5896dbf1041cee79c304f34762c39a46b1f5"
[nil nil nil nil (25354 22236 872030 130000) 0 nil]
([nil nil ((105 . 108) (#("e" 0 1 (face org-meta-line display (image :type svg :data #("<svg width=\"63\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"63\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#ebdbb2\"></rect> <rect width=\"61\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#202731\"></rect> <text y=\"15\" x=\"1.0\" fill=\"#ebdbb2\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> finane</text></svg>" 413 414 (fontified t line-prefix "" wrap-prefix "" font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function)) 414 415 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 415 416 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 416 417 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 417 418 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 418 419 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "")) :scale 1.1052631578947367 :ascent center :transform-smoothing t) wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t)) . -105) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("c" 0 1 (face org-meta-line display (image :type svg :data #("<svg width=\"72\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"72\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#ebdbb2\"></rect> <rect width=\"70\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#202731\"></rect> <text y=\"15\" x=\"1.0\" fill=\"#ebdbb2\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> finanec</text></svg>" 413 414 (fontified t line-prefix "" wrap-prefix "" font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function)) 414 415 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 415 416 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 416 417 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 417 418 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 418 419 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "") 419 420 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "")) :scale 1.1052631578947367 :ascent center :transform-smoothing t) wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t)) . -106) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 107 (100 . 107)) nil (25354 22237 76562 156000) 0 nil])
([nil nil ((109 . 110) (t 25354 22237 91548 600000) 109) nil (25354 25662 206816 742000) 0 nil])
([nil nil ((227 . 231) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -227) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -228) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 229 (223 . 229) (#("p" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -223) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("x" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -224) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -225) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -226) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 227 (222 . 227) (220 . 222) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -220) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -221) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 222 (215 . 222) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -215) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -216) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 217 (212 . 217) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 205) (204 . 205) (194 . 212) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -194) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -195) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -196) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -197) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -198) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 199 (192 . 199) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -192) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -193) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -194) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -195) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -196) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 197 (187 . 197) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -187) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -188) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 189 (187 . 189) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -187) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -188) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -189) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 190 (184 . 190) (#("c" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -184) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -185) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 186 (178 . 186) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -178) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 179 (177 . 179) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -177) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -178) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 179 (175 . 179) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -175) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -176) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 177 (167 . 177) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -167) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -168) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 169 (166 . 169) (145 . 166) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -145) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -146) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 147 (146 . 147) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -146) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -147) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -148) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) 149 (143 . 149) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -143) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 144 (141 . 144) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -141) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -142) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 143 (138 . 143) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -138) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 139 (130 . 139) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -130) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -131) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -132) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -133) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 134 (129 . 134) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -129) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 130 (125 . 130) (124 . 125) (117 . 124) (#("u" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -117) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 118 (110 . 118) (t 25354 25662 226297 400000)) nil (25355 35472 705875 144000) 0 nil])
([nil nil ((205 . 206) 230) nil (25355 35472 702470 217000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 205) (undo-tree-id31 . -1) (undo-tree-id32 . 1)) nil (25355 35472 702468 90000) 0 nil])
([nil nil ((126 . 128) (125 . 127) (#("#" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t face font-lock-comment-face)) . -125) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 126 (125 . 126) (125 . 126)) nil (25355 35472 702462 718000) 0 nil])
([nil nil ((129 . 135) (128 . 130)) nil (25355 35472 702456 188000) 0 nil])
([nil nil ((nil rear-nonsticky nil 174 . 175) (nil fontified nil 127 . 175) (127 . 175) 126) nil (25355 35472 702453 732000) 0 nil])
([nil nil ((292 . 293)) nil (25355 35472 702451 420000) 0 nil])
([nil nil ((nil rear-nonsticky nil 401 . 402) (nil fontified nil 293 . 402) (293 . 402) 292) nil (25355 35472 702449 623000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 347) (346 . 347) (402 . 403)) nil (25355 35472 702446 729000) 0 nil])
([nil nil ((356 . 357)) nil (25355 35472 702444 462000) 0 nil])
([nil nil ((375 . 376)) nil (25355 35472 702442 874000) 0 nil])
([nil nil ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t)) . 374)) nil (25355 35472 702441 313000) 0 nil])
([nil nil ((375 . 376)) nil (25355 35472 702439 470000) 0 nil])
([nil nil ((380 . 381)) nil (25355 35472 702437 820000) 0 nil])
([nil nil ((404 . 405)) nil (25355 35472 702436 88000) 0 nil])
([nil nil ((439 . 442) (435 . 439) (433 . 435) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -433) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("g" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -434) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 435 (431 . 435) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -431) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 432 (427 . 432) (425 . 427) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -425) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -426) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 427 (408 . 427) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -408) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 409 (408 . 409) (407 . 408) 403) nil (25355 35472 702424 121000) 0 nil])
([nil nil ((nil rear-nonsticky nil 669 . 670) (nil fontified nil 442 . 670) (442 . 670) 441) nil (25355 35472 702397 534000) 0 nil])
([nil nil ((649 . 653) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 649) (648 . 649) (568 . 572) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 568) (567 . 568) (487 . 491) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 487) (486 . 487) (670 . 671)) nil (25355 35472 702393 341000) 0 nil])
([nil nil ((442 . 443) (#("T" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 442)) nil (25355 35472 702388 956000) 0 nil])
([nil nil ((720 . 723) (719 . 720) (706 . 719) (#("c" 0 1 (wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -706) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 707 (687 . 707) (408 . 687) (#("  * 
  * *Rental property strategies*: the rental properties strategy means you buy
    properties (flats, houses, condo, offices, terrains…) and rent them out. The
    income is the net rent minus expenses, minus taxes, minus maintenance, minus
    mortgage, minus other things." 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 2 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 5 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 7 8 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) composition (1 1 [8226]) face org-superstar-item) 8 9 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 9 10 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-multiline t org-emphasis t invisible t) 10 32 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 32 36 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) face (bold) font-lock-multiline t org-emphasis t) 36 37 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) font-lock-multiline t org-emphasis t invisible t) 37 39 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 39 40 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 40 84 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil) 84 88 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 88 165 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 165 169 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 169 246 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t) 246 250 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil) 250 278 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil) 278 279 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified nil rear-nonsticky t)) . 408) (undo-tree-id2 . -32) (undo-tree-id3 . -279) (undo-tree-id4 . -279) (undo-tree-id5 . -279) (undo-tree-id6 . -39) (undo-tree-id7 . -39) (undo-tree-id8 . -278) (408 . 413) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . 682) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("
    " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 1 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -683) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -1) 688 (683 . 688) 681) nil (25355 35472 702383 961000) 0 nil])
([nil nil ((nil rear-nonsticky nil 882 . 883) (nil fontified nil 723 . 883) (723 . 883) 722) nil (25355 35472 702334 80000) 0 nil])
([nil nil ((843 . 847) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 843) (842 . 843) (766 . 770) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 766) (765 . 766) (883 . 884)) nil (25355 35472 702330 488000) 0 nil])
([nil nil ((723 . 724) (#("T" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) fontified t)) . 723)) nil (25355 35472 702326 567000) 0 nil])
([nil nil ((#("i" 0 1 (wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 436)) nil (25355 35472 702324 115000) 0 nil])
([nil nil ((#("e" 0 1 (wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 436)) nil (25355 35472 702321 233000) 0 nil])
([nil current ((436 . 437) (#("s" 0 1 (wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t face (bold) font-lock-multiline t org-emphasis t)) . 436)) nil (25355 35472 702301 733000) 0 nil])
nil

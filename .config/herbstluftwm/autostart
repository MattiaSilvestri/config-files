#!/usr/bin/env bash

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

hc emit_hook reload

xsetroot -solid '#5A8E3A'

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
# Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind Mod1-q close
hc keybind $Mod-t spawn bash -c "kitty -e tmux" 
hc keybind $Mod-Shift-t spawn "kitty" 

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients in tiling and floating mode
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
# hc keybind $Mod-Shift-h     shift left
# hc keybind $Mod-Shift-j     shift down
# hc keybind $Mod-Shift-k     shift up
# hc keybind $Mod-Shift-l     shift right

hc keybind $Mod-Shift-h or / shift left / \
    chain , lock , shift_to_monitor -l , focus_monitor -l , unlock
hc keybind $Mod-Shift-j or / shift down / \
    chain , lock , shift_to_monitor -d , focus_monitor -d , unlock
hc keybind $Mod-Shift-k or / shift up / \
    chain , lock , shift_to_monitor -u , focus_monitor -u , unlock
hc keybind $Mod-Shift-l or / shift right / \
    chain , lock , shift_to_monitor -r , focus_monitor -r , unlock

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-a       split   bottom  0.5
hc keybind $Mod-s       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# tags
mon0_names=( 0_{1..5} ) # tag names for monitor 1
mon1_names=( 1_{1..5} ) # tag names for monitor 2
# fallback_names=( {1..5} ) # tag names for all other monitors
tag_keys=( {1..9} 0 )

hc rename default "${mon0_names[0]}" || true
for tag in "${mon0_names[@]}" "${mon1_names[@]}" "${fallback_names[@]}" ; do
    hc try silent add "$tag"
done

for i in ${!tag_keys[@]} ; do
    key="${tag_keys[$i]}"
    # the keybinding works as follows: the or executes the commands separated by
    # CASE and stops executing them after the first of those succeeds.
    # the first command is: check that we are on monitor 3 and can switch to tag "${mon1_names[$i]}"
    # if only one of these two steps fail, try the second one (and so one).
    # The setup for two monitors is as follows:
    hc keybind "$Mod-$key" \
        or CASE and . compare monitors.focus.index = 0 . use "${mon0_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . use "${mon1_names[$i]}" \
           CASE use "${fallback_names[$i]}"
    hc keybind "$Mod-Shift-$key" \
        or CASE and . compare monitors.focus.index = 0 . move "${mon0_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . move "${mon1_names[$i]}" \
           CASE move "${fallback_names[$i]}"
done

# cycle through tags
# add additional information in order to cycle only through a monitor's tags
# and not through all tags
define-tag-cycle() {
    local n=$#
    local tags=( "$@" )
    for i in "${!tags[@]}" ; do
        local t="${tags[$i]}"
        hc chain , new_attr string tags.by-name."$t".my_previous_tag \
                 , set_attr tags.by-name."$t".my_previous_tag "${tags[$(((i - 1 + n) % n))]}" \
                 , new_attr string tags.by-name."$t".my_next_tag \
                 , set_attr tags.by-name."$t".my_next_tag "${tags[$(((i + 1) % n))]}"
    done
}

define-tag-cycle "${mon0_names[@]}"
define-tag-cycle "${mon1_names[@]}"
define-tag-cycle "${fallback_names[@]}"

# cycle through tags
# check whether the current tag as a custom "next tag" configured
# if yes, jump to that one, otherwise fall back to ordinary use_index +1
hc keybind Mod1-Control-l or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
hc keybind Mod1-Control-h  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible
hc keybind Mod1-Control-Right or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
hc keybind Mod1-Control-Left  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible

# layouting
hc keybind $Mod-z remove
hc keybind $Mod-Control-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Shift-s set_attr clients.focus.floating toggle
hc keybind Mod1-w set_attr clients.focus.minimized true
hc keybind Mod1-s jumpto last-minimized
hc keybind $Mod-p pseudotile toggle
hc keybind $Mod-w set_layout max
hc keybind $Mod-d set_layout horizontal
hc keybind $Mod-Shift-d set_layout vertical

#hc set_layout max
hc set default_frame_layout 2
hc substitute ALGO settings.default_frame_layout \
    foreach T tags.by-name. \
    sprintf ATTR '%c.tiling.root.algorithm' T \
    set_attr ATTR ALGO

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 max vertical horizontal   \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# Volume
hc keybind XF86AudioRaiseVolume spawn bash -c "volume_up.sh"
hc keybind XF86AudioLowerVolume spawn bash -c "volume_down.sh"
hc keybind XF86AudioMute spawn bash -c "volume_mute.sh"
# Brightness
hc keybind XF86MonBrightnessUp spawn bash -c "brightness.sh up"
hc keybind XF86MonBrightnessDown spawn bash -c "brightness.sh down"

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind Mod1-d   cycle_all +1
hc keybind Mod1-a   cycle_all -1
hc keybind $Mod-Tab cycle +1
hc keybind $Mod-Shift-Tab cycle -1
hc keybind $Mod-i jumpto urgent
hc set focus_follows_mouse true

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#987191'
hc set frame_border_normal_color '#10101000'
hc set frame_bg_normal_color '#565656aa'
hc set frame_bg_active_color '#987191aa'
hc set frame_border_width 0
hc set always_show_frame on
hc set frame_bg_transparent on
hc set frame_transparent_width 0
hc set frame_gap 8

hc attr theme.title_height 0
hc attr theme.title_font 'Ubuntu:pixelsize=12'  # example using Xft
# hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
hc attr theme.padding_top 0  # space below the title's baseline (i.e. text depth)
hc attr theme.active.color '#987191'
hc attr theme.title_color '#ffffff'
hc attr theme.normal.color '#323232dd'
hc attr theme.urgent.color '#7811A1dd'
hc attr theme.normal.title_color '#898989'
hc attr theme.inner_width 0
hc attr theme.inner_color black
hc attr theme.border_width 0
hc attr theme.floating.border_width 0
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#987191'
hc attr theme.urgent.inner_color '#9A65B0'
hc attr theme.normal.inner_color '#606060'
# copy inner color to outer_color
for state in active urgent normal ; do
    hc substitute C theme.${state}.inner_color \
        attr theme.${state}.outer_color C
done
hc attr theme.active.outer_width 0
hc attr theme.background_color '#141414'

# General settings
hc set window_gap 8
hc set frame_padding -8
hc set smart_window_surroundings on
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0
hc set hide_covered_windows false
hc set tabbed_max true
#Padding for Wbar and Conky 
hc pad 0 45 5 5 5 # First _monitor
hc pad 1 45 5 5 5 # Second monitor

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=center
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
# hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule class=MEGAsync floating=on
hc rule class=Blueman-manager floating=on
hc rule class=xpad floating=on
hc rule class=Dragon-drag-and-drop floating=on
hc rule class=zoom floating=on
hc rule class=Gnome-screenshot floating=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors
hc set swap_monitors_to_get_tag false

hc keybind $Mod-Shift-o spawn bash -c "xrandr --output eDP-1 --mode 1920x1080 --rate 60.00 --primary --output HDMI-1 --right-of eDP-1 --mode 1920x1200 --rate 60.02 & \
	 				 												 		 herbstclient reload"
hc keybind $Mod-Shift-m spawn bash -c "xrandr --output eDP-1 --mode 1920x1080 --rate 60.00 --primary --output HDMI-1 --right-of eDP-1 --mode 2560x1440 --rate 59.95 & \
	 				 												 		 herbstclient reload"
hc keybind Mod1-h spawn bash -c "xrandr --output HDMI-1 --off & herbstclient remove_monitor 1"
hc keybind $Mod-o cycle_monitor 

# Launchers #
# ----------#

# Rofi
hc keybind Shift-space spawn bash -c "rofi -theme "/home/mattia/.config/rofi_themes/rofi-breeze-theme/arc-dark.rasi" -combi-modi drun,run,ssh,file-browser -font 'hack 12' -show combi -icon-theme Flat-Remix-Teal-Dark -show-icons -no-default-config"
hc keybind Mod1-Tab spawn bash -c "rofi -theme "/home/mattia/.config/rofi_themes/rofi-breeze-theme/arc-dark.rasi" -show window -window-thumbnail -font 'hack 12' -icon-theme Flat-Remix-Teal-Dark -show-icons -no-default-config"
hc keybind $Mod-x spawn bash -c "/home/mattia/.config/rofi/bin/menu_powermenu"
# Emacs
hc keybind $Mod-e spawn "emacs"
# Browser
hc keybind $Mod-v spawn "vivaldi-stable"
# Set wallpaper
hc keybind $Mod-n spawn bash -c "nitrogen --restore"
# Kill conky
hc keybind Mod1-k spawn bash -c "killall -q conky"
# Swap caps to escape
hc keybind $Mod-Shift-e spawn bash -c "setxkbmap -option "caps:swapescape""
# Take screenshot
hc keybind Mod1-Shift-s spawn bash -c "gnome-screenshot -a"

# Startup commands
killall -q conky

/home/mattia/.dotfiles/.config/herbstluftwm/autostart.sh &
setxkbmap -option "caps:swapescape" &
nitrogen --restore &
# blueman-applet &
# nm-applet &
# picom --experimental-backends --config  /home/mattia/.config/herbstluftwm/picom.conf &
# /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &
# flashfocus &
# redshift-gtk &
# xfce4-power-manager &
~/.config/polybar/forest/launch.sh &
conky -c /home/mattia/.config/conky/Actual_conky/sidepane.conf &
conky -c /home/mattia/.config/conky/Actual_conky/calendar.conf &
conky -c /home/mattia/.config/conky/Actual_conky/sidepane_HDMI.conf &
conky -c /home/mattia/.config/conky/Actual_conky/calendar_HDMI.conf &
xinput set-prop "SYNA7DB5:00 06CB:CD41 Touchpad" "libinput Tapping Enabled" 1

# unlock, just to be sure
hc unlock

# find the panel
# panel=~/.config/herbstluftwm/panel.sh
# [ -x "$panel" ] || panel=/home/mattia/.config/polybar/launch.sh --forest
# for monitor in 1 ; do
#     # start it on each monitor
#     "$panel" "$monitor" &
# done
# for monitor in $(hc list_monitors | cut -d: -f1) ; do
    # start it on each monitor
    # "$panel" "$monitor" &
# done

(undo-tree-save-format-version . 1)
"ecb9c853e9e5a122e2fd6e4d54733321c6adf912"
[nil nil nil nil (25453 18785 70637 36000) 0 nil]
([nil nil ((#("%?" 0 2 (wrap-prefix "" line-prefix "" fontified nil)) . -91) (93 . 93) (91 . 94) (#(":ID: b31e3ac3-dad4-4af9-b9c0-f0a99cda4c7f" 0 1 (wrap-prefix "" line-prefix "" fontified nil) 1 3 (wrap-prefix "" line-prefix "" fontified nil) 3 4 (wrap-prefix "" line-prefix "" fontified nil) 4 5 (wrap-prefix "" line-prefix "" fontified nil) 5 41 (wrap-prefix "" line-prefix "" fontified nil)) . -14) (14 . 102) (14 . 15) (1 . 20) (1 . 24) (t . -1)) nil (25453 18785 70633 896000) 0 nil])
([nil nil ((91 . 108)) nil (25453 18785 70629 722000) 0 nil])
([nil nil ((120 . 121) (nil font-lock-fontified t 115 . 120) (nil cursor-sensor-functions (svg-tag--cursor-function) 115 . 120) (nil face org-meta-line 115 . 120) (nil fontified t 115 . 120) (nil line-prefix "" 115 . 120) (nil wrap-prefix "" 115 . 120) (115 . 120) (111 . 115) (107 . 111)) nil (25453 18785 70622 871000) 0 nil])
([nil nil ((130 . 131) (123 . 130) (#("
" 0 1 (wrap-prefix "" line-prefix "" fontified t)) . -123) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 124 (123 . 124) (122 . 123) (t 25453 18785 81986 600000) 122) nil (25453 18951 980830 304000) 0 nil])
([nil nil ((211 . 270) (208 . 211) (136 . 208) (135 . 136) (125 . 135) (#("Group" 0 5 (face org-level-1 wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 125)) nil (25453 18951 980795 687000) 0 nil])
([nil nil ((272 . 280) (271 . 272) (nil face org-link 270 . 271) (nil font-lock-multiline t 270 . 271) (nil fontified t 270 . 271) (nil line-prefix #("  " 0 2 (face org-indent)) 270 . 271) (nil wrap-prefix #("  " 0 2 (face org-indent)) 270 . 271) (nil org-category "20221110195616-normalization" 270 . 271) (270 . 271) (t 25453 18951 996849 500000) 267) nil (25453 19174 511473 671000) 0 nil])
([nil nil ((#("*" 0 1 (org-category "20221110195616-normalization" composition (0 1 [9673]) face (org-superstar-header-bullet org-level-1) wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" fontified t)) . 123)) nil (25453 19174 511469 118000) 0 nil])
([nil nil ((#(" " 0 1 (org-category "20221110195616-normalization" wrap-prefix #(" " 0 1 (face org-indent)) line-prefix "" fontified t)) . 123) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1)) nil (25453 19174 511466 647000) 0 nil])
([nil nil ((123 . 124)) nil (25453 19174 511452 28000) 0 nil])
([nil nil ((134 . 135)) nil (25453 19174 511449 64000) 0 nil])
([nil nil ((272 . 273) (271 . 272) (nil org-category "20221110195616-normalization" 270 . 271) (nil face org-link 270 . 271) (nil font-lock-multiline t 270 . 271) (nil fontified t 270 . 271) (nil line-prefix "" 270 . 271) (nil wrap-prefix "" 270 . 271) (270 . 271) 188) nil (25453 19174 511445 136000) 0 nil])
([nil nil ((#("
" 0 1 (wrap-prefix "" line-prefix "" fontified t)) . 273) (undo-tree-id752 . 1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1)) nil (25453 19174 511438 119000) 0 nil])
([nil nil ((400 . 421) (#("s" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -400) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -401) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 402 (393 . 402) (#("i" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -393) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("n" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -394) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("g" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -395) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -396) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("a" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -397) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("n" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -398) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("d" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -399) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -400) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 401 (392 . 401) (372 . 392) (#(">" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -372) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . 1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) 373 (372 . 373) (368 . 372) (367 . 369) (366 . 367) (#("," 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -366) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -367) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) 368 (#(" " 0 1 (wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 361) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (360 . 361) (363 . 368) (#("x" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -363) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("e" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -364) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) 365 (361 . 365) (349 . 361) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -349) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) 350 (349 . 350) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -349) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) 350 (338 . 350) (336 . 338) (#("p" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -336) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) 337 (334 . 337) (#("c" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -334) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("r" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -335) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("o" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -336) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#("p" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -337) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) 338 (333 . 338) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -333) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("r" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -334) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -335) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) 336 (334 . 336) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -334) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("c" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -335) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) 336 (323 . 336) (#("b" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -323) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("n" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -324) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -325) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) 326 (320 . 326) (#("m" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -320) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("e" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -321) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (#("b" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -322) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("t" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -323) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) 324 (319 . 324) (#("u" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -319) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) 320 (313 . 320) (#("o" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -313) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("u" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -314) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("r" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -315) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -316) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) 317 (312 . 317) (291 . 312) (#(" " 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -291) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) 292 (284 . 292) (283 . 284) (282 . 283)) nil (25453 19174 511347 979000) 0 nil])
([nil nil ((422 . 423)) nil (25453 19174 503722 770000) 0 nil])
([nil nil ((418 . 419)) nil (25453 19174 503720 446000) 0 nil])
([nil nil ((#("e" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 416) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) nil (25453 19174 503713 590000) 0 nil])
([nil nil ((331 . 335) (310 . 331) (#("o" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -310) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) 311 (299 . 311) (#("a" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -299) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) 300 (289 . 300) (#(" " 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -289) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("e" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -290) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 291 (284 . 291) (284 . 285) 339 (t 25453 19174 521609 0)) nil (25453 19378 901989 585000) 0 nil])
([nil nil ((380 . 382) (319 . 380) (#("count vectorizer" 0 16 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 319) (undo-tree-id784 . -15) (undo-tree-id785 . -15) (undo-tree-id786 . -15) (undo-tree-id787 . -15) (undo-tree-id788 . -15) (undo-tree-id789 . -15) (undo-tree-id790 . -15) (undo-tree-id791 . 10) (undo-tree-id792 . -16) 334) nil (25453 19378 901954 591000) 0 nil])
([nil nil ((#("W" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 382) (undo-tree-id778 . 1) (#("
" 0 1 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -382) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . 1) (undo-tree-id783 . -1) 383) nil (25453 19378 901937 530000) 0 nil])
([nil nil ((382 . 383)) nil (25453 19378 901927 485000) 0 nil])
([nil nil ((#("b" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -511) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) 512 (511 . 512) (#(" " 0 1 (org-category "20221110195616-normalization" wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 408) (407 . 408) (458 . 459)) nil (25453 19378 901924 140000) 0 nil])
([nil nil ((#(" " 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -459) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) 460 (459 . 460) (#("
" 0 1 (org-category "20221110195616-normalization" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . -459) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) 460) nil (25453 19378 901914 490000) 0 nil])
([nil nil ((#(" " 0 1 (org-category "20221110195616-normalization" wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 485) (484 . 485) (521 . 522)) nil (25453 19378 901887 826000) 0 nil])
([nil nil ((554 . 563) (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -554) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) 555 (#("l" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -555) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -556) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 557 (549 . 557) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -549) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -550) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -551) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 552 (549 . 552) (#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -549) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -550) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -551) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -552) (undo-tree-id291 . -1) (undo-tree-id292 . -1) 553 (545 . 553) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -545) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -546) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -547) (undo-tree-id297 . -1) (undo-tree-id298 . -1) 548 (531 . 548) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -531) (undo-tree-id299 . -1) (undo-tree-id300 . -1) 532 (527 . 532) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -527) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) 528 (522 . 528) (t 25453 19378 924417 0)) nil (25454 37405 69477 966000) 0 nil])
([nil nil ((622 . 625) (#("b" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -622) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -623) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -624) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 625 (613 . 625) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -613) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -614) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -615) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) 616 (610 . 616) (609 . 611) (591 . 609) (#("w" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -591) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -592) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 593 (573 . 593) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -573) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -574) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -575) (undo-tree-id213 . -1) (undo-tree-id214 . -1) 576 (570 . 576) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -570) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -571) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -572) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 573 (567 . 573) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 558) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (557 . 558) (558 . 567) (#("have" 0 4 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 558) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4)) nil (25454 37405 69403 307000) 0 nil])
([nil nil ((627 . 629)) nil (25454 37405 65050 591000) 0 nil])
([nil nil ((#(" ,." 0 3 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 626) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1)) nil (25454 37405 65044 378000) 0 nil])
([nil nil ((626 . 627)) nil (25454 37405 64962 995000) 0 nil])
([nil nil ((700 . 721) (#("r" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -700) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 701 (683 . 701) (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -683) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -684) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -685) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("k" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -686) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -687) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 688 (683 . 688) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -683) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -684) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 685 (#("a" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -685) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 686 (674 . 686) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -674) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -675) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -676) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -677) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -678) (undo-tree-id368 . -1) (undo-tree-id369 . -1) 679 (673 . 679) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -673) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("m" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -674) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -675) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -676) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -677) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 678 (665 . 678) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -665) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -666) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -667) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -668) (undo-tree-id386 . -1) (undo-tree-id387 . -1) 669 (663 . 669) (659 . 663) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -659) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -660) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -661) (undo-tree-id392 . -1) (undo-tree-id393 . -1) 662 (648 . 662) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -648) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -649) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("d" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -650) (undo-tree-id398 . -1) (undo-tree-id399 . -1) 651 (644 . 651) (#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) org-category "20221110195616-normalization")) . 637) (636 . 637) (628 . 644) (627 . 628) (#("/" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -627) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -628) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 629 (626 . 629) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -626) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#(" " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . -627) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 628 (626 . 628) (#("," 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) org-category "20221110195616-normalization")) . 626) (t 25454 37405 81352 400000)) nil (25454 37680 516889 833000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) org-category "20221110195616-normalization")) . 714) (713 . 714) (721 . 722)) nil (25454 37680 516799 432000) 0 nil])
([nil nil ((772 . 777) (771 . 773) (#(")" 0 1 (fontified nil line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . 771) (#("(" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -771) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 772 (771 . 773) (766 . 771) (#("r" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -766) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("i" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -767) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("o" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -768) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("n" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -769) (undo-tree-id338 . -1) (undo-tree-id339 . -1) 770 (751 . 770) (750 . 751) (#("." 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -750) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 751 (745 . 751) (724 . 745) (723 . 724) (722 . 723) 721) nil (25454 37680 516792 832000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . 776)) nil (25454 37680 516769 291000) 0 nil])
([nil nil ((772 . 821) (#("link" 0 4 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-level-2)) . -772) (undo-tree-id325 . -4) (undo-tree-id326 . -3) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -3)) nil (25454 37680 516767 256000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -823) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("j" 0 1 (fontified t line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("    " 0 4 (face org-indent)))) . -824) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 825 (823 . 825) (822 . 823) 821) nil (25454 37680 516759 654000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) face org-hide invisible org-superstar-hide)) . 751)) nil (25454 37680 516749 39000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face (org-superstar-header-bullet org-level-1) composition (0 1 [9673]))) . 751)) nil (25454 37680 516747 349000) 0 nil])
([nil nil ((#(" L2 Normalisation ([[id:8afa7636-7a36-408a-92aa-c5fea0d22bad][link]])
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 1 19 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 19 24 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 24 32 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display #("8afa7636-" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display (image :type svg :data #("<svg width=\"81\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"81\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"79\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"0.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> 8afa7636</text></svg>" 413 421 (htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" cursor-sensor-functions (svg-tag--cursor-function) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) :scale 1.1009174311926606 :ascent center :transform-smoothing t)) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad"))) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 32 33 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display #("8afa7636-" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display (image :type svg :data #("<svg width=\"81\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"81\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"79\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"0.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> 8afa7636</text></svg>" 413 421 (htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" cursor-sensor-functions (svg-tag--cursor-function) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) :scale 1.1009174311926606 :ascent center :transform-smoothing t)) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad"))) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 33 61 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 61 62 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 62 65 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 65 66 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 66 67 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 67 68 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 68 69 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent))) 69 70 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)))) . 751) (undo-tree-id311 . 70) (undo-tree-id312 . -19) (undo-tree-id313 . -19) (undo-tree-id314 . 2) (undo-tree-id315 . -19) (undo-tree-id316 . -19) (undo-tree-id317 . -70) (undo-tree-id318 . -70)) nil (25454 37680 516745 170000) 0 nil])
([nil nil ((751 . 821) (#("  * 
  * [[id:8afa7636-7a36-408a-92aa-c5fea0d22bad][L2 Normalisation]]" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 2 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 5 7 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 7 8 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) composition (3 1 [8226]) face org-superstar-item) 8 9 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 9 14 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 14 22 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display #("8afa7636-" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display (image :type svg :data #("<svg width=\"81\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"81\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"79\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"0.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> 8afa7636</text></svg>" 413 421 (htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" cursor-sensor-functions (svg-tag--cursor-function) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) :scale 1.1009174311926606 :ascent center :transform-smoothing t)) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad"))) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 22 23 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display #("8afa7636-" 0 8 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") display (image :type svg :data #("<svg width=\"81\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"81\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"79\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"0.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> 8afa7636</text></svg>" 413 421 (htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" cursor-sensor-functions (svg-tag--cursor-function) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) :scale 1.1009174311926606 :ascent center :transform-smoothing t)) 8 9 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) cursor-sensor-functions (svg-tag--cursor-function) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad"))) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 23 51 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 51 52 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face org-link) 52 67 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 67 68 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 68 69 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t) 69 70 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo "LINK: id:8afa7636-7a36-408a-92aa-c5fea0d22bad" htmlize-link (:uri "id:8afa7636-7a36-408a-92aa-c5fea0d22bad") face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t)) . 751) (undo-tree-id304 . -70) (undo-tree-id305 . -70) (undo-tree-id306 . -70) (undo-tree-id307 . -70) (751 . 756) (#("
    " 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent))) 1 5 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("      " 0 2 (face org-indent) 2 6 (face org-indent)))) . -816) (undo-tree-id308 . -5) (undo-tree-id309 . -1) (undo-tree-id310 . -5) 821 (816 . 821) (755 . 816) (751 . 755)) nil (25454 37680 516730 755000) 0 nil])
([nil current ((821 . 883)) nil (25454 37680 516705 973000) 0 nil])
nil

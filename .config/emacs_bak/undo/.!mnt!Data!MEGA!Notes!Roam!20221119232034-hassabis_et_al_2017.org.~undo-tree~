(undo-tree-save-format-version . 1)
"a45570a6a0e157b52571afbd660b395671d38450"
[nil nil nil nil (25465 22351 231083 182000) 0 nil]
([nil nil ((#("%?" 0 2 (fontified nil line-prefix "" wrap-prefix "")) . -100) (102 . 102) (100 . 103) (#(":ID: 78850e1c-4c9b-44f8-9aca-a3660302809b" 0 1 (fontified nil line-prefix "" wrap-prefix "") 1 3 (fontified nil line-prefix "" wrap-prefix "") 3 4 (fontified nil line-prefix "" wrap-prefix "") 4 5 (fontified nil line-prefix "" wrap-prefix "") 5 41 (fontified nil line-prefix "" wrap-prefix "")) . -14) (14 . 102) (14 . 15) (1 . 20) (1 . 33) (t . -1)) nil (25465 22351 231080 958000) 0 nil])
([nil nil ((100 . 120)) nil (25465 22351 231077 243000) 0 nil])
([nil nil ((126 . 129) (#("w" 0 1 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "" display (image :type svg :data #("<svg width=\"54\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"54\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"52\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"2.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> reviw</text></svg>" 413 414 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 414 415 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 415 416 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 416 417 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 417 418 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t)) :scale 1.1070588235294117 :ascent center :transform-smoothing t) face org-meta-line)) . -126) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("e" 0 1 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "" display (image :type svg :data #("<svg width=\"63\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"63\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"61\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"1.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> reviwe</text></svg>" 413 414 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 414 415 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 415 416 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 416 417 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 417 418 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 418 419 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t)) :scale 1.1070588235294117 :ascent center :transform-smoothing t) face org-meta-line)) . -127) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 128 (125 . 128) (#("o" 0 1 (font-lock-fontified t cursor-sensor-functions (svg-tag--cursor-function) fontified t line-prefix "" wrap-prefix "" display (image :type svg :data #("<svg width=\"45\" height=\"23.400000000000002\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <rect width=\"45\" height=\"23.400000000000002\" x=\"0.0\" y=\"0\" rx=\"3\" fill=\"#abb2bf\"></rect> <rect width=\"43\" height=\"21.400000000000002\" x=\"1.0\" y=\"1.0\" rx=\"2.0\" fill=\"#181c26\"></rect> <text y=\"15\" x=\"2.0\" fill=\"#abb2bf\" font-size=\"16\" font-weight=\"400\" font-family=\"Fira Code\"> revo</text></svg>" 413 414 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 414 415 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 415 416 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t) 416 417 (wrap-prefix "" line-prefix "" fontified t cursor-sensor-functions (svg-tag--cursor-function) font-lock-fontified t)) :scale 1.1070588235294117 :ascent center :transform-smoothing t) face org-meta-line)) . -125) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 126 (119 . 126)) nil (25465 22351 231067 974000) 0 nil])
([nil nil ((138 . 142) (137 . 139) (135 . 137) (#("A" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -135) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 136 (131 . 136) (130 . 131) (t 25465 22351 240859 400000) 130) nil (25465 22455 228270 243000) 0 nil])
([nil nil ((142 . 146) (141 . 143) (139 . 141) (138 . 140) (#("link" 0 4 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . 138) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -4) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) 141) nil (25465 22455 228250 369000) 0 nil])
([nil nil ((nil rear-nonsticky nil 143 . 144) (nil fontified nil 140 . 144) (140 . 144) 139) nil (25465 22455 227512 132000) 0 nil])
([nil nil ((nil rear-nonsticky nil 207 . 208) (nil fontified nil 163 . 208) (163 . 208) (162 . 163) (155 . 162) (154 . 155) (#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -154) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . 1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 155 (154 . 155) (153 . 154) 143) nil (25465 22455 227506 619000) 0 nil])
([nil nil ((163 . 210) (#("Neuroscience-Inspired Artificial Intelligence" 0 44 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 44 45 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t)) . -163) (undo-tree-id83 . -45) (undo-tree-id84 . -45) (undo-tree-id85 . -45) (undo-tree-id86 . -44) (undo-tree-id87 . -45) (undo-tree-id88 . -45) (undo-tree-id89 . -45) (undo-tree-id90 . -45) (undo-tree-id91 . -45) (undo-tree-id92 . -45) (undo-tree-id93 . -44) (undo-tree-id94 . -44) (undo-tree-id95 . -44) (undo-tree-id96 . -44) (undo-tree-id97 . -44) (undo-tree-id98 . -44) (undo-tree-id99 . -44) (undo-tree-id100 . -44) (undo-tree-id101 . -44) (undo-tree-id102 . -44) (undo-tree-id103 . -44) (undo-tree-id104 . -44) (undo-tree-id105 . -44) (undo-tree-id106 . -44) (undo-tree-id107 . -45) (undo-tree-id108 . -45) (undo-tree-id109 . -45) (undo-tree-id110 . -45) (undo-tree-id111 . -45) (undo-tree-id112 . -45) (undo-tree-id113 . -45) (undo-tree-id114 . -45) (undo-tree-id115 . -45) (undo-tree-id116 . -44) (undo-tree-id117 . -44) (undo-tree-id118 . -44) (undo-tree-id119 . -44) (undo-tree-id120 . -44) (undo-tree-id121 . -44) (undo-tree-id122 . -44) (undo-tree-id123 . -45) (undo-tree-id124 . -45) (undo-tree-id125 . -45) (undo-tree-id126 . -45) (undo-tree-id127 . -45) (undo-tree-id128 . -45) (undo-tree-id129 . -45) 208) nil (25465 22455 224508 902000) 0 nil])
([nil current ((#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 840) (839 . 840) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 764) (763 . 764) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 683) (682 . 683) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 605) (604 . 605) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 524) (523 . 524) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 443) (442 . 443) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 369) (368 . 369) (#(" " 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) fontified nil)) . 299) (298 . 299) (864 . 865) (nil rear-nonsticky nil 863 . 864) (nil fontified nil 223 . 864) (223 . 864) (222 . 223) (215 . 216) (221 . 222) (215 . 221) (#("A" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -215) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 216 (215 . 216) (#("b" 0 1 (fontified t line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)) face org-level-1)) . -215) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 216 (212 . 216) (211 . 212) (210 . 211) 209) nil (25465 22455 224450 524000) 0 nil])
nil
